
Mydynamite.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d3dc  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001988  0800d57c  0800d57c  0000e57c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ef04  0800ef04  00010184  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800ef04  0800ef04  0000ff04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ef0c  0800ef0c  00010184  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ef0c  0800ef0c  0000ff0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800ef10  0800ef10  0000ff10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000184  20000000  0800ef14  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005b44  20000184  0800f098  00010184  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20005cc8  0800f098  00010cc8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00010184  2**0
                  CONTENTS, READONLY
 12 .debug_info   00026f9e  00000000  00000000  000101b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000587d  00000000  00000000  00037152  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001ff0  00000000  00000000  0003c9d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000018ac  00000000  00000000  0003e9c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000075b3  00000000  00000000  0004026c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002a742  00000000  00000000  0004781f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a10b6  00000000  00000000  00071f61  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00113017  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008ca0  00000000  00000000  0011305c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000055  00000000  00000000  0011bcfc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000184 	.word	0x20000184
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800d564 	.word	0x0800d564

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000188 	.word	0x20000188
 80001dc:	0800d564 	.word	0x0800d564

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b988 	b.w	80005a8 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	468e      	mov	lr, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	4688      	mov	r8, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d962      	bls.n	800038c <__udivmoddi4+0xdc>
 80002c6:	fab2 f682 	clz	r6, r2
 80002ca:	b14e      	cbz	r6, 80002e0 <__udivmoddi4+0x30>
 80002cc:	f1c6 0320 	rsb	r3, r6, #32
 80002d0:	fa01 f806 	lsl.w	r8, r1, r6
 80002d4:	fa20 f303 	lsr.w	r3, r0, r3
 80002d8:	40b7      	lsls	r7, r6
 80002da:	ea43 0808 	orr.w	r8, r3, r8
 80002de:	40b4      	lsls	r4, r6
 80002e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002e4:	fa1f fc87 	uxth.w	ip, r7
 80002e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002ec:	0c23      	lsrs	r3, r4, #16
 80002ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80002f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f6:	fb01 f20c 	mul.w	r2, r1, ip
 80002fa:	429a      	cmp	r2, r3
 80002fc:	d909      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fe:	18fb      	adds	r3, r7, r3
 8000300:	f101 30ff 	add.w	r0, r1, #4294967295
 8000304:	f080 80ea 	bcs.w	80004dc <__udivmoddi4+0x22c>
 8000308:	429a      	cmp	r2, r3
 800030a:	f240 80e7 	bls.w	80004dc <__udivmoddi4+0x22c>
 800030e:	3902      	subs	r1, #2
 8000310:	443b      	add	r3, r7
 8000312:	1a9a      	subs	r2, r3, r2
 8000314:	b2a3      	uxth	r3, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000322:	fb00 fc0c 	mul.w	ip, r0, ip
 8000326:	459c      	cmp	ip, r3
 8000328:	d909      	bls.n	800033e <__udivmoddi4+0x8e>
 800032a:	18fb      	adds	r3, r7, r3
 800032c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000330:	f080 80d6 	bcs.w	80004e0 <__udivmoddi4+0x230>
 8000334:	459c      	cmp	ip, r3
 8000336:	f240 80d3 	bls.w	80004e0 <__udivmoddi4+0x230>
 800033a:	443b      	add	r3, r7
 800033c:	3802      	subs	r0, #2
 800033e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000342:	eba3 030c 	sub.w	r3, r3, ip
 8000346:	2100      	movs	r1, #0
 8000348:	b11d      	cbz	r5, 8000352 <__udivmoddi4+0xa2>
 800034a:	40f3      	lsrs	r3, r6
 800034c:	2200      	movs	r2, #0
 800034e:	e9c5 3200 	strd	r3, r2, [r5]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d905      	bls.n	8000366 <__udivmoddi4+0xb6>
 800035a:	b10d      	cbz	r5, 8000360 <__udivmoddi4+0xb0>
 800035c:	e9c5 0100 	strd	r0, r1, [r5]
 8000360:	2100      	movs	r1, #0
 8000362:	4608      	mov	r0, r1
 8000364:	e7f5      	b.n	8000352 <__udivmoddi4+0xa2>
 8000366:	fab3 f183 	clz	r1, r3
 800036a:	2900      	cmp	r1, #0
 800036c:	d146      	bne.n	80003fc <__udivmoddi4+0x14c>
 800036e:	4573      	cmp	r3, lr
 8000370:	d302      	bcc.n	8000378 <__udivmoddi4+0xc8>
 8000372:	4282      	cmp	r2, r0
 8000374:	f200 8105 	bhi.w	8000582 <__udivmoddi4+0x2d2>
 8000378:	1a84      	subs	r4, r0, r2
 800037a:	eb6e 0203 	sbc.w	r2, lr, r3
 800037e:	2001      	movs	r0, #1
 8000380:	4690      	mov	r8, r2
 8000382:	2d00      	cmp	r5, #0
 8000384:	d0e5      	beq.n	8000352 <__udivmoddi4+0xa2>
 8000386:	e9c5 4800 	strd	r4, r8, [r5]
 800038a:	e7e2      	b.n	8000352 <__udivmoddi4+0xa2>
 800038c:	2a00      	cmp	r2, #0
 800038e:	f000 8090 	beq.w	80004b2 <__udivmoddi4+0x202>
 8000392:	fab2 f682 	clz	r6, r2
 8000396:	2e00      	cmp	r6, #0
 8000398:	f040 80a4 	bne.w	80004e4 <__udivmoddi4+0x234>
 800039c:	1a8a      	subs	r2, r1, r2
 800039e:	0c03      	lsrs	r3, r0, #16
 80003a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a4:	b280      	uxth	r0, r0
 80003a6:	b2bc      	uxth	r4, r7
 80003a8:	2101      	movs	r1, #1
 80003aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80003b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003b6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ba:	429a      	cmp	r2, r3
 80003bc:	d907      	bls.n	80003ce <__udivmoddi4+0x11e>
 80003be:	18fb      	adds	r3, r7, r3
 80003c0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003c4:	d202      	bcs.n	80003cc <__udivmoddi4+0x11c>
 80003c6:	429a      	cmp	r2, r3
 80003c8:	f200 80e0 	bhi.w	800058c <__udivmoddi4+0x2dc>
 80003cc:	46c4      	mov	ip, r8
 80003ce:	1a9b      	subs	r3, r3, r2
 80003d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003dc:	fb02 f404 	mul.w	r4, r2, r4
 80003e0:	429c      	cmp	r4, r3
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x144>
 80003e4:	18fb      	adds	r3, r7, r3
 80003e6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x142>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f200 80ca 	bhi.w	8000586 <__udivmoddi4+0x2d6>
 80003f2:	4602      	mov	r2, r0
 80003f4:	1b1b      	subs	r3, r3, r4
 80003f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003fa:	e7a5      	b.n	8000348 <__udivmoddi4+0x98>
 80003fc:	f1c1 0620 	rsb	r6, r1, #32
 8000400:	408b      	lsls	r3, r1
 8000402:	fa22 f706 	lsr.w	r7, r2, r6
 8000406:	431f      	orrs	r7, r3
 8000408:	fa0e f401 	lsl.w	r4, lr, r1
 800040c:	fa20 f306 	lsr.w	r3, r0, r6
 8000410:	fa2e fe06 	lsr.w	lr, lr, r6
 8000414:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000418:	4323      	orrs	r3, r4
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	fa1f fc87 	uxth.w	ip, r7
 8000422:	fbbe f0f9 	udiv	r0, lr, r9
 8000426:	0c1c      	lsrs	r4, r3, #16
 8000428:	fb09 ee10 	mls	lr, r9, r0, lr
 800042c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000430:	fb00 fe0c 	mul.w	lr, r0, ip
 8000434:	45a6      	cmp	lr, r4
 8000436:	fa02 f201 	lsl.w	r2, r2, r1
 800043a:	d909      	bls.n	8000450 <__udivmoddi4+0x1a0>
 800043c:	193c      	adds	r4, r7, r4
 800043e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000442:	f080 809c 	bcs.w	800057e <__udivmoddi4+0x2ce>
 8000446:	45a6      	cmp	lr, r4
 8000448:	f240 8099 	bls.w	800057e <__udivmoddi4+0x2ce>
 800044c:	3802      	subs	r0, #2
 800044e:	443c      	add	r4, r7
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	fa1f fe83 	uxth.w	lr, r3
 8000458:	fbb4 f3f9 	udiv	r3, r4, r9
 800045c:	fb09 4413 	mls	r4, r9, r3, r4
 8000460:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000464:	fb03 fc0c 	mul.w	ip, r3, ip
 8000468:	45a4      	cmp	ip, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x1ce>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000472:	f080 8082 	bcs.w	800057a <__udivmoddi4+0x2ca>
 8000476:	45a4      	cmp	ip, r4
 8000478:	d97f      	bls.n	800057a <__udivmoddi4+0x2ca>
 800047a:	3b02      	subs	r3, #2
 800047c:	443c      	add	r4, r7
 800047e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000482:	eba4 040c 	sub.w	r4, r4, ip
 8000486:	fba0 ec02 	umull	lr, ip, r0, r2
 800048a:	4564      	cmp	r4, ip
 800048c:	4673      	mov	r3, lr
 800048e:	46e1      	mov	r9, ip
 8000490:	d362      	bcc.n	8000558 <__udivmoddi4+0x2a8>
 8000492:	d05f      	beq.n	8000554 <__udivmoddi4+0x2a4>
 8000494:	b15d      	cbz	r5, 80004ae <__udivmoddi4+0x1fe>
 8000496:	ebb8 0203 	subs.w	r2, r8, r3
 800049a:	eb64 0409 	sbc.w	r4, r4, r9
 800049e:	fa04 f606 	lsl.w	r6, r4, r6
 80004a2:	fa22 f301 	lsr.w	r3, r2, r1
 80004a6:	431e      	orrs	r6, r3
 80004a8:	40cc      	lsrs	r4, r1
 80004aa:	e9c5 6400 	strd	r6, r4, [r5]
 80004ae:	2100      	movs	r1, #0
 80004b0:	e74f      	b.n	8000352 <__udivmoddi4+0xa2>
 80004b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004b6:	0c01      	lsrs	r1, r0, #16
 80004b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004bc:	b280      	uxth	r0, r0
 80004be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004c2:	463b      	mov	r3, r7
 80004c4:	4638      	mov	r0, r7
 80004c6:	463c      	mov	r4, r7
 80004c8:	46b8      	mov	r8, r7
 80004ca:	46be      	mov	lr, r7
 80004cc:	2620      	movs	r6, #32
 80004ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80004d2:	eba2 0208 	sub.w	r2, r2, r8
 80004d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004da:	e766      	b.n	80003aa <__udivmoddi4+0xfa>
 80004dc:	4601      	mov	r1, r0
 80004de:	e718      	b.n	8000312 <__udivmoddi4+0x62>
 80004e0:	4610      	mov	r0, r2
 80004e2:	e72c      	b.n	800033e <__udivmoddi4+0x8e>
 80004e4:	f1c6 0220 	rsb	r2, r6, #32
 80004e8:	fa2e f302 	lsr.w	r3, lr, r2
 80004ec:	40b7      	lsls	r7, r6
 80004ee:	40b1      	lsls	r1, r6
 80004f0:	fa20 f202 	lsr.w	r2, r0, r2
 80004f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004f8:	430a      	orrs	r2, r1
 80004fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80004fe:	b2bc      	uxth	r4, r7
 8000500:	fb0e 3318 	mls	r3, lr, r8, r3
 8000504:	0c11      	lsrs	r1, r2, #16
 8000506:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800050a:	fb08 f904 	mul.w	r9, r8, r4
 800050e:	40b0      	lsls	r0, r6
 8000510:	4589      	cmp	r9, r1
 8000512:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000516:	b280      	uxth	r0, r0
 8000518:	d93e      	bls.n	8000598 <__udivmoddi4+0x2e8>
 800051a:	1879      	adds	r1, r7, r1
 800051c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000520:	d201      	bcs.n	8000526 <__udivmoddi4+0x276>
 8000522:	4589      	cmp	r9, r1
 8000524:	d81f      	bhi.n	8000566 <__udivmoddi4+0x2b6>
 8000526:	eba1 0109 	sub.w	r1, r1, r9
 800052a:	fbb1 f9fe 	udiv	r9, r1, lr
 800052e:	fb09 f804 	mul.w	r8, r9, r4
 8000532:	fb0e 1119 	mls	r1, lr, r9, r1
 8000536:	b292      	uxth	r2, r2
 8000538:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800053c:	4542      	cmp	r2, r8
 800053e:	d229      	bcs.n	8000594 <__udivmoddi4+0x2e4>
 8000540:	18ba      	adds	r2, r7, r2
 8000542:	f109 31ff 	add.w	r1, r9, #4294967295
 8000546:	d2c4      	bcs.n	80004d2 <__udivmoddi4+0x222>
 8000548:	4542      	cmp	r2, r8
 800054a:	d2c2      	bcs.n	80004d2 <__udivmoddi4+0x222>
 800054c:	f1a9 0102 	sub.w	r1, r9, #2
 8000550:	443a      	add	r2, r7
 8000552:	e7be      	b.n	80004d2 <__udivmoddi4+0x222>
 8000554:	45f0      	cmp	r8, lr
 8000556:	d29d      	bcs.n	8000494 <__udivmoddi4+0x1e4>
 8000558:	ebbe 0302 	subs.w	r3, lr, r2
 800055c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000560:	3801      	subs	r0, #1
 8000562:	46e1      	mov	r9, ip
 8000564:	e796      	b.n	8000494 <__udivmoddi4+0x1e4>
 8000566:	eba7 0909 	sub.w	r9, r7, r9
 800056a:	4449      	add	r1, r9
 800056c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000570:	fbb1 f9fe 	udiv	r9, r1, lr
 8000574:	fb09 f804 	mul.w	r8, r9, r4
 8000578:	e7db      	b.n	8000532 <__udivmoddi4+0x282>
 800057a:	4673      	mov	r3, lr
 800057c:	e77f      	b.n	800047e <__udivmoddi4+0x1ce>
 800057e:	4650      	mov	r0, sl
 8000580:	e766      	b.n	8000450 <__udivmoddi4+0x1a0>
 8000582:	4608      	mov	r0, r1
 8000584:	e6fd      	b.n	8000382 <__udivmoddi4+0xd2>
 8000586:	443b      	add	r3, r7
 8000588:	3a02      	subs	r2, #2
 800058a:	e733      	b.n	80003f4 <__udivmoddi4+0x144>
 800058c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000590:	443b      	add	r3, r7
 8000592:	e71c      	b.n	80003ce <__udivmoddi4+0x11e>
 8000594:	4649      	mov	r1, r9
 8000596:	e79c      	b.n	80004d2 <__udivmoddi4+0x222>
 8000598:	eba1 0109 	sub.w	r1, r1, r9
 800059c:	46c4      	mov	ip, r8
 800059e:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a2:	fb09 f804 	mul.w	r8, r9, r4
 80005a6:	e7c4      	b.n	8000532 <__udivmoddi4+0x282>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005b0:	f001 fad2 	bl	8001b58 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005b4:	f000 f852 	bl	800065c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005b8:	f000 fa34 	bl	8000a24 <MX_GPIO_Init>
  MX_TIM3_Init();
 80005bc:	f000 f932 	bl	8000824 <MX_TIM3_Init>
  MX_TIM4_Init();
 80005c0:	f000 f986 	bl	80008d0 <MX_TIM4_Init>
  MX_USART2_UART_Init();
 80005c4:	f000 fa04 	bl	80009d0 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 80005c8:	f000 f8de 	bl	8000788 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 80005cc:	f000 f9d6 	bl	800097c <MX_USART1_UART_Init>
  MX_I2C1_Init();
 80005d0:	f000 f8ac 	bl	800072c <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  //Romagnetics code
  screen_driver_Init();
 80005d4:	f000 fd58 	bl	8001088 <screen_driver_Init>

  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 80005d8:	213c      	movs	r1, #60	@ 0x3c
 80005da:	4815      	ldr	r0, [pc, #84]	@ (8000630 <main+0x84>)
 80005dc:	f004 fb2b 	bl	8004c36 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 80005e0:	213c      	movs	r1, #60	@ 0x3c
 80005e2:	4814      	ldr	r0, [pc, #80]	@ (8000634 <main+0x88>)
 80005e4:	f004 fb27 	bl	8004c36 <HAL_TIM_Encoder_Start>

  __HAL_TIM_SET_COUNTER(&htim4, current_menu*4);
 80005e8:	4b13      	ldr	r3, [pc, #76]	@ (8000638 <main+0x8c>)
 80005ea:	781b      	ldrb	r3, [r3, #0]
 80005ec:	009a      	lsls	r2, r3, #2
 80005ee:	4b11      	ldr	r3, [pc, #68]	@ (8000634 <main+0x88>)
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	625a      	str	r2, [r3, #36]	@ 0x24

  HAL_UART_Receive_IT(&huart2, midi_rx_buff_ptr, 3);
 80005f4:	4b11      	ldr	r3, [pc, #68]	@ (800063c <main+0x90>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	2203      	movs	r2, #3
 80005fa:	4619      	mov	r1, r3
 80005fc:	4810      	ldr	r0, [pc, #64]	@ (8000640 <main+0x94>)
 80005fe:	f005 f830 	bl	8005662 <HAL_UART_Receive_IT>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000602:	f007 fb35 	bl	8007c70 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of midi_send */
  midi_sendHandle = osThreadNew(StartDefaultTask, NULL, &midi_send_attributes);
 8000606:	4a0f      	ldr	r2, [pc, #60]	@ (8000644 <main+0x98>)
 8000608:	2100      	movs	r1, #0
 800060a:	480f      	ldr	r0, [pc, #60]	@ (8000648 <main+0x9c>)
 800060c:	f007 fb7a 	bl	8007d04 <osThreadNew>
 8000610:	4603      	mov	r3, r0
 8000612:	4a0e      	ldr	r2, [pc, #56]	@ (800064c <main+0xa0>)
 8000614:	6013      	str	r3, [r2, #0]

  /* creation of other_tasks */
  other_tasksHandle = osThreadNew(StartTask02, NULL, &other_tasks_attributes);
 8000616:	4a0e      	ldr	r2, [pc, #56]	@ (8000650 <main+0xa4>)
 8000618:	2100      	movs	r1, #0
 800061a:	480e      	ldr	r0, [pc, #56]	@ (8000654 <main+0xa8>)
 800061c:	f007 fb72 	bl	8007d04 <osThreadNew>
 8000620:	4603      	mov	r3, r0
 8000622:	4a0d      	ldr	r2, [pc, #52]	@ (8000658 <main+0xac>)
 8000624:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000626:	f007 fb47 	bl	8007cb8 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
 800062a:	bf00      	nop
 800062c:	e7fd      	b.n	800062a <main+0x7e>
 800062e:	bf00      	nop
 8000630:	2000023c 	.word	0x2000023c
 8000634:	20000284 	.word	0x20000284
 8000638:	20000008 	.word	0x20000008
 800063c:	2000000c 	.word	0x2000000c
 8000640:	20000314 	.word	0x20000314
 8000644:	0800d674 	.word	0x0800d674
 8000648:	08000b95 	.word	0x08000b95
 800064c:	2000035c 	.word	0x2000035c
 8000650:	0800d698 	.word	0x0800d698
 8000654:	08000ba9 	.word	0x08000ba9
 8000658:	20000360 	.word	0x20000360

0800065c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b094      	sub	sp, #80	@ 0x50
 8000660:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000662:	f107 0320 	add.w	r3, r7, #32
 8000666:	2230      	movs	r2, #48	@ 0x30
 8000668:	2100      	movs	r1, #0
 800066a:	4618      	mov	r0, r3
 800066c:	f00c fa9e 	bl	800cbac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000670:	f107 030c 	add.w	r3, r7, #12
 8000674:	2200      	movs	r2, #0
 8000676:	601a      	str	r2, [r3, #0]
 8000678:	605a      	str	r2, [r3, #4]
 800067a:	609a      	str	r2, [r3, #8]
 800067c:	60da      	str	r2, [r3, #12]
 800067e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000680:	2300      	movs	r3, #0
 8000682:	60bb      	str	r3, [r7, #8]
 8000684:	4b27      	ldr	r3, [pc, #156]	@ (8000724 <SystemClock_Config+0xc8>)
 8000686:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000688:	4a26      	ldr	r2, [pc, #152]	@ (8000724 <SystemClock_Config+0xc8>)
 800068a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800068e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000690:	4b24      	ldr	r3, [pc, #144]	@ (8000724 <SystemClock_Config+0xc8>)
 8000692:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000694:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000698:	60bb      	str	r3, [r7, #8]
 800069a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800069c:	2300      	movs	r3, #0
 800069e:	607b      	str	r3, [r7, #4]
 80006a0:	4b21      	ldr	r3, [pc, #132]	@ (8000728 <SystemClock_Config+0xcc>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	4a20      	ldr	r2, [pc, #128]	@ (8000728 <SystemClock_Config+0xcc>)
 80006a6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80006aa:	6013      	str	r3, [r2, #0]
 80006ac:	4b1e      	ldr	r3, [pc, #120]	@ (8000728 <SystemClock_Config+0xcc>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80006b4:	607b      	str	r3, [r7, #4]
 80006b6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006b8:	2301      	movs	r3, #1
 80006ba:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006bc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80006c0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006c2:	2302      	movs	r3, #2
 80006c4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006c6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80006ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 15;
 80006cc:	230f      	movs	r3, #15
 80006ce:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 80006d0:	2390      	movs	r3, #144	@ 0x90
 80006d2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80006d4:	2304      	movs	r3, #4
 80006d6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 5;
 80006d8:	2305      	movs	r3, #5
 80006da:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006dc:	f107 0320 	add.w	r3, r7, #32
 80006e0:	4618      	mov	r0, r3
 80006e2:	f003 fc97 	bl	8004014 <HAL_RCC_OscConfig>
 80006e6:	4603      	mov	r3, r0
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d001      	beq.n	80006f0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006ec:	f000 fb04 	bl	8000cf8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006f0:	230f      	movs	r3, #15
 80006f2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006f4:	2302      	movs	r3, #2
 80006f6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006f8:	2300      	movs	r3, #0
 80006fa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006fc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000700:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000702:	2300      	movs	r3, #0
 8000704:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000706:	f107 030c 	add.w	r3, r7, #12
 800070a:	2101      	movs	r1, #1
 800070c:	4618      	mov	r0, r3
 800070e:	f003 fef9 	bl	8004504 <HAL_RCC_ClockConfig>
 8000712:	4603      	mov	r3, r0
 8000714:	2b00      	cmp	r3, #0
 8000716:	d001      	beq.n	800071c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000718:	f000 faee 	bl	8000cf8 <Error_Handler>
  }
}
 800071c:	bf00      	nop
 800071e:	3750      	adds	r7, #80	@ 0x50
 8000720:	46bd      	mov	sp, r7
 8000722:	bd80      	pop	{r7, pc}
 8000724:	40023800 	.word	0x40023800
 8000728:	40007000 	.word	0x40007000

0800072c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000730:	4b12      	ldr	r3, [pc, #72]	@ (800077c <MX_I2C1_Init+0x50>)
 8000732:	4a13      	ldr	r2, [pc, #76]	@ (8000780 <MX_I2C1_Init+0x54>)
 8000734:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000736:	4b11      	ldr	r3, [pc, #68]	@ (800077c <MX_I2C1_Init+0x50>)
 8000738:	4a12      	ldr	r2, [pc, #72]	@ (8000784 <MX_I2C1_Init+0x58>)
 800073a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800073c:	4b0f      	ldr	r3, [pc, #60]	@ (800077c <MX_I2C1_Init+0x50>)
 800073e:	2200      	movs	r2, #0
 8000740:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000742:	4b0e      	ldr	r3, [pc, #56]	@ (800077c <MX_I2C1_Init+0x50>)
 8000744:	2200      	movs	r2, #0
 8000746:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000748:	4b0c      	ldr	r3, [pc, #48]	@ (800077c <MX_I2C1_Init+0x50>)
 800074a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800074e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000750:	4b0a      	ldr	r3, [pc, #40]	@ (800077c <MX_I2C1_Init+0x50>)
 8000752:	2200      	movs	r2, #0
 8000754:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000756:	4b09      	ldr	r3, [pc, #36]	@ (800077c <MX_I2C1_Init+0x50>)
 8000758:	2200      	movs	r2, #0
 800075a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800075c:	4b07      	ldr	r3, [pc, #28]	@ (800077c <MX_I2C1_Init+0x50>)
 800075e:	2200      	movs	r2, #0
 8000760:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000762:	4b06      	ldr	r3, [pc, #24]	@ (800077c <MX_I2C1_Init+0x50>)
 8000764:	2200      	movs	r2, #0
 8000766:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000768:	4804      	ldr	r0, [pc, #16]	@ (800077c <MX_I2C1_Init+0x50>)
 800076a:	f001 fd6b 	bl	8002244 <HAL_I2C_Init>
 800076e:	4603      	mov	r3, r0
 8000770:	2b00      	cmp	r3, #0
 8000772:	d001      	beq.n	8000778 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000774:	f000 fac0 	bl	8000cf8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000778:	bf00      	nop
 800077a:	bd80      	pop	{r7, pc}
 800077c:	200001a0 	.word	0x200001a0
 8000780:	40005400 	.word	0x40005400
 8000784:	000186a0 	.word	0x000186a0

08000788 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b086      	sub	sp, #24
 800078c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800078e:	f107 0308 	add.w	r3, r7, #8
 8000792:	2200      	movs	r2, #0
 8000794:	601a      	str	r2, [r3, #0]
 8000796:	605a      	str	r2, [r3, #4]
 8000798:	609a      	str	r2, [r3, #8]
 800079a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800079c:	463b      	mov	r3, r7
 800079e:	2200      	movs	r2, #0
 80007a0:	601a      	str	r2, [r3, #0]
 80007a2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80007a4:	4b1e      	ldr	r3, [pc, #120]	@ (8000820 <MX_TIM2_Init+0x98>)
 80007a6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80007aa:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 6000-1;
 80007ac:	4b1c      	ldr	r3, [pc, #112]	@ (8000820 <MX_TIM2_Init+0x98>)
 80007ae:	f241 726f 	movw	r2, #5999	@ 0x176f
 80007b2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007b4:	4b1a      	ldr	r3, [pc, #104]	@ (8000820 <MX_TIM2_Init+0x98>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 416;
 80007ba:	4b19      	ldr	r3, [pc, #100]	@ (8000820 <MX_TIM2_Init+0x98>)
 80007bc:	f44f 72d0 	mov.w	r2, #416	@ 0x1a0
 80007c0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007c2:	4b17      	ldr	r3, [pc, #92]	@ (8000820 <MX_TIM2_Init+0x98>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007c8:	4b15      	ldr	r3, [pc, #84]	@ (8000820 <MX_TIM2_Init+0x98>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80007ce:	4814      	ldr	r0, [pc, #80]	@ (8000820 <MX_TIM2_Init+0x98>)
 80007d0:	f004 f8aa 	bl	8004928 <HAL_TIM_Base_Init>
 80007d4:	4603      	mov	r3, r0
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d001      	beq.n	80007de <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80007da:	f000 fa8d 	bl	8000cf8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007de:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80007e2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80007e4:	f107 0308 	add.w	r3, r7, #8
 80007e8:	4619      	mov	r1, r3
 80007ea:	480d      	ldr	r0, [pc, #52]	@ (8000820 <MX_TIM2_Init+0x98>)
 80007ec:	f004 fba1 	bl	8004f32 <HAL_TIM_ConfigClockSource>
 80007f0:	4603      	mov	r3, r0
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d001      	beq.n	80007fa <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80007f6:	f000 fa7f 	bl	8000cf8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007fa:	2300      	movs	r3, #0
 80007fc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007fe:	2300      	movs	r3, #0
 8000800:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000802:	463b      	mov	r3, r7
 8000804:	4619      	mov	r1, r3
 8000806:	4806      	ldr	r0, [pc, #24]	@ (8000820 <MX_TIM2_Init+0x98>)
 8000808:	f004 fdce 	bl	80053a8 <HAL_TIMEx_MasterConfigSynchronization>
 800080c:	4603      	mov	r3, r0
 800080e:	2b00      	cmp	r3, #0
 8000810:	d001      	beq.n	8000816 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000812:	f000 fa71 	bl	8000cf8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000816:	bf00      	nop
 8000818:	3718      	adds	r7, #24
 800081a:	46bd      	mov	sp, r7
 800081c:	bd80      	pop	{r7, pc}
 800081e:	bf00      	nop
 8000820:	200001f4 	.word	0x200001f4

08000824 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b08c      	sub	sp, #48	@ 0x30
 8000828:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800082a:	f107 030c 	add.w	r3, r7, #12
 800082e:	2224      	movs	r2, #36	@ 0x24
 8000830:	2100      	movs	r1, #0
 8000832:	4618      	mov	r0, r3
 8000834:	f00c f9ba 	bl	800cbac <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000838:	1d3b      	adds	r3, r7, #4
 800083a:	2200      	movs	r2, #0
 800083c:	601a      	str	r2, [r3, #0]
 800083e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000840:	4b21      	ldr	r3, [pc, #132]	@ (80008c8 <MX_TIM3_Init+0xa4>)
 8000842:	4a22      	ldr	r2, [pc, #136]	@ (80008cc <MX_TIM3_Init+0xa8>)
 8000844:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000846:	4b20      	ldr	r3, [pc, #128]	@ (80008c8 <MX_TIM3_Init+0xa4>)
 8000848:	2200      	movs	r2, #0
 800084a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800084c:	4b1e      	ldr	r3, [pc, #120]	@ (80008c8 <MX_TIM3_Init+0xa4>)
 800084e:	2200      	movs	r2, #0
 8000850:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000852:	4b1d      	ldr	r3, [pc, #116]	@ (80008c8 <MX_TIM3_Init+0xa4>)
 8000854:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000858:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 800085a:	4b1b      	ldr	r3, [pc, #108]	@ (80008c8 <MX_TIM3_Init+0xa4>)
 800085c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000860:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000862:	4b19      	ldr	r3, [pc, #100]	@ (80008c8 <MX_TIM3_Init+0xa4>)
 8000864:	2200      	movs	r2, #0
 8000866:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000868:	2303      	movs	r3, #3
 800086a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 800086c:	2302      	movs	r3, #2
 800086e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000870:	2301      	movs	r3, #1
 8000872:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000874:	2300      	movs	r3, #0
 8000876:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000878:	2300      	movs	r3, #0
 800087a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800087c:	2300      	movs	r3, #0
 800087e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000880:	2301      	movs	r3, #1
 8000882:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000884:	2300      	movs	r3, #0
 8000886:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8000888:	2300      	movs	r3, #0
 800088a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 800088c:	f107 030c 	add.w	r3, r7, #12
 8000890:	4619      	mov	r1, r3
 8000892:	480d      	ldr	r0, [pc, #52]	@ (80008c8 <MX_TIM3_Init+0xa4>)
 8000894:	f004 f929 	bl	8004aea <HAL_TIM_Encoder_Init>
 8000898:	4603      	mov	r3, r0
 800089a:	2b00      	cmp	r3, #0
 800089c:	d001      	beq.n	80008a2 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 800089e:	f000 fa2b 	bl	8000cf8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008a2:	2300      	movs	r3, #0
 80008a4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008a6:	2300      	movs	r3, #0
 80008a8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80008aa:	1d3b      	adds	r3, r7, #4
 80008ac:	4619      	mov	r1, r3
 80008ae:	4806      	ldr	r0, [pc, #24]	@ (80008c8 <MX_TIM3_Init+0xa4>)
 80008b0:	f004 fd7a 	bl	80053a8 <HAL_TIMEx_MasterConfigSynchronization>
 80008b4:	4603      	mov	r3, r0
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d001      	beq.n	80008be <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 80008ba:	f000 fa1d 	bl	8000cf8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80008be:	bf00      	nop
 80008c0:	3730      	adds	r7, #48	@ 0x30
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bd80      	pop	{r7, pc}
 80008c6:	bf00      	nop
 80008c8:	2000023c 	.word	0x2000023c
 80008cc:	40000400 	.word	0x40000400

080008d0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b08c      	sub	sp, #48	@ 0x30
 80008d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80008d6:	f107 030c 	add.w	r3, r7, #12
 80008da:	2224      	movs	r2, #36	@ 0x24
 80008dc:	2100      	movs	r1, #0
 80008de:	4618      	mov	r0, r3
 80008e0:	f00c f964 	bl	800cbac <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008e4:	1d3b      	adds	r3, r7, #4
 80008e6:	2200      	movs	r2, #0
 80008e8:	601a      	str	r2, [r3, #0]
 80008ea:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80008ec:	4b21      	ldr	r3, [pc, #132]	@ (8000974 <MX_TIM4_Init+0xa4>)
 80008ee:	4a22      	ldr	r2, [pc, #136]	@ (8000978 <MX_TIM4_Init+0xa8>)
 80008f0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80008f2:	4b20      	ldr	r3, [pc, #128]	@ (8000974 <MX_TIM4_Init+0xa4>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008f8:	4b1e      	ldr	r3, [pc, #120]	@ (8000974 <MX_TIM4_Init+0xa4>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80008fe:	4b1d      	ldr	r3, [pc, #116]	@ (8000974 <MX_TIM4_Init+0xa4>)
 8000900:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000904:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8000906:	4b1b      	ldr	r3, [pc, #108]	@ (8000974 <MX_TIM4_Init+0xa4>)
 8000908:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800090c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800090e:	4b19      	ldr	r3, [pc, #100]	@ (8000974 <MX_TIM4_Init+0xa4>)
 8000910:	2200      	movs	r2, #0
 8000912:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000914:	2303      	movs	r3, #3
 8000916:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8000918:	2302      	movs	r3, #2
 800091a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800091c:	2301      	movs	r3, #1
 800091e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000920:	2300      	movs	r3, #0
 8000922:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000924:	2300      	movs	r3, #0
 8000926:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000928:	2300      	movs	r3, #0
 800092a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800092c:	2301      	movs	r3, #1
 800092e:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000930:	2300      	movs	r3, #0
 8000932:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8000934:	2300      	movs	r3, #0
 8000936:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8000938:	f107 030c 	add.w	r3, r7, #12
 800093c:	4619      	mov	r1, r3
 800093e:	480d      	ldr	r0, [pc, #52]	@ (8000974 <MX_TIM4_Init+0xa4>)
 8000940:	f004 f8d3 	bl	8004aea <HAL_TIM_Encoder_Init>
 8000944:	4603      	mov	r3, r0
 8000946:	2b00      	cmp	r3, #0
 8000948:	d001      	beq.n	800094e <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 800094a:	f000 f9d5 	bl	8000cf8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800094e:	2300      	movs	r3, #0
 8000950:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000952:	2300      	movs	r3, #0
 8000954:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000956:	1d3b      	adds	r3, r7, #4
 8000958:	4619      	mov	r1, r3
 800095a:	4806      	ldr	r0, [pc, #24]	@ (8000974 <MX_TIM4_Init+0xa4>)
 800095c:	f004 fd24 	bl	80053a8 <HAL_TIMEx_MasterConfigSynchronization>
 8000960:	4603      	mov	r3, r0
 8000962:	2b00      	cmp	r3, #0
 8000964:	d001      	beq.n	800096a <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8000966:	f000 f9c7 	bl	8000cf8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800096a:	bf00      	nop
 800096c:	3730      	adds	r7, #48	@ 0x30
 800096e:	46bd      	mov	sp, r7
 8000970:	bd80      	pop	{r7, pc}
 8000972:	bf00      	nop
 8000974:	20000284 	.word	0x20000284
 8000978:	40000800 	.word	0x40000800

0800097c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000980:	4b11      	ldr	r3, [pc, #68]	@ (80009c8 <MX_USART1_UART_Init+0x4c>)
 8000982:	4a12      	ldr	r2, [pc, #72]	@ (80009cc <MX_USART1_UART_Init+0x50>)
 8000984:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 31250;
 8000986:	4b10      	ldr	r3, [pc, #64]	@ (80009c8 <MX_USART1_UART_Init+0x4c>)
 8000988:	f647 2212 	movw	r2, #31250	@ 0x7a12
 800098c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800098e:	4b0e      	ldr	r3, [pc, #56]	@ (80009c8 <MX_USART1_UART_Init+0x4c>)
 8000990:	2200      	movs	r2, #0
 8000992:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000994:	4b0c      	ldr	r3, [pc, #48]	@ (80009c8 <MX_USART1_UART_Init+0x4c>)
 8000996:	2200      	movs	r2, #0
 8000998:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800099a:	4b0b      	ldr	r3, [pc, #44]	@ (80009c8 <MX_USART1_UART_Init+0x4c>)
 800099c:	2200      	movs	r2, #0
 800099e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80009a0:	4b09      	ldr	r3, [pc, #36]	@ (80009c8 <MX_USART1_UART_Init+0x4c>)
 80009a2:	220c      	movs	r2, #12
 80009a4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009a6:	4b08      	ldr	r3, [pc, #32]	@ (80009c8 <MX_USART1_UART_Init+0x4c>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80009ac:	4b06      	ldr	r3, [pc, #24]	@ (80009c8 <MX_USART1_UART_Init+0x4c>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80009b2:	4805      	ldr	r0, [pc, #20]	@ (80009c8 <MX_USART1_UART_Init+0x4c>)
 80009b4:	f004 fd7a 	bl	80054ac <HAL_UART_Init>
 80009b8:	4603      	mov	r3, r0
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d001      	beq.n	80009c2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80009be:	f000 f99b 	bl	8000cf8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80009c2:	bf00      	nop
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	bf00      	nop
 80009c8:	200002cc 	.word	0x200002cc
 80009cc:	40011000 	.word	0x40011000

080009d0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80009d4:	4b11      	ldr	r3, [pc, #68]	@ (8000a1c <MX_USART2_UART_Init+0x4c>)
 80009d6:	4a12      	ldr	r2, [pc, #72]	@ (8000a20 <MX_USART2_UART_Init+0x50>)
 80009d8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 31250;
 80009da:	4b10      	ldr	r3, [pc, #64]	@ (8000a1c <MX_USART2_UART_Init+0x4c>)
 80009dc:	f647 2212 	movw	r2, #31250	@ 0x7a12
 80009e0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80009e2:	4b0e      	ldr	r3, [pc, #56]	@ (8000a1c <MX_USART2_UART_Init+0x4c>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80009e8:	4b0c      	ldr	r3, [pc, #48]	@ (8000a1c <MX_USART2_UART_Init+0x4c>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80009ee:	4b0b      	ldr	r3, [pc, #44]	@ (8000a1c <MX_USART2_UART_Init+0x4c>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80009f4:	4b09      	ldr	r3, [pc, #36]	@ (8000a1c <MX_USART2_UART_Init+0x4c>)
 80009f6:	220c      	movs	r2, #12
 80009f8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009fa:	4b08      	ldr	r3, [pc, #32]	@ (8000a1c <MX_USART2_UART_Init+0x4c>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a00:	4b06      	ldr	r3, [pc, #24]	@ (8000a1c <MX_USART2_UART_Init+0x4c>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a06:	4805      	ldr	r0, [pc, #20]	@ (8000a1c <MX_USART2_UART_Init+0x4c>)
 8000a08:	f004 fd50 	bl	80054ac <HAL_UART_Init>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d001      	beq.n	8000a16 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000a12:	f000 f971 	bl	8000cf8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a16:	bf00      	nop
 8000a18:	bd80      	pop	{r7, pc}
 8000a1a:	bf00      	nop
 8000a1c:	20000314 	.word	0x20000314
 8000a20:	40004400 	.word	0x40004400

08000a24 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b088      	sub	sp, #32
 8000a28:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a2a:	f107 030c 	add.w	r3, r7, #12
 8000a2e:	2200      	movs	r2, #0
 8000a30:	601a      	str	r2, [r3, #0]
 8000a32:	605a      	str	r2, [r3, #4]
 8000a34:	609a      	str	r2, [r3, #8]
 8000a36:	60da      	str	r2, [r3, #12]
 8000a38:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	60bb      	str	r3, [r7, #8]
 8000a3e:	4b29      	ldr	r3, [pc, #164]	@ (8000ae4 <MX_GPIO_Init+0xc0>)
 8000a40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a42:	4a28      	ldr	r2, [pc, #160]	@ (8000ae4 <MX_GPIO_Init+0xc0>)
 8000a44:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000a48:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a4a:	4b26      	ldr	r3, [pc, #152]	@ (8000ae4 <MX_GPIO_Init+0xc0>)
 8000a4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a4e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000a52:	60bb      	str	r3, [r7, #8]
 8000a54:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a56:	2300      	movs	r3, #0
 8000a58:	607b      	str	r3, [r7, #4]
 8000a5a:	4b22      	ldr	r3, [pc, #136]	@ (8000ae4 <MX_GPIO_Init+0xc0>)
 8000a5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a5e:	4a21      	ldr	r2, [pc, #132]	@ (8000ae4 <MX_GPIO_Init+0xc0>)
 8000a60:	f043 0301 	orr.w	r3, r3, #1
 8000a64:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a66:	4b1f      	ldr	r3, [pc, #124]	@ (8000ae4 <MX_GPIO_Init+0xc0>)
 8000a68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a6a:	f003 0301 	and.w	r3, r3, #1
 8000a6e:	607b      	str	r3, [r7, #4]
 8000a70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a72:	2300      	movs	r3, #0
 8000a74:	603b      	str	r3, [r7, #0]
 8000a76:	4b1b      	ldr	r3, [pc, #108]	@ (8000ae4 <MX_GPIO_Init+0xc0>)
 8000a78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a7a:	4a1a      	ldr	r2, [pc, #104]	@ (8000ae4 <MX_GPIO_Init+0xc0>)
 8000a7c:	f043 0302 	orr.w	r3, r3, #2
 8000a80:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a82:	4b18      	ldr	r3, [pc, #96]	@ (8000ae4 <MX_GPIO_Init+0xc0>)
 8000a84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a86:	f003 0302 	and.w	r3, r3, #2
 8000a8a:	603b      	str	r3, [r7, #0]
 8000a8c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pins : Btn1_Pin Btn4_Pin Btn3_Pin Btn2_Pin */
  GPIO_InitStruct.Pin = Btn1_Pin|Btn4_Pin|Btn3_Pin|Btn2_Pin;
 8000a8e:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8000a92:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a94:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000a98:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a9a:	2301      	movs	r3, #1
 8000a9c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a9e:	f107 030c 	add.w	r3, r7, #12
 8000aa2:	4619      	mov	r1, r3
 8000aa4:	4810      	ldr	r0, [pc, #64]	@ (8000ae8 <MX_GPIO_Init+0xc4>)
 8000aa6:	f001 fa31 	bl	8001f0c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000aaa:	2308      	movs	r3, #8
 8000aac:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000aae:	2312      	movs	r3, #18
 8000ab0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ab6:	2303      	movs	r3, #3
 8000ab8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 8000aba:	2309      	movs	r3, #9
 8000abc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000abe:	f107 030c 	add.w	r3, r7, #12
 8000ac2:	4619      	mov	r1, r3
 8000ac4:	4808      	ldr	r0, [pc, #32]	@ (8000ae8 <MX_GPIO_Init+0xc4>)
 8000ac6:	f001 fa21 	bl	8001f0c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8000aca:	2200      	movs	r2, #0
 8000acc:	2105      	movs	r1, #5
 8000ace:	2028      	movs	r0, #40	@ 0x28
 8000ad0:	f001 f960 	bl	8001d94 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000ad4:	2028      	movs	r0, #40	@ 0x28
 8000ad6:	f001 f979 	bl	8001dcc <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 8000ada:	bf00      	nop
 8000adc:	3720      	adds	r7, #32
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	40023800 	.word	0x40023800
 8000ae8:	40020400 	.word	0x40020400

08000aec <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b082      	sub	sp, #8
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	4603      	mov	r3, r0
 8000af4:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  //Romagnetics code
    switch(GPIO_Pin)
 8000af6:	88fb      	ldrh	r3, [r7, #6]
 8000af8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8000afc:	d01c      	beq.n	8000b38 <HAL_GPIO_EXTI_Callback+0x4c>
 8000afe:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8000b02:	dc1b      	bgt.n	8000b3c <HAL_GPIO_EXTI_Callback+0x50>
 8000b04:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000b08:	d00c      	beq.n	8000b24 <HAL_GPIO_EXTI_Callback+0x38>
 8000b0a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8000b0e:	d115      	bne.n	8000b3c <HAL_GPIO_EXTI_Callback+0x50>
  {
    case Btn3_Pin :
    	if(current_menu == MIDI_TEMPO){
 8000b10:	4b0f      	ldr	r3, [pc, #60]	@ (8000b50 <HAL_GPIO_EXTI_Callback+0x64>)
 8000b12:	781b      	ldrb	r3, [r3, #0]
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d113      	bne.n	8000b40 <HAL_GPIO_EXTI_Callback+0x54>
    	//tempo_on
    	mt_press_btn3(&huart2, &htim2, &Font_6x8);
 8000b18:	4a0e      	ldr	r2, [pc, #56]	@ (8000b54 <HAL_GPIO_EXTI_Callback+0x68>)
 8000b1a:	490f      	ldr	r1, [pc, #60]	@ (8000b58 <HAL_GPIO_EXTI_Callback+0x6c>)
 8000b1c:	480f      	ldr	r0, [pc, #60]	@ (8000b5c <HAL_GPIO_EXTI_Callback+0x70>)
 8000b1e:	f000 f9ab 	bl	8000e78 <mt_press_btn3>
    	}
		break;
 8000b22:	e00d      	b.n	8000b40 <HAL_GPIO_EXTI_Callback+0x54>

    case Btn4_Pin :
    	if(current_menu == MIDI_TEMPO){
 8000b24:	4b0a      	ldr	r3, [pc, #40]	@ (8000b50 <HAL_GPIO_EXTI_Callback+0x64>)
 8000b26:	781b      	ldrb	r3, [r3, #0]
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d10b      	bne.n	8000b44 <HAL_GPIO_EXTI_Callback+0x58>
    	//tempo off
    	mt_press_btn4(&huart2, &htim2, &Font_6x8);
 8000b2c:	4a09      	ldr	r2, [pc, #36]	@ (8000b54 <HAL_GPIO_EXTI_Callback+0x68>)
 8000b2e:	490a      	ldr	r1, [pc, #40]	@ (8000b58 <HAL_GPIO_EXTI_Callback+0x6c>)
 8000b30:	480a      	ldr	r0, [pc, #40]	@ (8000b5c <HAL_GPIO_EXTI_Callback+0x70>)
 8000b32:	f000 f9d1 	bl	8000ed8 <mt_press_btn4>
    	}
		break;
 8000b36:	e005      	b.n	8000b44 <HAL_GPIO_EXTI_Callback+0x58>
	//Screen Reset
	case Btn2_Pin :
		break;
 8000b38:	bf00      	nop
 8000b3a:	e004      	b.n	8000b46 <HAL_GPIO_EXTI_Callback+0x5a>


    default :
		break;
 8000b3c:	bf00      	nop
 8000b3e:	e002      	b.n	8000b46 <HAL_GPIO_EXTI_Callback+0x5a>
		break;
 8000b40:	bf00      	nop
 8000b42:	e000      	b.n	8000b46 <HAL_GPIO_EXTI_Callback+0x5a>
		break;
 8000b44:	bf00      	nop
  }

}
 8000b46:	bf00      	nop
 8000b48:	3708      	adds	r7, #8
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bd80      	pop	{r7, pc}
 8000b4e:	bf00      	nop
 8000b50:	20000008 	.word	0x20000008
 8000b54:	0800ee7c 	.word	0x0800ee7c
 8000b58:	200001f4 	.word	0x200001f4
 8000b5c:	20000314 	.word	0x20000314

08000b60 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b082      	sub	sp, #8
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]

  	if(current_menu == MIDI_MODIFY){
 8000b68:	4b07      	ldr	r3, [pc, #28]	@ (8000b88 <HAL_UART_RxCpltCallback+0x28>)
 8000b6a:	781b      	ldrb	r3, [r3, #0]
 8000b6c:	2b01      	cmp	r3, #1
 8000b6e:	d106      	bne.n	8000b7e <HAL_UART_RxCpltCallback+0x1e>
  		HAL_UART_Receive_IT(&huart2, midi_rx_buff_ptr, 3);
 8000b70:	4b06      	ldr	r3, [pc, #24]	@ (8000b8c <HAL_UART_RxCpltCallback+0x2c>)
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	2203      	movs	r2, #3
 8000b76:	4619      	mov	r1, r3
 8000b78:	4805      	ldr	r0, [pc, #20]	@ (8000b90 <HAL_UART_RxCpltCallback+0x30>)
 8000b7a:	f004 fd72 	bl	8005662 <HAL_UART_Receive_IT>
  	}

}
 8000b7e:	bf00      	nop
 8000b80:	3708      	adds	r7, #8
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	bf00      	nop
 8000b88:	20000008 	.word	0x20000008
 8000b8c:	2000000c 	.word	0x2000000c
 8000b90:	20000314 	.word	0x20000314

08000b94 <StartDefaultTask>:
  * @retval None
  */

/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b082      	sub	sp, #8
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8000b9c:	f00b fb24 	bl	800c1e8 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  osDelay(100);
 8000ba0:	2064      	movs	r0, #100	@ 0x64
 8000ba2:	f007 f941 	bl	8007e28 <osDelay>
 8000ba6:	e7fb      	b.n	8000ba0 <StartDefaultTask+0xc>

08000ba8 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 8000ba8:	b5b0      	push	{r4, r5, r7, lr}
 8000baa:	b092      	sub	sp, #72	@ 0x48
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
	__HAL_TIM_SET_COUNTER(&htim3,tempo_counter);
 8000bb0:	4b30      	ldr	r3, [pc, #192]	@ (8000c74 <StartTask02+0xcc>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	4a30      	ldr	r2, [pc, #192]	@ (8000c78 <StartTask02+0xd0>)
 8000bb6:	6812      	ldr	r2, [r2, #0]
 8000bb8:	625a      	str	r2, [r3, #36]	@ 0x24
	__HAL_TIM_SET_COUNTER(&htim4,current_menu*4);
 8000bba:	4b30      	ldr	r3, [pc, #192]	@ (8000c7c <StartTask02+0xd4>)
 8000bbc:	781b      	ldrb	r3, [r3, #0]
 8000bbe:	009a      	lsls	r2, r3, #2
 8000bc0:	4b2f      	ldr	r3, [pc, #188]	@ (8000c80 <StartTask02+0xd8>)
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	625a      	str	r2, [r3, #36]	@ 0x24
  /* Infinite loop */
  for(;;)
  {
     //Romagnetics code
     //Menu
	menu_change(&htim4, &current_menu);
 8000bc6:	492d      	ldr	r1, [pc, #180]	@ (8000c7c <StartTask02+0xd4>)
 8000bc8:	482d      	ldr	r0, [pc, #180]	@ (8000c80 <StartTask02+0xd8>)
 8000bca:	f000 f8b9 	bl	8000d40 <menu_change>
  	if(current_menu == MIDI_TEMPO){
 8000bce:	4b2b      	ldr	r3, [pc, #172]	@ (8000c7c <StartTask02+0xd4>)
 8000bd0:	781b      	ldrb	r3, [r3, #0]
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d115      	bne.n	8000c02 <StartTask02+0x5a>
  	  screen_driver_Fill(Black);
 8000bd6:	2000      	movs	r0, #0
 8000bd8:	f000 fac4 	bl	8001164 <screen_driver_Fill>
  	  char message_midi_tempo[20] = "Send Midi Tempo    ";
 8000bdc:	4b29      	ldr	r3, [pc, #164]	@ (8000c84 <StartTask02+0xdc>)
 8000bde:	f107 0434 	add.w	r4, r7, #52	@ 0x34
 8000be2:	461d      	mov	r5, r3
 8000be4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000be6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000be8:	682b      	ldr	r3, [r5, #0]
 8000bea:	6023      	str	r3, [r4, #0]
  	  menu_display(&Font_6x8, &message_midi_tempo);
 8000bec:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8000bf0:	4619      	mov	r1, r3
 8000bf2:	4825      	ldr	r0, [pc, #148]	@ (8000c88 <StartTask02+0xe0>)
 8000bf4:	f000 f886 	bl	8000d04 <menu_display>
	  midi_tempo_counter(&htim3,  &Font_16x24);
 8000bf8:	4924      	ldr	r1, [pc, #144]	@ (8000c8c <StartTask02+0xe4>)
 8000bfa:	481e      	ldr	r0, [pc, #120]	@ (8000c74 <StartTask02+0xcc>)
 8000bfc:	f000 f99c 	bl	8000f38 <midi_tempo_counter>
 8000c00:	e034      	b.n	8000c6c <StartTask02+0xc4>
    }
  	else if(current_menu == MIDI_MODIFY){
 8000c02:	4b1e      	ldr	r3, [pc, #120]	@ (8000c7c <StartTask02+0xd4>)
 8000c04:	781b      	ldrb	r3, [r3, #0]
 8000c06:	2b01      	cmp	r3, #1
 8000c08:	d119      	bne.n	8000c3e <StartTask02+0x96>
  		screen_driver_Fill(Black);
 8000c0a:	2000      	movs	r0, #0
 8000c0c:	f000 faaa 	bl	8001164 <screen_driver_Fill>
    	char message_midi_modify[20] = "Midi Modify         ";
 8000c10:	4b1f      	ldr	r3, [pc, #124]	@ (8000c90 <StartTask02+0xe8>)
 8000c12:	f107 0420 	add.w	r4, r7, #32
 8000c16:	461d      	mov	r5, r3
 8000c18:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c1a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c1c:	682b      	ldr	r3, [r5, #0]
 8000c1e:	6023      	str	r3, [r4, #0]
    	menu_display(&Font_6x8, &message_midi_modify);
 8000c20:	f107 0320 	add.w	r3, r7, #32
 8000c24:	4619      	mov	r1, r3
 8000c26:	4818      	ldr	r0, [pc, #96]	@ (8000c88 <StartTask02+0xe0>)
 8000c28:	f000 f86c 	bl	8000d04 <menu_display>
    	display_incoming_midi(midi_rx_buff_ptr, &Font_6x8);
 8000c2c:	4b19      	ldr	r3, [pc, #100]	@ (8000c94 <StartTask02+0xec>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	4915      	ldr	r1, [pc, #84]	@ (8000c88 <StartTask02+0xe0>)
 8000c32:	4618      	mov	r0, r3
 8000c34:	f000 f8a2 	bl	8000d7c <display_incoming_midi>
  	    screen_driver_UpdateScreen();
 8000c38:	f000 faac 	bl	8001194 <screen_driver_UpdateScreen>
 8000c3c:	e016      	b.n	8000c6c <StartTask02+0xc4>
    }
  	else if(current_menu == SETTINGS){
 8000c3e:	4b0f      	ldr	r3, [pc, #60]	@ (8000c7c <StartTask02+0xd4>)
 8000c40:	781b      	ldrb	r3, [r3, #0]
 8000c42:	2b02      	cmp	r3, #2
 8000c44:	d112      	bne.n	8000c6c <StartTask02+0xc4>
  		screen_driver_Fill(Black);
 8000c46:	2000      	movs	r0, #0
 8000c48:	f000 fa8c 	bl	8001164 <screen_driver_Fill>
    	char message_settings[20] = "Settings            ";
 8000c4c:	4b12      	ldr	r3, [pc, #72]	@ (8000c98 <StartTask02+0xf0>)
 8000c4e:	f107 040c 	add.w	r4, r7, #12
 8000c52:	461d      	mov	r5, r3
 8000c54:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c56:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c58:	682b      	ldr	r3, [r5, #0]
 8000c5a:	6023      	str	r3, [r4, #0]
    	menu_display(&Font_6x8, &message_settings);
 8000c5c:	f107 030c 	add.w	r3, r7, #12
 8000c60:	4619      	mov	r1, r3
 8000c62:	4809      	ldr	r0, [pc, #36]	@ (8000c88 <StartTask02+0xe0>)
 8000c64:	f000 f84e 	bl	8000d04 <menu_display>
  	    screen_driver_UpdateScreen();
 8000c68:	f000 fa94 	bl	8001194 <screen_driver_UpdateScreen>
    }

	osDelay(10);
 8000c6c:	200a      	movs	r0, #10
 8000c6e:	f007 f8db 	bl	8007e28 <osDelay>
	menu_change(&htim4, &current_menu);
 8000c72:	e7a8      	b.n	8000bc6 <StartTask02+0x1e>
 8000c74:	2000023c 	.word	0x2000023c
 8000c78:	20000000 	.word	0x20000000
 8000c7c:	20000008 	.word	0x20000008
 8000c80:	20000284 	.word	0x20000284
 8000c84:	0800d594 	.word	0x0800d594
 8000c88:	0800ee7c 	.word	0x0800ee7c
 8000c8c:	0800ee88 	.word	0x0800ee88
 8000c90:	0800d5a8 	.word	0x0800d5a8
 8000c94:	2000000c 	.word	0x2000000c
 8000c98:	0800d5bc 	.word	0x0800d5bc

08000c9c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000c9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c9e:	b093      	sub	sp, #76	@ 0x4c
 8000ca0:	af10      	add	r7, sp, #64	@ 0x40
 8000ca2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1)
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	4a10      	ldr	r2, [pc, #64]	@ (8000cec <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000caa:	4293      	cmp	r3, r2
 8000cac:	d101      	bne.n	8000cb2 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8000cae:	f000 ff75 	bl	8001b9c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  //Romagnetics code

  if (htim->Instance == TIM2) {
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000cba:	d113      	bne.n	8000ce4 <HAL_TIM_PeriodElapsedCallback+0x48>

	send_midi_to_midi_out(huart2, &tempo_click_rate);
 8000cbc:	4e0c      	ldr	r6, [pc, #48]	@ (8000cf0 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8000cbe:	4b0d      	ldr	r3, [pc, #52]	@ (8000cf4 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8000cc0:	930e      	str	r3, [sp, #56]	@ 0x38
 8000cc2:	466d      	mov	r5, sp
 8000cc4:	f106 0410 	add.w	r4, r6, #16
 8000cc8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000cca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000ccc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000cce:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000cd0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000cd2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000cd4:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000cd8:	e885 0003 	stmia.w	r5, {r0, r1}
 8000cdc:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000ce0:	f000 f89a 	bl	8000e18 <send_midi_to_midi_out>
  }


  /* USER CODE END Callback 1 */
}
 8000ce4:	bf00      	nop
 8000ce6:	370c      	adds	r7, #12
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000cec:	40010000 	.word	0x40010000
 8000cf0:	20000314 	.word	0x20000314
 8000cf4:	20000004 	.word	0x20000004

08000cf8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cfc:	b672      	cpsid	i
}
 8000cfe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d00:	bf00      	nop
 8000d02:	e7fd      	b.n	8000d00 <Error_Handler+0x8>

08000d04 <menu_display>:


#include "menu.h"


void menu_display(const screen_driver_Font_t * font, char (* message)[20]){
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b084      	sub	sp, #16
 8000d08:	af02      	add	r7, sp, #8
 8000d0a:	6078      	str	r0, [r7, #4]
 8000d0c:	6039      	str	r1, [r7, #0]
	screen_driver_Line(0, 15, 127, 15, White);
 8000d0e:	2301      	movs	r3, #1
 8000d10:	9300      	str	r3, [sp, #0]
 8000d12:	230f      	movs	r3, #15
 8000d14:	227f      	movs	r2, #127	@ 0x7f
 8000d16:	210f      	movs	r1, #15
 8000d18:	2000      	movs	r0, #0
 8000d1a:	f000 fb85 	bl	8001428 <screen_driver_Line>
	screen_driver_SetCursor(1, 1);
 8000d1e:	2101      	movs	r1, #1
 8000d20:	2001      	movs	r0, #1
 8000d22:	f000 fb69 	bl	80013f8 <screen_driver_SetCursor>
	screen_driver_WriteString(*message, *font , White);
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	2201      	movs	r2, #1
 8000d2a:	9200      	str	r2, [sp, #0]
 8000d2c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000d2e:	6838      	ldr	r0, [r7, #0]
 8000d30:	f000 fb3c 	bl	80013ac <screen_driver_WriteString>
	screen_driver_UpdateScreen();
 8000d34:	f000 fa2e 	bl	8001194 <screen_driver_UpdateScreen>
}
 8000d38:	bf00      	nop
 8000d3a:	3708      	adds	r7, #8
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	bd80      	pop	{r7, pc}

08000d40 <menu_change>:



void menu_change(TIM_HandleTypeDef * timer, uint8_t * current_menu){
 8000d40:	b480      	push	{r7}
 8000d42:	b085      	sub	sp, #20
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
 8000d48:	6039      	str	r1, [r7, #0]
	  uint8_t current_menu_counter = __HAL_TIM_GET_COUNTER(timer);
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000d50:	73fb      	strb	r3, [r7, #15]
	  if (current_menu_counter > 9 && current_menu_counter < 60000)
 8000d52:	7bfb      	ldrb	r3, [r7, #15]
 8000d54:	2b09      	cmp	r3, #9
 8000d56:	d905      	bls.n	8000d64 <menu_change+0x24>
	  {
	    __HAL_TIM_SET_COUNTER(timer,8);
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	2208      	movs	r2, #8
 8000d5e:	625a      	str	r2, [r3, #36]	@ 0x24
	    current_menu_counter = 8;
 8000d60:	2308      	movs	r3, #8
 8000d62:	73fb      	strb	r3, [r7, #15]
	  else if (current_menu_counter > 60000)
	  {
	    __HAL_TIM_SET_COUNTER(timer,0);
	    current_menu_counter = 0;
	  }
	  *current_menu = current_menu_counter/4;
 8000d64:	7bfb      	ldrb	r3, [r7, #15]
 8000d66:	089b      	lsrs	r3, r3, #2
 8000d68:	b2da      	uxtb	r2, r3
 8000d6a:	683b      	ldr	r3, [r7, #0]
 8000d6c:	701a      	strb	r2, [r3, #0]
}
 8000d6e:	bf00      	nop
 8000d70:	3714      	adds	r7, #20
 8000d72:	46bd      	mov	sp, r7
 8000d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d78:	4770      	bx	lr
	...

08000d7c <display_incoming_midi>:
#include <stdio.h>
#include <stdint.h>



void display_incoming_midi(uint8_t * midi_rx_buff_ptr, const screen_driver_Font_t * font){
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b08c      	sub	sp, #48	@ 0x30
 8000d80:	af02      	add	r7, sp, #8
 8000d82:	6078      	str	r0, [r7, #4]
 8000d84:	6039      	str	r1, [r7, #0]


			uint8_t midi_one_byte_uint = *midi_rx_buff_ptr;
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	781b      	ldrb	r3, [r3, #0]
 8000d8a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			uint8_t midi_two_byte_uint = *(midi_rx_buff_ptr + 1);
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	785b      	ldrb	r3, [r3, #1]
 8000d92:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
			uint8_t midi_three_byte_uint = *(midi_rx_buff_ptr + 2);
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	789b      	ldrb	r3, [r3, #2]
 8000d9a:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

			char midi_one_byte_hex[3];
			char midi_two_byte_hex[3];
			char midi_three_byte_hex[3];

			sprintf(midi_one_byte_hex, "%02X", midi_one_byte_uint);
 8000d9e:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8000da2:	f107 0320 	add.w	r3, r7, #32
 8000da6:	491a      	ldr	r1, [pc, #104]	@ (8000e10 <display_incoming_midi+0x94>)
 8000da8:	4618      	mov	r0, r3
 8000daa:	f00b fedd 	bl	800cb68 <siprintf>
			sprintf(midi_two_byte_hex, "%02X", midi_two_byte_uint);
 8000dae:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8000db2:	f107 031c 	add.w	r3, r7, #28
 8000db6:	4916      	ldr	r1, [pc, #88]	@ (8000e10 <display_incoming_midi+0x94>)
 8000db8:	4618      	mov	r0, r3
 8000dba:	f00b fed5 	bl	800cb68 <siprintf>
			sprintf(midi_three_byte_hex, "%02X", midi_three_byte_uint);
 8000dbe:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 8000dc2:	f107 0318 	add.w	r3, r7, #24
 8000dc6:	4912      	ldr	r1, [pc, #72]	@ (8000e10 <display_incoming_midi+0x94>)
 8000dc8:	4618      	mov	r0, r3
 8000dca:	f00b fecd 	bl	800cb68 <siprintf>

		    char byte_print_hex[11];
		    snprintf(byte_print_hex, sizeof(byte_print_hex), "%s %s %s", midi_one_byte_hex, midi_two_byte_hex, midi_three_byte_hex);
 8000dce:	f107 0220 	add.w	r2, r7, #32
 8000dd2:	f107 000c 	add.w	r0, r7, #12
 8000dd6:	f107 0318 	add.w	r3, r7, #24
 8000dda:	9301      	str	r3, [sp, #4]
 8000ddc:	f107 031c 	add.w	r3, r7, #28
 8000de0:	9300      	str	r3, [sp, #0]
 8000de2:	4613      	mov	r3, r2
 8000de4:	4a0b      	ldr	r2, [pc, #44]	@ (8000e14 <display_incoming_midi+0x98>)
 8000de6:	210b      	movs	r1, #11
 8000de8:	f00b fe88 	bl	800cafc <sniprintf>


			//screen_driver_WriteString(byte_print_hex, *font , White);
			screen_driver_SetCursor(50, 50);
 8000dec:	2132      	movs	r1, #50	@ 0x32
 8000dee:	2032      	movs	r0, #50	@ 0x32
 8000df0:	f000 fb02 	bl	80013f8 <screen_driver_SetCursor>
			screen_driver_WriteString(byte_print_hex, *font , White);
 8000df4:	683b      	ldr	r3, [r7, #0]
 8000df6:	f107 000c 	add.w	r0, r7, #12
 8000dfa:	2201      	movs	r2, #1
 8000dfc:	9200      	str	r2, [sp, #0]
 8000dfe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000e00:	f000 fad4 	bl	80013ac <screen_driver_WriteString>
			screen_driver_UpdateScreen();
 8000e04:	f000 f9c6 	bl	8001194 <screen_driver_UpdateScreen>

}
 8000e08:	bf00      	nop
 8000e0a:	3728      	adds	r7, #40	@ 0x28
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	bd80      	pop	{r7, pc}
 8000e10:	0800d5d0 	.word	0x0800d5d0
 8000e14:	0800d5d8 	.word	0x0800d5d8

08000e18 <send_midi_to_midi_out>:
extern uint32_t tempo_counter;
extern uint32_t tempo_click_rate;



void send_midi_to_midi_out(UART_HandleTypeDef huart_ptr, uint32_t *tempo_click_rate_ptr){
 8000e18:	b084      	sub	sp, #16
 8000e1a:	b580      	push	{r7, lr}
 8000e1c:	b082      	sub	sp, #8
 8000e1e:	af00      	add	r7, sp, #0
 8000e20:	f107 0c10 	add.w	ip, r7, #16
 8000e24:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	  uint8_t clock_send_tempo[3]  = {0xf8, 0x00, 0x00};
 8000e28:	4a12      	ldr	r2, [pc, #72]	@ (8000e74 <send_midi_to_midi_out+0x5c>)
 8000e2a:	1d3b      	adds	r3, r7, #4
 8000e2c:	6812      	ldr	r2, [r2, #0]
 8000e2e:	4611      	mov	r1, r2
 8000e30:	8019      	strh	r1, [r3, #0]
 8000e32:	3302      	adds	r3, #2
 8000e34:	0c12      	lsrs	r2, r2, #16
 8000e36:	701a      	strb	r2, [r3, #0]
	  HAL_UART_Transmit(&huart_ptr, clock_send_tempo, 3, 1000);
 8000e38:	1d39      	adds	r1, r7, #4
 8000e3a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e3e:	2203      	movs	r2, #3
 8000e40:	f107 0010 	add.w	r0, r7, #16
 8000e44:	f004 fb82 	bl	800554c <HAL_UART_Transmit>
	  //Adjusting the tempo if needed
	  if (TIM2->ARR != *tempo_click_rate_ptr){
 8000e48:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000e4c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000e4e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	429a      	cmp	r2, r3
 8000e54:	d004      	beq.n	8000e60 <send_midi_to_midi_out+0x48>
		  TIM2->ARR = *tempo_click_rate_ptr;
 8000e56:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000e5a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	62d3      	str	r3, [r2, #44]	@ 0x2c
	  }
	  osDelay(1);
 8000e60:	2001      	movs	r0, #1
 8000e62:	f006 ffe1 	bl	8007e28 <osDelay>
}
 8000e66:	bf00      	nop
 8000e68:	3708      	adds	r7, #8
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000e70:	b004      	add	sp, #16
 8000e72:	4770      	bx	lr
 8000e74:	0800d5e4 	.word	0x0800d5e4

08000e78 <mt_press_btn3>:


//Interrupter method. Do not add delay
void mt_press_btn3(UART_HandleTypeDef * uart, TIM_HandleTypeDef * timer, const screen_driver_Font_t * font){
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b088      	sub	sp, #32
 8000e7c:	af02      	add	r7, sp, #8
 8000e7e:	60f8      	str	r0, [r7, #12]
 8000e80:	60b9      	str	r1, [r7, #8]
 8000e82:	607a      	str	r2, [r7, #4]
	//Clock start and starting the timer
		uint8_t clock_start[3] = {0xfa, 0x00, 0x00};
 8000e84:	4a12      	ldr	r2, [pc, #72]	@ (8000ed0 <mt_press_btn3+0x58>)
 8000e86:	f107 0314 	add.w	r3, r7, #20
 8000e8a:	6812      	ldr	r2, [r2, #0]
 8000e8c:	4611      	mov	r1, r2
 8000e8e:	8019      	strh	r1, [r3, #0]
 8000e90:	3302      	adds	r3, #2
 8000e92:	0c12      	lsrs	r2, r2, #16
 8000e94:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit(uart, clock_start, 3, 1000);
 8000e96:	f107 0114 	add.w	r1, r7, #20
 8000e9a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e9e:	2203      	movs	r2, #3
 8000ea0:	68f8      	ldr	r0, [r7, #12]
 8000ea2:	f004 fb53 	bl	800554c <HAL_UART_Transmit>
		HAL_TIM_Base_Start_IT(timer);
 8000ea6:	68b8      	ldr	r0, [r7, #8]
 8000ea8:	f003 fd8e 	bl	80049c8 <HAL_TIM_Base_Start_IT>
	//Screen update
	screen_driver_SetCursor(30, 80);
 8000eac:	2150      	movs	r1, #80	@ 0x50
 8000eae:	201e      	movs	r0, #30
 8000eb0:	f000 faa2 	bl	80013f8 <screen_driver_SetCursor>
	screen_driver_WriteString("Tempo On   ", *font , White); // @suppress("Symbol is not resolved")
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	2201      	movs	r2, #1
 8000eb8:	9200      	str	r2, [sp, #0]
 8000eba:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000ebc:	4805      	ldr	r0, [pc, #20]	@ (8000ed4 <mt_press_btn3+0x5c>)
 8000ebe:	f000 fa75 	bl	80013ac <screen_driver_WriteString>
	screen_driver_UpdateScreen();
 8000ec2:	f000 f967 	bl	8001194 <screen_driver_UpdateScreen>
}
 8000ec6:	bf00      	nop
 8000ec8:	3718      	adds	r7, #24
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bd80      	pop	{r7, pc}
 8000ece:	bf00      	nop
 8000ed0:	0800d5f4 	.word	0x0800d5f4
 8000ed4:	0800d5e8 	.word	0x0800d5e8

08000ed8 <mt_press_btn4>:


//Interrupter method. Do not add delay
void mt_press_btn4(UART_HandleTypeDef * uart, TIM_HandleTypeDef * timer, const screen_driver_Font_t * font){
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b088      	sub	sp, #32
 8000edc:	af02      	add	r7, sp, #8
 8000ede:	60f8      	str	r0, [r7, #12]
 8000ee0:	60b9      	str	r1, [r7, #8]
 8000ee2:	607a      	str	r2, [r7, #4]
	//Stopping the timer and sending stop message
		HAL_TIM_Base_Stop_IT(timer);
 8000ee4:	68b8      	ldr	r0, [r7, #8]
 8000ee6:	f003 fdd1 	bl	8004a8c <HAL_TIM_Base_Stop_IT>
		uint8_t clock_stop[3]  = {0xfc, 0x00, 0x00};
 8000eea:	4a11      	ldr	r2, [pc, #68]	@ (8000f30 <mt_press_btn4+0x58>)
 8000eec:	f107 0314 	add.w	r3, r7, #20
 8000ef0:	6812      	ldr	r2, [r2, #0]
 8000ef2:	4611      	mov	r1, r2
 8000ef4:	8019      	strh	r1, [r3, #0]
 8000ef6:	3302      	adds	r3, #2
 8000ef8:	0c12      	lsrs	r2, r2, #16
 8000efa:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit(uart, clock_stop, 3, 1000);
 8000efc:	f107 0114 	add.w	r1, r7, #20
 8000f00:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f04:	2203      	movs	r2, #3
 8000f06:	68f8      	ldr	r0, [r7, #12]
 8000f08:	f004 fb20 	bl	800554c <HAL_UART_Transmit>
	//Screen update
	screen_driver_SetCursor(30, 80);
 8000f0c:	2150      	movs	r1, #80	@ 0x50
 8000f0e:	201e      	movs	r0, #30
 8000f10:	f000 fa72 	bl	80013f8 <screen_driver_SetCursor>
	screen_driver_WriteString("Tempo Off   ", *font, White);
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	2201      	movs	r2, #1
 8000f18:	9200      	str	r2, [sp, #0]
 8000f1a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000f1c:	4805      	ldr	r0, [pc, #20]	@ (8000f34 <mt_press_btn4+0x5c>)
 8000f1e:	f000 fa45 	bl	80013ac <screen_driver_WriteString>
	screen_driver_UpdateScreen();
 8000f22:	f000 f937 	bl	8001194 <screen_driver_UpdateScreen>
}
 8000f26:	bf00      	nop
 8000f28:	3718      	adds	r7, #24
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}
 8000f2e:	bf00      	nop
 8000f30:	0800d608 	.word	0x0800d608
 8000f34:	0800d5f8 	.word	0x0800d5f8

08000f38 <midi_tempo_counter>:


//Font is 16x24
void midi_tempo_counter(TIM_HandleTypeDef * timer, const screen_driver_Font_t * font){
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b088      	sub	sp, #32
 8000f3c:	af02      	add	r7, sp, #8
 8000f3e:	6078      	str	r0, [r7, #4]
 8000f40:	6039      	str	r1, [r7, #0]
	  tempo_counter = __HAL_TIM_GET_COUNTER(timer);
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f48:	4a2d      	ldr	r2, [pc, #180]	@ (8001000 <midi_tempo_counter+0xc8>)
 8000f4a:	6013      	str	r3, [r2, #0]
	  tempo = tempo_counter / 4;
 8000f4c:	4b2c      	ldr	r3, [pc, #176]	@ (8001000 <midi_tempo_counter+0xc8>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	089b      	lsrs	r3, r3, #2
 8000f52:	4a2c      	ldr	r2, [pc, #176]	@ (8001004 <midi_tempo_counter+0xcc>)
 8000f54:	6013      	str	r3, [r2, #0]
	  tempo_click_rate = 600000/(tempo*24);
 8000f56:	4b2b      	ldr	r3, [pc, #172]	@ (8001004 <midi_tempo_counter+0xcc>)
 8000f58:	681a      	ldr	r2, [r3, #0]
 8000f5a:	4613      	mov	r3, r2
 8000f5c:	005b      	lsls	r3, r3, #1
 8000f5e:	4413      	add	r3, r2
 8000f60:	00db      	lsls	r3, r3, #3
 8000f62:	461a      	mov	r2, r3
 8000f64:	4b28      	ldr	r3, [pc, #160]	@ (8001008 <midi_tempo_counter+0xd0>)
 8000f66:	fbb3 f3f2 	udiv	r3, r3, r2
 8000f6a:	4a28      	ldr	r2, [pc, #160]	@ (800100c <midi_tempo_counter+0xd4>)
 8000f6c:	6013      	str	r3, [r2, #0]
	  if (tempo_counter > 60000  || tempo_counter < 120)
 8000f6e:	4b24      	ldr	r3, [pc, #144]	@ (8001000 <midi_tempo_counter+0xc8>)
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	f64e 2260 	movw	r2, #60000	@ 0xea60
 8000f76:	4293      	cmp	r3, r2
 8000f78:	d803      	bhi.n	8000f82 <midi_tempo_counter+0x4a>
 8000f7a:	4b21      	ldr	r3, [pc, #132]	@ (8001000 <midi_tempo_counter+0xc8>)
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	2b77      	cmp	r3, #119	@ 0x77
 8000f80:	d809      	bhi.n	8000f96 <midi_tempo_counter+0x5e>
	  {
	    __HAL_TIM_SET_COUNTER(timer,120);
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	2278      	movs	r2, #120	@ 0x78
 8000f88:	625a      	str	r2, [r3, #36]	@ 0x24
	    tempo =30;
 8000f8a:	4b1e      	ldr	r3, [pc, #120]	@ (8001004 <midi_tempo_counter+0xcc>)
 8000f8c:	221e      	movs	r2, #30
 8000f8e:	601a      	str	r2, [r3, #0]
	    tempo_click_rate = 208;
 8000f90:	4b1e      	ldr	r3, [pc, #120]	@ (800100c <midi_tempo_counter+0xd4>)
 8000f92:	22d0      	movs	r2, #208	@ 0xd0
 8000f94:	601a      	str	r2, [r3, #0]
	  }
	  if (tempo_counter > 1200)
 8000f96:	4b1a      	ldr	r3, [pc, #104]	@ (8001000 <midi_tempo_counter+0xc8>)
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	f5b3 6f96 	cmp.w	r3, #1200	@ 0x4b0
 8000f9e:	d90c      	bls.n	8000fba <midi_tempo_counter+0x82>
	  {
	    __HAL_TIM_SET_COUNTER(timer,1200);
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	f44f 6296 	mov.w	r2, #1200	@ 0x4b0
 8000fa8:	625a      	str	r2, [r3, #36]	@ 0x24
	    tempo =300;
 8000faa:	4b16      	ldr	r3, [pc, #88]	@ (8001004 <midi_tempo_counter+0xcc>)
 8000fac:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8000fb0:	601a      	str	r2, [r3, #0]
	    tempo_click_rate = 2083;
 8000fb2:	4b16      	ldr	r3, [pc, #88]	@ (800100c <midi_tempo_counter+0xd4>)
 8000fb4:	f640 0223 	movw	r2, #2083	@ 0x823
 8000fb8:	601a      	str	r2, [r3, #0]
	  }
	  char number_print[3];
	  itoa(tempo ,number_print,10);
 8000fba:	4b12      	ldr	r3, [pc, #72]	@ (8001004 <midi_tempo_counter+0xcc>)
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	f107 0314 	add.w	r3, r7, #20
 8000fc4:	220a      	movs	r2, #10
 8000fc6:	4619      	mov	r1, r3
 8000fc8:	f00b fd54 	bl	800ca74 <itoa>
	  //blank spaces are added to delete any remaining numbers on the screen
    char fullmessage[7];
    sprintf(fullmessage, "%s   ", number_print);
 8000fcc:	f107 0214 	add.w	r2, r7, #20
 8000fd0:	f107 030c 	add.w	r3, r7, #12
 8000fd4:	490e      	ldr	r1, [pc, #56]	@ (8001010 <midi_tempo_counter+0xd8>)
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	f00b fdc6 	bl	800cb68 <siprintf>
	screen_driver_SetCursor(48, 30);
 8000fdc:	211e      	movs	r1, #30
 8000fde:	2030      	movs	r0, #48	@ 0x30
 8000fe0:	f000 fa0a 	bl	80013f8 <screen_driver_SetCursor>
	screen_driver_WriteString(fullmessage, *font, White);
 8000fe4:	683b      	ldr	r3, [r7, #0]
 8000fe6:	f107 000c 	add.w	r0, r7, #12
 8000fea:	2201      	movs	r2, #1
 8000fec:	9200      	str	r2, [sp, #0]
 8000fee:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000ff0:	f000 f9dc 	bl	80013ac <screen_driver_WriteString>
	screen_driver_UpdateScreen();
 8000ff4:	f000 f8ce 	bl	8001194 <screen_driver_UpdateScreen>
}
 8000ff8:	bf00      	nop
 8000ffa:	3718      	adds	r7, #24
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bd80      	pop	{r7, pc}
 8001000:	20000000 	.word	0x20000000
 8001004:	20000010 	.word	0x20000010
 8001008:	000927c0 	.word	0x000927c0
 800100c:	20000004 	.word	0x20000004
 8001010:	0800d60c 	.word	0x0800d60c

08001014 <screen_driver_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(screen_driver_USE_I2C)

void screen_driver_Reset(void) {
 8001014:	b480      	push	{r7}
 8001016:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8001018:	bf00      	nop
 800101a:	46bd      	mov	sp, r7
 800101c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001020:	4770      	bx	lr
	...

08001024 <screen_driver_WriteCommand>:

// Send a byte to the command register
void screen_driver_WriteCommand(uint8_t byte) {
 8001024:	b580      	push	{r7, lr}
 8001026:	b086      	sub	sp, #24
 8001028:	af04      	add	r7, sp, #16
 800102a:	4603      	mov	r3, r0
 800102c:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&screen_driver_I2C_PORT, screen_driver_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 800102e:	f04f 33ff 	mov.w	r3, #4294967295
 8001032:	9302      	str	r3, [sp, #8]
 8001034:	2301      	movs	r3, #1
 8001036:	9301      	str	r3, [sp, #4]
 8001038:	1dfb      	adds	r3, r7, #7
 800103a:	9300      	str	r3, [sp, #0]
 800103c:	2301      	movs	r3, #1
 800103e:	2200      	movs	r2, #0
 8001040:	2178      	movs	r1, #120	@ 0x78
 8001042:	4803      	ldr	r0, [pc, #12]	@ (8001050 <screen_driver_WriteCommand+0x2c>)
 8001044:	f001 fa42 	bl	80024cc <HAL_I2C_Mem_Write>
}
 8001048:	bf00      	nop
 800104a:	3708      	adds	r7, #8
 800104c:	46bd      	mov	sp, r7
 800104e:	bd80      	pop	{r7, pc}
 8001050:	200001a0 	.word	0x200001a0

08001054 <screen_driver_WriteData>:

// Send data
void screen_driver_WriteData(uint8_t* buffer, size_t buff_size) {
 8001054:	b580      	push	{r7, lr}
 8001056:	b086      	sub	sp, #24
 8001058:	af04      	add	r7, sp, #16
 800105a:	6078      	str	r0, [r7, #4]
 800105c:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&screen_driver_I2C_PORT, screen_driver_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 800105e:	683b      	ldr	r3, [r7, #0]
 8001060:	b29b      	uxth	r3, r3
 8001062:	f04f 32ff 	mov.w	r2, #4294967295
 8001066:	9202      	str	r2, [sp, #8]
 8001068:	9301      	str	r3, [sp, #4]
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	9300      	str	r3, [sp, #0]
 800106e:	2301      	movs	r3, #1
 8001070:	2240      	movs	r2, #64	@ 0x40
 8001072:	2178      	movs	r1, #120	@ 0x78
 8001074:	4803      	ldr	r0, [pc, #12]	@ (8001084 <screen_driver_WriteData+0x30>)
 8001076:	f001 fa29 	bl	80024cc <HAL_I2C_Mem_Write>
}
 800107a:	bf00      	nop
 800107c:	3708      	adds	r7, #8
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}
 8001082:	bf00      	nop
 8001084:	200001a0 	.word	0x200001a0

08001088 <screen_driver_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void screen_driver_Init(void) {
 8001088:	b580      	push	{r7, lr}
 800108a:	af00      	add	r7, sp, #0
    // Reset OLED
    screen_driver_Reset();
 800108c:	f7ff ffc2 	bl	8001014 <screen_driver_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8001090:	2064      	movs	r0, #100	@ 0x64
 8001092:	f000 fda3 	bl	8001bdc <HAL_Delay>

    // Init OLED
    screen_driver_SetDisplayOn(0); //display off
 8001096:	2000      	movs	r0, #0
 8001098:	f000 fa46 	bl	8001528 <screen_driver_SetDisplayOn>

    screen_driver_WriteCommand(0x20); //Set Memory Addressing Mode
 800109c:	2020      	movs	r0, #32
 800109e:	f7ff ffc1 	bl	8001024 <screen_driver_WriteCommand>
    screen_driver_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 80010a2:	2000      	movs	r0, #0
 80010a4:	f7ff ffbe 	bl	8001024 <screen_driver_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    screen_driver_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80010a8:	20b0      	movs	r0, #176	@ 0xb0
 80010aa:	f7ff ffbb 	bl	8001024 <screen_driver_WriteCommand>

#ifdef screen_driver_MIRROR_VERT
    screen_driver_WriteCommand(0xC0); // Mirror vertically
#else
    screen_driver_WriteCommand(0xC8); //Set COM Output Scan Direction
 80010ae:	20c8      	movs	r0, #200	@ 0xc8
 80010b0:	f7ff ffb8 	bl	8001024 <screen_driver_WriteCommand>
#endif

#ifdef screen_driver_MIRROR_HORIZ
    screen_driver_WriteCommand(0xA0); // Mirror horizontally
#else
    screen_driver_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 80010b4:	20a1      	movs	r0, #161	@ 0xa1
 80010b6:	f7ff ffb5 	bl	8001024 <screen_driver_WriteCommand>

    //Default A1
    //Default C8
    //Default 20

    screen_driver_WriteCommand(0xA1);
 80010ba:	20a1      	movs	r0, #161	@ 0xa1
 80010bc:	f7ff ffb2 	bl	8001024 <screen_driver_WriteCommand>
    screen_driver_WriteCommand(0xC8);
 80010c0:	20c8      	movs	r0, #200	@ 0xc8
 80010c2:	f7ff ffaf 	bl	8001024 <screen_driver_WriteCommand>


    //Default low 00
    //Default high 10
    screen_driver_WriteCommand(0x00); //---set low column address
 80010c6:	2000      	movs	r0, #0
 80010c8:	f7ff ffac 	bl	8001024 <screen_driver_WriteCommand>
    screen_driver_WriteCommand(0x10); //---set high column address
 80010cc:	2010      	movs	r0, #16
 80010ce:	f7ff ffa9 	bl	8001024 <screen_driver_WriteCommand>

    screen_driver_WriteCommand(0x40); //--set start line address - CHECK
 80010d2:	2040      	movs	r0, #64	@ 0x40
 80010d4:	f7ff ffa6 	bl	8001024 <screen_driver_WriteCommand>

    screen_driver_SetContrast(0xFF);
 80010d8:	20ff      	movs	r0, #255	@ 0xff
 80010da:	f000 fa11 	bl	8001500 <screen_driver_SetContrast>


#ifdef screen_driver_INVERSE_COLOR
    screen_driver_WriteCommand(0xA7); //--set inverse color
#else
    screen_driver_WriteCommand(0xA6); //--set normal color
 80010de:	20a6      	movs	r0, #166	@ 0xa6
 80010e0:	f7ff ffa0 	bl	8001024 <screen_driver_WriteCommand>
// Set multiplex ratio.
#if (screen_driver_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    screen_driver_WriteCommand(0xFF);
#else
    screen_driver_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 80010e4:	20a8      	movs	r0, #168	@ 0xa8
 80010e6:	f7ff ff9d 	bl	8001024 <screen_driver_WriteCommand>
#endif

#if (screen_driver_HEIGHT == 32)
    screen_driver_WriteCommand(0x1F); //
#elif (screen_driver_HEIGHT == 64)
    screen_driver_WriteCommand(0x3F); //
 80010ea:	203f      	movs	r0, #63	@ 0x3f
 80010ec:	f7ff ff9a 	bl	8001024 <screen_driver_WriteCommand>
    screen_driver_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    screen_driver_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80010f0:	20a4      	movs	r0, #164	@ 0xa4
 80010f2:	f7ff ff97 	bl	8001024 <screen_driver_WriteCommand>

    screen_driver_WriteCommand(0xD3); //-set display offset - CHECK
 80010f6:	20d3      	movs	r0, #211	@ 0xd3
 80010f8:	f7ff ff94 	bl	8001024 <screen_driver_WriteCommand>
    screen_driver_WriteCommand(0x00); //-not offset
 80010fc:	2000      	movs	r0, #0
 80010fe:	f7ff ff91 	bl	8001024 <screen_driver_WriteCommand>

    screen_driver_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8001102:	20d5      	movs	r0, #213	@ 0xd5
 8001104:	f7ff ff8e 	bl	8001024 <screen_driver_WriteCommand>
    screen_driver_WriteCommand(0xF0); //--set divide ratio
 8001108:	20f0      	movs	r0, #240	@ 0xf0
 800110a:	f7ff ff8b 	bl	8001024 <screen_driver_WriteCommand>

    screen_driver_WriteCommand(0xD9); //--set pre-charge period
 800110e:	20d9      	movs	r0, #217	@ 0xd9
 8001110:	f7ff ff88 	bl	8001024 <screen_driver_WriteCommand>
    screen_driver_WriteCommand(0x22); //
 8001114:	2022      	movs	r0, #34	@ 0x22
 8001116:	f7ff ff85 	bl	8001024 <screen_driver_WriteCommand>

    screen_driver_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 800111a:	20da      	movs	r0, #218	@ 0xda
 800111c:	f7ff ff82 	bl	8001024 <screen_driver_WriteCommand>
#if (screen_driver_HEIGHT == 32)
    screen_driver_WriteCommand(0x02);
#elif (screen_driver_HEIGHT == 64)
    screen_driver_WriteCommand(0x12);
 8001120:	2012      	movs	r0, #18
 8001122:	f7ff ff7f 	bl	8001024 <screen_driver_WriteCommand>
    screen_driver_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    screen_driver_WriteCommand(0xDB); //--set vcomh
 8001126:	20db      	movs	r0, #219	@ 0xdb
 8001128:	f7ff ff7c 	bl	8001024 <screen_driver_WriteCommand>


    screen_driver_WriteCommand(0x8D); //--set DC-DC enable
 800112c:	208d      	movs	r0, #141	@ 0x8d
 800112e:	f7ff ff79 	bl	8001024 <screen_driver_WriteCommand>
    screen_driver_WriteCommand(0x14); //
 8001132:	2014      	movs	r0, #20
 8001134:	f7ff ff76 	bl	8001024 <screen_driver_WriteCommand>
    screen_driver_SetDisplayOn(1); //--turn on screen_driver panel
 8001138:	2001      	movs	r0, #1
 800113a:	f000 f9f5 	bl	8001528 <screen_driver_SetDisplayOn>

    // Clear screen
    screen_driver_Fill(Black);
 800113e:	2000      	movs	r0, #0
 8001140:	f000 f810 	bl	8001164 <screen_driver_Fill>
    
    // Flush buffer to screen
    screen_driver_UpdateScreen();
 8001144:	f000 f826 	bl	8001194 <screen_driver_UpdateScreen>
    
    // Set default values for screen object
    screen_driver.CurrentX = 0;
 8001148:	4b05      	ldr	r3, [pc, #20]	@ (8001160 <screen_driver_Init+0xd8>)
 800114a:	2200      	movs	r2, #0
 800114c:	801a      	strh	r2, [r3, #0]
    screen_driver.CurrentY = 0;
 800114e:	4b04      	ldr	r3, [pc, #16]	@ (8001160 <screen_driver_Init+0xd8>)
 8001150:	2200      	movs	r2, #0
 8001152:	805a      	strh	r2, [r3, #2]
    
    screen_driver.Initialized = 1;
 8001154:	4b02      	ldr	r3, [pc, #8]	@ (8001160 <screen_driver_Init+0xd8>)
 8001156:	2201      	movs	r2, #1
 8001158:	711a      	strb	r2, [r3, #4]
}
 800115a:	bf00      	nop
 800115c:	bd80      	pop	{r7, pc}
 800115e:	bf00      	nop
 8001160:	20000768 	.word	0x20000768

08001164 <screen_driver_Fill>:

/* Fill the whole screen with the given color */
void screen_driver_Fill(screen_driver_COLOR color) {
 8001164:	b580      	push	{r7, lr}
 8001166:	b082      	sub	sp, #8
 8001168:	af00      	add	r7, sp, #0
 800116a:	4603      	mov	r3, r0
 800116c:	71fb      	strb	r3, [r7, #7]
    memset(screen_driver_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(screen_driver_Buffer));
 800116e:	79fb      	ldrb	r3, [r7, #7]
 8001170:	2b00      	cmp	r3, #0
 8001172:	d101      	bne.n	8001178 <screen_driver_Fill+0x14>
 8001174:	2300      	movs	r3, #0
 8001176:	e000      	b.n	800117a <screen_driver_Fill+0x16>
 8001178:	23ff      	movs	r3, #255	@ 0xff
 800117a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800117e:	4619      	mov	r1, r3
 8001180:	4803      	ldr	r0, [pc, #12]	@ (8001190 <screen_driver_Fill+0x2c>)
 8001182:	f00b fd13 	bl	800cbac <memset>
}
 8001186:	bf00      	nop
 8001188:	3708      	adds	r7, #8
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	20000368 	.word	0x20000368

08001194 <screen_driver_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void screen_driver_UpdateScreen(void) {
 8001194:	b580      	push	{r7, lr}
 8001196:	b082      	sub	sp, #8
 8001198:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < screen_driver_HEIGHT/8; i++) {
 800119a:	2300      	movs	r3, #0
 800119c:	71fb      	strb	r3, [r7, #7]
 800119e:	e016      	b.n	80011ce <screen_driver_UpdateScreen+0x3a>
        screen_driver_WriteCommand(0xB0 + i); // Set the current RAM page address.
 80011a0:	79fb      	ldrb	r3, [r7, #7]
 80011a2:	3b50      	subs	r3, #80	@ 0x50
 80011a4:	b2db      	uxtb	r3, r3
 80011a6:	4618      	mov	r0, r3
 80011a8:	f7ff ff3c 	bl	8001024 <screen_driver_WriteCommand>
        screen_driver_WriteCommand(0x00 + screen_driver_X_OFFSET_LOWER);
 80011ac:	2000      	movs	r0, #0
 80011ae:	f7ff ff39 	bl	8001024 <screen_driver_WriteCommand>
        screen_driver_WriteCommand(0x10 + screen_driver_X_OFFSET_UPPER);
 80011b2:	2010      	movs	r0, #16
 80011b4:	f7ff ff36 	bl	8001024 <screen_driver_WriteCommand>
        screen_driver_WriteData(&screen_driver_Buffer[screen_driver_WIDTH*i],screen_driver_WIDTH);
 80011b8:	79fb      	ldrb	r3, [r7, #7]
 80011ba:	01db      	lsls	r3, r3, #7
 80011bc:	4a08      	ldr	r2, [pc, #32]	@ (80011e0 <screen_driver_UpdateScreen+0x4c>)
 80011be:	4413      	add	r3, r2
 80011c0:	2180      	movs	r1, #128	@ 0x80
 80011c2:	4618      	mov	r0, r3
 80011c4:	f7ff ff46 	bl	8001054 <screen_driver_WriteData>
    for(uint8_t i = 0; i < screen_driver_HEIGHT/8; i++) {
 80011c8:	79fb      	ldrb	r3, [r7, #7]
 80011ca:	3301      	adds	r3, #1
 80011cc:	71fb      	strb	r3, [r7, #7]
 80011ce:	79fb      	ldrb	r3, [r7, #7]
 80011d0:	2b07      	cmp	r3, #7
 80011d2:	d9e5      	bls.n	80011a0 <screen_driver_UpdateScreen+0xc>
    }
}
 80011d4:	bf00      	nop
 80011d6:	bf00      	nop
 80011d8:	3708      	adds	r7, #8
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	bf00      	nop
 80011e0:	20000368 	.word	0x20000368

080011e4 <screen_driver_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void screen_driver_DrawPixel(uint8_t x, uint8_t y, screen_driver_COLOR color) {
 80011e4:	b480      	push	{r7}
 80011e6:	b083      	sub	sp, #12
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	4603      	mov	r3, r0
 80011ec:	71fb      	strb	r3, [r7, #7]
 80011ee:	460b      	mov	r3, r1
 80011f0:	71bb      	strb	r3, [r7, #6]
 80011f2:	4613      	mov	r3, r2
 80011f4:	717b      	strb	r3, [r7, #5]
    if(x >= screen_driver_WIDTH || y >= screen_driver_HEIGHT) {
 80011f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	db3d      	blt.n	800127a <screen_driver_DrawPixel+0x96>
 80011fe:	79bb      	ldrb	r3, [r7, #6]
 8001200:	2b3f      	cmp	r3, #63	@ 0x3f
 8001202:	d83a      	bhi.n	800127a <screen_driver_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8001204:	797b      	ldrb	r3, [r7, #5]
 8001206:	2b01      	cmp	r3, #1
 8001208:	d11a      	bne.n	8001240 <screen_driver_DrawPixel+0x5c>
        screen_driver_Buffer[x + (y / 8) * screen_driver_WIDTH] |= 1 << (y % 8);
 800120a:	79fa      	ldrb	r2, [r7, #7]
 800120c:	79bb      	ldrb	r3, [r7, #6]
 800120e:	08db      	lsrs	r3, r3, #3
 8001210:	b2d8      	uxtb	r0, r3
 8001212:	4603      	mov	r3, r0
 8001214:	01db      	lsls	r3, r3, #7
 8001216:	4413      	add	r3, r2
 8001218:	4a1b      	ldr	r2, [pc, #108]	@ (8001288 <screen_driver_DrawPixel+0xa4>)
 800121a:	5cd3      	ldrb	r3, [r2, r3]
 800121c:	b25a      	sxtb	r2, r3
 800121e:	79bb      	ldrb	r3, [r7, #6]
 8001220:	f003 0307 	and.w	r3, r3, #7
 8001224:	2101      	movs	r1, #1
 8001226:	fa01 f303 	lsl.w	r3, r1, r3
 800122a:	b25b      	sxtb	r3, r3
 800122c:	4313      	orrs	r3, r2
 800122e:	b259      	sxtb	r1, r3
 8001230:	79fa      	ldrb	r2, [r7, #7]
 8001232:	4603      	mov	r3, r0
 8001234:	01db      	lsls	r3, r3, #7
 8001236:	4413      	add	r3, r2
 8001238:	b2c9      	uxtb	r1, r1
 800123a:	4a13      	ldr	r2, [pc, #76]	@ (8001288 <screen_driver_DrawPixel+0xa4>)
 800123c:	54d1      	strb	r1, [r2, r3]
 800123e:	e01d      	b.n	800127c <screen_driver_DrawPixel+0x98>
    } else { 
        screen_driver_Buffer[x + (y / 8) * screen_driver_WIDTH] &= ~(1 << (y % 8));
 8001240:	79fa      	ldrb	r2, [r7, #7]
 8001242:	79bb      	ldrb	r3, [r7, #6]
 8001244:	08db      	lsrs	r3, r3, #3
 8001246:	b2d8      	uxtb	r0, r3
 8001248:	4603      	mov	r3, r0
 800124a:	01db      	lsls	r3, r3, #7
 800124c:	4413      	add	r3, r2
 800124e:	4a0e      	ldr	r2, [pc, #56]	@ (8001288 <screen_driver_DrawPixel+0xa4>)
 8001250:	5cd3      	ldrb	r3, [r2, r3]
 8001252:	b25a      	sxtb	r2, r3
 8001254:	79bb      	ldrb	r3, [r7, #6]
 8001256:	f003 0307 	and.w	r3, r3, #7
 800125a:	2101      	movs	r1, #1
 800125c:	fa01 f303 	lsl.w	r3, r1, r3
 8001260:	b25b      	sxtb	r3, r3
 8001262:	43db      	mvns	r3, r3
 8001264:	b25b      	sxtb	r3, r3
 8001266:	4013      	ands	r3, r2
 8001268:	b259      	sxtb	r1, r3
 800126a:	79fa      	ldrb	r2, [r7, #7]
 800126c:	4603      	mov	r3, r0
 800126e:	01db      	lsls	r3, r3, #7
 8001270:	4413      	add	r3, r2
 8001272:	b2c9      	uxtb	r1, r1
 8001274:	4a04      	ldr	r2, [pc, #16]	@ (8001288 <screen_driver_DrawPixel+0xa4>)
 8001276:	54d1      	strb	r1, [r2, r3]
 8001278:	e000      	b.n	800127c <screen_driver_DrawPixel+0x98>
        return;
 800127a:	bf00      	nop
    }
}
 800127c:	370c      	adds	r7, #12
 800127e:	46bd      	mov	sp, r7
 8001280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001284:	4770      	bx	lr
 8001286:	bf00      	nop
 8001288:	20000368 	.word	0x20000368

0800128c <screen_driver_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char screen_driver_WriteChar(char ch, screen_driver_Font_t Font, screen_driver_COLOR color) {
 800128c:	b590      	push	{r4, r7, lr}
 800128e:	b089      	sub	sp, #36	@ 0x24
 8001290:	af00      	add	r7, sp, #0
 8001292:	4604      	mov	r4, r0
 8001294:	4638      	mov	r0, r7
 8001296:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 800129a:	4623      	mov	r3, r4
 800129c:	73fb      	strb	r3, [r7, #15]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 800129e:	7bfb      	ldrb	r3, [r7, #15]
 80012a0:	2b1f      	cmp	r3, #31
 80012a2:	d902      	bls.n	80012aa <screen_driver_WriteChar+0x1e>
 80012a4:	7bfb      	ldrb	r3, [r7, #15]
 80012a6:	2b7e      	cmp	r3, #126	@ 0x7e
 80012a8:	d901      	bls.n	80012ae <screen_driver_WriteChar+0x22>
        return 0;
 80012aa:	2300      	movs	r3, #0
 80012ac:	e077      	b.n	800139e <screen_driver_WriteChar+0x112>
    
    // Check remaining space on current line
    if (screen_driver_WIDTH < (screen_driver.CurrentX + Font.width) ||
 80012ae:	4b3e      	ldr	r3, [pc, #248]	@ (80013a8 <screen_driver_WriteChar+0x11c>)
 80012b0:	881b      	ldrh	r3, [r3, #0]
 80012b2:	461a      	mov	r2, r3
 80012b4:	783b      	ldrb	r3, [r7, #0]
 80012b6:	4413      	add	r3, r2
 80012b8:	2b80      	cmp	r3, #128	@ 0x80
 80012ba:	dc06      	bgt.n	80012ca <screen_driver_WriteChar+0x3e>
        screen_driver_HEIGHT < (screen_driver.CurrentY + Font.height))
 80012bc:	4b3a      	ldr	r3, [pc, #232]	@ (80013a8 <screen_driver_WriteChar+0x11c>)
 80012be:	885b      	ldrh	r3, [r3, #2]
 80012c0:	461a      	mov	r2, r3
 80012c2:	787b      	ldrb	r3, [r7, #1]
 80012c4:	4413      	add	r3, r2
    if (screen_driver_WIDTH < (screen_driver.CurrentX + Font.width) ||
 80012c6:	2b40      	cmp	r3, #64	@ 0x40
 80012c8:	dd01      	ble.n	80012ce <screen_driver_WriteChar+0x42>
    {
        // Not enough space on current line
        return 0;
 80012ca:	2300      	movs	r3, #0
 80012cc:	e067      	b.n	800139e <screen_driver_WriteChar+0x112>
    }
    
    // Use the font to write
    for(i = 0; i < Font.height; i++) {
 80012ce:	2300      	movs	r3, #0
 80012d0:	61fb      	str	r3, [r7, #28]
 80012d2:	e04e      	b.n	8001372 <screen_driver_WriteChar+0xe6>
        b = Font.data[(ch - 32) * Font.height + i];
 80012d4:	687a      	ldr	r2, [r7, #4]
 80012d6:	7bfb      	ldrb	r3, [r7, #15]
 80012d8:	3b20      	subs	r3, #32
 80012da:	7879      	ldrb	r1, [r7, #1]
 80012dc:	fb01 f303 	mul.w	r3, r1, r3
 80012e0:	4619      	mov	r1, r3
 80012e2:	69fb      	ldr	r3, [r7, #28]
 80012e4:	440b      	add	r3, r1
 80012e6:	005b      	lsls	r3, r3, #1
 80012e8:	4413      	add	r3, r2
 80012ea:	881b      	ldrh	r3, [r3, #0]
 80012ec:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.width; j++) {
 80012ee:	2300      	movs	r3, #0
 80012f0:	61bb      	str	r3, [r7, #24]
 80012f2:	e036      	b.n	8001362 <screen_driver_WriteChar+0xd6>
            if((b << j) & 0x8000)  {
 80012f4:	697a      	ldr	r2, [r7, #20]
 80012f6:	69bb      	ldr	r3, [r7, #24]
 80012f8:	fa02 f303 	lsl.w	r3, r2, r3
 80012fc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001300:	2b00      	cmp	r3, #0
 8001302:	d013      	beq.n	800132c <screen_driver_WriteChar+0xa0>
                screen_driver_DrawPixel(screen_driver.CurrentX + j, (screen_driver.CurrentY + i), (screen_driver_COLOR) color);
 8001304:	4b28      	ldr	r3, [pc, #160]	@ (80013a8 <screen_driver_WriteChar+0x11c>)
 8001306:	881b      	ldrh	r3, [r3, #0]
 8001308:	b2da      	uxtb	r2, r3
 800130a:	69bb      	ldr	r3, [r7, #24]
 800130c:	b2db      	uxtb	r3, r3
 800130e:	4413      	add	r3, r2
 8001310:	b2d8      	uxtb	r0, r3
 8001312:	4b25      	ldr	r3, [pc, #148]	@ (80013a8 <screen_driver_WriteChar+0x11c>)
 8001314:	885b      	ldrh	r3, [r3, #2]
 8001316:	b2da      	uxtb	r2, r3
 8001318:	69fb      	ldr	r3, [r7, #28]
 800131a:	b2db      	uxtb	r3, r3
 800131c:	4413      	add	r3, r2
 800131e:	b2db      	uxtb	r3, r3
 8001320:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8001324:	4619      	mov	r1, r3
 8001326:	f7ff ff5d 	bl	80011e4 <screen_driver_DrawPixel>
 800132a:	e017      	b.n	800135c <screen_driver_WriteChar+0xd0>
            } else {
                screen_driver_DrawPixel(screen_driver.CurrentX + j, (screen_driver.CurrentY + i), (screen_driver_COLOR)!color);
 800132c:	4b1e      	ldr	r3, [pc, #120]	@ (80013a8 <screen_driver_WriteChar+0x11c>)
 800132e:	881b      	ldrh	r3, [r3, #0]
 8001330:	b2da      	uxtb	r2, r3
 8001332:	69bb      	ldr	r3, [r7, #24]
 8001334:	b2db      	uxtb	r3, r3
 8001336:	4413      	add	r3, r2
 8001338:	b2d8      	uxtb	r0, r3
 800133a:	4b1b      	ldr	r3, [pc, #108]	@ (80013a8 <screen_driver_WriteChar+0x11c>)
 800133c:	885b      	ldrh	r3, [r3, #2]
 800133e:	b2da      	uxtb	r2, r3
 8001340:	69fb      	ldr	r3, [r7, #28]
 8001342:	b2db      	uxtb	r3, r3
 8001344:	4413      	add	r3, r2
 8001346:	b2d9      	uxtb	r1, r3
 8001348:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 800134c:	2b00      	cmp	r3, #0
 800134e:	bf0c      	ite	eq
 8001350:	2301      	moveq	r3, #1
 8001352:	2300      	movne	r3, #0
 8001354:	b2db      	uxtb	r3, r3
 8001356:	461a      	mov	r2, r3
 8001358:	f7ff ff44 	bl	80011e4 <screen_driver_DrawPixel>
        for(j = 0; j < Font.width; j++) {
 800135c:	69bb      	ldr	r3, [r7, #24]
 800135e:	3301      	adds	r3, #1
 8001360:	61bb      	str	r3, [r7, #24]
 8001362:	783b      	ldrb	r3, [r7, #0]
 8001364:	461a      	mov	r2, r3
 8001366:	69bb      	ldr	r3, [r7, #24]
 8001368:	4293      	cmp	r3, r2
 800136a:	d3c3      	bcc.n	80012f4 <screen_driver_WriteChar+0x68>
    for(i = 0; i < Font.height; i++) {
 800136c:	69fb      	ldr	r3, [r7, #28]
 800136e:	3301      	adds	r3, #1
 8001370:	61fb      	str	r3, [r7, #28]
 8001372:	787b      	ldrb	r3, [r7, #1]
 8001374:	461a      	mov	r2, r3
 8001376:	69fb      	ldr	r3, [r7, #28]
 8001378:	4293      	cmp	r3, r2
 800137a:	d3ab      	bcc.n	80012d4 <screen_driver_WriteChar+0x48>
            }
        }
    }
    
    // The current space is now taken
    screen_driver.CurrentX += Font.char_width ? Font.char_width[ch - 32] : Font.width;
 800137c:	4b0a      	ldr	r3, [pc, #40]	@ (80013a8 <screen_driver_WriteChar+0x11c>)
 800137e:	881b      	ldrh	r3, [r3, #0]
 8001380:	68ba      	ldr	r2, [r7, #8]
 8001382:	2a00      	cmp	r2, #0
 8001384:	d005      	beq.n	8001392 <screen_driver_WriteChar+0x106>
 8001386:	68b9      	ldr	r1, [r7, #8]
 8001388:	7bfa      	ldrb	r2, [r7, #15]
 800138a:	3a20      	subs	r2, #32
 800138c:	440a      	add	r2, r1
 800138e:	7812      	ldrb	r2, [r2, #0]
 8001390:	e000      	b.n	8001394 <screen_driver_WriteChar+0x108>
 8001392:	783a      	ldrb	r2, [r7, #0]
 8001394:	4413      	add	r3, r2
 8001396:	b29a      	uxth	r2, r3
 8001398:	4b03      	ldr	r3, [pc, #12]	@ (80013a8 <screen_driver_WriteChar+0x11c>)
 800139a:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 800139c:	7bfb      	ldrb	r3, [r7, #15]
}
 800139e:	4618      	mov	r0, r3
 80013a0:	3724      	adds	r7, #36	@ 0x24
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd90      	pop	{r4, r7, pc}
 80013a6:	bf00      	nop
 80013a8:	20000768 	.word	0x20000768

080013ac <screen_driver_WriteString>:

/* Write full string to screenbuffer */
char screen_driver_WriteString(char* str, screen_driver_Font_t Font, screen_driver_COLOR color) {
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b086      	sub	sp, #24
 80013b0:	af02      	add	r7, sp, #8
 80013b2:	60f8      	str	r0, [r7, #12]
 80013b4:	4638      	mov	r0, r7
 80013b6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    while (*str) {
 80013ba:	e013      	b.n	80013e4 <screen_driver_WriteString+0x38>
        if (screen_driver_WriteChar(*str, Font, color) != *str) {
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	7818      	ldrb	r0, [r3, #0]
 80013c0:	7e3b      	ldrb	r3, [r7, #24]
 80013c2:	9300      	str	r3, [sp, #0]
 80013c4:	463b      	mov	r3, r7
 80013c6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80013c8:	f7ff ff60 	bl	800128c <screen_driver_WriteChar>
 80013cc:	4603      	mov	r3, r0
 80013ce:	461a      	mov	r2, r3
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	781b      	ldrb	r3, [r3, #0]
 80013d4:	429a      	cmp	r2, r3
 80013d6:	d002      	beq.n	80013de <screen_driver_WriteString+0x32>
            // Char could not be written
            return *str;
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	781b      	ldrb	r3, [r3, #0]
 80013dc:	e008      	b.n	80013f0 <screen_driver_WriteString+0x44>
        }
        str++;
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	3301      	adds	r3, #1
 80013e2:	60fb      	str	r3, [r7, #12]
    while (*str) {
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	781b      	ldrb	r3, [r3, #0]
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d1e7      	bne.n	80013bc <screen_driver_WriteString+0x10>
    }
    
    // Everything ok
    return *str;
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	781b      	ldrb	r3, [r3, #0]
}
 80013f0:	4618      	mov	r0, r3
 80013f2:	3710      	adds	r7, #16
 80013f4:	46bd      	mov	sp, r7
 80013f6:	bd80      	pop	{r7, pc}

080013f8 <screen_driver_SetCursor>:

/* Position the cursor */
void screen_driver_SetCursor(uint8_t x, uint8_t y) {
 80013f8:	b480      	push	{r7}
 80013fa:	b083      	sub	sp, #12
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	4603      	mov	r3, r0
 8001400:	460a      	mov	r2, r1
 8001402:	71fb      	strb	r3, [r7, #7]
 8001404:	4613      	mov	r3, r2
 8001406:	71bb      	strb	r3, [r7, #6]
    screen_driver.CurrentX = x;
 8001408:	79fb      	ldrb	r3, [r7, #7]
 800140a:	b29a      	uxth	r2, r3
 800140c:	4b05      	ldr	r3, [pc, #20]	@ (8001424 <screen_driver_SetCursor+0x2c>)
 800140e:	801a      	strh	r2, [r3, #0]
    screen_driver.CurrentY = y;
 8001410:	79bb      	ldrb	r3, [r7, #6]
 8001412:	b29a      	uxth	r2, r3
 8001414:	4b03      	ldr	r3, [pc, #12]	@ (8001424 <screen_driver_SetCursor+0x2c>)
 8001416:	805a      	strh	r2, [r3, #2]
}
 8001418:	bf00      	nop
 800141a:	370c      	adds	r7, #12
 800141c:	46bd      	mov	sp, r7
 800141e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001422:	4770      	bx	lr
 8001424:	20000768 	.word	0x20000768

08001428 <screen_driver_Line>:

/* Draw line by Bresenhem's algorithm */
void screen_driver_Line(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, screen_driver_COLOR color) {
 8001428:	b590      	push	{r4, r7, lr}
 800142a:	b089      	sub	sp, #36	@ 0x24
 800142c:	af00      	add	r7, sp, #0
 800142e:	4604      	mov	r4, r0
 8001430:	4608      	mov	r0, r1
 8001432:	4611      	mov	r1, r2
 8001434:	461a      	mov	r2, r3
 8001436:	4623      	mov	r3, r4
 8001438:	71fb      	strb	r3, [r7, #7]
 800143a:	4603      	mov	r3, r0
 800143c:	71bb      	strb	r3, [r7, #6]
 800143e:	460b      	mov	r3, r1
 8001440:	717b      	strb	r3, [r7, #5]
 8001442:	4613      	mov	r3, r2
 8001444:	713b      	strb	r3, [r7, #4]
    int32_t deltaX = abs(x2 - x1);
 8001446:	797a      	ldrb	r2, [r7, #5]
 8001448:	79fb      	ldrb	r3, [r7, #7]
 800144a:	1ad3      	subs	r3, r2, r3
 800144c:	2b00      	cmp	r3, #0
 800144e:	bfb8      	it	lt
 8001450:	425b      	neglt	r3, r3
 8001452:	61bb      	str	r3, [r7, #24]
    int32_t deltaY = abs(y2 - y1);
 8001454:	793a      	ldrb	r2, [r7, #4]
 8001456:	79bb      	ldrb	r3, [r7, #6]
 8001458:	1ad3      	subs	r3, r2, r3
 800145a:	2b00      	cmp	r3, #0
 800145c:	bfb8      	it	lt
 800145e:	425b      	neglt	r3, r3
 8001460:	617b      	str	r3, [r7, #20]
    int32_t signX = ((x1 < x2) ? 1 : -1);
 8001462:	79fa      	ldrb	r2, [r7, #7]
 8001464:	797b      	ldrb	r3, [r7, #5]
 8001466:	429a      	cmp	r2, r3
 8001468:	d201      	bcs.n	800146e <screen_driver_Line+0x46>
 800146a:	2301      	movs	r3, #1
 800146c:	e001      	b.n	8001472 <screen_driver_Line+0x4a>
 800146e:	f04f 33ff 	mov.w	r3, #4294967295
 8001472:	613b      	str	r3, [r7, #16]
    int32_t signY = ((y1 < y2) ? 1 : -1);
 8001474:	79ba      	ldrb	r2, [r7, #6]
 8001476:	793b      	ldrb	r3, [r7, #4]
 8001478:	429a      	cmp	r2, r3
 800147a:	d201      	bcs.n	8001480 <screen_driver_Line+0x58>
 800147c:	2301      	movs	r3, #1
 800147e:	e001      	b.n	8001484 <screen_driver_Line+0x5c>
 8001480:	f04f 33ff 	mov.w	r3, #4294967295
 8001484:	60fb      	str	r3, [r7, #12]
    int32_t error = deltaX - deltaY;
 8001486:	69ba      	ldr	r2, [r7, #24]
 8001488:	697b      	ldr	r3, [r7, #20]
 800148a:	1ad3      	subs	r3, r2, r3
 800148c:	61fb      	str	r3, [r7, #28]
    int32_t error2;
    
    screen_driver_DrawPixel(x2, y2, color);
 800148e:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8001492:	7939      	ldrb	r1, [r7, #4]
 8001494:	797b      	ldrb	r3, [r7, #5]
 8001496:	4618      	mov	r0, r3
 8001498:	f7ff fea4 	bl	80011e4 <screen_driver_DrawPixel>

    while((x1 != x2) || (y1 != y2)) {
 800149c:	e024      	b.n	80014e8 <screen_driver_Line+0xc0>
        screen_driver_DrawPixel(x1, y1, color);
 800149e:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 80014a2:	79b9      	ldrb	r1, [r7, #6]
 80014a4:	79fb      	ldrb	r3, [r7, #7]
 80014a6:	4618      	mov	r0, r3
 80014a8:	f7ff fe9c 	bl	80011e4 <screen_driver_DrawPixel>
        error2 = error * 2;
 80014ac:	69fb      	ldr	r3, [r7, #28]
 80014ae:	005b      	lsls	r3, r3, #1
 80014b0:	60bb      	str	r3, [r7, #8]
        if(error2 > -deltaY) {
 80014b2:	697b      	ldr	r3, [r7, #20]
 80014b4:	425b      	negs	r3, r3
 80014b6:	68ba      	ldr	r2, [r7, #8]
 80014b8:	429a      	cmp	r2, r3
 80014ba:	dd08      	ble.n	80014ce <screen_driver_Line+0xa6>
            error -= deltaY;
 80014bc:	69fa      	ldr	r2, [r7, #28]
 80014be:	697b      	ldr	r3, [r7, #20]
 80014c0:	1ad3      	subs	r3, r2, r3
 80014c2:	61fb      	str	r3, [r7, #28]
            x1 += signX;
 80014c4:	693b      	ldr	r3, [r7, #16]
 80014c6:	b2da      	uxtb	r2, r3
 80014c8:	79fb      	ldrb	r3, [r7, #7]
 80014ca:	4413      	add	r3, r2
 80014cc:	71fb      	strb	r3, [r7, #7]
        }
        
        if(error2 < deltaX) {
 80014ce:	68ba      	ldr	r2, [r7, #8]
 80014d0:	69bb      	ldr	r3, [r7, #24]
 80014d2:	429a      	cmp	r2, r3
 80014d4:	da08      	bge.n	80014e8 <screen_driver_Line+0xc0>
            error += deltaX;
 80014d6:	69fa      	ldr	r2, [r7, #28]
 80014d8:	69bb      	ldr	r3, [r7, #24]
 80014da:	4413      	add	r3, r2
 80014dc:	61fb      	str	r3, [r7, #28]
            y1 += signY;
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	b2da      	uxtb	r2, r3
 80014e2:	79bb      	ldrb	r3, [r7, #6]
 80014e4:	4413      	add	r3, r2
 80014e6:	71bb      	strb	r3, [r7, #6]
    while((x1 != x2) || (y1 != y2)) {
 80014e8:	79fa      	ldrb	r2, [r7, #7]
 80014ea:	797b      	ldrb	r3, [r7, #5]
 80014ec:	429a      	cmp	r2, r3
 80014ee:	d1d6      	bne.n	800149e <screen_driver_Line+0x76>
 80014f0:	79ba      	ldrb	r2, [r7, #6]
 80014f2:	793b      	ldrb	r3, [r7, #4]
 80014f4:	429a      	cmp	r2, r3
 80014f6:	d1d2      	bne.n	800149e <screen_driver_Line+0x76>
        }
    }
    return;
 80014f8:	bf00      	nop
}
 80014fa:	3724      	adds	r7, #36	@ 0x24
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bd90      	pop	{r4, r7, pc}

08001500 <screen_driver_SetContrast>:
        }
    }
    return;
}

void screen_driver_SetContrast(const uint8_t value) {
 8001500:	b580      	push	{r7, lr}
 8001502:	b084      	sub	sp, #16
 8001504:	af00      	add	r7, sp, #0
 8001506:	4603      	mov	r3, r0
 8001508:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 800150a:	2381      	movs	r3, #129	@ 0x81
 800150c:	73fb      	strb	r3, [r7, #15]
    screen_driver_WriteCommand(kSetContrastControlRegister);
 800150e:	7bfb      	ldrb	r3, [r7, #15]
 8001510:	4618      	mov	r0, r3
 8001512:	f7ff fd87 	bl	8001024 <screen_driver_WriteCommand>
    screen_driver_WriteCommand(value);
 8001516:	79fb      	ldrb	r3, [r7, #7]
 8001518:	4618      	mov	r0, r3
 800151a:	f7ff fd83 	bl	8001024 <screen_driver_WriteCommand>
}
 800151e:	bf00      	nop
 8001520:	3710      	adds	r7, #16
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}
	...

08001528 <screen_driver_SetDisplayOn>:

void screen_driver_SetDisplayOn(const uint8_t on) {
 8001528:	b580      	push	{r7, lr}
 800152a:	b084      	sub	sp, #16
 800152c:	af00      	add	r7, sp, #0
 800152e:	4603      	mov	r3, r0
 8001530:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8001532:	79fb      	ldrb	r3, [r7, #7]
 8001534:	2b00      	cmp	r3, #0
 8001536:	d005      	beq.n	8001544 <screen_driver_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8001538:	23af      	movs	r3, #175	@ 0xaf
 800153a:	73fb      	strb	r3, [r7, #15]
        screen_driver.DisplayOn = 1;
 800153c:	4b08      	ldr	r3, [pc, #32]	@ (8001560 <screen_driver_SetDisplayOn+0x38>)
 800153e:	2201      	movs	r2, #1
 8001540:	715a      	strb	r2, [r3, #5]
 8001542:	e004      	b.n	800154e <screen_driver_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8001544:	23ae      	movs	r3, #174	@ 0xae
 8001546:	73fb      	strb	r3, [r7, #15]
        screen_driver.DisplayOn = 0;
 8001548:	4b05      	ldr	r3, [pc, #20]	@ (8001560 <screen_driver_SetDisplayOn+0x38>)
 800154a:	2200      	movs	r2, #0
 800154c:	715a      	strb	r2, [r3, #5]
    }
    screen_driver_WriteCommand(value);
 800154e:	7bfb      	ldrb	r3, [r7, #15]
 8001550:	4618      	mov	r0, r3
 8001552:	f7ff fd67 	bl	8001024 <screen_driver_WriteCommand>
}
 8001556:	bf00      	nop
 8001558:	3710      	adds	r7, #16
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}
 800155e:	bf00      	nop
 8001560:	20000768 	.word	0x20000768

08001564 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b082      	sub	sp, #8
 8001568:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800156a:	2300      	movs	r3, #0
 800156c:	607b      	str	r3, [r7, #4]
 800156e:	4b12      	ldr	r3, [pc, #72]	@ (80015b8 <HAL_MspInit+0x54>)
 8001570:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001572:	4a11      	ldr	r2, [pc, #68]	@ (80015b8 <HAL_MspInit+0x54>)
 8001574:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001578:	6453      	str	r3, [r2, #68]	@ 0x44
 800157a:	4b0f      	ldr	r3, [pc, #60]	@ (80015b8 <HAL_MspInit+0x54>)
 800157c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800157e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001582:	607b      	str	r3, [r7, #4]
 8001584:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001586:	2300      	movs	r3, #0
 8001588:	603b      	str	r3, [r7, #0]
 800158a:	4b0b      	ldr	r3, [pc, #44]	@ (80015b8 <HAL_MspInit+0x54>)
 800158c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800158e:	4a0a      	ldr	r2, [pc, #40]	@ (80015b8 <HAL_MspInit+0x54>)
 8001590:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001594:	6413      	str	r3, [r2, #64]	@ 0x40
 8001596:	4b08      	ldr	r3, [pc, #32]	@ (80015b8 <HAL_MspInit+0x54>)
 8001598:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800159a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800159e:	603b      	str	r3, [r7, #0]
 80015a0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80015a2:	2200      	movs	r2, #0
 80015a4:	210f      	movs	r1, #15
 80015a6:	f06f 0001 	mvn.w	r0, #1
 80015aa:	f000 fbf3 	bl	8001d94 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015ae:	bf00      	nop
 80015b0:	3708      	adds	r7, #8
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bd80      	pop	{r7, pc}
 80015b6:	bf00      	nop
 80015b8:	40023800 	.word	0x40023800

080015bc <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b08a      	sub	sp, #40	@ 0x28
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015c4:	f107 0314 	add.w	r3, r7, #20
 80015c8:	2200      	movs	r2, #0
 80015ca:	601a      	str	r2, [r3, #0]
 80015cc:	605a      	str	r2, [r3, #4]
 80015ce:	609a      	str	r2, [r3, #8]
 80015d0:	60da      	str	r2, [r3, #12]
 80015d2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	4a19      	ldr	r2, [pc, #100]	@ (8001640 <HAL_I2C_MspInit+0x84>)
 80015da:	4293      	cmp	r3, r2
 80015dc:	d12c      	bne.n	8001638 <HAL_I2C_MspInit+0x7c>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015de:	2300      	movs	r3, #0
 80015e0:	613b      	str	r3, [r7, #16]
 80015e2:	4b18      	ldr	r3, [pc, #96]	@ (8001644 <HAL_I2C_MspInit+0x88>)
 80015e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015e6:	4a17      	ldr	r2, [pc, #92]	@ (8001644 <HAL_I2C_MspInit+0x88>)
 80015e8:	f043 0302 	orr.w	r3, r3, #2
 80015ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80015ee:	4b15      	ldr	r3, [pc, #84]	@ (8001644 <HAL_I2C_MspInit+0x88>)
 80015f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015f2:	f003 0302 	and.w	r3, r3, #2
 80015f6:	613b      	str	r3, [r7, #16]
 80015f8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80015fa:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80015fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001600:	2312      	movs	r3, #18
 8001602:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001604:	2300      	movs	r3, #0
 8001606:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001608:	2303      	movs	r3, #3
 800160a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800160c:	2304      	movs	r3, #4
 800160e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001610:	f107 0314 	add.w	r3, r7, #20
 8001614:	4619      	mov	r1, r3
 8001616:	480c      	ldr	r0, [pc, #48]	@ (8001648 <HAL_I2C_MspInit+0x8c>)
 8001618:	f000 fc78 	bl	8001f0c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800161c:	2300      	movs	r3, #0
 800161e:	60fb      	str	r3, [r7, #12]
 8001620:	4b08      	ldr	r3, [pc, #32]	@ (8001644 <HAL_I2C_MspInit+0x88>)
 8001622:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001624:	4a07      	ldr	r2, [pc, #28]	@ (8001644 <HAL_I2C_MspInit+0x88>)
 8001626:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800162a:	6413      	str	r3, [r2, #64]	@ 0x40
 800162c:	4b05      	ldr	r3, [pc, #20]	@ (8001644 <HAL_I2C_MspInit+0x88>)
 800162e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001630:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001634:	60fb      	str	r3, [r7, #12]
 8001636:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001638:	bf00      	nop
 800163a:	3728      	adds	r7, #40	@ 0x28
 800163c:	46bd      	mov	sp, r7
 800163e:	bd80      	pop	{r7, pc}
 8001640:	40005400 	.word	0x40005400
 8001644:	40023800 	.word	0x40023800
 8001648:	40020400 	.word	0x40020400

0800164c <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b084      	sub	sp, #16
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800165c:	d115      	bne.n	800168a <HAL_TIM_Base_MspInit+0x3e>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800165e:	2300      	movs	r3, #0
 8001660:	60fb      	str	r3, [r7, #12]
 8001662:	4b0c      	ldr	r3, [pc, #48]	@ (8001694 <HAL_TIM_Base_MspInit+0x48>)
 8001664:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001666:	4a0b      	ldr	r2, [pc, #44]	@ (8001694 <HAL_TIM_Base_MspInit+0x48>)
 8001668:	f043 0301 	orr.w	r3, r3, #1
 800166c:	6413      	str	r3, [r2, #64]	@ 0x40
 800166e:	4b09      	ldr	r3, [pc, #36]	@ (8001694 <HAL_TIM_Base_MspInit+0x48>)
 8001670:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001672:	f003 0301 	and.w	r3, r3, #1
 8001676:	60fb      	str	r3, [r7, #12]
 8001678:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 800167a:	2200      	movs	r2, #0
 800167c:	2105      	movs	r1, #5
 800167e:	201c      	movs	r0, #28
 8001680:	f000 fb88 	bl	8001d94 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001684:	201c      	movs	r0, #28
 8001686:	f000 fba1 	bl	8001dcc <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 800168a:	bf00      	nop
 800168c:	3710      	adds	r7, #16
 800168e:	46bd      	mov	sp, r7
 8001690:	bd80      	pop	{r7, pc}
 8001692:	bf00      	nop
 8001694:	40023800 	.word	0x40023800

08001698 <HAL_TIM_Encoder_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_encoder: TIM_Encoder handle pointer
  * @retval None
  */
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b08c      	sub	sp, #48	@ 0x30
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016a0:	f107 031c 	add.w	r3, r7, #28
 80016a4:	2200      	movs	r2, #0
 80016a6:	601a      	str	r2, [r3, #0]
 80016a8:	605a      	str	r2, [r3, #4]
 80016aa:	609a      	str	r2, [r3, #8]
 80016ac:	60da      	str	r2, [r3, #12]
 80016ae:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	4a3a      	ldr	r2, [pc, #232]	@ (80017a0 <HAL_TIM_Encoder_MspInit+0x108>)
 80016b6:	4293      	cmp	r3, r2
 80016b8:	d134      	bne.n	8001724 <HAL_TIM_Encoder_MspInit+0x8c>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80016ba:	2300      	movs	r3, #0
 80016bc:	61bb      	str	r3, [r7, #24]
 80016be:	4b39      	ldr	r3, [pc, #228]	@ (80017a4 <HAL_TIM_Encoder_MspInit+0x10c>)
 80016c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016c2:	4a38      	ldr	r2, [pc, #224]	@ (80017a4 <HAL_TIM_Encoder_MspInit+0x10c>)
 80016c4:	f043 0302 	orr.w	r3, r3, #2
 80016c8:	6413      	str	r3, [r2, #64]	@ 0x40
 80016ca:	4b36      	ldr	r3, [pc, #216]	@ (80017a4 <HAL_TIM_Encoder_MspInit+0x10c>)
 80016cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016ce:	f003 0302 	and.w	r3, r3, #2
 80016d2:	61bb      	str	r3, [r7, #24]
 80016d4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016d6:	2300      	movs	r3, #0
 80016d8:	617b      	str	r3, [r7, #20]
 80016da:	4b32      	ldr	r3, [pc, #200]	@ (80017a4 <HAL_TIM_Encoder_MspInit+0x10c>)
 80016dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016de:	4a31      	ldr	r2, [pc, #196]	@ (80017a4 <HAL_TIM_Encoder_MspInit+0x10c>)
 80016e0:	f043 0302 	orr.w	r3, r3, #2
 80016e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80016e6:	4b2f      	ldr	r3, [pc, #188]	@ (80017a4 <HAL_TIM_Encoder_MspInit+0x10c>)
 80016e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016ea:	f003 0302 	and.w	r3, r3, #2
 80016ee:	617b      	str	r3, [r7, #20]
 80016f0:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80016f2:	2330      	movs	r3, #48	@ 0x30
 80016f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016f6:	2302      	movs	r3, #2
 80016f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80016fa:	2301      	movs	r3, #1
 80016fc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80016fe:	2302      	movs	r3, #2
 8001700:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001702:	2302      	movs	r3, #2
 8001704:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001706:	f107 031c 	add.w	r3, r7, #28
 800170a:	4619      	mov	r1, r3
 800170c:	4826      	ldr	r0, [pc, #152]	@ (80017a8 <HAL_TIM_Encoder_MspInit+0x110>)
 800170e:	f000 fbfd 	bl	8001f0c <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8001712:	2200      	movs	r2, #0
 8001714:	2105      	movs	r1, #5
 8001716:	201d      	movs	r0, #29
 8001718:	f000 fb3c 	bl	8001d94 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800171c:	201d      	movs	r0, #29
 800171e:	f000 fb55 	bl	8001dcc <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM4_MspInit 1 */

    /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001722:	e038      	b.n	8001796 <HAL_TIM_Encoder_MspInit+0xfe>
  else if(htim_encoder->Instance==TIM4)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	4a20      	ldr	r2, [pc, #128]	@ (80017ac <HAL_TIM_Encoder_MspInit+0x114>)
 800172a:	4293      	cmp	r3, r2
 800172c:	d133      	bne.n	8001796 <HAL_TIM_Encoder_MspInit+0xfe>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800172e:	2300      	movs	r3, #0
 8001730:	613b      	str	r3, [r7, #16]
 8001732:	4b1c      	ldr	r3, [pc, #112]	@ (80017a4 <HAL_TIM_Encoder_MspInit+0x10c>)
 8001734:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001736:	4a1b      	ldr	r2, [pc, #108]	@ (80017a4 <HAL_TIM_Encoder_MspInit+0x10c>)
 8001738:	f043 0304 	orr.w	r3, r3, #4
 800173c:	6413      	str	r3, [r2, #64]	@ 0x40
 800173e:	4b19      	ldr	r3, [pc, #100]	@ (80017a4 <HAL_TIM_Encoder_MspInit+0x10c>)
 8001740:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001742:	f003 0304 	and.w	r3, r3, #4
 8001746:	613b      	str	r3, [r7, #16]
 8001748:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800174a:	2300      	movs	r3, #0
 800174c:	60fb      	str	r3, [r7, #12]
 800174e:	4b15      	ldr	r3, [pc, #84]	@ (80017a4 <HAL_TIM_Encoder_MspInit+0x10c>)
 8001750:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001752:	4a14      	ldr	r2, [pc, #80]	@ (80017a4 <HAL_TIM_Encoder_MspInit+0x10c>)
 8001754:	f043 0302 	orr.w	r3, r3, #2
 8001758:	6313      	str	r3, [r2, #48]	@ 0x30
 800175a:	4b12      	ldr	r3, [pc, #72]	@ (80017a4 <HAL_TIM_Encoder_MspInit+0x10c>)
 800175c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800175e:	f003 0302 	and.w	r3, r3, #2
 8001762:	60fb      	str	r3, [r7, #12]
 8001764:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001766:	23c0      	movs	r3, #192	@ 0xc0
 8001768:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800176a:	2302      	movs	r3, #2
 800176c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800176e:	2301      	movs	r3, #1
 8001770:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001772:	2302      	movs	r3, #2
 8001774:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001776:	2302      	movs	r3, #2
 8001778:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800177a:	f107 031c 	add.w	r3, r7, #28
 800177e:	4619      	mov	r1, r3
 8001780:	4809      	ldr	r0, [pc, #36]	@ (80017a8 <HAL_TIM_Encoder_MspInit+0x110>)
 8001782:	f000 fbc3 	bl	8001f0c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 8001786:	2200      	movs	r2, #0
 8001788:	2105      	movs	r1, #5
 800178a:	201e      	movs	r0, #30
 800178c:	f000 fb02 	bl	8001d94 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001790:	201e      	movs	r0, #30
 8001792:	f000 fb1b 	bl	8001dcc <HAL_NVIC_EnableIRQ>
}
 8001796:	bf00      	nop
 8001798:	3730      	adds	r7, #48	@ 0x30
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}
 800179e:	bf00      	nop
 80017a0:	40000400 	.word	0x40000400
 80017a4:	40023800 	.word	0x40023800
 80017a8:	40020400 	.word	0x40020400
 80017ac:	40000800 	.word	0x40000800

080017b0 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b08c      	sub	sp, #48	@ 0x30
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017b8:	f107 031c 	add.w	r3, r7, #28
 80017bc:	2200      	movs	r2, #0
 80017be:	601a      	str	r2, [r3, #0]
 80017c0:	605a      	str	r2, [r3, #4]
 80017c2:	609a      	str	r2, [r3, #8]
 80017c4:	60da      	str	r2, [r3, #12]
 80017c6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	4a36      	ldr	r2, [pc, #216]	@ (80018a8 <HAL_UART_MspInit+0xf8>)
 80017ce:	4293      	cmp	r3, r2
 80017d0:	d12d      	bne.n	800182e <HAL_UART_MspInit+0x7e>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80017d2:	2300      	movs	r3, #0
 80017d4:	61bb      	str	r3, [r7, #24]
 80017d6:	4b35      	ldr	r3, [pc, #212]	@ (80018ac <HAL_UART_MspInit+0xfc>)
 80017d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017da:	4a34      	ldr	r2, [pc, #208]	@ (80018ac <HAL_UART_MspInit+0xfc>)
 80017dc:	f043 0310 	orr.w	r3, r3, #16
 80017e0:	6453      	str	r3, [r2, #68]	@ 0x44
 80017e2:	4b32      	ldr	r3, [pc, #200]	@ (80018ac <HAL_UART_MspInit+0xfc>)
 80017e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017e6:	f003 0310 	and.w	r3, r3, #16
 80017ea:	61bb      	str	r3, [r7, #24]
 80017ec:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017ee:	2300      	movs	r3, #0
 80017f0:	617b      	str	r3, [r7, #20]
 80017f2:	4b2e      	ldr	r3, [pc, #184]	@ (80018ac <HAL_UART_MspInit+0xfc>)
 80017f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017f6:	4a2d      	ldr	r2, [pc, #180]	@ (80018ac <HAL_UART_MspInit+0xfc>)
 80017f8:	f043 0301 	orr.w	r3, r3, #1
 80017fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80017fe:	4b2b      	ldr	r3, [pc, #172]	@ (80018ac <HAL_UART_MspInit+0xfc>)
 8001800:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001802:	f003 0301 	and.w	r3, r3, #1
 8001806:	617b      	str	r3, [r7, #20]
 8001808:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800180a:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800180e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001810:	2302      	movs	r3, #2
 8001812:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001814:	2300      	movs	r3, #0
 8001816:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001818:	2303      	movs	r3, #3
 800181a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800181c:	2307      	movs	r3, #7
 800181e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001820:	f107 031c 	add.w	r3, r7, #28
 8001824:	4619      	mov	r1, r3
 8001826:	4822      	ldr	r0, [pc, #136]	@ (80018b0 <HAL_UART_MspInit+0x100>)
 8001828:	f000 fb70 	bl	8001f0c <HAL_GPIO_Init>
    /* USER CODE BEGIN USART2_MspInit 1 */

    /* USER CODE END USART2_MspInit 1 */
  }

}
 800182c:	e038      	b.n	80018a0 <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART2)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	4a20      	ldr	r2, [pc, #128]	@ (80018b4 <HAL_UART_MspInit+0x104>)
 8001834:	4293      	cmp	r3, r2
 8001836:	d133      	bne.n	80018a0 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001838:	2300      	movs	r3, #0
 800183a:	613b      	str	r3, [r7, #16]
 800183c:	4b1b      	ldr	r3, [pc, #108]	@ (80018ac <HAL_UART_MspInit+0xfc>)
 800183e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001840:	4a1a      	ldr	r2, [pc, #104]	@ (80018ac <HAL_UART_MspInit+0xfc>)
 8001842:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001846:	6413      	str	r3, [r2, #64]	@ 0x40
 8001848:	4b18      	ldr	r3, [pc, #96]	@ (80018ac <HAL_UART_MspInit+0xfc>)
 800184a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800184c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001850:	613b      	str	r3, [r7, #16]
 8001852:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001854:	2300      	movs	r3, #0
 8001856:	60fb      	str	r3, [r7, #12]
 8001858:	4b14      	ldr	r3, [pc, #80]	@ (80018ac <HAL_UART_MspInit+0xfc>)
 800185a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800185c:	4a13      	ldr	r2, [pc, #76]	@ (80018ac <HAL_UART_MspInit+0xfc>)
 800185e:	f043 0301 	orr.w	r3, r3, #1
 8001862:	6313      	str	r3, [r2, #48]	@ 0x30
 8001864:	4b11      	ldr	r3, [pc, #68]	@ (80018ac <HAL_UART_MspInit+0xfc>)
 8001866:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001868:	f003 0301 	and.w	r3, r3, #1
 800186c:	60fb      	str	r3, [r7, #12]
 800186e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001870:	230c      	movs	r3, #12
 8001872:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001874:	2302      	movs	r3, #2
 8001876:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001878:	2300      	movs	r3, #0
 800187a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800187c:	2302      	movs	r3, #2
 800187e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001880:	2307      	movs	r3, #7
 8001882:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001884:	f107 031c 	add.w	r3, r7, #28
 8001888:	4619      	mov	r1, r3
 800188a:	4809      	ldr	r0, [pc, #36]	@ (80018b0 <HAL_UART_MspInit+0x100>)
 800188c:	f000 fb3e 	bl	8001f0c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8001890:	2200      	movs	r2, #0
 8001892:	2105      	movs	r1, #5
 8001894:	2026      	movs	r0, #38	@ 0x26
 8001896:	f000 fa7d 	bl	8001d94 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800189a:	2026      	movs	r0, #38	@ 0x26
 800189c:	f000 fa96 	bl	8001dcc <HAL_NVIC_EnableIRQ>
}
 80018a0:	bf00      	nop
 80018a2:	3730      	adds	r7, #48	@ 0x30
 80018a4:	46bd      	mov	sp, r7
 80018a6:	bd80      	pop	{r7, pc}
 80018a8:	40011000 	.word	0x40011000
 80018ac:	40023800 	.word	0x40023800
 80018b0:	40020000 	.word	0x40020000
 80018b4:	40004400 	.word	0x40004400

080018b8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b08c      	sub	sp, #48	@ 0x30
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 80018c0:	2300      	movs	r3, #0
 80018c2:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 80018c4:	2300      	movs	r3, #0
 80018c6:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80018c8:	2300      	movs	r3, #0
 80018ca:	60bb      	str	r3, [r7, #8]
 80018cc:	4b2e      	ldr	r3, [pc, #184]	@ (8001988 <HAL_InitTick+0xd0>)
 80018ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018d0:	4a2d      	ldr	r2, [pc, #180]	@ (8001988 <HAL_InitTick+0xd0>)
 80018d2:	f043 0301 	orr.w	r3, r3, #1
 80018d6:	6453      	str	r3, [r2, #68]	@ 0x44
 80018d8:	4b2b      	ldr	r3, [pc, #172]	@ (8001988 <HAL_InitTick+0xd0>)
 80018da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018dc:	f003 0301 	and.w	r3, r3, #1
 80018e0:	60bb      	str	r3, [r7, #8]
 80018e2:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80018e4:	f107 020c 	add.w	r2, r7, #12
 80018e8:	f107 0310 	add.w	r3, r7, #16
 80018ec:	4611      	mov	r1, r2
 80018ee:	4618      	mov	r0, r3
 80018f0:	f002 ffe8 	bl	80048c4 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 80018f4:	f002 ffd2 	bl	800489c <HAL_RCC_GetPCLK2Freq>
 80018f8:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80018fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80018fc:	4a23      	ldr	r2, [pc, #140]	@ (800198c <HAL_InitTick+0xd4>)
 80018fe:	fba2 2303 	umull	r2, r3, r2, r3
 8001902:	0c9b      	lsrs	r3, r3, #18
 8001904:	3b01      	subs	r3, #1
 8001906:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001908:	4b21      	ldr	r3, [pc, #132]	@ (8001990 <HAL_InitTick+0xd8>)
 800190a:	4a22      	ldr	r2, [pc, #136]	@ (8001994 <HAL_InitTick+0xdc>)
 800190c:	601a      	str	r2, [r3, #0]
   * Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800190e:	4b20      	ldr	r3, [pc, #128]	@ (8001990 <HAL_InitTick+0xd8>)
 8001910:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001914:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001916:	4a1e      	ldr	r2, [pc, #120]	@ (8001990 <HAL_InitTick+0xd8>)
 8001918:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800191a:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 800191c:	4b1c      	ldr	r3, [pc, #112]	@ (8001990 <HAL_InitTick+0xd8>)
 800191e:	2200      	movs	r2, #0
 8001920:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001922:	4b1b      	ldr	r3, [pc, #108]	@ (8001990 <HAL_InitTick+0xd8>)
 8001924:	2200      	movs	r2, #0
 8001926:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001928:	4b19      	ldr	r3, [pc, #100]	@ (8001990 <HAL_InitTick+0xd8>)
 800192a:	2200      	movs	r2, #0
 800192c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 800192e:	4818      	ldr	r0, [pc, #96]	@ (8001990 <HAL_InitTick+0xd8>)
 8001930:	f002 fffa 	bl	8004928 <HAL_TIM_Base_Init>
 8001934:	4603      	mov	r3, r0
 8001936:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 800193a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800193e:	2b00      	cmp	r3, #0
 8001940:	d11b      	bne.n	800197a <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8001942:	4813      	ldr	r0, [pc, #76]	@ (8001990 <HAL_InitTick+0xd8>)
 8001944:	f003 f840 	bl	80049c8 <HAL_TIM_Base_Start_IT>
 8001948:	4603      	mov	r3, r0
 800194a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 800194e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001952:	2b00      	cmp	r3, #0
 8001954:	d111      	bne.n	800197a <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001956:	2019      	movs	r0, #25
 8001958:	f000 fa38 	bl	8001dcc <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	2b0f      	cmp	r3, #15
 8001960:	d808      	bhi.n	8001974 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8001962:	2200      	movs	r2, #0
 8001964:	6879      	ldr	r1, [r7, #4]
 8001966:	2019      	movs	r0, #25
 8001968:	f000 fa14 	bl	8001d94 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800196c:	4a0a      	ldr	r2, [pc, #40]	@ (8001998 <HAL_InitTick+0xe0>)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	6013      	str	r3, [r2, #0]
 8001972:	e002      	b.n	800197a <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8001974:	2301      	movs	r3, #1
 8001976:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 800197a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800197e:	4618      	mov	r0, r3
 8001980:	3730      	adds	r7, #48	@ 0x30
 8001982:	46bd      	mov	sp, r7
 8001984:	bd80      	pop	{r7, pc}
 8001986:	bf00      	nop
 8001988:	40023800 	.word	0x40023800
 800198c:	431bde83 	.word	0x431bde83
 8001990:	20000770 	.word	0x20000770
 8001994:	40010000 	.word	0x40010000
 8001998:	20000018 	.word	0x20000018

0800199c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800199c:	b480      	push	{r7}
 800199e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80019a0:	bf00      	nop
 80019a2:	e7fd      	b.n	80019a0 <NMI_Handler+0x4>

080019a4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019a4:	b480      	push	{r7}
 80019a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019a8:	bf00      	nop
 80019aa:	e7fd      	b.n	80019a8 <HardFault_Handler+0x4>

080019ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019ac:	b480      	push	{r7}
 80019ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019b0:	bf00      	nop
 80019b2:	e7fd      	b.n	80019b0 <MemManage_Handler+0x4>

080019b4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019b4:	b480      	push	{r7}
 80019b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019b8:	bf00      	nop
 80019ba:	e7fd      	b.n	80019b8 <BusFault_Handler+0x4>

080019bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019bc:	b480      	push	{r7}
 80019be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019c0:	bf00      	nop
 80019c2:	e7fd      	b.n	80019c0 <UsageFault_Handler+0x4>

080019c4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019c4:	b480      	push	{r7}
 80019c6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019c8:	bf00      	nop
 80019ca:	46bd      	mov	sp, r7
 80019cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d0:	4770      	bx	lr
	...

080019d4 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80019d8:	4802      	ldr	r0, [pc, #8]	@ (80019e4 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80019da:	f003 f9ba 	bl	8004d52 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80019de:	bf00      	nop
 80019e0:	bd80      	pop	{r7, pc}
 80019e2:	bf00      	nop
 80019e4:	20000770 	.word	0x20000770

080019e8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80019ec:	4802      	ldr	r0, [pc, #8]	@ (80019f8 <TIM2_IRQHandler+0x10>)
 80019ee:	f003 f9b0 	bl	8004d52 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80019f2:	bf00      	nop
 80019f4:	bd80      	pop	{r7, pc}
 80019f6:	bf00      	nop
 80019f8:	200001f4 	.word	0x200001f4

080019fc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001a00:	4802      	ldr	r0, [pc, #8]	@ (8001a0c <TIM3_IRQHandler+0x10>)
 8001a02:	f003 f9a6 	bl	8004d52 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001a06:	bf00      	nop
 8001a08:	bd80      	pop	{r7, pc}
 8001a0a:	bf00      	nop
 8001a0c:	2000023c 	.word	0x2000023c

08001a10 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001a14:	4802      	ldr	r0, [pc, #8]	@ (8001a20 <TIM4_IRQHandler+0x10>)
 8001a16:	f003 f99c 	bl	8004d52 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001a1a:	bf00      	nop
 8001a1c:	bd80      	pop	{r7, pc}
 8001a1e:	bf00      	nop
 8001a20:	20000284 	.word	0x20000284

08001a24 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001a28:	4802      	ldr	r0, [pc, #8]	@ (8001a34 <USART2_IRQHandler+0x10>)
 8001a2a:	f003 fe3f 	bl	80056ac <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001a2e:	bf00      	nop
 8001a30:	bd80      	pop	{r7, pc}
 8001a32:	bf00      	nop
 8001a34:	20000314 	.word	0x20000314

08001a38 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Btn1_Pin);
 8001a3c:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8001a40:	f000 fbe8 	bl	8002214 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Btn4_Pin);
 8001a44:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001a48:	f000 fbe4 	bl	8002214 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Btn3_Pin);
 8001a4c:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8001a50:	f000 fbe0 	bl	8002214 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Btn2_Pin);
 8001a54:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8001a58:	f000 fbdc 	bl	8002214 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001a5c:	bf00      	nop
 8001a5e:	bd80      	pop	{r7, pc}

08001a60 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001a64:	4802      	ldr	r0, [pc, #8]	@ (8001a70 <OTG_FS_IRQHandler+0x10>)
 8001a66:	f001 f9de 	bl	8002e26 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001a6a:	bf00      	nop
 8001a6c:	bd80      	pop	{r7, pc}
 8001a6e:	bf00      	nop
 8001a70:	20005688 	.word	0x20005688

08001a74 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b086      	sub	sp, #24
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a7c:	4a14      	ldr	r2, [pc, #80]	@ (8001ad0 <_sbrk+0x5c>)
 8001a7e:	4b15      	ldr	r3, [pc, #84]	@ (8001ad4 <_sbrk+0x60>)
 8001a80:	1ad3      	subs	r3, r2, r3
 8001a82:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a84:	697b      	ldr	r3, [r7, #20]
 8001a86:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a88:	4b13      	ldr	r3, [pc, #76]	@ (8001ad8 <_sbrk+0x64>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d102      	bne.n	8001a96 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a90:	4b11      	ldr	r3, [pc, #68]	@ (8001ad8 <_sbrk+0x64>)
 8001a92:	4a12      	ldr	r2, [pc, #72]	@ (8001adc <_sbrk+0x68>)
 8001a94:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a96:	4b10      	ldr	r3, [pc, #64]	@ (8001ad8 <_sbrk+0x64>)
 8001a98:	681a      	ldr	r2, [r3, #0]
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	4413      	add	r3, r2
 8001a9e:	693a      	ldr	r2, [r7, #16]
 8001aa0:	429a      	cmp	r2, r3
 8001aa2:	d207      	bcs.n	8001ab4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001aa4:	f00b f8e8 	bl	800cc78 <__errno>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	220c      	movs	r2, #12
 8001aac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001aae:	f04f 33ff 	mov.w	r3, #4294967295
 8001ab2:	e009      	b.n	8001ac8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ab4:	4b08      	ldr	r3, [pc, #32]	@ (8001ad8 <_sbrk+0x64>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001aba:	4b07      	ldr	r3, [pc, #28]	@ (8001ad8 <_sbrk+0x64>)
 8001abc:	681a      	ldr	r2, [r3, #0]
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	4413      	add	r3, r2
 8001ac2:	4a05      	ldr	r2, [pc, #20]	@ (8001ad8 <_sbrk+0x64>)
 8001ac4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001ac6:	68fb      	ldr	r3, [r7, #12]
}
 8001ac8:	4618      	mov	r0, r3
 8001aca:	3718      	adds	r7, #24
 8001acc:	46bd      	mov	sp, r7
 8001ace:	bd80      	pop	{r7, pc}
 8001ad0:	20020000 	.word	0x20020000
 8001ad4:	00000400 	.word	0x00000400
 8001ad8:	200007b8 	.word	0x200007b8
 8001adc:	20005cc8 	.word	0x20005cc8

08001ae0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ae4:	4b06      	ldr	r3, [pc, #24]	@ (8001b00 <SystemInit+0x20>)
 8001ae6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001aea:	4a05      	ldr	r2, [pc, #20]	@ (8001b00 <SystemInit+0x20>)
 8001aec:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001af0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001af4:	bf00      	nop
 8001af6:	46bd      	mov	sp, r7
 8001af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afc:	4770      	bx	lr
 8001afe:	bf00      	nop
 8001b00:	e000ed00 	.word	0xe000ed00

08001b04 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001b04:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001b3c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001b08:	f7ff ffea 	bl	8001ae0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001b0c:	480c      	ldr	r0, [pc, #48]	@ (8001b40 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001b0e:	490d      	ldr	r1, [pc, #52]	@ (8001b44 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001b10:	4a0d      	ldr	r2, [pc, #52]	@ (8001b48 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001b12:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b14:	e002      	b.n	8001b1c <LoopCopyDataInit>

08001b16 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b16:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b18:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b1a:	3304      	adds	r3, #4

08001b1c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b1c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b1e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b20:	d3f9      	bcc.n	8001b16 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b22:	4a0a      	ldr	r2, [pc, #40]	@ (8001b4c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001b24:	4c0a      	ldr	r4, [pc, #40]	@ (8001b50 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001b26:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b28:	e001      	b.n	8001b2e <LoopFillZerobss>

08001b2a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b2a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b2c:	3204      	adds	r2, #4

08001b2e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b2e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b30:	d3fb      	bcc.n	8001b2a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001b32:	f00b f8a7 	bl	800cc84 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b36:	f7fe fd39 	bl	80005ac <main>
  bx  lr    
 8001b3a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001b3c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001b40:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b44:	20000184 	.word	0x20000184
  ldr r2, =_sidata
 8001b48:	0800ef14 	.word	0x0800ef14
  ldr r2, =_sbss
 8001b4c:	20000184 	.word	0x20000184
  ldr r4, =_ebss
 8001b50:	20005cc8 	.word	0x20005cc8

08001b54 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b54:	e7fe      	b.n	8001b54 <ADC_IRQHandler>
	...

08001b58 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001b5c:	4b0e      	ldr	r3, [pc, #56]	@ (8001b98 <HAL_Init+0x40>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	4a0d      	ldr	r2, [pc, #52]	@ (8001b98 <HAL_Init+0x40>)
 8001b62:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001b66:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001b68:	4b0b      	ldr	r3, [pc, #44]	@ (8001b98 <HAL_Init+0x40>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	4a0a      	ldr	r2, [pc, #40]	@ (8001b98 <HAL_Init+0x40>)
 8001b6e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001b72:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b74:	4b08      	ldr	r3, [pc, #32]	@ (8001b98 <HAL_Init+0x40>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	4a07      	ldr	r2, [pc, #28]	@ (8001b98 <HAL_Init+0x40>)
 8001b7a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b7e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b80:	2003      	movs	r0, #3
 8001b82:	f000 f8fc 	bl	8001d7e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b86:	200f      	movs	r0, #15
 8001b88:	f7ff fe96 	bl	80018b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b8c:	f7ff fcea 	bl	8001564 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b90:	2300      	movs	r3, #0
}
 8001b92:	4618      	mov	r0, r3
 8001b94:	bd80      	pop	{r7, pc}
 8001b96:	bf00      	nop
 8001b98:	40023c00 	.word	0x40023c00

08001b9c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ba0:	4b06      	ldr	r3, [pc, #24]	@ (8001bbc <HAL_IncTick+0x20>)
 8001ba2:	781b      	ldrb	r3, [r3, #0]
 8001ba4:	461a      	mov	r2, r3
 8001ba6:	4b06      	ldr	r3, [pc, #24]	@ (8001bc0 <HAL_IncTick+0x24>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	4413      	add	r3, r2
 8001bac:	4a04      	ldr	r2, [pc, #16]	@ (8001bc0 <HAL_IncTick+0x24>)
 8001bae:	6013      	str	r3, [r2, #0]
}
 8001bb0:	bf00      	nop
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb8:	4770      	bx	lr
 8001bba:	bf00      	nop
 8001bbc:	2000001c 	.word	0x2000001c
 8001bc0:	200007bc 	.word	0x200007bc

08001bc4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	af00      	add	r7, sp, #0
  return uwTick;
 8001bc8:	4b03      	ldr	r3, [pc, #12]	@ (8001bd8 <HAL_GetTick+0x14>)
 8001bca:	681b      	ldr	r3, [r3, #0]
}
 8001bcc:	4618      	mov	r0, r3
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd4:	4770      	bx	lr
 8001bd6:	bf00      	nop
 8001bd8:	200007bc 	.word	0x200007bc

08001bdc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b084      	sub	sp, #16
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001be4:	f7ff ffee 	bl	8001bc4 <HAL_GetTick>
 8001be8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bf4:	d005      	beq.n	8001c02 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001bf6:	4b0a      	ldr	r3, [pc, #40]	@ (8001c20 <HAL_Delay+0x44>)
 8001bf8:	781b      	ldrb	r3, [r3, #0]
 8001bfa:	461a      	mov	r2, r3
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	4413      	add	r3, r2
 8001c00:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001c02:	bf00      	nop
 8001c04:	f7ff ffde 	bl	8001bc4 <HAL_GetTick>
 8001c08:	4602      	mov	r2, r0
 8001c0a:	68bb      	ldr	r3, [r7, #8]
 8001c0c:	1ad3      	subs	r3, r2, r3
 8001c0e:	68fa      	ldr	r2, [r7, #12]
 8001c10:	429a      	cmp	r2, r3
 8001c12:	d8f7      	bhi.n	8001c04 <HAL_Delay+0x28>
  {
  }
}
 8001c14:	bf00      	nop
 8001c16:	bf00      	nop
 8001c18:	3710      	adds	r7, #16
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}
 8001c1e:	bf00      	nop
 8001c20:	2000001c 	.word	0x2000001c

08001c24 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c24:	b480      	push	{r7}
 8001c26:	b085      	sub	sp, #20
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	f003 0307 	and.w	r3, r3, #7
 8001c32:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c34:	4b0c      	ldr	r3, [pc, #48]	@ (8001c68 <__NVIC_SetPriorityGrouping+0x44>)
 8001c36:	68db      	ldr	r3, [r3, #12]
 8001c38:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c3a:	68ba      	ldr	r2, [r7, #8]
 8001c3c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001c40:	4013      	ands	r3, r2
 8001c42:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c48:	68bb      	ldr	r3, [r7, #8]
 8001c4a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c4c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001c50:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001c54:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c56:	4a04      	ldr	r2, [pc, #16]	@ (8001c68 <__NVIC_SetPriorityGrouping+0x44>)
 8001c58:	68bb      	ldr	r3, [r7, #8]
 8001c5a:	60d3      	str	r3, [r2, #12]
}
 8001c5c:	bf00      	nop
 8001c5e:	3714      	adds	r7, #20
 8001c60:	46bd      	mov	sp, r7
 8001c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c66:	4770      	bx	lr
 8001c68:	e000ed00 	.word	0xe000ed00

08001c6c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c70:	4b04      	ldr	r3, [pc, #16]	@ (8001c84 <__NVIC_GetPriorityGrouping+0x18>)
 8001c72:	68db      	ldr	r3, [r3, #12]
 8001c74:	0a1b      	lsrs	r3, r3, #8
 8001c76:	f003 0307 	and.w	r3, r3, #7
}
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c82:	4770      	bx	lr
 8001c84:	e000ed00 	.word	0xe000ed00

08001c88 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	b083      	sub	sp, #12
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	4603      	mov	r3, r0
 8001c90:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	db0b      	blt.n	8001cb2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c9a:	79fb      	ldrb	r3, [r7, #7]
 8001c9c:	f003 021f 	and.w	r2, r3, #31
 8001ca0:	4907      	ldr	r1, [pc, #28]	@ (8001cc0 <__NVIC_EnableIRQ+0x38>)
 8001ca2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ca6:	095b      	lsrs	r3, r3, #5
 8001ca8:	2001      	movs	r0, #1
 8001caa:	fa00 f202 	lsl.w	r2, r0, r2
 8001cae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001cb2:	bf00      	nop
 8001cb4:	370c      	adds	r7, #12
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbc:	4770      	bx	lr
 8001cbe:	bf00      	nop
 8001cc0:	e000e100 	.word	0xe000e100

08001cc4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	b083      	sub	sp, #12
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	4603      	mov	r3, r0
 8001ccc:	6039      	str	r1, [r7, #0]
 8001cce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	db0a      	blt.n	8001cee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	b2da      	uxtb	r2, r3
 8001cdc:	490c      	ldr	r1, [pc, #48]	@ (8001d10 <__NVIC_SetPriority+0x4c>)
 8001cde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ce2:	0112      	lsls	r2, r2, #4
 8001ce4:	b2d2      	uxtb	r2, r2
 8001ce6:	440b      	add	r3, r1
 8001ce8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001cec:	e00a      	b.n	8001d04 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	b2da      	uxtb	r2, r3
 8001cf2:	4908      	ldr	r1, [pc, #32]	@ (8001d14 <__NVIC_SetPriority+0x50>)
 8001cf4:	79fb      	ldrb	r3, [r7, #7]
 8001cf6:	f003 030f 	and.w	r3, r3, #15
 8001cfa:	3b04      	subs	r3, #4
 8001cfc:	0112      	lsls	r2, r2, #4
 8001cfe:	b2d2      	uxtb	r2, r2
 8001d00:	440b      	add	r3, r1
 8001d02:	761a      	strb	r2, [r3, #24]
}
 8001d04:	bf00      	nop
 8001d06:	370c      	adds	r7, #12
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0e:	4770      	bx	lr
 8001d10:	e000e100 	.word	0xe000e100
 8001d14:	e000ed00 	.word	0xe000ed00

08001d18 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	b089      	sub	sp, #36	@ 0x24
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	60f8      	str	r0, [r7, #12]
 8001d20:	60b9      	str	r1, [r7, #8]
 8001d22:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	f003 0307 	and.w	r3, r3, #7
 8001d2a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d2c:	69fb      	ldr	r3, [r7, #28]
 8001d2e:	f1c3 0307 	rsb	r3, r3, #7
 8001d32:	2b04      	cmp	r3, #4
 8001d34:	bf28      	it	cs
 8001d36:	2304      	movcs	r3, #4
 8001d38:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d3a:	69fb      	ldr	r3, [r7, #28]
 8001d3c:	3304      	adds	r3, #4
 8001d3e:	2b06      	cmp	r3, #6
 8001d40:	d902      	bls.n	8001d48 <NVIC_EncodePriority+0x30>
 8001d42:	69fb      	ldr	r3, [r7, #28]
 8001d44:	3b03      	subs	r3, #3
 8001d46:	e000      	b.n	8001d4a <NVIC_EncodePriority+0x32>
 8001d48:	2300      	movs	r3, #0
 8001d4a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d4c:	f04f 32ff 	mov.w	r2, #4294967295
 8001d50:	69bb      	ldr	r3, [r7, #24]
 8001d52:	fa02 f303 	lsl.w	r3, r2, r3
 8001d56:	43da      	mvns	r2, r3
 8001d58:	68bb      	ldr	r3, [r7, #8]
 8001d5a:	401a      	ands	r2, r3
 8001d5c:	697b      	ldr	r3, [r7, #20]
 8001d5e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d60:	f04f 31ff 	mov.w	r1, #4294967295
 8001d64:	697b      	ldr	r3, [r7, #20]
 8001d66:	fa01 f303 	lsl.w	r3, r1, r3
 8001d6a:	43d9      	mvns	r1, r3
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d70:	4313      	orrs	r3, r2
         );
}
 8001d72:	4618      	mov	r0, r3
 8001d74:	3724      	adds	r7, #36	@ 0x24
 8001d76:	46bd      	mov	sp, r7
 8001d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7c:	4770      	bx	lr

08001d7e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d7e:	b580      	push	{r7, lr}
 8001d80:	b082      	sub	sp, #8
 8001d82:	af00      	add	r7, sp, #0
 8001d84:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d86:	6878      	ldr	r0, [r7, #4]
 8001d88:	f7ff ff4c 	bl	8001c24 <__NVIC_SetPriorityGrouping>
}
 8001d8c:	bf00      	nop
 8001d8e:	3708      	adds	r7, #8
 8001d90:	46bd      	mov	sp, r7
 8001d92:	bd80      	pop	{r7, pc}

08001d94 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b086      	sub	sp, #24
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	60b9      	str	r1, [r7, #8]
 8001d9e:	607a      	str	r2, [r7, #4]
 8001da0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001da2:	2300      	movs	r3, #0
 8001da4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001da6:	f7ff ff61 	bl	8001c6c <__NVIC_GetPriorityGrouping>
 8001daa:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001dac:	687a      	ldr	r2, [r7, #4]
 8001dae:	68b9      	ldr	r1, [r7, #8]
 8001db0:	6978      	ldr	r0, [r7, #20]
 8001db2:	f7ff ffb1 	bl	8001d18 <NVIC_EncodePriority>
 8001db6:	4602      	mov	r2, r0
 8001db8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001dbc:	4611      	mov	r1, r2
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	f7ff ff80 	bl	8001cc4 <__NVIC_SetPriority>
}
 8001dc4:	bf00      	nop
 8001dc6:	3718      	adds	r7, #24
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	bd80      	pop	{r7, pc}

08001dcc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b082      	sub	sp, #8
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001dd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dda:	4618      	mov	r0, r3
 8001ddc:	f7ff ff54 	bl	8001c88 <__NVIC_EnableIRQ>
}
 8001de0:	bf00      	nop
 8001de2:	3708      	adds	r7, #8
 8001de4:	46bd      	mov	sp, r7
 8001de6:	bd80      	pop	{r7, pc}

08001de8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b084      	sub	sp, #16
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001df4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001df6:	f7ff fee5 	bl	8001bc4 <HAL_GetTick>
 8001dfa:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001e02:	b2db      	uxtb	r3, r3
 8001e04:	2b02      	cmp	r3, #2
 8001e06:	d008      	beq.n	8001e1a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2280      	movs	r2, #128	@ 0x80
 8001e0c:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	2200      	movs	r2, #0
 8001e12:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001e16:	2301      	movs	r3, #1
 8001e18:	e052      	b.n	8001ec0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	681a      	ldr	r2, [r3, #0]
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f022 0216 	bic.w	r2, r2, #22
 8001e28:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	695a      	ldr	r2, [r3, #20]
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001e38:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d103      	bne.n	8001e4a <HAL_DMA_Abort+0x62>
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d007      	beq.n	8001e5a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	681a      	ldr	r2, [r3, #0]
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f022 0208 	bic.w	r2, r2, #8
 8001e58:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	681a      	ldr	r2, [r3, #0]
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f022 0201 	bic.w	r2, r2, #1
 8001e68:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e6a:	e013      	b.n	8001e94 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001e6c:	f7ff feaa 	bl	8001bc4 <HAL_GetTick>
 8001e70:	4602      	mov	r2, r0
 8001e72:	68bb      	ldr	r3, [r7, #8]
 8001e74:	1ad3      	subs	r3, r2, r3
 8001e76:	2b05      	cmp	r3, #5
 8001e78:	d90c      	bls.n	8001e94 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	2220      	movs	r2, #32
 8001e7e:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2203      	movs	r2, #3
 8001e84:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001e90:	2303      	movs	r3, #3
 8001e92:	e015      	b.n	8001ec0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f003 0301 	and.w	r3, r3, #1
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d1e4      	bne.n	8001e6c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ea6:	223f      	movs	r2, #63	@ 0x3f
 8001ea8:	409a      	lsls	r2, r3
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	2201      	movs	r2, #1
 8001eb2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	2200      	movs	r2, #0
 8001eba:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8001ebe:	2300      	movs	r3, #0
}
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	3710      	adds	r7, #16
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	bd80      	pop	{r7, pc}

08001ec8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	b083      	sub	sp, #12
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001ed6:	b2db      	uxtb	r3, r3
 8001ed8:	2b02      	cmp	r3, #2
 8001eda:	d004      	beq.n	8001ee6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	2280      	movs	r2, #128	@ 0x80
 8001ee0:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	e00c      	b.n	8001f00 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	2205      	movs	r2, #5
 8001eea:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	681a      	ldr	r2, [r3, #0]
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f022 0201 	bic.w	r2, r2, #1
 8001efc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001efe:	2300      	movs	r3, #0
}
 8001f00:	4618      	mov	r0, r3
 8001f02:	370c      	adds	r7, #12
 8001f04:	46bd      	mov	sp, r7
 8001f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0a:	4770      	bx	lr

08001f0c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	b089      	sub	sp, #36	@ 0x24
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
 8001f14:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001f16:	2300      	movs	r3, #0
 8001f18:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f22:	2300      	movs	r3, #0
 8001f24:	61fb      	str	r3, [r7, #28]
 8001f26:	e159      	b.n	80021dc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001f28:	2201      	movs	r2, #1
 8001f2a:	69fb      	ldr	r3, [r7, #28]
 8001f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f30:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	697a      	ldr	r2, [r7, #20]
 8001f38:	4013      	ands	r3, r2
 8001f3a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001f3c:	693a      	ldr	r2, [r7, #16]
 8001f3e:	697b      	ldr	r3, [r7, #20]
 8001f40:	429a      	cmp	r2, r3
 8001f42:	f040 8148 	bne.w	80021d6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	685b      	ldr	r3, [r3, #4]
 8001f4a:	f003 0303 	and.w	r3, r3, #3
 8001f4e:	2b01      	cmp	r3, #1
 8001f50:	d005      	beq.n	8001f5e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	685b      	ldr	r3, [r3, #4]
 8001f56:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f5a:	2b02      	cmp	r3, #2
 8001f5c:	d130      	bne.n	8001fc0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	689b      	ldr	r3, [r3, #8]
 8001f62:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001f64:	69fb      	ldr	r3, [r7, #28]
 8001f66:	005b      	lsls	r3, r3, #1
 8001f68:	2203      	movs	r2, #3
 8001f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f6e:	43db      	mvns	r3, r3
 8001f70:	69ba      	ldr	r2, [r7, #24]
 8001f72:	4013      	ands	r3, r2
 8001f74:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	68da      	ldr	r2, [r3, #12]
 8001f7a:	69fb      	ldr	r3, [r7, #28]
 8001f7c:	005b      	lsls	r3, r3, #1
 8001f7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f82:	69ba      	ldr	r2, [r7, #24]
 8001f84:	4313      	orrs	r3, r2
 8001f86:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	69ba      	ldr	r2, [r7, #24]
 8001f8c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	685b      	ldr	r3, [r3, #4]
 8001f92:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f94:	2201      	movs	r2, #1
 8001f96:	69fb      	ldr	r3, [r7, #28]
 8001f98:	fa02 f303 	lsl.w	r3, r2, r3
 8001f9c:	43db      	mvns	r3, r3
 8001f9e:	69ba      	ldr	r2, [r7, #24]
 8001fa0:	4013      	ands	r3, r2
 8001fa2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	685b      	ldr	r3, [r3, #4]
 8001fa8:	091b      	lsrs	r3, r3, #4
 8001faa:	f003 0201 	and.w	r2, r3, #1
 8001fae:	69fb      	ldr	r3, [r7, #28]
 8001fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb4:	69ba      	ldr	r2, [r7, #24]
 8001fb6:	4313      	orrs	r3, r2
 8001fb8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	69ba      	ldr	r2, [r7, #24]
 8001fbe:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	685b      	ldr	r3, [r3, #4]
 8001fc4:	f003 0303 	and.w	r3, r3, #3
 8001fc8:	2b03      	cmp	r3, #3
 8001fca:	d017      	beq.n	8001ffc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	68db      	ldr	r3, [r3, #12]
 8001fd0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001fd2:	69fb      	ldr	r3, [r7, #28]
 8001fd4:	005b      	lsls	r3, r3, #1
 8001fd6:	2203      	movs	r2, #3
 8001fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fdc:	43db      	mvns	r3, r3
 8001fde:	69ba      	ldr	r2, [r7, #24]
 8001fe0:	4013      	ands	r3, r2
 8001fe2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	689a      	ldr	r2, [r3, #8]
 8001fe8:	69fb      	ldr	r3, [r7, #28]
 8001fea:	005b      	lsls	r3, r3, #1
 8001fec:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff0:	69ba      	ldr	r2, [r7, #24]
 8001ff2:	4313      	orrs	r3, r2
 8001ff4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	69ba      	ldr	r2, [r7, #24]
 8001ffa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	f003 0303 	and.w	r3, r3, #3
 8002004:	2b02      	cmp	r3, #2
 8002006:	d123      	bne.n	8002050 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002008:	69fb      	ldr	r3, [r7, #28]
 800200a:	08da      	lsrs	r2, r3, #3
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	3208      	adds	r2, #8
 8002010:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002014:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002016:	69fb      	ldr	r3, [r7, #28]
 8002018:	f003 0307 	and.w	r3, r3, #7
 800201c:	009b      	lsls	r3, r3, #2
 800201e:	220f      	movs	r2, #15
 8002020:	fa02 f303 	lsl.w	r3, r2, r3
 8002024:	43db      	mvns	r3, r3
 8002026:	69ba      	ldr	r2, [r7, #24]
 8002028:	4013      	ands	r3, r2
 800202a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	691a      	ldr	r2, [r3, #16]
 8002030:	69fb      	ldr	r3, [r7, #28]
 8002032:	f003 0307 	and.w	r3, r3, #7
 8002036:	009b      	lsls	r3, r3, #2
 8002038:	fa02 f303 	lsl.w	r3, r2, r3
 800203c:	69ba      	ldr	r2, [r7, #24]
 800203e:	4313      	orrs	r3, r2
 8002040:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002042:	69fb      	ldr	r3, [r7, #28]
 8002044:	08da      	lsrs	r2, r3, #3
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	3208      	adds	r2, #8
 800204a:	69b9      	ldr	r1, [r7, #24]
 800204c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002056:	69fb      	ldr	r3, [r7, #28]
 8002058:	005b      	lsls	r3, r3, #1
 800205a:	2203      	movs	r2, #3
 800205c:	fa02 f303 	lsl.w	r3, r2, r3
 8002060:	43db      	mvns	r3, r3
 8002062:	69ba      	ldr	r2, [r7, #24]
 8002064:	4013      	ands	r3, r2
 8002066:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	685b      	ldr	r3, [r3, #4]
 800206c:	f003 0203 	and.w	r2, r3, #3
 8002070:	69fb      	ldr	r3, [r7, #28]
 8002072:	005b      	lsls	r3, r3, #1
 8002074:	fa02 f303 	lsl.w	r3, r2, r3
 8002078:	69ba      	ldr	r2, [r7, #24]
 800207a:	4313      	orrs	r3, r2
 800207c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	69ba      	ldr	r2, [r7, #24]
 8002082:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	685b      	ldr	r3, [r3, #4]
 8002088:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800208c:	2b00      	cmp	r3, #0
 800208e:	f000 80a2 	beq.w	80021d6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002092:	2300      	movs	r3, #0
 8002094:	60fb      	str	r3, [r7, #12]
 8002096:	4b57      	ldr	r3, [pc, #348]	@ (80021f4 <HAL_GPIO_Init+0x2e8>)
 8002098:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800209a:	4a56      	ldr	r2, [pc, #344]	@ (80021f4 <HAL_GPIO_Init+0x2e8>)
 800209c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80020a0:	6453      	str	r3, [r2, #68]	@ 0x44
 80020a2:	4b54      	ldr	r3, [pc, #336]	@ (80021f4 <HAL_GPIO_Init+0x2e8>)
 80020a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020a6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80020aa:	60fb      	str	r3, [r7, #12]
 80020ac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80020ae:	4a52      	ldr	r2, [pc, #328]	@ (80021f8 <HAL_GPIO_Init+0x2ec>)
 80020b0:	69fb      	ldr	r3, [r7, #28]
 80020b2:	089b      	lsrs	r3, r3, #2
 80020b4:	3302      	adds	r3, #2
 80020b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80020bc:	69fb      	ldr	r3, [r7, #28]
 80020be:	f003 0303 	and.w	r3, r3, #3
 80020c2:	009b      	lsls	r3, r3, #2
 80020c4:	220f      	movs	r2, #15
 80020c6:	fa02 f303 	lsl.w	r3, r2, r3
 80020ca:	43db      	mvns	r3, r3
 80020cc:	69ba      	ldr	r2, [r7, #24]
 80020ce:	4013      	ands	r3, r2
 80020d0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	4a49      	ldr	r2, [pc, #292]	@ (80021fc <HAL_GPIO_Init+0x2f0>)
 80020d6:	4293      	cmp	r3, r2
 80020d8:	d019      	beq.n	800210e <HAL_GPIO_Init+0x202>
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	4a48      	ldr	r2, [pc, #288]	@ (8002200 <HAL_GPIO_Init+0x2f4>)
 80020de:	4293      	cmp	r3, r2
 80020e0:	d013      	beq.n	800210a <HAL_GPIO_Init+0x1fe>
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	4a47      	ldr	r2, [pc, #284]	@ (8002204 <HAL_GPIO_Init+0x2f8>)
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d00d      	beq.n	8002106 <HAL_GPIO_Init+0x1fa>
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	4a46      	ldr	r2, [pc, #280]	@ (8002208 <HAL_GPIO_Init+0x2fc>)
 80020ee:	4293      	cmp	r3, r2
 80020f0:	d007      	beq.n	8002102 <HAL_GPIO_Init+0x1f6>
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	4a45      	ldr	r2, [pc, #276]	@ (800220c <HAL_GPIO_Init+0x300>)
 80020f6:	4293      	cmp	r3, r2
 80020f8:	d101      	bne.n	80020fe <HAL_GPIO_Init+0x1f2>
 80020fa:	2304      	movs	r3, #4
 80020fc:	e008      	b.n	8002110 <HAL_GPIO_Init+0x204>
 80020fe:	2307      	movs	r3, #7
 8002100:	e006      	b.n	8002110 <HAL_GPIO_Init+0x204>
 8002102:	2303      	movs	r3, #3
 8002104:	e004      	b.n	8002110 <HAL_GPIO_Init+0x204>
 8002106:	2302      	movs	r3, #2
 8002108:	e002      	b.n	8002110 <HAL_GPIO_Init+0x204>
 800210a:	2301      	movs	r3, #1
 800210c:	e000      	b.n	8002110 <HAL_GPIO_Init+0x204>
 800210e:	2300      	movs	r3, #0
 8002110:	69fa      	ldr	r2, [r7, #28]
 8002112:	f002 0203 	and.w	r2, r2, #3
 8002116:	0092      	lsls	r2, r2, #2
 8002118:	4093      	lsls	r3, r2
 800211a:	69ba      	ldr	r2, [r7, #24]
 800211c:	4313      	orrs	r3, r2
 800211e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002120:	4935      	ldr	r1, [pc, #212]	@ (80021f8 <HAL_GPIO_Init+0x2ec>)
 8002122:	69fb      	ldr	r3, [r7, #28]
 8002124:	089b      	lsrs	r3, r3, #2
 8002126:	3302      	adds	r3, #2
 8002128:	69ba      	ldr	r2, [r7, #24]
 800212a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800212e:	4b38      	ldr	r3, [pc, #224]	@ (8002210 <HAL_GPIO_Init+0x304>)
 8002130:	689b      	ldr	r3, [r3, #8]
 8002132:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002134:	693b      	ldr	r3, [r7, #16]
 8002136:	43db      	mvns	r3, r3
 8002138:	69ba      	ldr	r2, [r7, #24]
 800213a:	4013      	ands	r3, r2
 800213c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	685b      	ldr	r3, [r3, #4]
 8002142:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002146:	2b00      	cmp	r3, #0
 8002148:	d003      	beq.n	8002152 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800214a:	69ba      	ldr	r2, [r7, #24]
 800214c:	693b      	ldr	r3, [r7, #16]
 800214e:	4313      	orrs	r3, r2
 8002150:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002152:	4a2f      	ldr	r2, [pc, #188]	@ (8002210 <HAL_GPIO_Init+0x304>)
 8002154:	69bb      	ldr	r3, [r7, #24]
 8002156:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002158:	4b2d      	ldr	r3, [pc, #180]	@ (8002210 <HAL_GPIO_Init+0x304>)
 800215a:	68db      	ldr	r3, [r3, #12]
 800215c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800215e:	693b      	ldr	r3, [r7, #16]
 8002160:	43db      	mvns	r3, r3
 8002162:	69ba      	ldr	r2, [r7, #24]
 8002164:	4013      	ands	r3, r2
 8002166:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	685b      	ldr	r3, [r3, #4]
 800216c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002170:	2b00      	cmp	r3, #0
 8002172:	d003      	beq.n	800217c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002174:	69ba      	ldr	r2, [r7, #24]
 8002176:	693b      	ldr	r3, [r7, #16]
 8002178:	4313      	orrs	r3, r2
 800217a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800217c:	4a24      	ldr	r2, [pc, #144]	@ (8002210 <HAL_GPIO_Init+0x304>)
 800217e:	69bb      	ldr	r3, [r7, #24]
 8002180:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002182:	4b23      	ldr	r3, [pc, #140]	@ (8002210 <HAL_GPIO_Init+0x304>)
 8002184:	685b      	ldr	r3, [r3, #4]
 8002186:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002188:	693b      	ldr	r3, [r7, #16]
 800218a:	43db      	mvns	r3, r3
 800218c:	69ba      	ldr	r2, [r7, #24]
 800218e:	4013      	ands	r3, r2
 8002190:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	685b      	ldr	r3, [r3, #4]
 8002196:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800219a:	2b00      	cmp	r3, #0
 800219c:	d003      	beq.n	80021a6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800219e:	69ba      	ldr	r2, [r7, #24]
 80021a0:	693b      	ldr	r3, [r7, #16]
 80021a2:	4313      	orrs	r3, r2
 80021a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80021a6:	4a1a      	ldr	r2, [pc, #104]	@ (8002210 <HAL_GPIO_Init+0x304>)
 80021a8:	69bb      	ldr	r3, [r7, #24]
 80021aa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80021ac:	4b18      	ldr	r3, [pc, #96]	@ (8002210 <HAL_GPIO_Init+0x304>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021b2:	693b      	ldr	r3, [r7, #16]
 80021b4:	43db      	mvns	r3, r3
 80021b6:	69ba      	ldr	r2, [r7, #24]
 80021b8:	4013      	ands	r3, r2
 80021ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	685b      	ldr	r3, [r3, #4]
 80021c0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d003      	beq.n	80021d0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80021c8:	69ba      	ldr	r2, [r7, #24]
 80021ca:	693b      	ldr	r3, [r7, #16]
 80021cc:	4313      	orrs	r3, r2
 80021ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80021d0:	4a0f      	ldr	r2, [pc, #60]	@ (8002210 <HAL_GPIO_Init+0x304>)
 80021d2:	69bb      	ldr	r3, [r7, #24]
 80021d4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80021d6:	69fb      	ldr	r3, [r7, #28]
 80021d8:	3301      	adds	r3, #1
 80021da:	61fb      	str	r3, [r7, #28]
 80021dc:	69fb      	ldr	r3, [r7, #28]
 80021de:	2b0f      	cmp	r3, #15
 80021e0:	f67f aea2 	bls.w	8001f28 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80021e4:	bf00      	nop
 80021e6:	bf00      	nop
 80021e8:	3724      	adds	r7, #36	@ 0x24
 80021ea:	46bd      	mov	sp, r7
 80021ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f0:	4770      	bx	lr
 80021f2:	bf00      	nop
 80021f4:	40023800 	.word	0x40023800
 80021f8:	40013800 	.word	0x40013800
 80021fc:	40020000 	.word	0x40020000
 8002200:	40020400 	.word	0x40020400
 8002204:	40020800 	.word	0x40020800
 8002208:	40020c00 	.word	0x40020c00
 800220c:	40021000 	.word	0x40021000
 8002210:	40013c00 	.word	0x40013c00

08002214 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b082      	sub	sp, #8
 8002218:	af00      	add	r7, sp, #0
 800221a:	4603      	mov	r3, r0
 800221c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800221e:	4b08      	ldr	r3, [pc, #32]	@ (8002240 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002220:	695a      	ldr	r2, [r3, #20]
 8002222:	88fb      	ldrh	r3, [r7, #6]
 8002224:	4013      	ands	r3, r2
 8002226:	2b00      	cmp	r3, #0
 8002228:	d006      	beq.n	8002238 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800222a:	4a05      	ldr	r2, [pc, #20]	@ (8002240 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800222c:	88fb      	ldrh	r3, [r7, #6]
 800222e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002230:	88fb      	ldrh	r3, [r7, #6]
 8002232:	4618      	mov	r0, r3
 8002234:	f7fe fc5a 	bl	8000aec <HAL_GPIO_EXTI_Callback>
  }
}
 8002238:	bf00      	nop
 800223a:	3708      	adds	r7, #8
 800223c:	46bd      	mov	sp, r7
 800223e:	bd80      	pop	{r7, pc}
 8002240:	40013c00 	.word	0x40013c00

08002244 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b084      	sub	sp, #16
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2b00      	cmp	r3, #0
 8002250:	d101      	bne.n	8002256 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002252:	2301      	movs	r3, #1
 8002254:	e12b      	b.n	80024ae <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800225c:	b2db      	uxtb	r3, r3
 800225e:	2b00      	cmp	r3, #0
 8002260:	d106      	bne.n	8002270 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	2200      	movs	r2, #0
 8002266:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800226a:	6878      	ldr	r0, [r7, #4]
 800226c:	f7ff f9a6 	bl	80015bc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2224      	movs	r2, #36	@ 0x24
 8002274:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	681a      	ldr	r2, [r3, #0]
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f022 0201 	bic.w	r2, r2, #1
 8002286:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	681a      	ldr	r2, [r3, #0]
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002296:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	681a      	ldr	r2, [r3, #0]
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80022a6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80022a8:	f002 fae4 	bl	8004874 <HAL_RCC_GetPCLK1Freq>
 80022ac:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	685b      	ldr	r3, [r3, #4]
 80022b2:	4a81      	ldr	r2, [pc, #516]	@ (80024b8 <HAL_I2C_Init+0x274>)
 80022b4:	4293      	cmp	r3, r2
 80022b6:	d807      	bhi.n	80022c8 <HAL_I2C_Init+0x84>
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	4a80      	ldr	r2, [pc, #512]	@ (80024bc <HAL_I2C_Init+0x278>)
 80022bc:	4293      	cmp	r3, r2
 80022be:	bf94      	ite	ls
 80022c0:	2301      	movls	r3, #1
 80022c2:	2300      	movhi	r3, #0
 80022c4:	b2db      	uxtb	r3, r3
 80022c6:	e006      	b.n	80022d6 <HAL_I2C_Init+0x92>
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	4a7d      	ldr	r2, [pc, #500]	@ (80024c0 <HAL_I2C_Init+0x27c>)
 80022cc:	4293      	cmp	r3, r2
 80022ce:	bf94      	ite	ls
 80022d0:	2301      	movls	r3, #1
 80022d2:	2300      	movhi	r3, #0
 80022d4:	b2db      	uxtb	r3, r3
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d001      	beq.n	80022de <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80022da:	2301      	movs	r3, #1
 80022dc:	e0e7      	b.n	80024ae <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	4a78      	ldr	r2, [pc, #480]	@ (80024c4 <HAL_I2C_Init+0x280>)
 80022e2:	fba2 2303 	umull	r2, r3, r2, r3
 80022e6:	0c9b      	lsrs	r3, r3, #18
 80022e8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	685b      	ldr	r3, [r3, #4]
 80022f0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	68ba      	ldr	r2, [r7, #8]
 80022fa:	430a      	orrs	r2, r1
 80022fc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	6a1b      	ldr	r3, [r3, #32]
 8002304:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	685b      	ldr	r3, [r3, #4]
 800230c:	4a6a      	ldr	r2, [pc, #424]	@ (80024b8 <HAL_I2C_Init+0x274>)
 800230e:	4293      	cmp	r3, r2
 8002310:	d802      	bhi.n	8002318 <HAL_I2C_Init+0xd4>
 8002312:	68bb      	ldr	r3, [r7, #8]
 8002314:	3301      	adds	r3, #1
 8002316:	e009      	b.n	800232c <HAL_I2C_Init+0xe8>
 8002318:	68bb      	ldr	r3, [r7, #8]
 800231a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800231e:	fb02 f303 	mul.w	r3, r2, r3
 8002322:	4a69      	ldr	r2, [pc, #420]	@ (80024c8 <HAL_I2C_Init+0x284>)
 8002324:	fba2 2303 	umull	r2, r3, r2, r3
 8002328:	099b      	lsrs	r3, r3, #6
 800232a:	3301      	adds	r3, #1
 800232c:	687a      	ldr	r2, [r7, #4]
 800232e:	6812      	ldr	r2, [r2, #0]
 8002330:	430b      	orrs	r3, r1
 8002332:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	69db      	ldr	r3, [r3, #28]
 800233a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800233e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	685b      	ldr	r3, [r3, #4]
 8002346:	495c      	ldr	r1, [pc, #368]	@ (80024b8 <HAL_I2C_Init+0x274>)
 8002348:	428b      	cmp	r3, r1
 800234a:	d819      	bhi.n	8002380 <HAL_I2C_Init+0x13c>
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	1e59      	subs	r1, r3, #1
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	685b      	ldr	r3, [r3, #4]
 8002354:	005b      	lsls	r3, r3, #1
 8002356:	fbb1 f3f3 	udiv	r3, r1, r3
 800235a:	1c59      	adds	r1, r3, #1
 800235c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002360:	400b      	ands	r3, r1
 8002362:	2b00      	cmp	r3, #0
 8002364:	d00a      	beq.n	800237c <HAL_I2C_Init+0x138>
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	1e59      	subs	r1, r3, #1
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	685b      	ldr	r3, [r3, #4]
 800236e:	005b      	lsls	r3, r3, #1
 8002370:	fbb1 f3f3 	udiv	r3, r1, r3
 8002374:	3301      	adds	r3, #1
 8002376:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800237a:	e051      	b.n	8002420 <HAL_I2C_Init+0x1dc>
 800237c:	2304      	movs	r3, #4
 800237e:	e04f      	b.n	8002420 <HAL_I2C_Init+0x1dc>
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	689b      	ldr	r3, [r3, #8]
 8002384:	2b00      	cmp	r3, #0
 8002386:	d111      	bne.n	80023ac <HAL_I2C_Init+0x168>
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	1e58      	subs	r0, r3, #1
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6859      	ldr	r1, [r3, #4]
 8002390:	460b      	mov	r3, r1
 8002392:	005b      	lsls	r3, r3, #1
 8002394:	440b      	add	r3, r1
 8002396:	fbb0 f3f3 	udiv	r3, r0, r3
 800239a:	3301      	adds	r3, #1
 800239c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	bf0c      	ite	eq
 80023a4:	2301      	moveq	r3, #1
 80023a6:	2300      	movne	r3, #0
 80023a8:	b2db      	uxtb	r3, r3
 80023aa:	e012      	b.n	80023d2 <HAL_I2C_Init+0x18e>
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	1e58      	subs	r0, r3, #1
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	6859      	ldr	r1, [r3, #4]
 80023b4:	460b      	mov	r3, r1
 80023b6:	009b      	lsls	r3, r3, #2
 80023b8:	440b      	add	r3, r1
 80023ba:	0099      	lsls	r1, r3, #2
 80023bc:	440b      	add	r3, r1
 80023be:	fbb0 f3f3 	udiv	r3, r0, r3
 80023c2:	3301      	adds	r3, #1
 80023c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	bf0c      	ite	eq
 80023cc:	2301      	moveq	r3, #1
 80023ce:	2300      	movne	r3, #0
 80023d0:	b2db      	uxtb	r3, r3
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d001      	beq.n	80023da <HAL_I2C_Init+0x196>
 80023d6:	2301      	movs	r3, #1
 80023d8:	e022      	b.n	8002420 <HAL_I2C_Init+0x1dc>
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	689b      	ldr	r3, [r3, #8]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d10e      	bne.n	8002400 <HAL_I2C_Init+0x1bc>
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	1e58      	subs	r0, r3, #1
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6859      	ldr	r1, [r3, #4]
 80023ea:	460b      	mov	r3, r1
 80023ec:	005b      	lsls	r3, r3, #1
 80023ee:	440b      	add	r3, r1
 80023f0:	fbb0 f3f3 	udiv	r3, r0, r3
 80023f4:	3301      	adds	r3, #1
 80023f6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023fa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80023fe:	e00f      	b.n	8002420 <HAL_I2C_Init+0x1dc>
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	1e58      	subs	r0, r3, #1
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6859      	ldr	r1, [r3, #4]
 8002408:	460b      	mov	r3, r1
 800240a:	009b      	lsls	r3, r3, #2
 800240c:	440b      	add	r3, r1
 800240e:	0099      	lsls	r1, r3, #2
 8002410:	440b      	add	r3, r1
 8002412:	fbb0 f3f3 	udiv	r3, r0, r3
 8002416:	3301      	adds	r3, #1
 8002418:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800241c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002420:	6879      	ldr	r1, [r7, #4]
 8002422:	6809      	ldr	r1, [r1, #0]
 8002424:	4313      	orrs	r3, r2
 8002426:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	69da      	ldr	r2, [r3, #28]
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6a1b      	ldr	r3, [r3, #32]
 800243a:	431a      	orrs	r2, r3
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	430a      	orrs	r2, r1
 8002442:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	689b      	ldr	r3, [r3, #8]
 800244a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800244e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002452:	687a      	ldr	r2, [r7, #4]
 8002454:	6911      	ldr	r1, [r2, #16]
 8002456:	687a      	ldr	r2, [r7, #4]
 8002458:	68d2      	ldr	r2, [r2, #12]
 800245a:	4311      	orrs	r1, r2
 800245c:	687a      	ldr	r2, [r7, #4]
 800245e:	6812      	ldr	r2, [r2, #0]
 8002460:	430b      	orrs	r3, r1
 8002462:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	68db      	ldr	r3, [r3, #12]
 800246a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	695a      	ldr	r2, [r3, #20]
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	699b      	ldr	r3, [r3, #24]
 8002476:	431a      	orrs	r2, r3
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	430a      	orrs	r2, r1
 800247e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	681a      	ldr	r2, [r3, #0]
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f042 0201 	orr.w	r2, r2, #1
 800248e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2200      	movs	r2, #0
 8002494:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	2220      	movs	r2, #32
 800249a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	2200      	movs	r2, #0
 80024a2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2200      	movs	r2, #0
 80024a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80024ac:	2300      	movs	r3, #0
}
 80024ae:	4618      	mov	r0, r3
 80024b0:	3710      	adds	r7, #16
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bd80      	pop	{r7, pc}
 80024b6:	bf00      	nop
 80024b8:	000186a0 	.word	0x000186a0
 80024bc:	001e847f 	.word	0x001e847f
 80024c0:	003d08ff 	.word	0x003d08ff
 80024c4:	431bde83 	.word	0x431bde83
 80024c8:	10624dd3 	.word	0x10624dd3

080024cc <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b088      	sub	sp, #32
 80024d0:	af02      	add	r7, sp, #8
 80024d2:	60f8      	str	r0, [r7, #12]
 80024d4:	4608      	mov	r0, r1
 80024d6:	4611      	mov	r1, r2
 80024d8:	461a      	mov	r2, r3
 80024da:	4603      	mov	r3, r0
 80024dc:	817b      	strh	r3, [r7, #10]
 80024de:	460b      	mov	r3, r1
 80024e0:	813b      	strh	r3, [r7, #8]
 80024e2:	4613      	mov	r3, r2
 80024e4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80024e6:	f7ff fb6d 	bl	8001bc4 <HAL_GetTick>
 80024ea:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80024f2:	b2db      	uxtb	r3, r3
 80024f4:	2b20      	cmp	r3, #32
 80024f6:	f040 80d9 	bne.w	80026ac <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80024fa:	697b      	ldr	r3, [r7, #20]
 80024fc:	9300      	str	r3, [sp, #0]
 80024fe:	2319      	movs	r3, #25
 8002500:	2201      	movs	r2, #1
 8002502:	496d      	ldr	r1, [pc, #436]	@ (80026b8 <HAL_I2C_Mem_Write+0x1ec>)
 8002504:	68f8      	ldr	r0, [r7, #12]
 8002506:	f000 f971 	bl	80027ec <I2C_WaitOnFlagUntilTimeout>
 800250a:	4603      	mov	r3, r0
 800250c:	2b00      	cmp	r3, #0
 800250e:	d001      	beq.n	8002514 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002510:	2302      	movs	r3, #2
 8002512:	e0cc      	b.n	80026ae <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800251a:	2b01      	cmp	r3, #1
 800251c:	d101      	bne.n	8002522 <HAL_I2C_Mem_Write+0x56>
 800251e:	2302      	movs	r3, #2
 8002520:	e0c5      	b.n	80026ae <HAL_I2C_Mem_Write+0x1e2>
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	2201      	movs	r2, #1
 8002526:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f003 0301 	and.w	r3, r3, #1
 8002534:	2b01      	cmp	r3, #1
 8002536:	d007      	beq.n	8002548 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	681a      	ldr	r2, [r3, #0]
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f042 0201 	orr.w	r2, r2, #1
 8002546:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	681a      	ldr	r2, [r3, #0]
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002556:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	2221      	movs	r2, #33	@ 0x21
 800255c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	2240      	movs	r2, #64	@ 0x40
 8002564:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	2200      	movs	r2, #0
 800256c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	6a3a      	ldr	r2, [r7, #32]
 8002572:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002578:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800257e:	b29a      	uxth	r2, r3
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	4a4d      	ldr	r2, [pc, #308]	@ (80026bc <HAL_I2C_Mem_Write+0x1f0>)
 8002588:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800258a:	88f8      	ldrh	r0, [r7, #6]
 800258c:	893a      	ldrh	r2, [r7, #8]
 800258e:	8979      	ldrh	r1, [r7, #10]
 8002590:	697b      	ldr	r3, [r7, #20]
 8002592:	9301      	str	r3, [sp, #4]
 8002594:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002596:	9300      	str	r3, [sp, #0]
 8002598:	4603      	mov	r3, r0
 800259a:	68f8      	ldr	r0, [r7, #12]
 800259c:	f000 f890 	bl	80026c0 <I2C_RequestMemoryWrite>
 80025a0:	4603      	mov	r3, r0
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d052      	beq.n	800264c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80025a6:	2301      	movs	r3, #1
 80025a8:	e081      	b.n	80026ae <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80025aa:	697a      	ldr	r2, [r7, #20]
 80025ac:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80025ae:	68f8      	ldr	r0, [r7, #12]
 80025b0:	f000 fa36 	bl	8002a20 <I2C_WaitOnTXEFlagUntilTimeout>
 80025b4:	4603      	mov	r3, r0
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d00d      	beq.n	80025d6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025be:	2b04      	cmp	r3, #4
 80025c0:	d107      	bne.n	80025d2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	681a      	ldr	r2, [r3, #0]
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80025d0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80025d2:	2301      	movs	r3, #1
 80025d4:	e06b      	b.n	80026ae <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025da:	781a      	ldrb	r2, [r3, #0]
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025e6:	1c5a      	adds	r2, r3, #1
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025f0:	3b01      	subs	r3, #1
 80025f2:	b29a      	uxth	r2, r3
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025fc:	b29b      	uxth	r3, r3
 80025fe:	3b01      	subs	r3, #1
 8002600:	b29a      	uxth	r2, r3
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	695b      	ldr	r3, [r3, #20]
 800260c:	f003 0304 	and.w	r3, r3, #4
 8002610:	2b04      	cmp	r3, #4
 8002612:	d11b      	bne.n	800264c <HAL_I2C_Mem_Write+0x180>
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002618:	2b00      	cmp	r3, #0
 800261a:	d017      	beq.n	800264c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002620:	781a      	ldrb	r2, [r3, #0]
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800262c:	1c5a      	adds	r2, r3, #1
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002636:	3b01      	subs	r3, #1
 8002638:	b29a      	uxth	r2, r3
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002642:	b29b      	uxth	r3, r3
 8002644:	3b01      	subs	r3, #1
 8002646:	b29a      	uxth	r2, r3
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002650:	2b00      	cmp	r3, #0
 8002652:	d1aa      	bne.n	80025aa <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002654:	697a      	ldr	r2, [r7, #20]
 8002656:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002658:	68f8      	ldr	r0, [r7, #12]
 800265a:	f000 fa29 	bl	8002ab0 <I2C_WaitOnBTFFlagUntilTimeout>
 800265e:	4603      	mov	r3, r0
 8002660:	2b00      	cmp	r3, #0
 8002662:	d00d      	beq.n	8002680 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002668:	2b04      	cmp	r3, #4
 800266a:	d107      	bne.n	800267c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	681a      	ldr	r2, [r3, #0]
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800267a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800267c:	2301      	movs	r3, #1
 800267e:	e016      	b.n	80026ae <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	681a      	ldr	r2, [r3, #0]
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800268e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	2220      	movs	r2, #32
 8002694:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	2200      	movs	r2, #0
 800269c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	2200      	movs	r2, #0
 80026a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80026a8:	2300      	movs	r3, #0
 80026aa:	e000      	b.n	80026ae <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80026ac:	2302      	movs	r3, #2
  }
}
 80026ae:	4618      	mov	r0, r3
 80026b0:	3718      	adds	r7, #24
 80026b2:	46bd      	mov	sp, r7
 80026b4:	bd80      	pop	{r7, pc}
 80026b6:	bf00      	nop
 80026b8:	00100002 	.word	0x00100002
 80026bc:	ffff0000 	.word	0xffff0000

080026c0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b088      	sub	sp, #32
 80026c4:	af02      	add	r7, sp, #8
 80026c6:	60f8      	str	r0, [r7, #12]
 80026c8:	4608      	mov	r0, r1
 80026ca:	4611      	mov	r1, r2
 80026cc:	461a      	mov	r2, r3
 80026ce:	4603      	mov	r3, r0
 80026d0:	817b      	strh	r3, [r7, #10]
 80026d2:	460b      	mov	r3, r1
 80026d4:	813b      	strh	r3, [r7, #8]
 80026d6:	4613      	mov	r3, r2
 80026d8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	681a      	ldr	r2, [r3, #0]
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80026e8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80026ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026ec:	9300      	str	r3, [sp, #0]
 80026ee:	6a3b      	ldr	r3, [r7, #32]
 80026f0:	2200      	movs	r2, #0
 80026f2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80026f6:	68f8      	ldr	r0, [r7, #12]
 80026f8:	f000 f878 	bl	80027ec <I2C_WaitOnFlagUntilTimeout>
 80026fc:	4603      	mov	r3, r0
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d00d      	beq.n	800271e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800270c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002710:	d103      	bne.n	800271a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002718:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800271a:	2303      	movs	r3, #3
 800271c:	e05f      	b.n	80027de <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800271e:	897b      	ldrh	r3, [r7, #10]
 8002720:	b2db      	uxtb	r3, r3
 8002722:	461a      	mov	r2, r3
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800272c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800272e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002730:	6a3a      	ldr	r2, [r7, #32]
 8002732:	492d      	ldr	r1, [pc, #180]	@ (80027e8 <I2C_RequestMemoryWrite+0x128>)
 8002734:	68f8      	ldr	r0, [r7, #12]
 8002736:	f000 f8d3 	bl	80028e0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800273a:	4603      	mov	r3, r0
 800273c:	2b00      	cmp	r3, #0
 800273e:	d001      	beq.n	8002744 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002740:	2301      	movs	r3, #1
 8002742:	e04c      	b.n	80027de <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002744:	2300      	movs	r3, #0
 8002746:	617b      	str	r3, [r7, #20]
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	695b      	ldr	r3, [r3, #20]
 800274e:	617b      	str	r3, [r7, #20]
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	699b      	ldr	r3, [r3, #24]
 8002756:	617b      	str	r3, [r7, #20]
 8002758:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800275a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800275c:	6a39      	ldr	r1, [r7, #32]
 800275e:	68f8      	ldr	r0, [r7, #12]
 8002760:	f000 f95e 	bl	8002a20 <I2C_WaitOnTXEFlagUntilTimeout>
 8002764:	4603      	mov	r3, r0
 8002766:	2b00      	cmp	r3, #0
 8002768:	d00d      	beq.n	8002786 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800276e:	2b04      	cmp	r3, #4
 8002770:	d107      	bne.n	8002782 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	681a      	ldr	r2, [r3, #0]
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002780:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002782:	2301      	movs	r3, #1
 8002784:	e02b      	b.n	80027de <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002786:	88fb      	ldrh	r3, [r7, #6]
 8002788:	2b01      	cmp	r3, #1
 800278a:	d105      	bne.n	8002798 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800278c:	893b      	ldrh	r3, [r7, #8]
 800278e:	b2da      	uxtb	r2, r3
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	611a      	str	r2, [r3, #16]
 8002796:	e021      	b.n	80027dc <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002798:	893b      	ldrh	r3, [r7, #8]
 800279a:	0a1b      	lsrs	r3, r3, #8
 800279c:	b29b      	uxth	r3, r3
 800279e:	b2da      	uxtb	r2, r3
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80027a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80027a8:	6a39      	ldr	r1, [r7, #32]
 80027aa:	68f8      	ldr	r0, [r7, #12]
 80027ac:	f000 f938 	bl	8002a20 <I2C_WaitOnTXEFlagUntilTimeout>
 80027b0:	4603      	mov	r3, r0
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d00d      	beq.n	80027d2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027ba:	2b04      	cmp	r3, #4
 80027bc:	d107      	bne.n	80027ce <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	681a      	ldr	r2, [r3, #0]
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80027cc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80027ce:	2301      	movs	r3, #1
 80027d0:	e005      	b.n	80027de <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80027d2:	893b      	ldrh	r3, [r7, #8]
 80027d4:	b2da      	uxtb	r2, r3
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80027dc:	2300      	movs	r3, #0
}
 80027de:	4618      	mov	r0, r3
 80027e0:	3718      	adds	r7, #24
 80027e2:	46bd      	mov	sp, r7
 80027e4:	bd80      	pop	{r7, pc}
 80027e6:	bf00      	nop
 80027e8:	00010002 	.word	0x00010002

080027ec <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b084      	sub	sp, #16
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	60f8      	str	r0, [r7, #12]
 80027f4:	60b9      	str	r1, [r7, #8]
 80027f6:	603b      	str	r3, [r7, #0]
 80027f8:	4613      	mov	r3, r2
 80027fa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80027fc:	e048      	b.n	8002890 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002804:	d044      	beq.n	8002890 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002806:	f7ff f9dd 	bl	8001bc4 <HAL_GetTick>
 800280a:	4602      	mov	r2, r0
 800280c:	69bb      	ldr	r3, [r7, #24]
 800280e:	1ad3      	subs	r3, r2, r3
 8002810:	683a      	ldr	r2, [r7, #0]
 8002812:	429a      	cmp	r2, r3
 8002814:	d302      	bcc.n	800281c <I2C_WaitOnFlagUntilTimeout+0x30>
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	2b00      	cmp	r3, #0
 800281a:	d139      	bne.n	8002890 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800281c:	68bb      	ldr	r3, [r7, #8]
 800281e:	0c1b      	lsrs	r3, r3, #16
 8002820:	b2db      	uxtb	r3, r3
 8002822:	2b01      	cmp	r3, #1
 8002824:	d10d      	bne.n	8002842 <I2C_WaitOnFlagUntilTimeout+0x56>
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	695b      	ldr	r3, [r3, #20]
 800282c:	43da      	mvns	r2, r3
 800282e:	68bb      	ldr	r3, [r7, #8]
 8002830:	4013      	ands	r3, r2
 8002832:	b29b      	uxth	r3, r3
 8002834:	2b00      	cmp	r3, #0
 8002836:	bf0c      	ite	eq
 8002838:	2301      	moveq	r3, #1
 800283a:	2300      	movne	r3, #0
 800283c:	b2db      	uxtb	r3, r3
 800283e:	461a      	mov	r2, r3
 8002840:	e00c      	b.n	800285c <I2C_WaitOnFlagUntilTimeout+0x70>
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	699b      	ldr	r3, [r3, #24]
 8002848:	43da      	mvns	r2, r3
 800284a:	68bb      	ldr	r3, [r7, #8]
 800284c:	4013      	ands	r3, r2
 800284e:	b29b      	uxth	r3, r3
 8002850:	2b00      	cmp	r3, #0
 8002852:	bf0c      	ite	eq
 8002854:	2301      	moveq	r3, #1
 8002856:	2300      	movne	r3, #0
 8002858:	b2db      	uxtb	r3, r3
 800285a:	461a      	mov	r2, r3
 800285c:	79fb      	ldrb	r3, [r7, #7]
 800285e:	429a      	cmp	r2, r3
 8002860:	d116      	bne.n	8002890 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	2200      	movs	r2, #0
 8002866:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	2220      	movs	r2, #32
 800286c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	2200      	movs	r2, #0
 8002874:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800287c:	f043 0220 	orr.w	r2, r3, #32
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	2200      	movs	r2, #0
 8002888:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800288c:	2301      	movs	r3, #1
 800288e:	e023      	b.n	80028d8 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002890:	68bb      	ldr	r3, [r7, #8]
 8002892:	0c1b      	lsrs	r3, r3, #16
 8002894:	b2db      	uxtb	r3, r3
 8002896:	2b01      	cmp	r3, #1
 8002898:	d10d      	bne.n	80028b6 <I2C_WaitOnFlagUntilTimeout+0xca>
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	695b      	ldr	r3, [r3, #20]
 80028a0:	43da      	mvns	r2, r3
 80028a2:	68bb      	ldr	r3, [r7, #8]
 80028a4:	4013      	ands	r3, r2
 80028a6:	b29b      	uxth	r3, r3
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	bf0c      	ite	eq
 80028ac:	2301      	moveq	r3, #1
 80028ae:	2300      	movne	r3, #0
 80028b0:	b2db      	uxtb	r3, r3
 80028b2:	461a      	mov	r2, r3
 80028b4:	e00c      	b.n	80028d0 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	699b      	ldr	r3, [r3, #24]
 80028bc:	43da      	mvns	r2, r3
 80028be:	68bb      	ldr	r3, [r7, #8]
 80028c0:	4013      	ands	r3, r2
 80028c2:	b29b      	uxth	r3, r3
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	bf0c      	ite	eq
 80028c8:	2301      	moveq	r3, #1
 80028ca:	2300      	movne	r3, #0
 80028cc:	b2db      	uxtb	r3, r3
 80028ce:	461a      	mov	r2, r3
 80028d0:	79fb      	ldrb	r3, [r7, #7]
 80028d2:	429a      	cmp	r2, r3
 80028d4:	d093      	beq.n	80027fe <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80028d6:	2300      	movs	r3, #0
}
 80028d8:	4618      	mov	r0, r3
 80028da:	3710      	adds	r7, #16
 80028dc:	46bd      	mov	sp, r7
 80028de:	bd80      	pop	{r7, pc}

080028e0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b084      	sub	sp, #16
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	60f8      	str	r0, [r7, #12]
 80028e8:	60b9      	str	r1, [r7, #8]
 80028ea:	607a      	str	r2, [r7, #4]
 80028ec:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80028ee:	e071      	b.n	80029d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	695b      	ldr	r3, [r3, #20]
 80028f6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80028fa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80028fe:	d123      	bne.n	8002948 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	681a      	ldr	r2, [r3, #0]
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800290e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002918:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	2200      	movs	r2, #0
 800291e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	2220      	movs	r2, #32
 8002924:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	2200      	movs	r2, #0
 800292c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002934:	f043 0204 	orr.w	r2, r3, #4
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	2200      	movs	r2, #0
 8002940:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002944:	2301      	movs	r3, #1
 8002946:	e067      	b.n	8002a18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800294e:	d041      	beq.n	80029d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002950:	f7ff f938 	bl	8001bc4 <HAL_GetTick>
 8002954:	4602      	mov	r2, r0
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	1ad3      	subs	r3, r2, r3
 800295a:	687a      	ldr	r2, [r7, #4]
 800295c:	429a      	cmp	r2, r3
 800295e:	d302      	bcc.n	8002966 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2b00      	cmp	r3, #0
 8002964:	d136      	bne.n	80029d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002966:	68bb      	ldr	r3, [r7, #8]
 8002968:	0c1b      	lsrs	r3, r3, #16
 800296a:	b2db      	uxtb	r3, r3
 800296c:	2b01      	cmp	r3, #1
 800296e:	d10c      	bne.n	800298a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	695b      	ldr	r3, [r3, #20]
 8002976:	43da      	mvns	r2, r3
 8002978:	68bb      	ldr	r3, [r7, #8]
 800297a:	4013      	ands	r3, r2
 800297c:	b29b      	uxth	r3, r3
 800297e:	2b00      	cmp	r3, #0
 8002980:	bf14      	ite	ne
 8002982:	2301      	movne	r3, #1
 8002984:	2300      	moveq	r3, #0
 8002986:	b2db      	uxtb	r3, r3
 8002988:	e00b      	b.n	80029a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	699b      	ldr	r3, [r3, #24]
 8002990:	43da      	mvns	r2, r3
 8002992:	68bb      	ldr	r3, [r7, #8]
 8002994:	4013      	ands	r3, r2
 8002996:	b29b      	uxth	r3, r3
 8002998:	2b00      	cmp	r3, #0
 800299a:	bf14      	ite	ne
 800299c:	2301      	movne	r3, #1
 800299e:	2300      	moveq	r3, #0
 80029a0:	b2db      	uxtb	r3, r3
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d016      	beq.n	80029d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	2200      	movs	r2, #0
 80029aa:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	2220      	movs	r2, #32
 80029b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	2200      	movs	r2, #0
 80029b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029c0:	f043 0220 	orr.w	r2, r3, #32
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	2200      	movs	r2, #0
 80029cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80029d0:	2301      	movs	r3, #1
 80029d2:	e021      	b.n	8002a18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80029d4:	68bb      	ldr	r3, [r7, #8]
 80029d6:	0c1b      	lsrs	r3, r3, #16
 80029d8:	b2db      	uxtb	r3, r3
 80029da:	2b01      	cmp	r3, #1
 80029dc:	d10c      	bne.n	80029f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	695b      	ldr	r3, [r3, #20]
 80029e4:	43da      	mvns	r2, r3
 80029e6:	68bb      	ldr	r3, [r7, #8]
 80029e8:	4013      	ands	r3, r2
 80029ea:	b29b      	uxth	r3, r3
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	bf14      	ite	ne
 80029f0:	2301      	movne	r3, #1
 80029f2:	2300      	moveq	r3, #0
 80029f4:	b2db      	uxtb	r3, r3
 80029f6:	e00b      	b.n	8002a10 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	699b      	ldr	r3, [r3, #24]
 80029fe:	43da      	mvns	r2, r3
 8002a00:	68bb      	ldr	r3, [r7, #8]
 8002a02:	4013      	ands	r3, r2
 8002a04:	b29b      	uxth	r3, r3
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	bf14      	ite	ne
 8002a0a:	2301      	movne	r3, #1
 8002a0c:	2300      	moveq	r3, #0
 8002a0e:	b2db      	uxtb	r3, r3
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	f47f af6d 	bne.w	80028f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002a16:	2300      	movs	r3, #0
}
 8002a18:	4618      	mov	r0, r3
 8002a1a:	3710      	adds	r7, #16
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	bd80      	pop	{r7, pc}

08002a20 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b084      	sub	sp, #16
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	60f8      	str	r0, [r7, #12]
 8002a28:	60b9      	str	r1, [r7, #8]
 8002a2a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002a2c:	e034      	b.n	8002a98 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002a2e:	68f8      	ldr	r0, [r7, #12]
 8002a30:	f000 f886 	bl	8002b40 <I2C_IsAcknowledgeFailed>
 8002a34:	4603      	mov	r3, r0
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d001      	beq.n	8002a3e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	e034      	b.n	8002aa8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a3e:	68bb      	ldr	r3, [r7, #8]
 8002a40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a44:	d028      	beq.n	8002a98 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a46:	f7ff f8bd 	bl	8001bc4 <HAL_GetTick>
 8002a4a:	4602      	mov	r2, r0
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	1ad3      	subs	r3, r2, r3
 8002a50:	68ba      	ldr	r2, [r7, #8]
 8002a52:	429a      	cmp	r2, r3
 8002a54:	d302      	bcc.n	8002a5c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002a56:	68bb      	ldr	r3, [r7, #8]
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d11d      	bne.n	8002a98 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	695b      	ldr	r3, [r3, #20]
 8002a62:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a66:	2b80      	cmp	r3, #128	@ 0x80
 8002a68:	d016      	beq.n	8002a98 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	2220      	movs	r2, #32
 8002a74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a84:	f043 0220 	orr.w	r2, r3, #32
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	2200      	movs	r2, #0
 8002a90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002a94:	2301      	movs	r3, #1
 8002a96:	e007      	b.n	8002aa8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	695b      	ldr	r3, [r3, #20]
 8002a9e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002aa2:	2b80      	cmp	r3, #128	@ 0x80
 8002aa4:	d1c3      	bne.n	8002a2e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002aa6:	2300      	movs	r3, #0
}
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	3710      	adds	r7, #16
 8002aac:	46bd      	mov	sp, r7
 8002aae:	bd80      	pop	{r7, pc}

08002ab0 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b084      	sub	sp, #16
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	60f8      	str	r0, [r7, #12]
 8002ab8:	60b9      	str	r1, [r7, #8]
 8002aba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002abc:	e034      	b.n	8002b28 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002abe:	68f8      	ldr	r0, [r7, #12]
 8002ac0:	f000 f83e 	bl	8002b40 <I2C_IsAcknowledgeFailed>
 8002ac4:	4603      	mov	r3, r0
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d001      	beq.n	8002ace <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002aca:	2301      	movs	r3, #1
 8002acc:	e034      	b.n	8002b38 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ace:	68bb      	ldr	r3, [r7, #8]
 8002ad0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ad4:	d028      	beq.n	8002b28 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ad6:	f7ff f875 	bl	8001bc4 <HAL_GetTick>
 8002ada:	4602      	mov	r2, r0
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	1ad3      	subs	r3, r2, r3
 8002ae0:	68ba      	ldr	r2, [r7, #8]
 8002ae2:	429a      	cmp	r2, r3
 8002ae4:	d302      	bcc.n	8002aec <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002ae6:	68bb      	ldr	r3, [r7, #8]
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d11d      	bne.n	8002b28 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	695b      	ldr	r3, [r3, #20]
 8002af2:	f003 0304 	and.w	r3, r3, #4
 8002af6:	2b04      	cmp	r3, #4
 8002af8:	d016      	beq.n	8002b28 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	2200      	movs	r2, #0
 8002afe:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	2220      	movs	r2, #32
 8002b04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b14:	f043 0220 	orr.w	r2, r3, #32
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	2200      	movs	r2, #0
 8002b20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002b24:	2301      	movs	r3, #1
 8002b26:	e007      	b.n	8002b38 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	695b      	ldr	r3, [r3, #20]
 8002b2e:	f003 0304 	and.w	r3, r3, #4
 8002b32:	2b04      	cmp	r3, #4
 8002b34:	d1c3      	bne.n	8002abe <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002b36:	2300      	movs	r3, #0
}
 8002b38:	4618      	mov	r0, r3
 8002b3a:	3710      	adds	r7, #16
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	bd80      	pop	{r7, pc}

08002b40 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002b40:	b480      	push	{r7}
 8002b42:	b083      	sub	sp, #12
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	695b      	ldr	r3, [r3, #20]
 8002b4e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b52:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002b56:	d11b      	bne.n	8002b90 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002b60:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	2200      	movs	r2, #0
 8002b66:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2220      	movs	r2, #32
 8002b6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2200      	movs	r2, #0
 8002b74:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b7c:	f043 0204 	orr.w	r2, r3, #4
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2200      	movs	r2, #0
 8002b88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002b8c:	2301      	movs	r3, #1
 8002b8e:	e000      	b.n	8002b92 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002b90:	2300      	movs	r3, #0
}
 8002b92:	4618      	mov	r0, r3
 8002b94:	370c      	adds	r7, #12
 8002b96:	46bd      	mov	sp, r7
 8002b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9c:	4770      	bx	lr

08002b9e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002b9e:	b580      	push	{r7, lr}
 8002ba0:	b086      	sub	sp, #24
 8002ba2:	af02      	add	r7, sp, #8
 8002ba4:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d101      	bne.n	8002bb0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002bac:	2301      	movs	r3, #1
 8002bae:	e101      	b.n	8002db4 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8002bbc:	b2db      	uxtb	r3, r3
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d106      	bne.n	8002bd0 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002bca:	6878      	ldr	r0, [r7, #4]
 8002bcc:	f009 fc42 	bl	800c454 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2203      	movs	r2, #3
 8002bd4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8002bd8:	68bb      	ldr	r3, [r7, #8]
 8002bda:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002bde:	d102      	bne.n	8002be6 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2200      	movs	r2, #0
 8002be4:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	4618      	mov	r0, r3
 8002bec:	f003 fdcb 	bl	8006786 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6818      	ldr	r0, [r3, #0]
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	7c1a      	ldrb	r2, [r3, #16]
 8002bf8:	f88d 2000 	strb.w	r2, [sp]
 8002bfc:	3304      	adds	r3, #4
 8002bfe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002c00:	f003 fcaa 	bl	8006558 <USB_CoreInit>
 8002c04:	4603      	mov	r3, r0
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d005      	beq.n	8002c16 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	2202      	movs	r2, #2
 8002c0e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002c12:	2301      	movs	r3, #1
 8002c14:	e0ce      	b.n	8002db4 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	2100      	movs	r1, #0
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	f003 fdc3 	bl	80067a8 <USB_SetCurrentMode>
 8002c22:	4603      	mov	r3, r0
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d005      	beq.n	8002c34 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2202      	movs	r2, #2
 8002c2c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002c30:	2301      	movs	r3, #1
 8002c32:	e0bf      	b.n	8002db4 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c34:	2300      	movs	r3, #0
 8002c36:	73fb      	strb	r3, [r7, #15]
 8002c38:	e04a      	b.n	8002cd0 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002c3a:	7bfa      	ldrb	r2, [r7, #15]
 8002c3c:	6879      	ldr	r1, [r7, #4]
 8002c3e:	4613      	mov	r3, r2
 8002c40:	00db      	lsls	r3, r3, #3
 8002c42:	4413      	add	r3, r2
 8002c44:	009b      	lsls	r3, r3, #2
 8002c46:	440b      	add	r3, r1
 8002c48:	3315      	adds	r3, #21
 8002c4a:	2201      	movs	r2, #1
 8002c4c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002c4e:	7bfa      	ldrb	r2, [r7, #15]
 8002c50:	6879      	ldr	r1, [r7, #4]
 8002c52:	4613      	mov	r3, r2
 8002c54:	00db      	lsls	r3, r3, #3
 8002c56:	4413      	add	r3, r2
 8002c58:	009b      	lsls	r3, r3, #2
 8002c5a:	440b      	add	r3, r1
 8002c5c:	3314      	adds	r3, #20
 8002c5e:	7bfa      	ldrb	r2, [r7, #15]
 8002c60:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002c62:	7bfa      	ldrb	r2, [r7, #15]
 8002c64:	7bfb      	ldrb	r3, [r7, #15]
 8002c66:	b298      	uxth	r0, r3
 8002c68:	6879      	ldr	r1, [r7, #4]
 8002c6a:	4613      	mov	r3, r2
 8002c6c:	00db      	lsls	r3, r3, #3
 8002c6e:	4413      	add	r3, r2
 8002c70:	009b      	lsls	r3, r3, #2
 8002c72:	440b      	add	r3, r1
 8002c74:	332e      	adds	r3, #46	@ 0x2e
 8002c76:	4602      	mov	r2, r0
 8002c78:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002c7a:	7bfa      	ldrb	r2, [r7, #15]
 8002c7c:	6879      	ldr	r1, [r7, #4]
 8002c7e:	4613      	mov	r3, r2
 8002c80:	00db      	lsls	r3, r3, #3
 8002c82:	4413      	add	r3, r2
 8002c84:	009b      	lsls	r3, r3, #2
 8002c86:	440b      	add	r3, r1
 8002c88:	3318      	adds	r3, #24
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002c8e:	7bfa      	ldrb	r2, [r7, #15]
 8002c90:	6879      	ldr	r1, [r7, #4]
 8002c92:	4613      	mov	r3, r2
 8002c94:	00db      	lsls	r3, r3, #3
 8002c96:	4413      	add	r3, r2
 8002c98:	009b      	lsls	r3, r3, #2
 8002c9a:	440b      	add	r3, r1
 8002c9c:	331c      	adds	r3, #28
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002ca2:	7bfa      	ldrb	r2, [r7, #15]
 8002ca4:	6879      	ldr	r1, [r7, #4]
 8002ca6:	4613      	mov	r3, r2
 8002ca8:	00db      	lsls	r3, r3, #3
 8002caa:	4413      	add	r3, r2
 8002cac:	009b      	lsls	r3, r3, #2
 8002cae:	440b      	add	r3, r1
 8002cb0:	3320      	adds	r3, #32
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002cb6:	7bfa      	ldrb	r2, [r7, #15]
 8002cb8:	6879      	ldr	r1, [r7, #4]
 8002cba:	4613      	mov	r3, r2
 8002cbc:	00db      	lsls	r3, r3, #3
 8002cbe:	4413      	add	r3, r2
 8002cc0:	009b      	lsls	r3, r3, #2
 8002cc2:	440b      	add	r3, r1
 8002cc4:	3324      	adds	r3, #36	@ 0x24
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002cca:	7bfb      	ldrb	r3, [r7, #15]
 8002ccc:	3301      	adds	r3, #1
 8002cce:	73fb      	strb	r3, [r7, #15]
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	791b      	ldrb	r3, [r3, #4]
 8002cd4:	7bfa      	ldrb	r2, [r7, #15]
 8002cd6:	429a      	cmp	r2, r3
 8002cd8:	d3af      	bcc.n	8002c3a <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002cda:	2300      	movs	r3, #0
 8002cdc:	73fb      	strb	r3, [r7, #15]
 8002cde:	e044      	b.n	8002d6a <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002ce0:	7bfa      	ldrb	r2, [r7, #15]
 8002ce2:	6879      	ldr	r1, [r7, #4]
 8002ce4:	4613      	mov	r3, r2
 8002ce6:	00db      	lsls	r3, r3, #3
 8002ce8:	4413      	add	r3, r2
 8002cea:	009b      	lsls	r3, r3, #2
 8002cec:	440b      	add	r3, r1
 8002cee:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002cf6:	7bfa      	ldrb	r2, [r7, #15]
 8002cf8:	6879      	ldr	r1, [r7, #4]
 8002cfa:	4613      	mov	r3, r2
 8002cfc:	00db      	lsls	r3, r3, #3
 8002cfe:	4413      	add	r3, r2
 8002d00:	009b      	lsls	r3, r3, #2
 8002d02:	440b      	add	r3, r1
 8002d04:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8002d08:	7bfa      	ldrb	r2, [r7, #15]
 8002d0a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002d0c:	7bfa      	ldrb	r2, [r7, #15]
 8002d0e:	6879      	ldr	r1, [r7, #4]
 8002d10:	4613      	mov	r3, r2
 8002d12:	00db      	lsls	r3, r3, #3
 8002d14:	4413      	add	r3, r2
 8002d16:	009b      	lsls	r3, r3, #2
 8002d18:	440b      	add	r3, r1
 8002d1a:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002d1e:	2200      	movs	r2, #0
 8002d20:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002d22:	7bfa      	ldrb	r2, [r7, #15]
 8002d24:	6879      	ldr	r1, [r7, #4]
 8002d26:	4613      	mov	r3, r2
 8002d28:	00db      	lsls	r3, r3, #3
 8002d2a:	4413      	add	r3, r2
 8002d2c:	009b      	lsls	r3, r3, #2
 8002d2e:	440b      	add	r3, r1
 8002d30:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8002d34:	2200      	movs	r2, #0
 8002d36:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002d38:	7bfa      	ldrb	r2, [r7, #15]
 8002d3a:	6879      	ldr	r1, [r7, #4]
 8002d3c:	4613      	mov	r3, r2
 8002d3e:	00db      	lsls	r3, r3, #3
 8002d40:	4413      	add	r3, r2
 8002d42:	009b      	lsls	r3, r3, #2
 8002d44:	440b      	add	r3, r1
 8002d46:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002d4e:	7bfa      	ldrb	r2, [r7, #15]
 8002d50:	6879      	ldr	r1, [r7, #4]
 8002d52:	4613      	mov	r3, r2
 8002d54:	00db      	lsls	r3, r3, #3
 8002d56:	4413      	add	r3, r2
 8002d58:	009b      	lsls	r3, r3, #2
 8002d5a:	440b      	add	r3, r1
 8002d5c:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002d60:	2200      	movs	r2, #0
 8002d62:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d64:	7bfb      	ldrb	r3, [r7, #15]
 8002d66:	3301      	adds	r3, #1
 8002d68:	73fb      	strb	r3, [r7, #15]
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	791b      	ldrb	r3, [r3, #4]
 8002d6e:	7bfa      	ldrb	r2, [r7, #15]
 8002d70:	429a      	cmp	r2, r3
 8002d72:	d3b5      	bcc.n	8002ce0 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6818      	ldr	r0, [r3, #0]
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	7c1a      	ldrb	r2, [r3, #16]
 8002d7c:	f88d 2000 	strb.w	r2, [sp]
 8002d80:	3304      	adds	r3, #4
 8002d82:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002d84:	f003 fd5c 	bl	8006840 <USB_DevInit>
 8002d88:	4603      	mov	r3, r0
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d005      	beq.n	8002d9a <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	2202      	movs	r2, #2
 8002d92:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002d96:	2301      	movs	r3, #1
 8002d98:	e00c      	b.n	8002db4 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2201      	movs	r2, #1
 8002da4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	4618      	mov	r0, r3
 8002dae:	f004 fda6 	bl	80078fe <USB_DevDisconnect>

  return HAL_OK;
 8002db2:	2300      	movs	r3, #0
}
 8002db4:	4618      	mov	r0, r3
 8002db6:	3710      	adds	r7, #16
 8002db8:	46bd      	mov	sp, r7
 8002dba:	bd80      	pop	{r7, pc}

08002dbc <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b084      	sub	sp, #16
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002dd0:	2b01      	cmp	r3, #1
 8002dd2:	d101      	bne.n	8002dd8 <HAL_PCD_Start+0x1c>
 8002dd4:	2302      	movs	r3, #2
 8002dd6:	e022      	b.n	8002e1e <HAL_PCD_Start+0x62>
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2201      	movs	r2, #1
 8002ddc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	68db      	ldr	r3, [r3, #12]
 8002de4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d009      	beq.n	8002e00 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8002df0:	2b01      	cmp	r3, #1
 8002df2:	d105      	bne.n	8002e00 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002df8:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	4618      	mov	r0, r3
 8002e06:	f003 fcad 	bl	8006764 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	4618      	mov	r0, r3
 8002e10:	f004 fd54 	bl	80078bc <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2200      	movs	r2, #0
 8002e18:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002e1c:	2300      	movs	r3, #0
}
 8002e1e:	4618      	mov	r0, r3
 8002e20:	3710      	adds	r7, #16
 8002e22:	46bd      	mov	sp, r7
 8002e24:	bd80      	pop	{r7, pc}

08002e26 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002e26:	b590      	push	{r4, r7, lr}
 8002e28:	b08d      	sub	sp, #52	@ 0x34
 8002e2a:	af00      	add	r7, sp, #0
 8002e2c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002e34:	6a3b      	ldr	r3, [r7, #32]
 8002e36:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	f004 fe12 	bl	8007a66 <USB_GetMode>
 8002e42:	4603      	mov	r3, r0
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	f040 848c 	bne.w	8003762 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	4618      	mov	r0, r3
 8002e50:	f004 fd76 	bl	8007940 <USB_ReadInterrupts>
 8002e54:	4603      	mov	r3, r0
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	f000 8482 	beq.w	8003760 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002e5c:	69fb      	ldr	r3, [r7, #28]
 8002e5e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002e62:	689b      	ldr	r3, [r3, #8]
 8002e64:	0a1b      	lsrs	r3, r3, #8
 8002e66:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	4618      	mov	r0, r3
 8002e76:	f004 fd63 	bl	8007940 <USB_ReadInterrupts>
 8002e7a:	4603      	mov	r3, r0
 8002e7c:	f003 0302 	and.w	r3, r3, #2
 8002e80:	2b02      	cmp	r3, #2
 8002e82:	d107      	bne.n	8002e94 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	695a      	ldr	r2, [r3, #20]
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f002 0202 	and.w	r2, r2, #2
 8002e92:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	4618      	mov	r0, r3
 8002e9a:	f004 fd51 	bl	8007940 <USB_ReadInterrupts>
 8002e9e:	4603      	mov	r3, r0
 8002ea0:	f003 0310 	and.w	r3, r3, #16
 8002ea4:	2b10      	cmp	r3, #16
 8002ea6:	d161      	bne.n	8002f6c <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	699a      	ldr	r2, [r3, #24]
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f022 0210 	bic.w	r2, r2, #16
 8002eb6:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002eb8:	6a3b      	ldr	r3, [r7, #32]
 8002eba:	6a1b      	ldr	r3, [r3, #32]
 8002ebc:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002ebe:	69bb      	ldr	r3, [r7, #24]
 8002ec0:	f003 020f 	and.w	r2, r3, #15
 8002ec4:	4613      	mov	r3, r2
 8002ec6:	00db      	lsls	r3, r3, #3
 8002ec8:	4413      	add	r3, r2
 8002eca:	009b      	lsls	r3, r3, #2
 8002ecc:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002ed0:	687a      	ldr	r2, [r7, #4]
 8002ed2:	4413      	add	r3, r2
 8002ed4:	3304      	adds	r3, #4
 8002ed6:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002ed8:	69bb      	ldr	r3, [r7, #24]
 8002eda:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8002ede:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002ee2:	d124      	bne.n	8002f2e <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002ee4:	69ba      	ldr	r2, [r7, #24]
 8002ee6:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8002eea:	4013      	ands	r3, r2
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d035      	beq.n	8002f5c <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002ef0:	697b      	ldr	r3, [r7, #20]
 8002ef2:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002ef4:	69bb      	ldr	r3, [r7, #24]
 8002ef6:	091b      	lsrs	r3, r3, #4
 8002ef8:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002efa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002efe:	b29b      	uxth	r3, r3
 8002f00:	461a      	mov	r2, r3
 8002f02:	6a38      	ldr	r0, [r7, #32]
 8002f04:	f004 fb88 	bl	8007618 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002f08:	697b      	ldr	r3, [r7, #20]
 8002f0a:	68da      	ldr	r2, [r3, #12]
 8002f0c:	69bb      	ldr	r3, [r7, #24]
 8002f0e:	091b      	lsrs	r3, r3, #4
 8002f10:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002f14:	441a      	add	r2, r3
 8002f16:	697b      	ldr	r3, [r7, #20]
 8002f18:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002f1a:	697b      	ldr	r3, [r7, #20]
 8002f1c:	695a      	ldr	r2, [r3, #20]
 8002f1e:	69bb      	ldr	r3, [r7, #24]
 8002f20:	091b      	lsrs	r3, r3, #4
 8002f22:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002f26:	441a      	add	r2, r3
 8002f28:	697b      	ldr	r3, [r7, #20]
 8002f2a:	615a      	str	r2, [r3, #20]
 8002f2c:	e016      	b.n	8002f5c <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002f2e:	69bb      	ldr	r3, [r7, #24]
 8002f30:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8002f34:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8002f38:	d110      	bne.n	8002f5c <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002f40:	2208      	movs	r2, #8
 8002f42:	4619      	mov	r1, r3
 8002f44:	6a38      	ldr	r0, [r7, #32]
 8002f46:	f004 fb67 	bl	8007618 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002f4a:	697b      	ldr	r3, [r7, #20]
 8002f4c:	695a      	ldr	r2, [r3, #20]
 8002f4e:	69bb      	ldr	r3, [r7, #24]
 8002f50:	091b      	lsrs	r3, r3, #4
 8002f52:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002f56:	441a      	add	r2, r3
 8002f58:	697b      	ldr	r3, [r7, #20]
 8002f5a:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	699a      	ldr	r2, [r3, #24]
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f042 0210 	orr.w	r2, r2, #16
 8002f6a:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	4618      	mov	r0, r3
 8002f72:	f004 fce5 	bl	8007940 <USB_ReadInterrupts>
 8002f76:	4603      	mov	r3, r0
 8002f78:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002f7c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8002f80:	f040 80a7 	bne.w	80030d2 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002f84:	2300      	movs	r3, #0
 8002f86:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	f004 fcea 	bl	8007966 <USB_ReadDevAllOutEpInterrupt>
 8002f92:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8002f94:	e099      	b.n	80030ca <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002f96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f98:	f003 0301 	and.w	r3, r3, #1
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	f000 808e 	beq.w	80030be <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002fa8:	b2d2      	uxtb	r2, r2
 8002faa:	4611      	mov	r1, r2
 8002fac:	4618      	mov	r0, r3
 8002fae:	f004 fd0e 	bl	80079ce <USB_ReadDevOutEPInterrupt>
 8002fb2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002fb4:	693b      	ldr	r3, [r7, #16]
 8002fb6:	f003 0301 	and.w	r3, r3, #1
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d00c      	beq.n	8002fd8 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002fbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fc0:	015a      	lsls	r2, r3, #5
 8002fc2:	69fb      	ldr	r3, [r7, #28]
 8002fc4:	4413      	add	r3, r2
 8002fc6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002fca:	461a      	mov	r2, r3
 8002fcc:	2301      	movs	r3, #1
 8002fce:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002fd0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002fd2:	6878      	ldr	r0, [r7, #4]
 8002fd4:	f000 fe8c 	bl	8003cf0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002fd8:	693b      	ldr	r3, [r7, #16]
 8002fda:	f003 0308 	and.w	r3, r3, #8
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d00c      	beq.n	8002ffc <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002fe2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fe4:	015a      	lsls	r2, r3, #5
 8002fe6:	69fb      	ldr	r3, [r7, #28]
 8002fe8:	4413      	add	r3, r2
 8002fea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002fee:	461a      	mov	r2, r3
 8002ff0:	2308      	movs	r3, #8
 8002ff2:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002ff4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002ff6:	6878      	ldr	r0, [r7, #4]
 8002ff8:	f000 ff62 	bl	8003ec0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002ffc:	693b      	ldr	r3, [r7, #16]
 8002ffe:	f003 0310 	and.w	r3, r3, #16
 8003002:	2b00      	cmp	r3, #0
 8003004:	d008      	beq.n	8003018 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003006:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003008:	015a      	lsls	r2, r3, #5
 800300a:	69fb      	ldr	r3, [r7, #28]
 800300c:	4413      	add	r3, r2
 800300e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003012:	461a      	mov	r2, r3
 8003014:	2310      	movs	r3, #16
 8003016:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8003018:	693b      	ldr	r3, [r7, #16]
 800301a:	f003 0302 	and.w	r3, r3, #2
 800301e:	2b00      	cmp	r3, #0
 8003020:	d030      	beq.n	8003084 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8003022:	6a3b      	ldr	r3, [r7, #32]
 8003024:	695b      	ldr	r3, [r3, #20]
 8003026:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800302a:	2b80      	cmp	r3, #128	@ 0x80
 800302c:	d109      	bne.n	8003042 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800302e:	69fb      	ldr	r3, [r7, #28]
 8003030:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003034:	685b      	ldr	r3, [r3, #4]
 8003036:	69fa      	ldr	r2, [r7, #28]
 8003038:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800303c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003040:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8003042:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003044:	4613      	mov	r3, r2
 8003046:	00db      	lsls	r3, r3, #3
 8003048:	4413      	add	r3, r2
 800304a:	009b      	lsls	r3, r3, #2
 800304c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003050:	687a      	ldr	r2, [r7, #4]
 8003052:	4413      	add	r3, r2
 8003054:	3304      	adds	r3, #4
 8003056:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003058:	697b      	ldr	r3, [r7, #20]
 800305a:	78db      	ldrb	r3, [r3, #3]
 800305c:	2b01      	cmp	r3, #1
 800305e:	d108      	bne.n	8003072 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8003060:	697b      	ldr	r3, [r7, #20]
 8003062:	2200      	movs	r2, #0
 8003064:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003066:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003068:	b2db      	uxtb	r3, r3
 800306a:	4619      	mov	r1, r3
 800306c:	6878      	ldr	r0, [r7, #4]
 800306e:	f009 faed 	bl	800c64c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8003072:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003074:	015a      	lsls	r2, r3, #5
 8003076:	69fb      	ldr	r3, [r7, #28]
 8003078:	4413      	add	r3, r2
 800307a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800307e:	461a      	mov	r2, r3
 8003080:	2302      	movs	r3, #2
 8003082:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003084:	693b      	ldr	r3, [r7, #16]
 8003086:	f003 0320 	and.w	r3, r3, #32
 800308a:	2b00      	cmp	r3, #0
 800308c:	d008      	beq.n	80030a0 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800308e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003090:	015a      	lsls	r2, r3, #5
 8003092:	69fb      	ldr	r3, [r7, #28]
 8003094:	4413      	add	r3, r2
 8003096:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800309a:	461a      	mov	r2, r3
 800309c:	2320      	movs	r3, #32
 800309e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80030a0:	693b      	ldr	r3, [r7, #16]
 80030a2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d009      	beq.n	80030be <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80030aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030ac:	015a      	lsls	r2, r3, #5
 80030ae:	69fb      	ldr	r3, [r7, #28]
 80030b0:	4413      	add	r3, r2
 80030b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80030b6:	461a      	mov	r2, r3
 80030b8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80030bc:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80030be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030c0:	3301      	adds	r3, #1
 80030c2:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80030c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030c6:	085b      	lsrs	r3, r3, #1
 80030c8:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80030ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	f47f af62 	bne.w	8002f96 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	4618      	mov	r0, r3
 80030d8:	f004 fc32 	bl	8007940 <USB_ReadInterrupts>
 80030dc:	4603      	mov	r3, r0
 80030de:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80030e2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80030e6:	f040 80db 	bne.w	80032a0 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	4618      	mov	r0, r3
 80030f0:	f004 fc53 	bl	800799a <USB_ReadDevAllInEpInterrupt>
 80030f4:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 80030f6:	2300      	movs	r3, #0
 80030f8:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 80030fa:	e0cd      	b.n	8003298 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80030fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030fe:	f003 0301 	and.w	r3, r3, #1
 8003102:	2b00      	cmp	r3, #0
 8003104:	f000 80c2 	beq.w	800328c <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800310e:	b2d2      	uxtb	r2, r2
 8003110:	4611      	mov	r1, r2
 8003112:	4618      	mov	r0, r3
 8003114:	f004 fc79 	bl	8007a0a <USB_ReadDevInEPInterrupt>
 8003118:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800311a:	693b      	ldr	r3, [r7, #16]
 800311c:	f003 0301 	and.w	r3, r3, #1
 8003120:	2b00      	cmp	r3, #0
 8003122:	d057      	beq.n	80031d4 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003124:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003126:	f003 030f 	and.w	r3, r3, #15
 800312a:	2201      	movs	r2, #1
 800312c:	fa02 f303 	lsl.w	r3, r2, r3
 8003130:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003132:	69fb      	ldr	r3, [r7, #28]
 8003134:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003138:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	43db      	mvns	r3, r3
 800313e:	69f9      	ldr	r1, [r7, #28]
 8003140:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003144:	4013      	ands	r3, r2
 8003146:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003148:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800314a:	015a      	lsls	r2, r3, #5
 800314c:	69fb      	ldr	r3, [r7, #28]
 800314e:	4413      	add	r3, r2
 8003150:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003154:	461a      	mov	r2, r3
 8003156:	2301      	movs	r3, #1
 8003158:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	799b      	ldrb	r3, [r3, #6]
 800315e:	2b01      	cmp	r3, #1
 8003160:	d132      	bne.n	80031c8 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003162:	6879      	ldr	r1, [r7, #4]
 8003164:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003166:	4613      	mov	r3, r2
 8003168:	00db      	lsls	r3, r3, #3
 800316a:	4413      	add	r3, r2
 800316c:	009b      	lsls	r3, r3, #2
 800316e:	440b      	add	r3, r1
 8003170:	3320      	adds	r3, #32
 8003172:	6819      	ldr	r1, [r3, #0]
 8003174:	6878      	ldr	r0, [r7, #4]
 8003176:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003178:	4613      	mov	r3, r2
 800317a:	00db      	lsls	r3, r3, #3
 800317c:	4413      	add	r3, r2
 800317e:	009b      	lsls	r3, r3, #2
 8003180:	4403      	add	r3, r0
 8003182:	331c      	adds	r3, #28
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	4419      	add	r1, r3
 8003188:	6878      	ldr	r0, [r7, #4]
 800318a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800318c:	4613      	mov	r3, r2
 800318e:	00db      	lsls	r3, r3, #3
 8003190:	4413      	add	r3, r2
 8003192:	009b      	lsls	r3, r3, #2
 8003194:	4403      	add	r3, r0
 8003196:	3320      	adds	r3, #32
 8003198:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800319a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800319c:	2b00      	cmp	r3, #0
 800319e:	d113      	bne.n	80031c8 <HAL_PCD_IRQHandler+0x3a2>
 80031a0:	6879      	ldr	r1, [r7, #4]
 80031a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80031a4:	4613      	mov	r3, r2
 80031a6:	00db      	lsls	r3, r3, #3
 80031a8:	4413      	add	r3, r2
 80031aa:	009b      	lsls	r3, r3, #2
 80031ac:	440b      	add	r3, r1
 80031ae:	3324      	adds	r3, #36	@ 0x24
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d108      	bne.n	80031c8 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6818      	ldr	r0, [r3, #0]
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80031c0:	461a      	mov	r2, r3
 80031c2:	2101      	movs	r1, #1
 80031c4:	f004 fc80 	bl	8007ac8 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80031c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031ca:	b2db      	uxtb	r3, r3
 80031cc:	4619      	mov	r1, r3
 80031ce:	6878      	ldr	r0, [r7, #4]
 80031d0:	f009 f9c1 	bl	800c556 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80031d4:	693b      	ldr	r3, [r7, #16]
 80031d6:	f003 0308 	and.w	r3, r3, #8
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d008      	beq.n	80031f0 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80031de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031e0:	015a      	lsls	r2, r3, #5
 80031e2:	69fb      	ldr	r3, [r7, #28]
 80031e4:	4413      	add	r3, r2
 80031e6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80031ea:	461a      	mov	r2, r3
 80031ec:	2308      	movs	r3, #8
 80031ee:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80031f0:	693b      	ldr	r3, [r7, #16]
 80031f2:	f003 0310 	and.w	r3, r3, #16
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d008      	beq.n	800320c <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80031fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031fc:	015a      	lsls	r2, r3, #5
 80031fe:	69fb      	ldr	r3, [r7, #28]
 8003200:	4413      	add	r3, r2
 8003202:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003206:	461a      	mov	r2, r3
 8003208:	2310      	movs	r3, #16
 800320a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800320c:	693b      	ldr	r3, [r7, #16]
 800320e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003212:	2b00      	cmp	r3, #0
 8003214:	d008      	beq.n	8003228 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003216:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003218:	015a      	lsls	r2, r3, #5
 800321a:	69fb      	ldr	r3, [r7, #28]
 800321c:	4413      	add	r3, r2
 800321e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003222:	461a      	mov	r2, r3
 8003224:	2340      	movs	r3, #64	@ 0x40
 8003226:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003228:	693b      	ldr	r3, [r7, #16]
 800322a:	f003 0302 	and.w	r3, r3, #2
 800322e:	2b00      	cmp	r3, #0
 8003230:	d023      	beq.n	800327a <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8003232:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003234:	6a38      	ldr	r0, [r7, #32]
 8003236:	f003 fc67 	bl	8006b08 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800323a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800323c:	4613      	mov	r3, r2
 800323e:	00db      	lsls	r3, r3, #3
 8003240:	4413      	add	r3, r2
 8003242:	009b      	lsls	r3, r3, #2
 8003244:	3310      	adds	r3, #16
 8003246:	687a      	ldr	r2, [r7, #4]
 8003248:	4413      	add	r3, r2
 800324a:	3304      	adds	r3, #4
 800324c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800324e:	697b      	ldr	r3, [r7, #20]
 8003250:	78db      	ldrb	r3, [r3, #3]
 8003252:	2b01      	cmp	r3, #1
 8003254:	d108      	bne.n	8003268 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8003256:	697b      	ldr	r3, [r7, #20]
 8003258:	2200      	movs	r2, #0
 800325a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800325c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800325e:	b2db      	uxtb	r3, r3
 8003260:	4619      	mov	r1, r3
 8003262:	6878      	ldr	r0, [r7, #4]
 8003264:	f009 fa04 	bl	800c670 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003268:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800326a:	015a      	lsls	r2, r3, #5
 800326c:	69fb      	ldr	r3, [r7, #28]
 800326e:	4413      	add	r3, r2
 8003270:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003274:	461a      	mov	r2, r3
 8003276:	2302      	movs	r3, #2
 8003278:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800327a:	693b      	ldr	r3, [r7, #16]
 800327c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003280:	2b00      	cmp	r3, #0
 8003282:	d003      	beq.n	800328c <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003284:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003286:	6878      	ldr	r0, [r7, #4]
 8003288:	f000 fca5 	bl	8003bd6 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800328c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800328e:	3301      	adds	r3, #1
 8003290:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8003292:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003294:	085b      	lsrs	r3, r3, #1
 8003296:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8003298:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800329a:	2b00      	cmp	r3, #0
 800329c:	f47f af2e 	bne.w	80030fc <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	4618      	mov	r0, r3
 80032a6:	f004 fb4b 	bl	8007940 <USB_ReadInterrupts>
 80032aa:	4603      	mov	r3, r0
 80032ac:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80032b0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80032b4:	d122      	bne.n	80032fc <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80032b6:	69fb      	ldr	r3, [r7, #28]
 80032b8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80032bc:	685b      	ldr	r3, [r3, #4]
 80032be:	69fa      	ldr	r2, [r7, #28]
 80032c0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80032c4:	f023 0301 	bic.w	r3, r3, #1
 80032c8:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 80032d0:	2b01      	cmp	r3, #1
 80032d2:	d108      	bne.n	80032e6 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2200      	movs	r2, #0
 80032d8:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80032dc:	2100      	movs	r1, #0
 80032de:	6878      	ldr	r0, [r7, #4]
 80032e0:	f000 fe8c 	bl	8003ffc <HAL_PCDEx_LPM_Callback>
 80032e4:	e002      	b.n	80032ec <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80032e6:	6878      	ldr	r0, [r7, #4]
 80032e8:	f009 f9a2 	bl	800c630 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	695a      	ldr	r2, [r3, #20]
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 80032fa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	4618      	mov	r0, r3
 8003302:	f004 fb1d 	bl	8007940 <USB_ReadInterrupts>
 8003306:	4603      	mov	r3, r0
 8003308:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800330c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003310:	d112      	bne.n	8003338 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003312:	69fb      	ldr	r3, [r7, #28]
 8003314:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003318:	689b      	ldr	r3, [r3, #8]
 800331a:	f003 0301 	and.w	r3, r3, #1
 800331e:	2b01      	cmp	r3, #1
 8003320:	d102      	bne.n	8003328 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003322:	6878      	ldr	r0, [r7, #4]
 8003324:	f009 f95e 	bl	800c5e4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	695a      	ldr	r2, [r3, #20]
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8003336:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	4618      	mov	r0, r3
 800333e:	f004 faff 	bl	8007940 <USB_ReadInterrupts>
 8003342:	4603      	mov	r3, r0
 8003344:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003348:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800334c:	f040 80b7 	bne.w	80034be <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003350:	69fb      	ldr	r3, [r7, #28]
 8003352:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003356:	685b      	ldr	r3, [r3, #4]
 8003358:	69fa      	ldr	r2, [r7, #28]
 800335a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800335e:	f023 0301 	bic.w	r3, r3, #1
 8003362:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	2110      	movs	r1, #16
 800336a:	4618      	mov	r0, r3
 800336c:	f003 fbcc 	bl	8006b08 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003370:	2300      	movs	r3, #0
 8003372:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003374:	e046      	b.n	8003404 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003376:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003378:	015a      	lsls	r2, r3, #5
 800337a:	69fb      	ldr	r3, [r7, #28]
 800337c:	4413      	add	r3, r2
 800337e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003382:	461a      	mov	r2, r3
 8003384:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003388:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800338a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800338c:	015a      	lsls	r2, r3, #5
 800338e:	69fb      	ldr	r3, [r7, #28]
 8003390:	4413      	add	r3, r2
 8003392:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800339a:	0151      	lsls	r1, r2, #5
 800339c:	69fa      	ldr	r2, [r7, #28]
 800339e:	440a      	add	r2, r1
 80033a0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80033a4:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80033a8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80033aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80033ac:	015a      	lsls	r2, r3, #5
 80033ae:	69fb      	ldr	r3, [r7, #28]
 80033b0:	4413      	add	r3, r2
 80033b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80033b6:	461a      	mov	r2, r3
 80033b8:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80033bc:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80033be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80033c0:	015a      	lsls	r2, r3, #5
 80033c2:	69fb      	ldr	r3, [r7, #28]
 80033c4:	4413      	add	r3, r2
 80033c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80033ce:	0151      	lsls	r1, r2, #5
 80033d0:	69fa      	ldr	r2, [r7, #28]
 80033d2:	440a      	add	r2, r1
 80033d4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80033d8:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80033dc:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80033de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80033e0:	015a      	lsls	r2, r3, #5
 80033e2:	69fb      	ldr	r3, [r7, #28]
 80033e4:	4413      	add	r3, r2
 80033e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80033ee:	0151      	lsls	r1, r2, #5
 80033f0:	69fa      	ldr	r2, [r7, #28]
 80033f2:	440a      	add	r2, r1
 80033f4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80033f8:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80033fc:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80033fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003400:	3301      	adds	r3, #1
 8003402:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	791b      	ldrb	r3, [r3, #4]
 8003408:	461a      	mov	r2, r3
 800340a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800340c:	4293      	cmp	r3, r2
 800340e:	d3b2      	bcc.n	8003376 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003410:	69fb      	ldr	r3, [r7, #28]
 8003412:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003416:	69db      	ldr	r3, [r3, #28]
 8003418:	69fa      	ldr	r2, [r7, #28]
 800341a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800341e:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8003422:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	7bdb      	ldrb	r3, [r3, #15]
 8003428:	2b00      	cmp	r3, #0
 800342a:	d016      	beq.n	800345a <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800342c:	69fb      	ldr	r3, [r7, #28]
 800342e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003432:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003436:	69fa      	ldr	r2, [r7, #28]
 8003438:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800343c:	f043 030b 	orr.w	r3, r3, #11
 8003440:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003444:	69fb      	ldr	r3, [r7, #28]
 8003446:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800344a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800344c:	69fa      	ldr	r2, [r7, #28]
 800344e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003452:	f043 030b 	orr.w	r3, r3, #11
 8003456:	6453      	str	r3, [r2, #68]	@ 0x44
 8003458:	e015      	b.n	8003486 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800345a:	69fb      	ldr	r3, [r7, #28]
 800345c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003460:	695b      	ldr	r3, [r3, #20]
 8003462:	69fa      	ldr	r2, [r7, #28]
 8003464:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003468:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800346c:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8003470:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003472:	69fb      	ldr	r3, [r7, #28]
 8003474:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003478:	691b      	ldr	r3, [r3, #16]
 800347a:	69fa      	ldr	r2, [r7, #28]
 800347c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003480:	f043 030b 	orr.w	r3, r3, #11
 8003484:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003486:	69fb      	ldr	r3, [r7, #28]
 8003488:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	69fa      	ldr	r2, [r7, #28]
 8003490:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003494:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8003498:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6818      	ldr	r0, [r3, #0]
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80034a8:	461a      	mov	r2, r3
 80034aa:	f004 fb0d 	bl	8007ac8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	695a      	ldr	r2, [r3, #20]
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 80034bc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	4618      	mov	r0, r3
 80034c4:	f004 fa3c 	bl	8007940 <USB_ReadInterrupts>
 80034c8:	4603      	mov	r3, r0
 80034ca:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80034ce:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80034d2:	d123      	bne.n	800351c <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	4618      	mov	r0, r3
 80034da:	f004 fad2 	bl	8007a82 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	4618      	mov	r0, r3
 80034e4:	f003 fb89 	bl	8006bfa <USB_GetDevSpeed>
 80034e8:	4603      	mov	r3, r0
 80034ea:	461a      	mov	r2, r3
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681c      	ldr	r4, [r3, #0]
 80034f4:	f001 f9b2 	bl	800485c <HAL_RCC_GetHCLKFreq>
 80034f8:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80034fe:	461a      	mov	r2, r3
 8003500:	4620      	mov	r0, r4
 8003502:	f003 f88d 	bl	8006620 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003506:	6878      	ldr	r0, [r7, #4]
 8003508:	f009 f84d 	bl	800c5a6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	695a      	ldr	r2, [r3, #20]
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 800351a:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	4618      	mov	r0, r3
 8003522:	f004 fa0d 	bl	8007940 <USB_ReadInterrupts>
 8003526:	4603      	mov	r3, r0
 8003528:	f003 0308 	and.w	r3, r3, #8
 800352c:	2b08      	cmp	r3, #8
 800352e:	d10a      	bne.n	8003546 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003530:	6878      	ldr	r0, [r7, #4]
 8003532:	f009 f82a 	bl	800c58a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	695a      	ldr	r2, [r3, #20]
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f002 0208 	and.w	r2, r2, #8
 8003544:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	4618      	mov	r0, r3
 800354c:	f004 f9f8 	bl	8007940 <USB_ReadInterrupts>
 8003550:	4603      	mov	r3, r0
 8003552:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003556:	2b80      	cmp	r3, #128	@ 0x80
 8003558:	d123      	bne.n	80035a2 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800355a:	6a3b      	ldr	r3, [r7, #32]
 800355c:	699b      	ldr	r3, [r3, #24]
 800355e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003562:	6a3b      	ldr	r3, [r7, #32]
 8003564:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003566:	2301      	movs	r3, #1
 8003568:	627b      	str	r3, [r7, #36]	@ 0x24
 800356a:	e014      	b.n	8003596 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800356c:	6879      	ldr	r1, [r7, #4]
 800356e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003570:	4613      	mov	r3, r2
 8003572:	00db      	lsls	r3, r3, #3
 8003574:	4413      	add	r3, r2
 8003576:	009b      	lsls	r3, r3, #2
 8003578:	440b      	add	r3, r1
 800357a:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800357e:	781b      	ldrb	r3, [r3, #0]
 8003580:	2b01      	cmp	r3, #1
 8003582:	d105      	bne.n	8003590 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8003584:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003586:	b2db      	uxtb	r3, r3
 8003588:	4619      	mov	r1, r3
 800358a:	6878      	ldr	r0, [r7, #4]
 800358c:	f000 faf2 	bl	8003b74 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003590:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003592:	3301      	adds	r3, #1
 8003594:	627b      	str	r3, [r7, #36]	@ 0x24
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	791b      	ldrb	r3, [r3, #4]
 800359a:	461a      	mov	r2, r3
 800359c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800359e:	4293      	cmp	r3, r2
 80035a0:	d3e4      	bcc.n	800356c <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	4618      	mov	r0, r3
 80035a8:	f004 f9ca 	bl	8007940 <USB_ReadInterrupts>
 80035ac:	4603      	mov	r3, r0
 80035ae:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80035b2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80035b6:	d13c      	bne.n	8003632 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80035b8:	2301      	movs	r3, #1
 80035ba:	627b      	str	r3, [r7, #36]	@ 0x24
 80035bc:	e02b      	b.n	8003616 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80035be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035c0:	015a      	lsls	r2, r3, #5
 80035c2:	69fb      	ldr	r3, [r7, #28]
 80035c4:	4413      	add	r3, r2
 80035c6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80035ce:	6879      	ldr	r1, [r7, #4]
 80035d0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80035d2:	4613      	mov	r3, r2
 80035d4:	00db      	lsls	r3, r3, #3
 80035d6:	4413      	add	r3, r2
 80035d8:	009b      	lsls	r3, r3, #2
 80035da:	440b      	add	r3, r1
 80035dc:	3318      	adds	r3, #24
 80035de:	781b      	ldrb	r3, [r3, #0]
 80035e0:	2b01      	cmp	r3, #1
 80035e2:	d115      	bne.n	8003610 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80035e4:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	da12      	bge.n	8003610 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80035ea:	6879      	ldr	r1, [r7, #4]
 80035ec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80035ee:	4613      	mov	r3, r2
 80035f0:	00db      	lsls	r3, r3, #3
 80035f2:	4413      	add	r3, r2
 80035f4:	009b      	lsls	r3, r3, #2
 80035f6:	440b      	add	r3, r1
 80035f8:	3317      	adds	r3, #23
 80035fa:	2201      	movs	r2, #1
 80035fc:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80035fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003600:	b2db      	uxtb	r3, r3
 8003602:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003606:	b2db      	uxtb	r3, r3
 8003608:	4619      	mov	r1, r3
 800360a:	6878      	ldr	r0, [r7, #4]
 800360c:	f000 fab2 	bl	8003b74 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003610:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003612:	3301      	adds	r3, #1
 8003614:	627b      	str	r3, [r7, #36]	@ 0x24
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	791b      	ldrb	r3, [r3, #4]
 800361a:	461a      	mov	r2, r3
 800361c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800361e:	4293      	cmp	r3, r2
 8003620:	d3cd      	bcc.n	80035be <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	695a      	ldr	r2, [r3, #20]
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8003630:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	4618      	mov	r0, r3
 8003638:	f004 f982 	bl	8007940 <USB_ReadInterrupts>
 800363c:	4603      	mov	r3, r0
 800363e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003642:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003646:	d156      	bne.n	80036f6 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003648:	2301      	movs	r3, #1
 800364a:	627b      	str	r3, [r7, #36]	@ 0x24
 800364c:	e045      	b.n	80036da <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800364e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003650:	015a      	lsls	r2, r3, #5
 8003652:	69fb      	ldr	r3, [r7, #28]
 8003654:	4413      	add	r3, r2
 8003656:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800365e:	6879      	ldr	r1, [r7, #4]
 8003660:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003662:	4613      	mov	r3, r2
 8003664:	00db      	lsls	r3, r3, #3
 8003666:	4413      	add	r3, r2
 8003668:	009b      	lsls	r3, r3, #2
 800366a:	440b      	add	r3, r1
 800366c:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8003670:	781b      	ldrb	r3, [r3, #0]
 8003672:	2b01      	cmp	r3, #1
 8003674:	d12e      	bne.n	80036d4 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003676:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003678:	2b00      	cmp	r3, #0
 800367a:	da2b      	bge.n	80036d4 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800367c:	69bb      	ldr	r3, [r7, #24]
 800367e:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8003688:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800368c:	429a      	cmp	r2, r3
 800368e:	d121      	bne.n	80036d4 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8003690:	6879      	ldr	r1, [r7, #4]
 8003692:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003694:	4613      	mov	r3, r2
 8003696:	00db      	lsls	r3, r3, #3
 8003698:	4413      	add	r3, r2
 800369a:	009b      	lsls	r3, r3, #2
 800369c:	440b      	add	r3, r1
 800369e:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80036a2:	2201      	movs	r2, #1
 80036a4:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80036a6:	6a3b      	ldr	r3, [r7, #32]
 80036a8:	699b      	ldr	r3, [r3, #24]
 80036aa:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80036ae:	6a3b      	ldr	r3, [r7, #32]
 80036b0:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80036b2:	6a3b      	ldr	r3, [r7, #32]
 80036b4:	695b      	ldr	r3, [r3, #20]
 80036b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d10a      	bne.n	80036d4 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80036be:	69fb      	ldr	r3, [r7, #28]
 80036c0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80036c4:	685b      	ldr	r3, [r3, #4]
 80036c6:	69fa      	ldr	r2, [r7, #28]
 80036c8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80036cc:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80036d0:	6053      	str	r3, [r2, #4]
            break;
 80036d2:	e008      	b.n	80036e6 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80036d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036d6:	3301      	adds	r3, #1
 80036d8:	627b      	str	r3, [r7, #36]	@ 0x24
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	791b      	ldrb	r3, [r3, #4]
 80036de:	461a      	mov	r2, r3
 80036e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d3b3      	bcc.n	800364e <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	695a      	ldr	r2, [r3, #20]
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 80036f4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	4618      	mov	r0, r3
 80036fc:	f004 f920 	bl	8007940 <USB_ReadInterrupts>
 8003700:	4603      	mov	r3, r0
 8003702:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8003706:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800370a:	d10a      	bne.n	8003722 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800370c:	6878      	ldr	r0, [r7, #4]
 800370e:	f008 ffc1 	bl	800c694 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	695a      	ldr	r2, [r3, #20]
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8003720:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	4618      	mov	r0, r3
 8003728:	f004 f90a 	bl	8007940 <USB_ReadInterrupts>
 800372c:	4603      	mov	r3, r0
 800372e:	f003 0304 	and.w	r3, r3, #4
 8003732:	2b04      	cmp	r3, #4
 8003734:	d115      	bne.n	8003762 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	685b      	ldr	r3, [r3, #4]
 800373c:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800373e:	69bb      	ldr	r3, [r7, #24]
 8003740:	f003 0304 	and.w	r3, r3, #4
 8003744:	2b00      	cmp	r3, #0
 8003746:	d002      	beq.n	800374e <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003748:	6878      	ldr	r0, [r7, #4]
 800374a:	f008 ffb1 	bl	800c6b0 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	6859      	ldr	r1, [r3, #4]
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	69ba      	ldr	r2, [r7, #24]
 800375a:	430a      	orrs	r2, r1
 800375c:	605a      	str	r2, [r3, #4]
 800375e:	e000      	b.n	8003762 <HAL_PCD_IRQHandler+0x93c>
      return;
 8003760:	bf00      	nop
    }
  }
}
 8003762:	3734      	adds	r7, #52	@ 0x34
 8003764:	46bd      	mov	sp, r7
 8003766:	bd90      	pop	{r4, r7, pc}

08003768 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003768:	b580      	push	{r7, lr}
 800376a:	b082      	sub	sp, #8
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
 8003770:	460b      	mov	r3, r1
 8003772:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800377a:	2b01      	cmp	r3, #1
 800377c:	d101      	bne.n	8003782 <HAL_PCD_SetAddress+0x1a>
 800377e:	2302      	movs	r3, #2
 8003780:	e012      	b.n	80037a8 <HAL_PCD_SetAddress+0x40>
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	2201      	movs	r2, #1
 8003786:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	78fa      	ldrb	r2, [r7, #3]
 800378e:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	78fa      	ldrb	r2, [r7, #3]
 8003796:	4611      	mov	r1, r2
 8003798:	4618      	mov	r0, r3
 800379a:	f004 f869 	bl	8007870 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	2200      	movs	r2, #0
 80037a2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80037a6:	2300      	movs	r3, #0
}
 80037a8:	4618      	mov	r0, r3
 80037aa:	3708      	adds	r7, #8
 80037ac:	46bd      	mov	sp, r7
 80037ae:	bd80      	pop	{r7, pc}

080037b0 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b084      	sub	sp, #16
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
 80037b8:	4608      	mov	r0, r1
 80037ba:	4611      	mov	r1, r2
 80037bc:	461a      	mov	r2, r3
 80037be:	4603      	mov	r3, r0
 80037c0:	70fb      	strb	r3, [r7, #3]
 80037c2:	460b      	mov	r3, r1
 80037c4:	803b      	strh	r3, [r7, #0]
 80037c6:	4613      	mov	r3, r2
 80037c8:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 80037ca:	2300      	movs	r3, #0
 80037cc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80037ce:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	da0f      	bge.n	80037f6 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80037d6:	78fb      	ldrb	r3, [r7, #3]
 80037d8:	f003 020f 	and.w	r2, r3, #15
 80037dc:	4613      	mov	r3, r2
 80037de:	00db      	lsls	r3, r3, #3
 80037e0:	4413      	add	r3, r2
 80037e2:	009b      	lsls	r3, r3, #2
 80037e4:	3310      	adds	r3, #16
 80037e6:	687a      	ldr	r2, [r7, #4]
 80037e8:	4413      	add	r3, r2
 80037ea:	3304      	adds	r3, #4
 80037ec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	2201      	movs	r2, #1
 80037f2:	705a      	strb	r2, [r3, #1]
 80037f4:	e00f      	b.n	8003816 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80037f6:	78fb      	ldrb	r3, [r7, #3]
 80037f8:	f003 020f 	and.w	r2, r3, #15
 80037fc:	4613      	mov	r3, r2
 80037fe:	00db      	lsls	r3, r3, #3
 8003800:	4413      	add	r3, r2
 8003802:	009b      	lsls	r3, r3, #2
 8003804:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003808:	687a      	ldr	r2, [r7, #4]
 800380a:	4413      	add	r3, r2
 800380c:	3304      	adds	r3, #4
 800380e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	2200      	movs	r2, #0
 8003814:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003816:	78fb      	ldrb	r3, [r7, #3]
 8003818:	f003 030f 	and.w	r3, r3, #15
 800381c:	b2da      	uxtb	r2, r3
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8003822:	883b      	ldrh	r3, [r7, #0]
 8003824:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	78ba      	ldrb	r2, [r7, #2]
 8003830:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	785b      	ldrb	r3, [r3, #1]
 8003836:	2b00      	cmp	r3, #0
 8003838:	d004      	beq.n	8003844 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	781b      	ldrb	r3, [r3, #0]
 800383e:	461a      	mov	r2, r3
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003844:	78bb      	ldrb	r3, [r7, #2]
 8003846:	2b02      	cmp	r3, #2
 8003848:	d102      	bne.n	8003850 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	2200      	movs	r2, #0
 800384e:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003856:	2b01      	cmp	r3, #1
 8003858:	d101      	bne.n	800385e <HAL_PCD_EP_Open+0xae>
 800385a:	2302      	movs	r3, #2
 800385c:	e00e      	b.n	800387c <HAL_PCD_EP_Open+0xcc>
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	2201      	movs	r2, #1
 8003862:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	68f9      	ldr	r1, [r7, #12]
 800386c:	4618      	mov	r0, r3
 800386e:	f003 f9e9 	bl	8006c44 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	2200      	movs	r2, #0
 8003876:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 800387a:	7afb      	ldrb	r3, [r7, #11]
}
 800387c:	4618      	mov	r0, r3
 800387e:	3710      	adds	r7, #16
 8003880:	46bd      	mov	sp, r7
 8003882:	bd80      	pop	{r7, pc}

08003884 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003884:	b580      	push	{r7, lr}
 8003886:	b084      	sub	sp, #16
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
 800388c:	460b      	mov	r3, r1
 800388e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003890:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003894:	2b00      	cmp	r3, #0
 8003896:	da0f      	bge.n	80038b8 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003898:	78fb      	ldrb	r3, [r7, #3]
 800389a:	f003 020f 	and.w	r2, r3, #15
 800389e:	4613      	mov	r3, r2
 80038a0:	00db      	lsls	r3, r3, #3
 80038a2:	4413      	add	r3, r2
 80038a4:	009b      	lsls	r3, r3, #2
 80038a6:	3310      	adds	r3, #16
 80038a8:	687a      	ldr	r2, [r7, #4]
 80038aa:	4413      	add	r3, r2
 80038ac:	3304      	adds	r3, #4
 80038ae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	2201      	movs	r2, #1
 80038b4:	705a      	strb	r2, [r3, #1]
 80038b6:	e00f      	b.n	80038d8 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80038b8:	78fb      	ldrb	r3, [r7, #3]
 80038ba:	f003 020f 	and.w	r2, r3, #15
 80038be:	4613      	mov	r3, r2
 80038c0:	00db      	lsls	r3, r3, #3
 80038c2:	4413      	add	r3, r2
 80038c4:	009b      	lsls	r3, r3, #2
 80038c6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80038ca:	687a      	ldr	r2, [r7, #4]
 80038cc:	4413      	add	r3, r2
 80038ce:	3304      	adds	r3, #4
 80038d0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	2200      	movs	r2, #0
 80038d6:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80038d8:	78fb      	ldrb	r3, [r7, #3]
 80038da:	f003 030f 	and.w	r3, r3, #15
 80038de:	b2da      	uxtb	r2, r3
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80038ea:	2b01      	cmp	r3, #1
 80038ec:	d101      	bne.n	80038f2 <HAL_PCD_EP_Close+0x6e>
 80038ee:	2302      	movs	r3, #2
 80038f0:	e00e      	b.n	8003910 <HAL_PCD_EP_Close+0x8c>
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	2201      	movs	r2, #1
 80038f6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	68f9      	ldr	r1, [r7, #12]
 8003900:	4618      	mov	r0, r3
 8003902:	f003 fa27 	bl	8006d54 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	2200      	movs	r2, #0
 800390a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 800390e:	2300      	movs	r3, #0
}
 8003910:	4618      	mov	r0, r3
 8003912:	3710      	adds	r7, #16
 8003914:	46bd      	mov	sp, r7
 8003916:	bd80      	pop	{r7, pc}

08003918 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003918:	b580      	push	{r7, lr}
 800391a:	b086      	sub	sp, #24
 800391c:	af00      	add	r7, sp, #0
 800391e:	60f8      	str	r0, [r7, #12]
 8003920:	607a      	str	r2, [r7, #4]
 8003922:	603b      	str	r3, [r7, #0]
 8003924:	460b      	mov	r3, r1
 8003926:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003928:	7afb      	ldrb	r3, [r7, #11]
 800392a:	f003 020f 	and.w	r2, r3, #15
 800392e:	4613      	mov	r3, r2
 8003930:	00db      	lsls	r3, r3, #3
 8003932:	4413      	add	r3, r2
 8003934:	009b      	lsls	r3, r3, #2
 8003936:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800393a:	68fa      	ldr	r2, [r7, #12]
 800393c:	4413      	add	r3, r2
 800393e:	3304      	adds	r3, #4
 8003940:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003942:	697b      	ldr	r3, [r7, #20]
 8003944:	687a      	ldr	r2, [r7, #4]
 8003946:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003948:	697b      	ldr	r3, [r7, #20]
 800394a:	683a      	ldr	r2, [r7, #0]
 800394c:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800394e:	697b      	ldr	r3, [r7, #20]
 8003950:	2200      	movs	r2, #0
 8003952:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8003954:	697b      	ldr	r3, [r7, #20]
 8003956:	2200      	movs	r2, #0
 8003958:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800395a:	7afb      	ldrb	r3, [r7, #11]
 800395c:	f003 030f 	and.w	r3, r3, #15
 8003960:	b2da      	uxtb	r2, r3
 8003962:	697b      	ldr	r3, [r7, #20]
 8003964:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	799b      	ldrb	r3, [r3, #6]
 800396a:	2b01      	cmp	r3, #1
 800396c:	d102      	bne.n	8003974 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800396e:	687a      	ldr	r2, [r7, #4]
 8003970:	697b      	ldr	r3, [r7, #20]
 8003972:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	6818      	ldr	r0, [r3, #0]
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	799b      	ldrb	r3, [r3, #6]
 800397c:	461a      	mov	r2, r3
 800397e:	6979      	ldr	r1, [r7, #20]
 8003980:	f003 fac4 	bl	8006f0c <USB_EPStartXfer>

  return HAL_OK;
 8003984:	2300      	movs	r3, #0
}
 8003986:	4618      	mov	r0, r3
 8003988:	3718      	adds	r7, #24
 800398a:	46bd      	mov	sp, r7
 800398c:	bd80      	pop	{r7, pc}

0800398e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800398e:	b580      	push	{r7, lr}
 8003990:	b086      	sub	sp, #24
 8003992:	af00      	add	r7, sp, #0
 8003994:	60f8      	str	r0, [r7, #12]
 8003996:	607a      	str	r2, [r7, #4]
 8003998:	603b      	str	r3, [r7, #0]
 800399a:	460b      	mov	r3, r1
 800399c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800399e:	7afb      	ldrb	r3, [r7, #11]
 80039a0:	f003 020f 	and.w	r2, r3, #15
 80039a4:	4613      	mov	r3, r2
 80039a6:	00db      	lsls	r3, r3, #3
 80039a8:	4413      	add	r3, r2
 80039aa:	009b      	lsls	r3, r3, #2
 80039ac:	3310      	adds	r3, #16
 80039ae:	68fa      	ldr	r2, [r7, #12]
 80039b0:	4413      	add	r3, r2
 80039b2:	3304      	adds	r3, #4
 80039b4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80039b6:	697b      	ldr	r3, [r7, #20]
 80039b8:	687a      	ldr	r2, [r7, #4]
 80039ba:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80039bc:	697b      	ldr	r3, [r7, #20]
 80039be:	683a      	ldr	r2, [r7, #0]
 80039c0:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80039c2:	697b      	ldr	r3, [r7, #20]
 80039c4:	2200      	movs	r2, #0
 80039c6:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 80039c8:	697b      	ldr	r3, [r7, #20]
 80039ca:	2201      	movs	r2, #1
 80039cc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80039ce:	7afb      	ldrb	r3, [r7, #11]
 80039d0:	f003 030f 	and.w	r3, r3, #15
 80039d4:	b2da      	uxtb	r2, r3
 80039d6:	697b      	ldr	r3, [r7, #20]
 80039d8:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	799b      	ldrb	r3, [r3, #6]
 80039de:	2b01      	cmp	r3, #1
 80039e0:	d102      	bne.n	80039e8 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80039e2:	687a      	ldr	r2, [r7, #4]
 80039e4:	697b      	ldr	r3, [r7, #20]
 80039e6:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	6818      	ldr	r0, [r3, #0]
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	799b      	ldrb	r3, [r3, #6]
 80039f0:	461a      	mov	r2, r3
 80039f2:	6979      	ldr	r1, [r7, #20]
 80039f4:	f003 fa8a 	bl	8006f0c <USB_EPStartXfer>

  return HAL_OK;
 80039f8:	2300      	movs	r3, #0
}
 80039fa:	4618      	mov	r0, r3
 80039fc:	3718      	adds	r7, #24
 80039fe:	46bd      	mov	sp, r7
 8003a00:	bd80      	pop	{r7, pc}

08003a02 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003a02:	b580      	push	{r7, lr}
 8003a04:	b084      	sub	sp, #16
 8003a06:	af00      	add	r7, sp, #0
 8003a08:	6078      	str	r0, [r7, #4]
 8003a0a:	460b      	mov	r3, r1
 8003a0c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003a0e:	78fb      	ldrb	r3, [r7, #3]
 8003a10:	f003 030f 	and.w	r3, r3, #15
 8003a14:	687a      	ldr	r2, [r7, #4]
 8003a16:	7912      	ldrb	r2, [r2, #4]
 8003a18:	4293      	cmp	r3, r2
 8003a1a:	d901      	bls.n	8003a20 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003a1c:	2301      	movs	r3, #1
 8003a1e:	e04f      	b.n	8003ac0 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003a20:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	da0f      	bge.n	8003a48 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003a28:	78fb      	ldrb	r3, [r7, #3]
 8003a2a:	f003 020f 	and.w	r2, r3, #15
 8003a2e:	4613      	mov	r3, r2
 8003a30:	00db      	lsls	r3, r3, #3
 8003a32:	4413      	add	r3, r2
 8003a34:	009b      	lsls	r3, r3, #2
 8003a36:	3310      	adds	r3, #16
 8003a38:	687a      	ldr	r2, [r7, #4]
 8003a3a:	4413      	add	r3, r2
 8003a3c:	3304      	adds	r3, #4
 8003a3e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	2201      	movs	r2, #1
 8003a44:	705a      	strb	r2, [r3, #1]
 8003a46:	e00d      	b.n	8003a64 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003a48:	78fa      	ldrb	r2, [r7, #3]
 8003a4a:	4613      	mov	r3, r2
 8003a4c:	00db      	lsls	r3, r3, #3
 8003a4e:	4413      	add	r3, r2
 8003a50:	009b      	lsls	r3, r3, #2
 8003a52:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003a56:	687a      	ldr	r2, [r7, #4]
 8003a58:	4413      	add	r3, r2
 8003a5a:	3304      	adds	r3, #4
 8003a5c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	2200      	movs	r2, #0
 8003a62:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	2201      	movs	r2, #1
 8003a68:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003a6a:	78fb      	ldrb	r3, [r7, #3]
 8003a6c:	f003 030f 	and.w	r3, r3, #15
 8003a70:	b2da      	uxtb	r2, r3
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003a7c:	2b01      	cmp	r3, #1
 8003a7e:	d101      	bne.n	8003a84 <HAL_PCD_EP_SetStall+0x82>
 8003a80:	2302      	movs	r3, #2
 8003a82:	e01d      	b.n	8003ac0 <HAL_PCD_EP_SetStall+0xbe>
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2201      	movs	r2, #1
 8003a88:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	68f9      	ldr	r1, [r7, #12]
 8003a92:	4618      	mov	r0, r3
 8003a94:	f003 fe18 	bl	80076c8 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003a98:	78fb      	ldrb	r3, [r7, #3]
 8003a9a:	f003 030f 	and.w	r3, r3, #15
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d109      	bne.n	8003ab6 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6818      	ldr	r0, [r3, #0]
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	7999      	ldrb	r1, [r3, #6]
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003ab0:	461a      	mov	r2, r3
 8003ab2:	f004 f809 	bl	8007ac8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	2200      	movs	r2, #0
 8003aba:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003abe:	2300      	movs	r3, #0
}
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	3710      	adds	r7, #16
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	bd80      	pop	{r7, pc}

08003ac8 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b084      	sub	sp, #16
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
 8003ad0:	460b      	mov	r3, r1
 8003ad2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003ad4:	78fb      	ldrb	r3, [r7, #3]
 8003ad6:	f003 030f 	and.w	r3, r3, #15
 8003ada:	687a      	ldr	r2, [r7, #4]
 8003adc:	7912      	ldrb	r2, [r2, #4]
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	d901      	bls.n	8003ae6 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003ae2:	2301      	movs	r3, #1
 8003ae4:	e042      	b.n	8003b6c <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003ae6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	da0f      	bge.n	8003b0e <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003aee:	78fb      	ldrb	r3, [r7, #3]
 8003af0:	f003 020f 	and.w	r2, r3, #15
 8003af4:	4613      	mov	r3, r2
 8003af6:	00db      	lsls	r3, r3, #3
 8003af8:	4413      	add	r3, r2
 8003afa:	009b      	lsls	r3, r3, #2
 8003afc:	3310      	adds	r3, #16
 8003afe:	687a      	ldr	r2, [r7, #4]
 8003b00:	4413      	add	r3, r2
 8003b02:	3304      	adds	r3, #4
 8003b04:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	2201      	movs	r2, #1
 8003b0a:	705a      	strb	r2, [r3, #1]
 8003b0c:	e00f      	b.n	8003b2e <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003b0e:	78fb      	ldrb	r3, [r7, #3]
 8003b10:	f003 020f 	and.w	r2, r3, #15
 8003b14:	4613      	mov	r3, r2
 8003b16:	00db      	lsls	r3, r3, #3
 8003b18:	4413      	add	r3, r2
 8003b1a:	009b      	lsls	r3, r3, #2
 8003b1c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003b20:	687a      	ldr	r2, [r7, #4]
 8003b22:	4413      	add	r3, r2
 8003b24:	3304      	adds	r3, #4
 8003b26:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	2200      	movs	r2, #0
 8003b32:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003b34:	78fb      	ldrb	r3, [r7, #3]
 8003b36:	f003 030f 	and.w	r3, r3, #15
 8003b3a:	b2da      	uxtb	r2, r3
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003b46:	2b01      	cmp	r3, #1
 8003b48:	d101      	bne.n	8003b4e <HAL_PCD_EP_ClrStall+0x86>
 8003b4a:	2302      	movs	r3, #2
 8003b4c:	e00e      	b.n	8003b6c <HAL_PCD_EP_ClrStall+0xa4>
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	2201      	movs	r2, #1
 8003b52:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	68f9      	ldr	r1, [r7, #12]
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	f003 fe21 	bl	80077a4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	2200      	movs	r2, #0
 8003b66:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003b6a:	2300      	movs	r3, #0
}
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	3710      	adds	r7, #16
 8003b70:	46bd      	mov	sp, r7
 8003b72:	bd80      	pop	{r7, pc}

08003b74 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b084      	sub	sp, #16
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
 8003b7c:	460b      	mov	r3, r1
 8003b7e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8003b80:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	da0c      	bge.n	8003ba2 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003b88:	78fb      	ldrb	r3, [r7, #3]
 8003b8a:	f003 020f 	and.w	r2, r3, #15
 8003b8e:	4613      	mov	r3, r2
 8003b90:	00db      	lsls	r3, r3, #3
 8003b92:	4413      	add	r3, r2
 8003b94:	009b      	lsls	r3, r3, #2
 8003b96:	3310      	adds	r3, #16
 8003b98:	687a      	ldr	r2, [r7, #4]
 8003b9a:	4413      	add	r3, r2
 8003b9c:	3304      	adds	r3, #4
 8003b9e:	60fb      	str	r3, [r7, #12]
 8003ba0:	e00c      	b.n	8003bbc <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003ba2:	78fb      	ldrb	r3, [r7, #3]
 8003ba4:	f003 020f 	and.w	r2, r3, #15
 8003ba8:	4613      	mov	r3, r2
 8003baa:	00db      	lsls	r3, r3, #3
 8003bac:	4413      	add	r3, r2
 8003bae:	009b      	lsls	r3, r3, #2
 8003bb0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003bb4:	687a      	ldr	r2, [r7, #4]
 8003bb6:	4413      	add	r3, r2
 8003bb8:	3304      	adds	r3, #4
 8003bba:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	68f9      	ldr	r1, [r7, #12]
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	f003 fc40 	bl	8007448 <USB_EPStopXfer>
 8003bc8:	4603      	mov	r3, r0
 8003bca:	72fb      	strb	r3, [r7, #11]

  return ret;
 8003bcc:	7afb      	ldrb	r3, [r7, #11]
}
 8003bce:	4618      	mov	r0, r3
 8003bd0:	3710      	adds	r7, #16
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	bd80      	pop	{r7, pc}

08003bd6 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003bd6:	b580      	push	{r7, lr}
 8003bd8:	b08a      	sub	sp, #40	@ 0x28
 8003bda:	af02      	add	r7, sp, #8
 8003bdc:	6078      	str	r0, [r7, #4]
 8003bde:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003be6:	697b      	ldr	r3, [r7, #20]
 8003be8:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003bea:	683a      	ldr	r2, [r7, #0]
 8003bec:	4613      	mov	r3, r2
 8003bee:	00db      	lsls	r3, r3, #3
 8003bf0:	4413      	add	r3, r2
 8003bf2:	009b      	lsls	r3, r3, #2
 8003bf4:	3310      	adds	r3, #16
 8003bf6:	687a      	ldr	r2, [r7, #4]
 8003bf8:	4413      	add	r3, r2
 8003bfa:	3304      	adds	r3, #4
 8003bfc:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	695a      	ldr	r2, [r3, #20]
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	691b      	ldr	r3, [r3, #16]
 8003c06:	429a      	cmp	r2, r3
 8003c08:	d901      	bls.n	8003c0e <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003c0a:	2301      	movs	r3, #1
 8003c0c:	e06b      	b.n	8003ce6 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	691a      	ldr	r2, [r3, #16]
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	695b      	ldr	r3, [r3, #20]
 8003c16:	1ad3      	subs	r3, r2, r3
 8003c18:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	689b      	ldr	r3, [r3, #8]
 8003c1e:	69fa      	ldr	r2, [r7, #28]
 8003c20:	429a      	cmp	r2, r3
 8003c22:	d902      	bls.n	8003c2a <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	689b      	ldr	r3, [r3, #8]
 8003c28:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003c2a:	69fb      	ldr	r3, [r7, #28]
 8003c2c:	3303      	adds	r3, #3
 8003c2e:	089b      	lsrs	r3, r3, #2
 8003c30:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003c32:	e02a      	b.n	8003c8a <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	691a      	ldr	r2, [r3, #16]
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	695b      	ldr	r3, [r3, #20]
 8003c3c:	1ad3      	subs	r3, r2, r3
 8003c3e:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	689b      	ldr	r3, [r3, #8]
 8003c44:	69fa      	ldr	r2, [r7, #28]
 8003c46:	429a      	cmp	r2, r3
 8003c48:	d902      	bls.n	8003c50 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	689b      	ldr	r3, [r3, #8]
 8003c4e:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003c50:	69fb      	ldr	r3, [r7, #28]
 8003c52:	3303      	adds	r3, #3
 8003c54:	089b      	lsrs	r3, r3, #2
 8003c56:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	68d9      	ldr	r1, [r3, #12]
 8003c5c:	683b      	ldr	r3, [r7, #0]
 8003c5e:	b2da      	uxtb	r2, r3
 8003c60:	69fb      	ldr	r3, [r7, #28]
 8003c62:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003c68:	9300      	str	r3, [sp, #0]
 8003c6a:	4603      	mov	r3, r0
 8003c6c:	6978      	ldr	r0, [r7, #20]
 8003c6e:	f003 fc95 	bl	800759c <USB_WritePacket>

    ep->xfer_buff  += len;
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	68da      	ldr	r2, [r3, #12]
 8003c76:	69fb      	ldr	r3, [r7, #28]
 8003c78:	441a      	add	r2, r3
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	695a      	ldr	r2, [r3, #20]
 8003c82:	69fb      	ldr	r3, [r7, #28]
 8003c84:	441a      	add	r2, r3
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003c8a:	683b      	ldr	r3, [r7, #0]
 8003c8c:	015a      	lsls	r2, r3, #5
 8003c8e:	693b      	ldr	r3, [r7, #16]
 8003c90:	4413      	add	r3, r2
 8003c92:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003c96:	699b      	ldr	r3, [r3, #24]
 8003c98:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003c9a:	69ba      	ldr	r2, [r7, #24]
 8003c9c:	429a      	cmp	r2, r3
 8003c9e:	d809      	bhi.n	8003cb4 <PCD_WriteEmptyTxFifo+0xde>
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	695a      	ldr	r2, [r3, #20]
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003ca8:	429a      	cmp	r2, r3
 8003caa:	d203      	bcs.n	8003cb4 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	691b      	ldr	r3, [r3, #16]
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d1bf      	bne.n	8003c34 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	691a      	ldr	r2, [r3, #16]
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	695b      	ldr	r3, [r3, #20]
 8003cbc:	429a      	cmp	r2, r3
 8003cbe:	d811      	bhi.n	8003ce4 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003cc0:	683b      	ldr	r3, [r7, #0]
 8003cc2:	f003 030f 	and.w	r3, r3, #15
 8003cc6:	2201      	movs	r2, #1
 8003cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8003ccc:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003cce:	693b      	ldr	r3, [r7, #16]
 8003cd0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003cd4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003cd6:	68bb      	ldr	r3, [r7, #8]
 8003cd8:	43db      	mvns	r3, r3
 8003cda:	6939      	ldr	r1, [r7, #16]
 8003cdc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003ce0:	4013      	ands	r3, r2
 8003ce2:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8003ce4:	2300      	movs	r3, #0
}
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	3720      	adds	r7, #32
 8003cea:	46bd      	mov	sp, r7
 8003cec:	bd80      	pop	{r7, pc}
	...

08003cf0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	b088      	sub	sp, #32
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
 8003cf8:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d00:	69fb      	ldr	r3, [r7, #28]
 8003d02:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003d04:	69fb      	ldr	r3, [r7, #28]
 8003d06:	333c      	adds	r3, #60	@ 0x3c
 8003d08:	3304      	adds	r3, #4
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003d0e:	683b      	ldr	r3, [r7, #0]
 8003d10:	015a      	lsls	r2, r3, #5
 8003d12:	69bb      	ldr	r3, [r7, #24]
 8003d14:	4413      	add	r3, r2
 8003d16:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003d1a:	689b      	ldr	r3, [r3, #8]
 8003d1c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	799b      	ldrb	r3, [r3, #6]
 8003d22:	2b01      	cmp	r3, #1
 8003d24:	d17b      	bne.n	8003e1e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003d26:	693b      	ldr	r3, [r7, #16]
 8003d28:	f003 0308 	and.w	r3, r3, #8
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d015      	beq.n	8003d5c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003d30:	697b      	ldr	r3, [r7, #20]
 8003d32:	4a61      	ldr	r2, [pc, #388]	@ (8003eb8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003d34:	4293      	cmp	r3, r2
 8003d36:	f240 80b9 	bls.w	8003eac <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003d3a:	693b      	ldr	r3, [r7, #16]
 8003d3c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	f000 80b3 	beq.w	8003eac <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003d46:	683b      	ldr	r3, [r7, #0]
 8003d48:	015a      	lsls	r2, r3, #5
 8003d4a:	69bb      	ldr	r3, [r7, #24]
 8003d4c:	4413      	add	r3, r2
 8003d4e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003d52:	461a      	mov	r2, r3
 8003d54:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003d58:	6093      	str	r3, [r2, #8]
 8003d5a:	e0a7      	b.n	8003eac <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003d5c:	693b      	ldr	r3, [r7, #16]
 8003d5e:	f003 0320 	and.w	r3, r3, #32
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d009      	beq.n	8003d7a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003d66:	683b      	ldr	r3, [r7, #0]
 8003d68:	015a      	lsls	r2, r3, #5
 8003d6a:	69bb      	ldr	r3, [r7, #24]
 8003d6c:	4413      	add	r3, r2
 8003d6e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003d72:	461a      	mov	r2, r3
 8003d74:	2320      	movs	r3, #32
 8003d76:	6093      	str	r3, [r2, #8]
 8003d78:	e098      	b.n	8003eac <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003d7a:	693b      	ldr	r3, [r7, #16]
 8003d7c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	f040 8093 	bne.w	8003eac <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003d86:	697b      	ldr	r3, [r7, #20]
 8003d88:	4a4b      	ldr	r2, [pc, #300]	@ (8003eb8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d90f      	bls.n	8003dae <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003d8e:	693b      	ldr	r3, [r7, #16]
 8003d90:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d00a      	beq.n	8003dae <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	015a      	lsls	r2, r3, #5
 8003d9c:	69bb      	ldr	r3, [r7, #24]
 8003d9e:	4413      	add	r3, r2
 8003da0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003da4:	461a      	mov	r2, r3
 8003da6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003daa:	6093      	str	r3, [r2, #8]
 8003dac:	e07e      	b.n	8003eac <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8003dae:	683a      	ldr	r2, [r7, #0]
 8003db0:	4613      	mov	r3, r2
 8003db2:	00db      	lsls	r3, r3, #3
 8003db4:	4413      	add	r3, r2
 8003db6:	009b      	lsls	r3, r3, #2
 8003db8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003dbc:	687a      	ldr	r2, [r7, #4]
 8003dbe:	4413      	add	r3, r2
 8003dc0:	3304      	adds	r3, #4
 8003dc2:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	6a1a      	ldr	r2, [r3, #32]
 8003dc8:	683b      	ldr	r3, [r7, #0]
 8003dca:	0159      	lsls	r1, r3, #5
 8003dcc:	69bb      	ldr	r3, [r7, #24]
 8003dce:	440b      	add	r3, r1
 8003dd0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003dd4:	691b      	ldr	r3, [r3, #16]
 8003dd6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003dda:	1ad2      	subs	r2, r2, r3
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d114      	bne.n	8003e10 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	691b      	ldr	r3, [r3, #16]
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d109      	bne.n	8003e02 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6818      	ldr	r0, [r3, #0]
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003df8:	461a      	mov	r2, r3
 8003dfa:	2101      	movs	r1, #1
 8003dfc:	f003 fe64 	bl	8007ac8 <USB_EP0_OutStart>
 8003e00:	e006      	b.n	8003e10 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	68da      	ldr	r2, [r3, #12]
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	695b      	ldr	r3, [r3, #20]
 8003e0a:	441a      	add	r2, r3
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	b2db      	uxtb	r3, r3
 8003e14:	4619      	mov	r1, r3
 8003e16:	6878      	ldr	r0, [r7, #4]
 8003e18:	f008 fb82 	bl	800c520 <HAL_PCD_DataOutStageCallback>
 8003e1c:	e046      	b.n	8003eac <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003e1e:	697b      	ldr	r3, [r7, #20]
 8003e20:	4a26      	ldr	r2, [pc, #152]	@ (8003ebc <PCD_EP_OutXfrComplete_int+0x1cc>)
 8003e22:	4293      	cmp	r3, r2
 8003e24:	d124      	bne.n	8003e70 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003e26:	693b      	ldr	r3, [r7, #16]
 8003e28:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d00a      	beq.n	8003e46 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	015a      	lsls	r2, r3, #5
 8003e34:	69bb      	ldr	r3, [r7, #24]
 8003e36:	4413      	add	r3, r2
 8003e38:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003e3c:	461a      	mov	r2, r3
 8003e3e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003e42:	6093      	str	r3, [r2, #8]
 8003e44:	e032      	b.n	8003eac <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003e46:	693b      	ldr	r3, [r7, #16]
 8003e48:	f003 0320 	and.w	r3, r3, #32
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d008      	beq.n	8003e62 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003e50:	683b      	ldr	r3, [r7, #0]
 8003e52:	015a      	lsls	r2, r3, #5
 8003e54:	69bb      	ldr	r3, [r7, #24]
 8003e56:	4413      	add	r3, r2
 8003e58:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003e5c:	461a      	mov	r2, r3
 8003e5e:	2320      	movs	r3, #32
 8003e60:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003e62:	683b      	ldr	r3, [r7, #0]
 8003e64:	b2db      	uxtb	r3, r3
 8003e66:	4619      	mov	r1, r3
 8003e68:	6878      	ldr	r0, [r7, #4]
 8003e6a:	f008 fb59 	bl	800c520 <HAL_PCD_DataOutStageCallback>
 8003e6e:	e01d      	b.n	8003eac <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003e70:	683b      	ldr	r3, [r7, #0]
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d114      	bne.n	8003ea0 <PCD_EP_OutXfrComplete_int+0x1b0>
 8003e76:	6879      	ldr	r1, [r7, #4]
 8003e78:	683a      	ldr	r2, [r7, #0]
 8003e7a:	4613      	mov	r3, r2
 8003e7c:	00db      	lsls	r3, r3, #3
 8003e7e:	4413      	add	r3, r2
 8003e80:	009b      	lsls	r3, r3, #2
 8003e82:	440b      	add	r3, r1
 8003e84:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d108      	bne.n	8003ea0 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6818      	ldr	r0, [r3, #0]
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003e98:	461a      	mov	r2, r3
 8003e9a:	2100      	movs	r1, #0
 8003e9c:	f003 fe14 	bl	8007ac8 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	b2db      	uxtb	r3, r3
 8003ea4:	4619      	mov	r1, r3
 8003ea6:	6878      	ldr	r0, [r7, #4]
 8003ea8:	f008 fb3a 	bl	800c520 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003eac:	2300      	movs	r3, #0
}
 8003eae:	4618      	mov	r0, r3
 8003eb0:	3720      	adds	r7, #32
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	bd80      	pop	{r7, pc}
 8003eb6:	bf00      	nop
 8003eb8:	4f54300a 	.word	0x4f54300a
 8003ebc:	4f54310a 	.word	0x4f54310a

08003ec0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	b086      	sub	sp, #24
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]
 8003ec8:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ed0:	697b      	ldr	r3, [r7, #20]
 8003ed2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003ed4:	697b      	ldr	r3, [r7, #20]
 8003ed6:	333c      	adds	r3, #60	@ 0x3c
 8003ed8:	3304      	adds	r3, #4
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003ede:	683b      	ldr	r3, [r7, #0]
 8003ee0:	015a      	lsls	r2, r3, #5
 8003ee2:	693b      	ldr	r3, [r7, #16]
 8003ee4:	4413      	add	r3, r2
 8003ee6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003eea:	689b      	ldr	r3, [r3, #8]
 8003eec:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	4a15      	ldr	r2, [pc, #84]	@ (8003f48 <PCD_EP_OutSetupPacket_int+0x88>)
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d90e      	bls.n	8003f14 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003ef6:	68bb      	ldr	r3, [r7, #8]
 8003ef8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d009      	beq.n	8003f14 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003f00:	683b      	ldr	r3, [r7, #0]
 8003f02:	015a      	lsls	r2, r3, #5
 8003f04:	693b      	ldr	r3, [r7, #16]
 8003f06:	4413      	add	r3, r2
 8003f08:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003f0c:	461a      	mov	r2, r3
 8003f0e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003f12:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003f14:	6878      	ldr	r0, [r7, #4]
 8003f16:	f008 faf1 	bl	800c4fc <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	4a0a      	ldr	r2, [pc, #40]	@ (8003f48 <PCD_EP_OutSetupPacket_int+0x88>)
 8003f1e:	4293      	cmp	r3, r2
 8003f20:	d90c      	bls.n	8003f3c <PCD_EP_OutSetupPacket_int+0x7c>
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	799b      	ldrb	r3, [r3, #6]
 8003f26:	2b01      	cmp	r3, #1
 8003f28:	d108      	bne.n	8003f3c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6818      	ldr	r0, [r3, #0]
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003f34:	461a      	mov	r2, r3
 8003f36:	2101      	movs	r1, #1
 8003f38:	f003 fdc6 	bl	8007ac8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003f3c:	2300      	movs	r3, #0
}
 8003f3e:	4618      	mov	r0, r3
 8003f40:	3718      	adds	r7, #24
 8003f42:	46bd      	mov	sp, r7
 8003f44:	bd80      	pop	{r7, pc}
 8003f46:	bf00      	nop
 8003f48:	4f54300a 	.word	0x4f54300a

08003f4c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003f4c:	b480      	push	{r7}
 8003f4e:	b085      	sub	sp, #20
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
 8003f54:	460b      	mov	r3, r1
 8003f56:	70fb      	strb	r3, [r7, #3]
 8003f58:	4613      	mov	r3, r2
 8003f5a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f62:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003f64:	78fb      	ldrb	r3, [r7, #3]
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d107      	bne.n	8003f7a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003f6a:	883b      	ldrh	r3, [r7, #0]
 8003f6c:	0419      	lsls	r1, r3, #16
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	68ba      	ldr	r2, [r7, #8]
 8003f74:	430a      	orrs	r2, r1
 8003f76:	629a      	str	r2, [r3, #40]	@ 0x28
 8003f78:	e028      	b.n	8003fcc <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f80:	0c1b      	lsrs	r3, r3, #16
 8003f82:	68ba      	ldr	r2, [r7, #8]
 8003f84:	4413      	add	r3, r2
 8003f86:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003f88:	2300      	movs	r3, #0
 8003f8a:	73fb      	strb	r3, [r7, #15]
 8003f8c:	e00d      	b.n	8003faa <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681a      	ldr	r2, [r3, #0]
 8003f92:	7bfb      	ldrb	r3, [r7, #15]
 8003f94:	3340      	adds	r3, #64	@ 0x40
 8003f96:	009b      	lsls	r3, r3, #2
 8003f98:	4413      	add	r3, r2
 8003f9a:	685b      	ldr	r3, [r3, #4]
 8003f9c:	0c1b      	lsrs	r3, r3, #16
 8003f9e:	68ba      	ldr	r2, [r7, #8]
 8003fa0:	4413      	add	r3, r2
 8003fa2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003fa4:	7bfb      	ldrb	r3, [r7, #15]
 8003fa6:	3301      	adds	r3, #1
 8003fa8:	73fb      	strb	r3, [r7, #15]
 8003faa:	7bfa      	ldrb	r2, [r7, #15]
 8003fac:	78fb      	ldrb	r3, [r7, #3]
 8003fae:	3b01      	subs	r3, #1
 8003fb0:	429a      	cmp	r2, r3
 8003fb2:	d3ec      	bcc.n	8003f8e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003fb4:	883b      	ldrh	r3, [r7, #0]
 8003fb6:	0418      	lsls	r0, r3, #16
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	6819      	ldr	r1, [r3, #0]
 8003fbc:	78fb      	ldrb	r3, [r7, #3]
 8003fbe:	3b01      	subs	r3, #1
 8003fc0:	68ba      	ldr	r2, [r7, #8]
 8003fc2:	4302      	orrs	r2, r0
 8003fc4:	3340      	adds	r3, #64	@ 0x40
 8003fc6:	009b      	lsls	r3, r3, #2
 8003fc8:	440b      	add	r3, r1
 8003fca:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003fcc:	2300      	movs	r3, #0
}
 8003fce:	4618      	mov	r0, r3
 8003fd0:	3714      	adds	r7, #20
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd8:	4770      	bx	lr

08003fda <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003fda:	b480      	push	{r7}
 8003fdc:	b083      	sub	sp, #12
 8003fde:	af00      	add	r7, sp, #0
 8003fe0:	6078      	str	r0, [r7, #4]
 8003fe2:	460b      	mov	r3, r1
 8003fe4:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	887a      	ldrh	r2, [r7, #2]
 8003fec:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8003fee:	2300      	movs	r3, #0
}
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	370c      	adds	r7, #12
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffa:	4770      	bx	lr

08003ffc <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003ffc:	b480      	push	{r7}
 8003ffe:	b083      	sub	sp, #12
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
 8004004:	460b      	mov	r3, r1
 8004006:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004008:	bf00      	nop
 800400a:	370c      	adds	r7, #12
 800400c:	46bd      	mov	sp, r7
 800400e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004012:	4770      	bx	lr

08004014 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004014:	b580      	push	{r7, lr}
 8004016:	b086      	sub	sp, #24
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2b00      	cmp	r3, #0
 8004020:	d101      	bne.n	8004026 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004022:	2301      	movs	r3, #1
 8004024:	e267      	b.n	80044f6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f003 0301 	and.w	r3, r3, #1
 800402e:	2b00      	cmp	r3, #0
 8004030:	d075      	beq.n	800411e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004032:	4b88      	ldr	r3, [pc, #544]	@ (8004254 <HAL_RCC_OscConfig+0x240>)
 8004034:	689b      	ldr	r3, [r3, #8]
 8004036:	f003 030c 	and.w	r3, r3, #12
 800403a:	2b04      	cmp	r3, #4
 800403c:	d00c      	beq.n	8004058 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800403e:	4b85      	ldr	r3, [pc, #532]	@ (8004254 <HAL_RCC_OscConfig+0x240>)
 8004040:	689b      	ldr	r3, [r3, #8]
 8004042:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004046:	2b08      	cmp	r3, #8
 8004048:	d112      	bne.n	8004070 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800404a:	4b82      	ldr	r3, [pc, #520]	@ (8004254 <HAL_RCC_OscConfig+0x240>)
 800404c:	685b      	ldr	r3, [r3, #4]
 800404e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004052:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004056:	d10b      	bne.n	8004070 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004058:	4b7e      	ldr	r3, [pc, #504]	@ (8004254 <HAL_RCC_OscConfig+0x240>)
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004060:	2b00      	cmp	r3, #0
 8004062:	d05b      	beq.n	800411c <HAL_RCC_OscConfig+0x108>
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	685b      	ldr	r3, [r3, #4]
 8004068:	2b00      	cmp	r3, #0
 800406a:	d157      	bne.n	800411c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800406c:	2301      	movs	r3, #1
 800406e:	e242      	b.n	80044f6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	685b      	ldr	r3, [r3, #4]
 8004074:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004078:	d106      	bne.n	8004088 <HAL_RCC_OscConfig+0x74>
 800407a:	4b76      	ldr	r3, [pc, #472]	@ (8004254 <HAL_RCC_OscConfig+0x240>)
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	4a75      	ldr	r2, [pc, #468]	@ (8004254 <HAL_RCC_OscConfig+0x240>)
 8004080:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004084:	6013      	str	r3, [r2, #0]
 8004086:	e01d      	b.n	80040c4 <HAL_RCC_OscConfig+0xb0>
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	685b      	ldr	r3, [r3, #4]
 800408c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004090:	d10c      	bne.n	80040ac <HAL_RCC_OscConfig+0x98>
 8004092:	4b70      	ldr	r3, [pc, #448]	@ (8004254 <HAL_RCC_OscConfig+0x240>)
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	4a6f      	ldr	r2, [pc, #444]	@ (8004254 <HAL_RCC_OscConfig+0x240>)
 8004098:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800409c:	6013      	str	r3, [r2, #0]
 800409e:	4b6d      	ldr	r3, [pc, #436]	@ (8004254 <HAL_RCC_OscConfig+0x240>)
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	4a6c      	ldr	r2, [pc, #432]	@ (8004254 <HAL_RCC_OscConfig+0x240>)
 80040a4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80040a8:	6013      	str	r3, [r2, #0]
 80040aa:	e00b      	b.n	80040c4 <HAL_RCC_OscConfig+0xb0>
 80040ac:	4b69      	ldr	r3, [pc, #420]	@ (8004254 <HAL_RCC_OscConfig+0x240>)
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	4a68      	ldr	r2, [pc, #416]	@ (8004254 <HAL_RCC_OscConfig+0x240>)
 80040b2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80040b6:	6013      	str	r3, [r2, #0]
 80040b8:	4b66      	ldr	r3, [pc, #408]	@ (8004254 <HAL_RCC_OscConfig+0x240>)
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	4a65      	ldr	r2, [pc, #404]	@ (8004254 <HAL_RCC_OscConfig+0x240>)
 80040be:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80040c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	685b      	ldr	r3, [r3, #4]
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d013      	beq.n	80040f4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040cc:	f7fd fd7a 	bl	8001bc4 <HAL_GetTick>
 80040d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040d2:	e008      	b.n	80040e6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80040d4:	f7fd fd76 	bl	8001bc4 <HAL_GetTick>
 80040d8:	4602      	mov	r2, r0
 80040da:	693b      	ldr	r3, [r7, #16]
 80040dc:	1ad3      	subs	r3, r2, r3
 80040de:	2b64      	cmp	r3, #100	@ 0x64
 80040e0:	d901      	bls.n	80040e6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80040e2:	2303      	movs	r3, #3
 80040e4:	e207      	b.n	80044f6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040e6:	4b5b      	ldr	r3, [pc, #364]	@ (8004254 <HAL_RCC_OscConfig+0x240>)
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d0f0      	beq.n	80040d4 <HAL_RCC_OscConfig+0xc0>
 80040f2:	e014      	b.n	800411e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040f4:	f7fd fd66 	bl	8001bc4 <HAL_GetTick>
 80040f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80040fa:	e008      	b.n	800410e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80040fc:	f7fd fd62 	bl	8001bc4 <HAL_GetTick>
 8004100:	4602      	mov	r2, r0
 8004102:	693b      	ldr	r3, [r7, #16]
 8004104:	1ad3      	subs	r3, r2, r3
 8004106:	2b64      	cmp	r3, #100	@ 0x64
 8004108:	d901      	bls.n	800410e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800410a:	2303      	movs	r3, #3
 800410c:	e1f3      	b.n	80044f6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800410e:	4b51      	ldr	r3, [pc, #324]	@ (8004254 <HAL_RCC_OscConfig+0x240>)
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004116:	2b00      	cmp	r3, #0
 8004118:	d1f0      	bne.n	80040fc <HAL_RCC_OscConfig+0xe8>
 800411a:	e000      	b.n	800411e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800411c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f003 0302 	and.w	r3, r3, #2
 8004126:	2b00      	cmp	r3, #0
 8004128:	d063      	beq.n	80041f2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800412a:	4b4a      	ldr	r3, [pc, #296]	@ (8004254 <HAL_RCC_OscConfig+0x240>)
 800412c:	689b      	ldr	r3, [r3, #8]
 800412e:	f003 030c 	and.w	r3, r3, #12
 8004132:	2b00      	cmp	r3, #0
 8004134:	d00b      	beq.n	800414e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004136:	4b47      	ldr	r3, [pc, #284]	@ (8004254 <HAL_RCC_OscConfig+0x240>)
 8004138:	689b      	ldr	r3, [r3, #8]
 800413a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800413e:	2b08      	cmp	r3, #8
 8004140:	d11c      	bne.n	800417c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004142:	4b44      	ldr	r3, [pc, #272]	@ (8004254 <HAL_RCC_OscConfig+0x240>)
 8004144:	685b      	ldr	r3, [r3, #4]
 8004146:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800414a:	2b00      	cmp	r3, #0
 800414c:	d116      	bne.n	800417c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800414e:	4b41      	ldr	r3, [pc, #260]	@ (8004254 <HAL_RCC_OscConfig+0x240>)
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f003 0302 	and.w	r3, r3, #2
 8004156:	2b00      	cmp	r3, #0
 8004158:	d005      	beq.n	8004166 <HAL_RCC_OscConfig+0x152>
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	68db      	ldr	r3, [r3, #12]
 800415e:	2b01      	cmp	r3, #1
 8004160:	d001      	beq.n	8004166 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004162:	2301      	movs	r3, #1
 8004164:	e1c7      	b.n	80044f6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004166:	4b3b      	ldr	r3, [pc, #236]	@ (8004254 <HAL_RCC_OscConfig+0x240>)
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	691b      	ldr	r3, [r3, #16]
 8004172:	00db      	lsls	r3, r3, #3
 8004174:	4937      	ldr	r1, [pc, #220]	@ (8004254 <HAL_RCC_OscConfig+0x240>)
 8004176:	4313      	orrs	r3, r2
 8004178:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800417a:	e03a      	b.n	80041f2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	68db      	ldr	r3, [r3, #12]
 8004180:	2b00      	cmp	r3, #0
 8004182:	d020      	beq.n	80041c6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004184:	4b34      	ldr	r3, [pc, #208]	@ (8004258 <HAL_RCC_OscConfig+0x244>)
 8004186:	2201      	movs	r2, #1
 8004188:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800418a:	f7fd fd1b 	bl	8001bc4 <HAL_GetTick>
 800418e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004190:	e008      	b.n	80041a4 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004192:	f7fd fd17 	bl	8001bc4 <HAL_GetTick>
 8004196:	4602      	mov	r2, r0
 8004198:	693b      	ldr	r3, [r7, #16]
 800419a:	1ad3      	subs	r3, r2, r3
 800419c:	2b02      	cmp	r3, #2
 800419e:	d901      	bls.n	80041a4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80041a0:	2303      	movs	r3, #3
 80041a2:	e1a8      	b.n	80044f6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041a4:	4b2b      	ldr	r3, [pc, #172]	@ (8004254 <HAL_RCC_OscConfig+0x240>)
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f003 0302 	and.w	r3, r3, #2
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d0f0      	beq.n	8004192 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041b0:	4b28      	ldr	r3, [pc, #160]	@ (8004254 <HAL_RCC_OscConfig+0x240>)
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	691b      	ldr	r3, [r3, #16]
 80041bc:	00db      	lsls	r3, r3, #3
 80041be:	4925      	ldr	r1, [pc, #148]	@ (8004254 <HAL_RCC_OscConfig+0x240>)
 80041c0:	4313      	orrs	r3, r2
 80041c2:	600b      	str	r3, [r1, #0]
 80041c4:	e015      	b.n	80041f2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80041c6:	4b24      	ldr	r3, [pc, #144]	@ (8004258 <HAL_RCC_OscConfig+0x244>)
 80041c8:	2200      	movs	r2, #0
 80041ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041cc:	f7fd fcfa 	bl	8001bc4 <HAL_GetTick>
 80041d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80041d2:	e008      	b.n	80041e6 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80041d4:	f7fd fcf6 	bl	8001bc4 <HAL_GetTick>
 80041d8:	4602      	mov	r2, r0
 80041da:	693b      	ldr	r3, [r7, #16]
 80041dc:	1ad3      	subs	r3, r2, r3
 80041de:	2b02      	cmp	r3, #2
 80041e0:	d901      	bls.n	80041e6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80041e2:	2303      	movs	r3, #3
 80041e4:	e187      	b.n	80044f6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80041e6:	4b1b      	ldr	r3, [pc, #108]	@ (8004254 <HAL_RCC_OscConfig+0x240>)
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f003 0302 	and.w	r3, r3, #2
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d1f0      	bne.n	80041d4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f003 0308 	and.w	r3, r3, #8
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d036      	beq.n	800426c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	695b      	ldr	r3, [r3, #20]
 8004202:	2b00      	cmp	r3, #0
 8004204:	d016      	beq.n	8004234 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004206:	4b15      	ldr	r3, [pc, #84]	@ (800425c <HAL_RCC_OscConfig+0x248>)
 8004208:	2201      	movs	r2, #1
 800420a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800420c:	f7fd fcda 	bl	8001bc4 <HAL_GetTick>
 8004210:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004212:	e008      	b.n	8004226 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004214:	f7fd fcd6 	bl	8001bc4 <HAL_GetTick>
 8004218:	4602      	mov	r2, r0
 800421a:	693b      	ldr	r3, [r7, #16]
 800421c:	1ad3      	subs	r3, r2, r3
 800421e:	2b02      	cmp	r3, #2
 8004220:	d901      	bls.n	8004226 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004222:	2303      	movs	r3, #3
 8004224:	e167      	b.n	80044f6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004226:	4b0b      	ldr	r3, [pc, #44]	@ (8004254 <HAL_RCC_OscConfig+0x240>)
 8004228:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800422a:	f003 0302 	and.w	r3, r3, #2
 800422e:	2b00      	cmp	r3, #0
 8004230:	d0f0      	beq.n	8004214 <HAL_RCC_OscConfig+0x200>
 8004232:	e01b      	b.n	800426c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004234:	4b09      	ldr	r3, [pc, #36]	@ (800425c <HAL_RCC_OscConfig+0x248>)
 8004236:	2200      	movs	r2, #0
 8004238:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800423a:	f7fd fcc3 	bl	8001bc4 <HAL_GetTick>
 800423e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004240:	e00e      	b.n	8004260 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004242:	f7fd fcbf 	bl	8001bc4 <HAL_GetTick>
 8004246:	4602      	mov	r2, r0
 8004248:	693b      	ldr	r3, [r7, #16]
 800424a:	1ad3      	subs	r3, r2, r3
 800424c:	2b02      	cmp	r3, #2
 800424e:	d907      	bls.n	8004260 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004250:	2303      	movs	r3, #3
 8004252:	e150      	b.n	80044f6 <HAL_RCC_OscConfig+0x4e2>
 8004254:	40023800 	.word	0x40023800
 8004258:	42470000 	.word	0x42470000
 800425c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004260:	4b88      	ldr	r3, [pc, #544]	@ (8004484 <HAL_RCC_OscConfig+0x470>)
 8004262:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004264:	f003 0302 	and.w	r3, r3, #2
 8004268:	2b00      	cmp	r3, #0
 800426a:	d1ea      	bne.n	8004242 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f003 0304 	and.w	r3, r3, #4
 8004274:	2b00      	cmp	r3, #0
 8004276:	f000 8097 	beq.w	80043a8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800427a:	2300      	movs	r3, #0
 800427c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800427e:	4b81      	ldr	r3, [pc, #516]	@ (8004484 <HAL_RCC_OscConfig+0x470>)
 8004280:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004282:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004286:	2b00      	cmp	r3, #0
 8004288:	d10f      	bne.n	80042aa <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800428a:	2300      	movs	r3, #0
 800428c:	60bb      	str	r3, [r7, #8]
 800428e:	4b7d      	ldr	r3, [pc, #500]	@ (8004484 <HAL_RCC_OscConfig+0x470>)
 8004290:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004292:	4a7c      	ldr	r2, [pc, #496]	@ (8004484 <HAL_RCC_OscConfig+0x470>)
 8004294:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004298:	6413      	str	r3, [r2, #64]	@ 0x40
 800429a:	4b7a      	ldr	r3, [pc, #488]	@ (8004484 <HAL_RCC_OscConfig+0x470>)
 800429c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800429e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80042a2:	60bb      	str	r3, [r7, #8]
 80042a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80042a6:	2301      	movs	r3, #1
 80042a8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042aa:	4b77      	ldr	r3, [pc, #476]	@ (8004488 <HAL_RCC_OscConfig+0x474>)
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d118      	bne.n	80042e8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80042b6:	4b74      	ldr	r3, [pc, #464]	@ (8004488 <HAL_RCC_OscConfig+0x474>)
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	4a73      	ldr	r2, [pc, #460]	@ (8004488 <HAL_RCC_OscConfig+0x474>)
 80042bc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80042c0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80042c2:	f7fd fc7f 	bl	8001bc4 <HAL_GetTick>
 80042c6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042c8:	e008      	b.n	80042dc <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80042ca:	f7fd fc7b 	bl	8001bc4 <HAL_GetTick>
 80042ce:	4602      	mov	r2, r0
 80042d0:	693b      	ldr	r3, [r7, #16]
 80042d2:	1ad3      	subs	r3, r2, r3
 80042d4:	2b02      	cmp	r3, #2
 80042d6:	d901      	bls.n	80042dc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80042d8:	2303      	movs	r3, #3
 80042da:	e10c      	b.n	80044f6 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042dc:	4b6a      	ldr	r3, [pc, #424]	@ (8004488 <HAL_RCC_OscConfig+0x474>)
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d0f0      	beq.n	80042ca <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	689b      	ldr	r3, [r3, #8]
 80042ec:	2b01      	cmp	r3, #1
 80042ee:	d106      	bne.n	80042fe <HAL_RCC_OscConfig+0x2ea>
 80042f0:	4b64      	ldr	r3, [pc, #400]	@ (8004484 <HAL_RCC_OscConfig+0x470>)
 80042f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042f4:	4a63      	ldr	r2, [pc, #396]	@ (8004484 <HAL_RCC_OscConfig+0x470>)
 80042f6:	f043 0301 	orr.w	r3, r3, #1
 80042fa:	6713      	str	r3, [r2, #112]	@ 0x70
 80042fc:	e01c      	b.n	8004338 <HAL_RCC_OscConfig+0x324>
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	689b      	ldr	r3, [r3, #8]
 8004302:	2b05      	cmp	r3, #5
 8004304:	d10c      	bne.n	8004320 <HAL_RCC_OscConfig+0x30c>
 8004306:	4b5f      	ldr	r3, [pc, #380]	@ (8004484 <HAL_RCC_OscConfig+0x470>)
 8004308:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800430a:	4a5e      	ldr	r2, [pc, #376]	@ (8004484 <HAL_RCC_OscConfig+0x470>)
 800430c:	f043 0304 	orr.w	r3, r3, #4
 8004310:	6713      	str	r3, [r2, #112]	@ 0x70
 8004312:	4b5c      	ldr	r3, [pc, #368]	@ (8004484 <HAL_RCC_OscConfig+0x470>)
 8004314:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004316:	4a5b      	ldr	r2, [pc, #364]	@ (8004484 <HAL_RCC_OscConfig+0x470>)
 8004318:	f043 0301 	orr.w	r3, r3, #1
 800431c:	6713      	str	r3, [r2, #112]	@ 0x70
 800431e:	e00b      	b.n	8004338 <HAL_RCC_OscConfig+0x324>
 8004320:	4b58      	ldr	r3, [pc, #352]	@ (8004484 <HAL_RCC_OscConfig+0x470>)
 8004322:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004324:	4a57      	ldr	r2, [pc, #348]	@ (8004484 <HAL_RCC_OscConfig+0x470>)
 8004326:	f023 0301 	bic.w	r3, r3, #1
 800432a:	6713      	str	r3, [r2, #112]	@ 0x70
 800432c:	4b55      	ldr	r3, [pc, #340]	@ (8004484 <HAL_RCC_OscConfig+0x470>)
 800432e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004330:	4a54      	ldr	r2, [pc, #336]	@ (8004484 <HAL_RCC_OscConfig+0x470>)
 8004332:	f023 0304 	bic.w	r3, r3, #4
 8004336:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	689b      	ldr	r3, [r3, #8]
 800433c:	2b00      	cmp	r3, #0
 800433e:	d015      	beq.n	800436c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004340:	f7fd fc40 	bl	8001bc4 <HAL_GetTick>
 8004344:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004346:	e00a      	b.n	800435e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004348:	f7fd fc3c 	bl	8001bc4 <HAL_GetTick>
 800434c:	4602      	mov	r2, r0
 800434e:	693b      	ldr	r3, [r7, #16]
 8004350:	1ad3      	subs	r3, r2, r3
 8004352:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004356:	4293      	cmp	r3, r2
 8004358:	d901      	bls.n	800435e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800435a:	2303      	movs	r3, #3
 800435c:	e0cb      	b.n	80044f6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800435e:	4b49      	ldr	r3, [pc, #292]	@ (8004484 <HAL_RCC_OscConfig+0x470>)
 8004360:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004362:	f003 0302 	and.w	r3, r3, #2
 8004366:	2b00      	cmp	r3, #0
 8004368:	d0ee      	beq.n	8004348 <HAL_RCC_OscConfig+0x334>
 800436a:	e014      	b.n	8004396 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800436c:	f7fd fc2a 	bl	8001bc4 <HAL_GetTick>
 8004370:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004372:	e00a      	b.n	800438a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004374:	f7fd fc26 	bl	8001bc4 <HAL_GetTick>
 8004378:	4602      	mov	r2, r0
 800437a:	693b      	ldr	r3, [r7, #16]
 800437c:	1ad3      	subs	r3, r2, r3
 800437e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004382:	4293      	cmp	r3, r2
 8004384:	d901      	bls.n	800438a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004386:	2303      	movs	r3, #3
 8004388:	e0b5      	b.n	80044f6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800438a:	4b3e      	ldr	r3, [pc, #248]	@ (8004484 <HAL_RCC_OscConfig+0x470>)
 800438c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800438e:	f003 0302 	and.w	r3, r3, #2
 8004392:	2b00      	cmp	r3, #0
 8004394:	d1ee      	bne.n	8004374 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004396:	7dfb      	ldrb	r3, [r7, #23]
 8004398:	2b01      	cmp	r3, #1
 800439a:	d105      	bne.n	80043a8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800439c:	4b39      	ldr	r3, [pc, #228]	@ (8004484 <HAL_RCC_OscConfig+0x470>)
 800439e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043a0:	4a38      	ldr	r2, [pc, #224]	@ (8004484 <HAL_RCC_OscConfig+0x470>)
 80043a2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80043a6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	699b      	ldr	r3, [r3, #24]
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	f000 80a1 	beq.w	80044f4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80043b2:	4b34      	ldr	r3, [pc, #208]	@ (8004484 <HAL_RCC_OscConfig+0x470>)
 80043b4:	689b      	ldr	r3, [r3, #8]
 80043b6:	f003 030c 	and.w	r3, r3, #12
 80043ba:	2b08      	cmp	r3, #8
 80043bc:	d05c      	beq.n	8004478 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	699b      	ldr	r3, [r3, #24]
 80043c2:	2b02      	cmp	r3, #2
 80043c4:	d141      	bne.n	800444a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043c6:	4b31      	ldr	r3, [pc, #196]	@ (800448c <HAL_RCC_OscConfig+0x478>)
 80043c8:	2200      	movs	r2, #0
 80043ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043cc:	f7fd fbfa 	bl	8001bc4 <HAL_GetTick>
 80043d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043d2:	e008      	b.n	80043e6 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043d4:	f7fd fbf6 	bl	8001bc4 <HAL_GetTick>
 80043d8:	4602      	mov	r2, r0
 80043da:	693b      	ldr	r3, [r7, #16]
 80043dc:	1ad3      	subs	r3, r2, r3
 80043de:	2b02      	cmp	r3, #2
 80043e0:	d901      	bls.n	80043e6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80043e2:	2303      	movs	r3, #3
 80043e4:	e087      	b.n	80044f6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043e6:	4b27      	ldr	r3, [pc, #156]	@ (8004484 <HAL_RCC_OscConfig+0x470>)
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d1f0      	bne.n	80043d4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	69da      	ldr	r2, [r3, #28]
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6a1b      	ldr	r3, [r3, #32]
 80043fa:	431a      	orrs	r2, r3
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004400:	019b      	lsls	r3, r3, #6
 8004402:	431a      	orrs	r2, r3
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004408:	085b      	lsrs	r3, r3, #1
 800440a:	3b01      	subs	r3, #1
 800440c:	041b      	lsls	r3, r3, #16
 800440e:	431a      	orrs	r2, r3
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004414:	061b      	lsls	r3, r3, #24
 8004416:	491b      	ldr	r1, [pc, #108]	@ (8004484 <HAL_RCC_OscConfig+0x470>)
 8004418:	4313      	orrs	r3, r2
 800441a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800441c:	4b1b      	ldr	r3, [pc, #108]	@ (800448c <HAL_RCC_OscConfig+0x478>)
 800441e:	2201      	movs	r2, #1
 8004420:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004422:	f7fd fbcf 	bl	8001bc4 <HAL_GetTick>
 8004426:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004428:	e008      	b.n	800443c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800442a:	f7fd fbcb 	bl	8001bc4 <HAL_GetTick>
 800442e:	4602      	mov	r2, r0
 8004430:	693b      	ldr	r3, [r7, #16]
 8004432:	1ad3      	subs	r3, r2, r3
 8004434:	2b02      	cmp	r3, #2
 8004436:	d901      	bls.n	800443c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004438:	2303      	movs	r3, #3
 800443a:	e05c      	b.n	80044f6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800443c:	4b11      	ldr	r3, [pc, #68]	@ (8004484 <HAL_RCC_OscConfig+0x470>)
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004444:	2b00      	cmp	r3, #0
 8004446:	d0f0      	beq.n	800442a <HAL_RCC_OscConfig+0x416>
 8004448:	e054      	b.n	80044f4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800444a:	4b10      	ldr	r3, [pc, #64]	@ (800448c <HAL_RCC_OscConfig+0x478>)
 800444c:	2200      	movs	r2, #0
 800444e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004450:	f7fd fbb8 	bl	8001bc4 <HAL_GetTick>
 8004454:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004456:	e008      	b.n	800446a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004458:	f7fd fbb4 	bl	8001bc4 <HAL_GetTick>
 800445c:	4602      	mov	r2, r0
 800445e:	693b      	ldr	r3, [r7, #16]
 8004460:	1ad3      	subs	r3, r2, r3
 8004462:	2b02      	cmp	r3, #2
 8004464:	d901      	bls.n	800446a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004466:	2303      	movs	r3, #3
 8004468:	e045      	b.n	80044f6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800446a:	4b06      	ldr	r3, [pc, #24]	@ (8004484 <HAL_RCC_OscConfig+0x470>)
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004472:	2b00      	cmp	r3, #0
 8004474:	d1f0      	bne.n	8004458 <HAL_RCC_OscConfig+0x444>
 8004476:	e03d      	b.n	80044f4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	699b      	ldr	r3, [r3, #24]
 800447c:	2b01      	cmp	r3, #1
 800447e:	d107      	bne.n	8004490 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004480:	2301      	movs	r3, #1
 8004482:	e038      	b.n	80044f6 <HAL_RCC_OscConfig+0x4e2>
 8004484:	40023800 	.word	0x40023800
 8004488:	40007000 	.word	0x40007000
 800448c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004490:	4b1b      	ldr	r3, [pc, #108]	@ (8004500 <HAL_RCC_OscConfig+0x4ec>)
 8004492:	685b      	ldr	r3, [r3, #4]
 8004494:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	699b      	ldr	r3, [r3, #24]
 800449a:	2b01      	cmp	r3, #1
 800449c:	d028      	beq.n	80044f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80044a8:	429a      	cmp	r2, r3
 80044aa:	d121      	bne.n	80044f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80044b6:	429a      	cmp	r2, r3
 80044b8:	d11a      	bne.n	80044f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80044ba:	68fa      	ldr	r2, [r7, #12]
 80044bc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80044c0:	4013      	ands	r3, r2
 80044c2:	687a      	ldr	r2, [r7, #4]
 80044c4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80044c6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80044c8:	4293      	cmp	r3, r2
 80044ca:	d111      	bne.n	80044f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044d6:	085b      	lsrs	r3, r3, #1
 80044d8:	3b01      	subs	r3, #1
 80044da:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80044dc:	429a      	cmp	r2, r3
 80044de:	d107      	bne.n	80044f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044ea:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80044ec:	429a      	cmp	r2, r3
 80044ee:	d001      	beq.n	80044f4 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80044f0:	2301      	movs	r3, #1
 80044f2:	e000      	b.n	80044f6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80044f4:	2300      	movs	r3, #0
}
 80044f6:	4618      	mov	r0, r3
 80044f8:	3718      	adds	r7, #24
 80044fa:	46bd      	mov	sp, r7
 80044fc:	bd80      	pop	{r7, pc}
 80044fe:	bf00      	nop
 8004500:	40023800 	.word	0x40023800

08004504 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004504:	b580      	push	{r7, lr}
 8004506:	b084      	sub	sp, #16
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
 800450c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	2b00      	cmp	r3, #0
 8004512:	d101      	bne.n	8004518 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004514:	2301      	movs	r3, #1
 8004516:	e0cc      	b.n	80046b2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004518:	4b68      	ldr	r3, [pc, #416]	@ (80046bc <HAL_RCC_ClockConfig+0x1b8>)
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f003 0307 	and.w	r3, r3, #7
 8004520:	683a      	ldr	r2, [r7, #0]
 8004522:	429a      	cmp	r2, r3
 8004524:	d90c      	bls.n	8004540 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004526:	4b65      	ldr	r3, [pc, #404]	@ (80046bc <HAL_RCC_ClockConfig+0x1b8>)
 8004528:	683a      	ldr	r2, [r7, #0]
 800452a:	b2d2      	uxtb	r2, r2
 800452c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800452e:	4b63      	ldr	r3, [pc, #396]	@ (80046bc <HAL_RCC_ClockConfig+0x1b8>)
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f003 0307 	and.w	r3, r3, #7
 8004536:	683a      	ldr	r2, [r7, #0]
 8004538:	429a      	cmp	r2, r3
 800453a:	d001      	beq.n	8004540 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800453c:	2301      	movs	r3, #1
 800453e:	e0b8      	b.n	80046b2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f003 0302 	and.w	r3, r3, #2
 8004548:	2b00      	cmp	r3, #0
 800454a:	d020      	beq.n	800458e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f003 0304 	and.w	r3, r3, #4
 8004554:	2b00      	cmp	r3, #0
 8004556:	d005      	beq.n	8004564 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004558:	4b59      	ldr	r3, [pc, #356]	@ (80046c0 <HAL_RCC_ClockConfig+0x1bc>)
 800455a:	689b      	ldr	r3, [r3, #8]
 800455c:	4a58      	ldr	r2, [pc, #352]	@ (80046c0 <HAL_RCC_ClockConfig+0x1bc>)
 800455e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004562:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f003 0308 	and.w	r3, r3, #8
 800456c:	2b00      	cmp	r3, #0
 800456e:	d005      	beq.n	800457c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004570:	4b53      	ldr	r3, [pc, #332]	@ (80046c0 <HAL_RCC_ClockConfig+0x1bc>)
 8004572:	689b      	ldr	r3, [r3, #8]
 8004574:	4a52      	ldr	r2, [pc, #328]	@ (80046c0 <HAL_RCC_ClockConfig+0x1bc>)
 8004576:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800457a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800457c:	4b50      	ldr	r3, [pc, #320]	@ (80046c0 <HAL_RCC_ClockConfig+0x1bc>)
 800457e:	689b      	ldr	r3, [r3, #8]
 8004580:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	689b      	ldr	r3, [r3, #8]
 8004588:	494d      	ldr	r1, [pc, #308]	@ (80046c0 <HAL_RCC_ClockConfig+0x1bc>)
 800458a:	4313      	orrs	r3, r2
 800458c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f003 0301 	and.w	r3, r3, #1
 8004596:	2b00      	cmp	r3, #0
 8004598:	d044      	beq.n	8004624 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	685b      	ldr	r3, [r3, #4]
 800459e:	2b01      	cmp	r3, #1
 80045a0:	d107      	bne.n	80045b2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045a2:	4b47      	ldr	r3, [pc, #284]	@ (80046c0 <HAL_RCC_ClockConfig+0x1bc>)
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d119      	bne.n	80045e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80045ae:	2301      	movs	r3, #1
 80045b0:	e07f      	b.n	80046b2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	685b      	ldr	r3, [r3, #4]
 80045b6:	2b02      	cmp	r3, #2
 80045b8:	d003      	beq.n	80045c2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80045be:	2b03      	cmp	r3, #3
 80045c0:	d107      	bne.n	80045d2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80045c2:	4b3f      	ldr	r3, [pc, #252]	@ (80046c0 <HAL_RCC_ClockConfig+0x1bc>)
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d109      	bne.n	80045e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80045ce:	2301      	movs	r3, #1
 80045d0:	e06f      	b.n	80046b2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045d2:	4b3b      	ldr	r3, [pc, #236]	@ (80046c0 <HAL_RCC_ClockConfig+0x1bc>)
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f003 0302 	and.w	r3, r3, #2
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d101      	bne.n	80045e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80045de:	2301      	movs	r3, #1
 80045e0:	e067      	b.n	80046b2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80045e2:	4b37      	ldr	r3, [pc, #220]	@ (80046c0 <HAL_RCC_ClockConfig+0x1bc>)
 80045e4:	689b      	ldr	r3, [r3, #8]
 80045e6:	f023 0203 	bic.w	r2, r3, #3
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	685b      	ldr	r3, [r3, #4]
 80045ee:	4934      	ldr	r1, [pc, #208]	@ (80046c0 <HAL_RCC_ClockConfig+0x1bc>)
 80045f0:	4313      	orrs	r3, r2
 80045f2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80045f4:	f7fd fae6 	bl	8001bc4 <HAL_GetTick>
 80045f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045fa:	e00a      	b.n	8004612 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80045fc:	f7fd fae2 	bl	8001bc4 <HAL_GetTick>
 8004600:	4602      	mov	r2, r0
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	1ad3      	subs	r3, r2, r3
 8004606:	f241 3288 	movw	r2, #5000	@ 0x1388
 800460a:	4293      	cmp	r3, r2
 800460c:	d901      	bls.n	8004612 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800460e:	2303      	movs	r3, #3
 8004610:	e04f      	b.n	80046b2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004612:	4b2b      	ldr	r3, [pc, #172]	@ (80046c0 <HAL_RCC_ClockConfig+0x1bc>)
 8004614:	689b      	ldr	r3, [r3, #8]
 8004616:	f003 020c 	and.w	r2, r3, #12
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	685b      	ldr	r3, [r3, #4]
 800461e:	009b      	lsls	r3, r3, #2
 8004620:	429a      	cmp	r2, r3
 8004622:	d1eb      	bne.n	80045fc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004624:	4b25      	ldr	r3, [pc, #148]	@ (80046bc <HAL_RCC_ClockConfig+0x1b8>)
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f003 0307 	and.w	r3, r3, #7
 800462c:	683a      	ldr	r2, [r7, #0]
 800462e:	429a      	cmp	r2, r3
 8004630:	d20c      	bcs.n	800464c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004632:	4b22      	ldr	r3, [pc, #136]	@ (80046bc <HAL_RCC_ClockConfig+0x1b8>)
 8004634:	683a      	ldr	r2, [r7, #0]
 8004636:	b2d2      	uxtb	r2, r2
 8004638:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800463a:	4b20      	ldr	r3, [pc, #128]	@ (80046bc <HAL_RCC_ClockConfig+0x1b8>)
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f003 0307 	and.w	r3, r3, #7
 8004642:	683a      	ldr	r2, [r7, #0]
 8004644:	429a      	cmp	r2, r3
 8004646:	d001      	beq.n	800464c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004648:	2301      	movs	r3, #1
 800464a:	e032      	b.n	80046b2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f003 0304 	and.w	r3, r3, #4
 8004654:	2b00      	cmp	r3, #0
 8004656:	d008      	beq.n	800466a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004658:	4b19      	ldr	r3, [pc, #100]	@ (80046c0 <HAL_RCC_ClockConfig+0x1bc>)
 800465a:	689b      	ldr	r3, [r3, #8]
 800465c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	68db      	ldr	r3, [r3, #12]
 8004664:	4916      	ldr	r1, [pc, #88]	@ (80046c0 <HAL_RCC_ClockConfig+0x1bc>)
 8004666:	4313      	orrs	r3, r2
 8004668:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f003 0308 	and.w	r3, r3, #8
 8004672:	2b00      	cmp	r3, #0
 8004674:	d009      	beq.n	800468a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004676:	4b12      	ldr	r3, [pc, #72]	@ (80046c0 <HAL_RCC_ClockConfig+0x1bc>)
 8004678:	689b      	ldr	r3, [r3, #8]
 800467a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	691b      	ldr	r3, [r3, #16]
 8004682:	00db      	lsls	r3, r3, #3
 8004684:	490e      	ldr	r1, [pc, #56]	@ (80046c0 <HAL_RCC_ClockConfig+0x1bc>)
 8004686:	4313      	orrs	r3, r2
 8004688:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800468a:	f000 f821 	bl	80046d0 <HAL_RCC_GetSysClockFreq>
 800468e:	4602      	mov	r2, r0
 8004690:	4b0b      	ldr	r3, [pc, #44]	@ (80046c0 <HAL_RCC_ClockConfig+0x1bc>)
 8004692:	689b      	ldr	r3, [r3, #8]
 8004694:	091b      	lsrs	r3, r3, #4
 8004696:	f003 030f 	and.w	r3, r3, #15
 800469a:	490a      	ldr	r1, [pc, #40]	@ (80046c4 <HAL_RCC_ClockConfig+0x1c0>)
 800469c:	5ccb      	ldrb	r3, [r1, r3]
 800469e:	fa22 f303 	lsr.w	r3, r2, r3
 80046a2:	4a09      	ldr	r2, [pc, #36]	@ (80046c8 <HAL_RCC_ClockConfig+0x1c4>)
 80046a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80046a6:	4b09      	ldr	r3, [pc, #36]	@ (80046cc <HAL_RCC_ClockConfig+0x1c8>)
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	4618      	mov	r0, r3
 80046ac:	f7fd f904 	bl	80018b8 <HAL_InitTick>

  return HAL_OK;
 80046b0:	2300      	movs	r3, #0
}
 80046b2:	4618      	mov	r0, r3
 80046b4:	3710      	adds	r7, #16
 80046b6:	46bd      	mov	sp, r7
 80046b8:	bd80      	pop	{r7, pc}
 80046ba:	bf00      	nop
 80046bc:	40023c00 	.word	0x40023c00
 80046c0:	40023800 	.word	0x40023800
 80046c4:	0800ee94 	.word	0x0800ee94
 80046c8:	20000014 	.word	0x20000014
 80046cc:	20000018 	.word	0x20000018

080046d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80046d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80046d4:	b090      	sub	sp, #64	@ 0x40
 80046d6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80046d8:	2300      	movs	r3, #0
 80046da:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 80046dc:	2300      	movs	r3, #0
 80046de:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 80046e0:	2300      	movs	r3, #0
 80046e2:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80046e4:	2300      	movs	r3, #0
 80046e6:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80046e8:	4b59      	ldr	r3, [pc, #356]	@ (8004850 <HAL_RCC_GetSysClockFreq+0x180>)
 80046ea:	689b      	ldr	r3, [r3, #8]
 80046ec:	f003 030c 	and.w	r3, r3, #12
 80046f0:	2b08      	cmp	r3, #8
 80046f2:	d00d      	beq.n	8004710 <HAL_RCC_GetSysClockFreq+0x40>
 80046f4:	2b08      	cmp	r3, #8
 80046f6:	f200 80a1 	bhi.w	800483c <HAL_RCC_GetSysClockFreq+0x16c>
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d002      	beq.n	8004704 <HAL_RCC_GetSysClockFreq+0x34>
 80046fe:	2b04      	cmp	r3, #4
 8004700:	d003      	beq.n	800470a <HAL_RCC_GetSysClockFreq+0x3a>
 8004702:	e09b      	b.n	800483c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004704:	4b53      	ldr	r3, [pc, #332]	@ (8004854 <HAL_RCC_GetSysClockFreq+0x184>)
 8004706:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004708:	e09b      	b.n	8004842 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800470a:	4b53      	ldr	r3, [pc, #332]	@ (8004858 <HAL_RCC_GetSysClockFreq+0x188>)
 800470c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800470e:	e098      	b.n	8004842 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004710:	4b4f      	ldr	r3, [pc, #316]	@ (8004850 <HAL_RCC_GetSysClockFreq+0x180>)
 8004712:	685b      	ldr	r3, [r3, #4]
 8004714:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004718:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800471a:	4b4d      	ldr	r3, [pc, #308]	@ (8004850 <HAL_RCC_GetSysClockFreq+0x180>)
 800471c:	685b      	ldr	r3, [r3, #4]
 800471e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004722:	2b00      	cmp	r3, #0
 8004724:	d028      	beq.n	8004778 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004726:	4b4a      	ldr	r3, [pc, #296]	@ (8004850 <HAL_RCC_GetSysClockFreq+0x180>)
 8004728:	685b      	ldr	r3, [r3, #4]
 800472a:	099b      	lsrs	r3, r3, #6
 800472c:	2200      	movs	r2, #0
 800472e:	623b      	str	r3, [r7, #32]
 8004730:	627a      	str	r2, [r7, #36]	@ 0x24
 8004732:	6a3b      	ldr	r3, [r7, #32]
 8004734:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004738:	2100      	movs	r1, #0
 800473a:	4b47      	ldr	r3, [pc, #284]	@ (8004858 <HAL_RCC_GetSysClockFreq+0x188>)
 800473c:	fb03 f201 	mul.w	r2, r3, r1
 8004740:	2300      	movs	r3, #0
 8004742:	fb00 f303 	mul.w	r3, r0, r3
 8004746:	4413      	add	r3, r2
 8004748:	4a43      	ldr	r2, [pc, #268]	@ (8004858 <HAL_RCC_GetSysClockFreq+0x188>)
 800474a:	fba0 1202 	umull	r1, r2, r0, r2
 800474e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004750:	460a      	mov	r2, r1
 8004752:	62ba      	str	r2, [r7, #40]	@ 0x28
 8004754:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004756:	4413      	add	r3, r2
 8004758:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800475a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800475c:	2200      	movs	r2, #0
 800475e:	61bb      	str	r3, [r7, #24]
 8004760:	61fa      	str	r2, [r7, #28]
 8004762:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004766:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800476a:	f7fb fd89 	bl	8000280 <__aeabi_uldivmod>
 800476e:	4602      	mov	r2, r0
 8004770:	460b      	mov	r3, r1
 8004772:	4613      	mov	r3, r2
 8004774:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004776:	e053      	b.n	8004820 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004778:	4b35      	ldr	r3, [pc, #212]	@ (8004850 <HAL_RCC_GetSysClockFreq+0x180>)
 800477a:	685b      	ldr	r3, [r3, #4]
 800477c:	099b      	lsrs	r3, r3, #6
 800477e:	2200      	movs	r2, #0
 8004780:	613b      	str	r3, [r7, #16]
 8004782:	617a      	str	r2, [r7, #20]
 8004784:	693b      	ldr	r3, [r7, #16]
 8004786:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800478a:	f04f 0b00 	mov.w	fp, #0
 800478e:	4652      	mov	r2, sl
 8004790:	465b      	mov	r3, fp
 8004792:	f04f 0000 	mov.w	r0, #0
 8004796:	f04f 0100 	mov.w	r1, #0
 800479a:	0159      	lsls	r1, r3, #5
 800479c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80047a0:	0150      	lsls	r0, r2, #5
 80047a2:	4602      	mov	r2, r0
 80047a4:	460b      	mov	r3, r1
 80047a6:	ebb2 080a 	subs.w	r8, r2, sl
 80047aa:	eb63 090b 	sbc.w	r9, r3, fp
 80047ae:	f04f 0200 	mov.w	r2, #0
 80047b2:	f04f 0300 	mov.w	r3, #0
 80047b6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80047ba:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80047be:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80047c2:	ebb2 0408 	subs.w	r4, r2, r8
 80047c6:	eb63 0509 	sbc.w	r5, r3, r9
 80047ca:	f04f 0200 	mov.w	r2, #0
 80047ce:	f04f 0300 	mov.w	r3, #0
 80047d2:	00eb      	lsls	r3, r5, #3
 80047d4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80047d8:	00e2      	lsls	r2, r4, #3
 80047da:	4614      	mov	r4, r2
 80047dc:	461d      	mov	r5, r3
 80047de:	eb14 030a 	adds.w	r3, r4, sl
 80047e2:	603b      	str	r3, [r7, #0]
 80047e4:	eb45 030b 	adc.w	r3, r5, fp
 80047e8:	607b      	str	r3, [r7, #4]
 80047ea:	f04f 0200 	mov.w	r2, #0
 80047ee:	f04f 0300 	mov.w	r3, #0
 80047f2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80047f6:	4629      	mov	r1, r5
 80047f8:	028b      	lsls	r3, r1, #10
 80047fa:	4621      	mov	r1, r4
 80047fc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004800:	4621      	mov	r1, r4
 8004802:	028a      	lsls	r2, r1, #10
 8004804:	4610      	mov	r0, r2
 8004806:	4619      	mov	r1, r3
 8004808:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800480a:	2200      	movs	r2, #0
 800480c:	60bb      	str	r3, [r7, #8]
 800480e:	60fa      	str	r2, [r7, #12]
 8004810:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004814:	f7fb fd34 	bl	8000280 <__aeabi_uldivmod>
 8004818:	4602      	mov	r2, r0
 800481a:	460b      	mov	r3, r1
 800481c:	4613      	mov	r3, r2
 800481e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004820:	4b0b      	ldr	r3, [pc, #44]	@ (8004850 <HAL_RCC_GetSysClockFreq+0x180>)
 8004822:	685b      	ldr	r3, [r3, #4]
 8004824:	0c1b      	lsrs	r3, r3, #16
 8004826:	f003 0303 	and.w	r3, r3, #3
 800482a:	3301      	adds	r3, #1
 800482c:	005b      	lsls	r3, r3, #1
 800482e:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8004830:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004832:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004834:	fbb2 f3f3 	udiv	r3, r2, r3
 8004838:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800483a:	e002      	b.n	8004842 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800483c:	4b05      	ldr	r3, [pc, #20]	@ (8004854 <HAL_RCC_GetSysClockFreq+0x184>)
 800483e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004840:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004842:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8004844:	4618      	mov	r0, r3
 8004846:	3740      	adds	r7, #64	@ 0x40
 8004848:	46bd      	mov	sp, r7
 800484a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800484e:	bf00      	nop
 8004850:	40023800 	.word	0x40023800
 8004854:	00f42400 	.word	0x00f42400
 8004858:	017d7840 	.word	0x017d7840

0800485c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800485c:	b480      	push	{r7}
 800485e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004860:	4b03      	ldr	r3, [pc, #12]	@ (8004870 <HAL_RCC_GetHCLKFreq+0x14>)
 8004862:	681b      	ldr	r3, [r3, #0]
}
 8004864:	4618      	mov	r0, r3
 8004866:	46bd      	mov	sp, r7
 8004868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486c:	4770      	bx	lr
 800486e:	bf00      	nop
 8004870:	20000014 	.word	0x20000014

08004874 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004874:	b580      	push	{r7, lr}
 8004876:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004878:	f7ff fff0 	bl	800485c <HAL_RCC_GetHCLKFreq>
 800487c:	4602      	mov	r2, r0
 800487e:	4b05      	ldr	r3, [pc, #20]	@ (8004894 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004880:	689b      	ldr	r3, [r3, #8]
 8004882:	0a9b      	lsrs	r3, r3, #10
 8004884:	f003 0307 	and.w	r3, r3, #7
 8004888:	4903      	ldr	r1, [pc, #12]	@ (8004898 <HAL_RCC_GetPCLK1Freq+0x24>)
 800488a:	5ccb      	ldrb	r3, [r1, r3]
 800488c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004890:	4618      	mov	r0, r3
 8004892:	bd80      	pop	{r7, pc}
 8004894:	40023800 	.word	0x40023800
 8004898:	0800eea4 	.word	0x0800eea4

0800489c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800489c:	b580      	push	{r7, lr}
 800489e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80048a0:	f7ff ffdc 	bl	800485c <HAL_RCC_GetHCLKFreq>
 80048a4:	4602      	mov	r2, r0
 80048a6:	4b05      	ldr	r3, [pc, #20]	@ (80048bc <HAL_RCC_GetPCLK2Freq+0x20>)
 80048a8:	689b      	ldr	r3, [r3, #8]
 80048aa:	0b5b      	lsrs	r3, r3, #13
 80048ac:	f003 0307 	and.w	r3, r3, #7
 80048b0:	4903      	ldr	r1, [pc, #12]	@ (80048c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80048b2:	5ccb      	ldrb	r3, [r1, r3]
 80048b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80048b8:	4618      	mov	r0, r3
 80048ba:	bd80      	pop	{r7, pc}
 80048bc:	40023800 	.word	0x40023800
 80048c0:	0800eea4 	.word	0x0800eea4

080048c4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80048c4:	b480      	push	{r7}
 80048c6:	b083      	sub	sp, #12
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	6078      	str	r0, [r7, #4]
 80048cc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	220f      	movs	r2, #15
 80048d2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80048d4:	4b12      	ldr	r3, [pc, #72]	@ (8004920 <HAL_RCC_GetClockConfig+0x5c>)
 80048d6:	689b      	ldr	r3, [r3, #8]
 80048d8:	f003 0203 	and.w	r2, r3, #3
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80048e0:	4b0f      	ldr	r3, [pc, #60]	@ (8004920 <HAL_RCC_GetClockConfig+0x5c>)
 80048e2:	689b      	ldr	r3, [r3, #8]
 80048e4:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80048ec:	4b0c      	ldr	r3, [pc, #48]	@ (8004920 <HAL_RCC_GetClockConfig+0x5c>)
 80048ee:	689b      	ldr	r3, [r3, #8]
 80048f0:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80048f8:	4b09      	ldr	r3, [pc, #36]	@ (8004920 <HAL_RCC_GetClockConfig+0x5c>)
 80048fa:	689b      	ldr	r3, [r3, #8]
 80048fc:	08db      	lsrs	r3, r3, #3
 80048fe:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004906:	4b07      	ldr	r3, [pc, #28]	@ (8004924 <HAL_RCC_GetClockConfig+0x60>)
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f003 0207 	and.w	r2, r3, #7
 800490e:	683b      	ldr	r3, [r7, #0]
 8004910:	601a      	str	r2, [r3, #0]
}
 8004912:	bf00      	nop
 8004914:	370c      	adds	r7, #12
 8004916:	46bd      	mov	sp, r7
 8004918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491c:	4770      	bx	lr
 800491e:	bf00      	nop
 8004920:	40023800 	.word	0x40023800
 8004924:	40023c00 	.word	0x40023c00

08004928 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004928:	b580      	push	{r7, lr}
 800492a:	b082      	sub	sp, #8
 800492c:	af00      	add	r7, sp, #0
 800492e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2b00      	cmp	r3, #0
 8004934:	d101      	bne.n	800493a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004936:	2301      	movs	r3, #1
 8004938:	e041      	b.n	80049be <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004940:	b2db      	uxtb	r3, r3
 8004942:	2b00      	cmp	r3, #0
 8004944:	d106      	bne.n	8004954 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	2200      	movs	r2, #0
 800494a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800494e:	6878      	ldr	r0, [r7, #4]
 8004950:	f7fc fe7c 	bl	800164c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2202      	movs	r2, #2
 8004958:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681a      	ldr	r2, [r3, #0]
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	3304      	adds	r3, #4
 8004964:	4619      	mov	r1, r3
 8004966:	4610      	mov	r0, r2
 8004968:	f000 fbd2 	bl	8005110 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2201      	movs	r2, #1
 8004970:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2201      	movs	r2, #1
 8004978:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2201      	movs	r2, #1
 8004980:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2201      	movs	r2, #1
 8004988:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2201      	movs	r2, #1
 8004990:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2201      	movs	r2, #1
 8004998:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2201      	movs	r2, #1
 80049a0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2201      	movs	r2, #1
 80049a8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2201      	movs	r2, #1
 80049b0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2201      	movs	r2, #1
 80049b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80049bc:	2300      	movs	r3, #0
}
 80049be:	4618      	mov	r0, r3
 80049c0:	3708      	adds	r7, #8
 80049c2:	46bd      	mov	sp, r7
 80049c4:	bd80      	pop	{r7, pc}
	...

080049c8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80049c8:	b480      	push	{r7}
 80049ca:	b085      	sub	sp, #20
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80049d6:	b2db      	uxtb	r3, r3
 80049d8:	2b01      	cmp	r3, #1
 80049da:	d001      	beq.n	80049e0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80049dc:	2301      	movs	r3, #1
 80049de:	e044      	b.n	8004a6a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	2202      	movs	r2, #2
 80049e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	68da      	ldr	r2, [r3, #12]
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f042 0201 	orr.w	r2, r2, #1
 80049f6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	4a1e      	ldr	r2, [pc, #120]	@ (8004a78 <HAL_TIM_Base_Start_IT+0xb0>)
 80049fe:	4293      	cmp	r3, r2
 8004a00:	d018      	beq.n	8004a34 <HAL_TIM_Base_Start_IT+0x6c>
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a0a:	d013      	beq.n	8004a34 <HAL_TIM_Base_Start_IT+0x6c>
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	4a1a      	ldr	r2, [pc, #104]	@ (8004a7c <HAL_TIM_Base_Start_IT+0xb4>)
 8004a12:	4293      	cmp	r3, r2
 8004a14:	d00e      	beq.n	8004a34 <HAL_TIM_Base_Start_IT+0x6c>
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	4a19      	ldr	r2, [pc, #100]	@ (8004a80 <HAL_TIM_Base_Start_IT+0xb8>)
 8004a1c:	4293      	cmp	r3, r2
 8004a1e:	d009      	beq.n	8004a34 <HAL_TIM_Base_Start_IT+0x6c>
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	4a17      	ldr	r2, [pc, #92]	@ (8004a84 <HAL_TIM_Base_Start_IT+0xbc>)
 8004a26:	4293      	cmp	r3, r2
 8004a28:	d004      	beq.n	8004a34 <HAL_TIM_Base_Start_IT+0x6c>
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	4a16      	ldr	r2, [pc, #88]	@ (8004a88 <HAL_TIM_Base_Start_IT+0xc0>)
 8004a30:	4293      	cmp	r3, r2
 8004a32:	d111      	bne.n	8004a58 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	689b      	ldr	r3, [r3, #8]
 8004a3a:	f003 0307 	and.w	r3, r3, #7
 8004a3e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	2b06      	cmp	r3, #6
 8004a44:	d010      	beq.n	8004a68 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	681a      	ldr	r2, [r3, #0]
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f042 0201 	orr.w	r2, r2, #1
 8004a54:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a56:	e007      	b.n	8004a68 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	681a      	ldr	r2, [r3, #0]
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f042 0201 	orr.w	r2, r2, #1
 8004a66:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004a68:	2300      	movs	r3, #0
}
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	3714      	adds	r7, #20
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a74:	4770      	bx	lr
 8004a76:	bf00      	nop
 8004a78:	40010000 	.word	0x40010000
 8004a7c:	40000400 	.word	0x40000400
 8004a80:	40000800 	.word	0x40000800
 8004a84:	40000c00 	.word	0x40000c00
 8004a88:	40014000 	.word	0x40014000

08004a8c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8004a8c:	b480      	push	{r7}
 8004a8e:	b083      	sub	sp, #12
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	68da      	ldr	r2, [r3, #12]
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f022 0201 	bic.w	r2, r2, #1
 8004aa2:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	6a1a      	ldr	r2, [r3, #32]
 8004aaa:	f241 1311 	movw	r3, #4369	@ 0x1111
 8004aae:	4013      	ands	r3, r2
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d10f      	bne.n	8004ad4 <HAL_TIM_Base_Stop_IT+0x48>
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	6a1a      	ldr	r2, [r3, #32]
 8004aba:	f240 4344 	movw	r3, #1092	@ 0x444
 8004abe:	4013      	ands	r3, r2
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d107      	bne.n	8004ad4 <HAL_TIM_Base_Stop_IT+0x48>
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	681a      	ldr	r2, [r3, #0]
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f022 0201 	bic.w	r2, r2, #1
 8004ad2:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2201      	movs	r2, #1
 8004ad8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8004adc:	2300      	movs	r3, #0
}
 8004ade:	4618      	mov	r0, r3
 8004ae0:	370c      	adds	r7, #12
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae8:	4770      	bx	lr

08004aea <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8004aea:	b580      	push	{r7, lr}
 8004aec:	b086      	sub	sp, #24
 8004aee:	af00      	add	r7, sp, #0
 8004af0:	6078      	str	r0, [r7, #4]
 8004af2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d101      	bne.n	8004afe <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004afa:	2301      	movs	r3, #1
 8004afc:	e097      	b.n	8004c2e <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004b04:	b2db      	uxtb	r3, r3
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d106      	bne.n	8004b18 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004b12:	6878      	ldr	r0, [r7, #4]
 8004b14:	f7fc fdc0 	bl	8001698 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2202      	movs	r2, #2
 8004b1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	689b      	ldr	r3, [r3, #8]
 8004b26:	687a      	ldr	r2, [r7, #4]
 8004b28:	6812      	ldr	r2, [r2, #0]
 8004b2a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004b2e:	f023 0307 	bic.w	r3, r3, #7
 8004b32:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681a      	ldr	r2, [r3, #0]
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	3304      	adds	r3, #4
 8004b3c:	4619      	mov	r1, r3
 8004b3e:	4610      	mov	r0, r2
 8004b40:	f000 fae6 	bl	8005110 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	689b      	ldr	r3, [r3, #8]
 8004b4a:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	699b      	ldr	r3, [r3, #24]
 8004b52:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	6a1b      	ldr	r3, [r3, #32]
 8004b5a:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004b5c:	683b      	ldr	r3, [r7, #0]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	697a      	ldr	r2, [r7, #20]
 8004b62:	4313      	orrs	r3, r2
 8004b64:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004b66:	693b      	ldr	r3, [r7, #16]
 8004b68:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004b6c:	f023 0303 	bic.w	r3, r3, #3
 8004b70:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004b72:	683b      	ldr	r3, [r7, #0]
 8004b74:	689a      	ldr	r2, [r3, #8]
 8004b76:	683b      	ldr	r3, [r7, #0]
 8004b78:	699b      	ldr	r3, [r3, #24]
 8004b7a:	021b      	lsls	r3, r3, #8
 8004b7c:	4313      	orrs	r3, r2
 8004b7e:	693a      	ldr	r2, [r7, #16]
 8004b80:	4313      	orrs	r3, r2
 8004b82:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004b84:	693b      	ldr	r3, [r7, #16]
 8004b86:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8004b8a:	f023 030c 	bic.w	r3, r3, #12
 8004b8e:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004b90:	693b      	ldr	r3, [r7, #16]
 8004b92:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004b96:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004b9a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004b9c:	683b      	ldr	r3, [r7, #0]
 8004b9e:	68da      	ldr	r2, [r3, #12]
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	69db      	ldr	r3, [r3, #28]
 8004ba4:	021b      	lsls	r3, r3, #8
 8004ba6:	4313      	orrs	r3, r2
 8004ba8:	693a      	ldr	r2, [r7, #16]
 8004baa:	4313      	orrs	r3, r2
 8004bac:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004bae:	683b      	ldr	r3, [r7, #0]
 8004bb0:	691b      	ldr	r3, [r3, #16]
 8004bb2:	011a      	lsls	r2, r3, #4
 8004bb4:	683b      	ldr	r3, [r7, #0]
 8004bb6:	6a1b      	ldr	r3, [r3, #32]
 8004bb8:	031b      	lsls	r3, r3, #12
 8004bba:	4313      	orrs	r3, r2
 8004bbc:	693a      	ldr	r2, [r7, #16]
 8004bbe:	4313      	orrs	r3, r2
 8004bc0:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8004bc8:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8004bd0:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004bd2:	683b      	ldr	r3, [r7, #0]
 8004bd4:	685a      	ldr	r2, [r3, #4]
 8004bd6:	683b      	ldr	r3, [r7, #0]
 8004bd8:	695b      	ldr	r3, [r3, #20]
 8004bda:	011b      	lsls	r3, r3, #4
 8004bdc:	4313      	orrs	r3, r2
 8004bde:	68fa      	ldr	r2, [r7, #12]
 8004be0:	4313      	orrs	r3, r2
 8004be2:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	697a      	ldr	r2, [r7, #20]
 8004bea:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	693a      	ldr	r2, [r7, #16]
 8004bf2:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	68fa      	ldr	r2, [r7, #12]
 8004bfa:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2201      	movs	r2, #1
 8004c00:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	2201      	movs	r2, #1
 8004c08:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	2201      	movs	r2, #1
 8004c10:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2201      	movs	r2, #1
 8004c18:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	2201      	movs	r2, #1
 8004c20:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2201      	movs	r2, #1
 8004c28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004c2c:	2300      	movs	r3, #0
}
 8004c2e:	4618      	mov	r0, r3
 8004c30:	3718      	adds	r7, #24
 8004c32:	46bd      	mov	sp, r7
 8004c34:	bd80      	pop	{r7, pc}

08004c36 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004c36:	b580      	push	{r7, lr}
 8004c38:	b084      	sub	sp, #16
 8004c3a:	af00      	add	r7, sp, #0
 8004c3c:	6078      	str	r0, [r7, #4]
 8004c3e:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004c46:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004c4e:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004c56:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8004c5e:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8004c60:	683b      	ldr	r3, [r7, #0]
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d110      	bne.n	8004c88 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004c66:	7bfb      	ldrb	r3, [r7, #15]
 8004c68:	2b01      	cmp	r3, #1
 8004c6a:	d102      	bne.n	8004c72 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8004c6c:	7b7b      	ldrb	r3, [r7, #13]
 8004c6e:	2b01      	cmp	r3, #1
 8004c70:	d001      	beq.n	8004c76 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8004c72:	2301      	movs	r3, #1
 8004c74:	e069      	b.n	8004d4a <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	2202      	movs	r2, #2
 8004c7a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	2202      	movs	r2, #2
 8004c82:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004c86:	e031      	b.n	8004cec <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8004c88:	683b      	ldr	r3, [r7, #0]
 8004c8a:	2b04      	cmp	r3, #4
 8004c8c:	d110      	bne.n	8004cb0 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004c8e:	7bbb      	ldrb	r3, [r7, #14]
 8004c90:	2b01      	cmp	r3, #1
 8004c92:	d102      	bne.n	8004c9a <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004c94:	7b3b      	ldrb	r3, [r7, #12]
 8004c96:	2b01      	cmp	r3, #1
 8004c98:	d001      	beq.n	8004c9e <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8004c9a:	2301      	movs	r3, #1
 8004c9c:	e055      	b.n	8004d4a <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	2202      	movs	r2, #2
 8004ca2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	2202      	movs	r2, #2
 8004caa:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004cae:	e01d      	b.n	8004cec <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004cb0:	7bfb      	ldrb	r3, [r7, #15]
 8004cb2:	2b01      	cmp	r3, #1
 8004cb4:	d108      	bne.n	8004cc8 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004cb6:	7bbb      	ldrb	r3, [r7, #14]
 8004cb8:	2b01      	cmp	r3, #1
 8004cba:	d105      	bne.n	8004cc8 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004cbc:	7b7b      	ldrb	r3, [r7, #13]
 8004cbe:	2b01      	cmp	r3, #1
 8004cc0:	d102      	bne.n	8004cc8 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004cc2:	7b3b      	ldrb	r3, [r7, #12]
 8004cc4:	2b01      	cmp	r3, #1
 8004cc6:	d001      	beq.n	8004ccc <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8004cc8:	2301      	movs	r3, #1
 8004cca:	e03e      	b.n	8004d4a <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2202      	movs	r2, #2
 8004cd0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2202      	movs	r2, #2
 8004cd8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	2202      	movs	r2, #2
 8004ce0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2202      	movs	r2, #2
 8004ce8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8004cec:	683b      	ldr	r3, [r7, #0]
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d003      	beq.n	8004cfa <HAL_TIM_Encoder_Start+0xc4>
 8004cf2:	683b      	ldr	r3, [r7, #0]
 8004cf4:	2b04      	cmp	r3, #4
 8004cf6:	d008      	beq.n	8004d0a <HAL_TIM_Encoder_Start+0xd4>
 8004cf8:	e00f      	b.n	8004d1a <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	2201      	movs	r2, #1
 8004d00:	2100      	movs	r1, #0
 8004d02:	4618      	mov	r0, r3
 8004d04:	f000 fb2a 	bl	800535c <TIM_CCxChannelCmd>
      break;
 8004d08:	e016      	b.n	8004d38 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	2201      	movs	r2, #1
 8004d10:	2104      	movs	r1, #4
 8004d12:	4618      	mov	r0, r3
 8004d14:	f000 fb22 	bl	800535c <TIM_CCxChannelCmd>
      break;
 8004d18:	e00e      	b.n	8004d38 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	2201      	movs	r2, #1
 8004d20:	2100      	movs	r1, #0
 8004d22:	4618      	mov	r0, r3
 8004d24:	f000 fb1a 	bl	800535c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	2201      	movs	r2, #1
 8004d2e:	2104      	movs	r1, #4
 8004d30:	4618      	mov	r0, r3
 8004d32:	f000 fb13 	bl	800535c <TIM_CCxChannelCmd>
      break;
 8004d36:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	681a      	ldr	r2, [r3, #0]
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f042 0201 	orr.w	r2, r2, #1
 8004d46:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004d48:	2300      	movs	r3, #0
}
 8004d4a:	4618      	mov	r0, r3
 8004d4c:	3710      	adds	r7, #16
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	bd80      	pop	{r7, pc}

08004d52 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004d52:	b580      	push	{r7, lr}
 8004d54:	b084      	sub	sp, #16
 8004d56:	af00      	add	r7, sp, #0
 8004d58:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	68db      	ldr	r3, [r3, #12]
 8004d60:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	691b      	ldr	r3, [r3, #16]
 8004d68:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004d6a:	68bb      	ldr	r3, [r7, #8]
 8004d6c:	f003 0302 	and.w	r3, r3, #2
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d020      	beq.n	8004db6 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	f003 0302 	and.w	r3, r3, #2
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d01b      	beq.n	8004db6 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f06f 0202 	mvn.w	r2, #2
 8004d86:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2201      	movs	r2, #1
 8004d8c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	699b      	ldr	r3, [r3, #24]
 8004d94:	f003 0303 	and.w	r3, r3, #3
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d003      	beq.n	8004da4 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004d9c:	6878      	ldr	r0, [r7, #4]
 8004d9e:	f000 f999 	bl	80050d4 <HAL_TIM_IC_CaptureCallback>
 8004da2:	e005      	b.n	8004db0 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004da4:	6878      	ldr	r0, [r7, #4]
 8004da6:	f000 f98b 	bl	80050c0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004daa:	6878      	ldr	r0, [r7, #4]
 8004dac:	f000 f99c 	bl	80050e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2200      	movs	r2, #0
 8004db4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004db6:	68bb      	ldr	r3, [r7, #8]
 8004db8:	f003 0304 	and.w	r3, r3, #4
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d020      	beq.n	8004e02 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	f003 0304 	and.w	r3, r3, #4
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d01b      	beq.n	8004e02 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f06f 0204 	mvn.w	r2, #4
 8004dd2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2202      	movs	r2, #2
 8004dd8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	699b      	ldr	r3, [r3, #24]
 8004de0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d003      	beq.n	8004df0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004de8:	6878      	ldr	r0, [r7, #4]
 8004dea:	f000 f973 	bl	80050d4 <HAL_TIM_IC_CaptureCallback>
 8004dee:	e005      	b.n	8004dfc <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004df0:	6878      	ldr	r0, [r7, #4]
 8004df2:	f000 f965 	bl	80050c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004df6:	6878      	ldr	r0, [r7, #4]
 8004df8:	f000 f976 	bl	80050e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2200      	movs	r2, #0
 8004e00:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004e02:	68bb      	ldr	r3, [r7, #8]
 8004e04:	f003 0308 	and.w	r3, r3, #8
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d020      	beq.n	8004e4e <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	f003 0308 	and.w	r3, r3, #8
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d01b      	beq.n	8004e4e <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f06f 0208 	mvn.w	r2, #8
 8004e1e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2204      	movs	r2, #4
 8004e24:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	69db      	ldr	r3, [r3, #28]
 8004e2c:	f003 0303 	and.w	r3, r3, #3
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d003      	beq.n	8004e3c <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e34:	6878      	ldr	r0, [r7, #4]
 8004e36:	f000 f94d 	bl	80050d4 <HAL_TIM_IC_CaptureCallback>
 8004e3a:	e005      	b.n	8004e48 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e3c:	6878      	ldr	r0, [r7, #4]
 8004e3e:	f000 f93f 	bl	80050c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e42:	6878      	ldr	r0, [r7, #4]
 8004e44:	f000 f950 	bl	80050e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2200      	movs	r2, #0
 8004e4c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004e4e:	68bb      	ldr	r3, [r7, #8]
 8004e50:	f003 0310 	and.w	r3, r3, #16
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d020      	beq.n	8004e9a <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	f003 0310 	and.w	r3, r3, #16
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d01b      	beq.n	8004e9a <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f06f 0210 	mvn.w	r2, #16
 8004e6a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	2208      	movs	r2, #8
 8004e70:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	69db      	ldr	r3, [r3, #28]
 8004e78:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d003      	beq.n	8004e88 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e80:	6878      	ldr	r0, [r7, #4]
 8004e82:	f000 f927 	bl	80050d4 <HAL_TIM_IC_CaptureCallback>
 8004e86:	e005      	b.n	8004e94 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e88:	6878      	ldr	r0, [r7, #4]
 8004e8a:	f000 f919 	bl	80050c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e8e:	6878      	ldr	r0, [r7, #4]
 8004e90:	f000 f92a 	bl	80050e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	2200      	movs	r2, #0
 8004e98:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004e9a:	68bb      	ldr	r3, [r7, #8]
 8004e9c:	f003 0301 	and.w	r3, r3, #1
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d00c      	beq.n	8004ebe <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	f003 0301 	and.w	r3, r3, #1
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d007      	beq.n	8004ebe <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f06f 0201 	mvn.w	r2, #1
 8004eb6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004eb8:	6878      	ldr	r0, [r7, #4]
 8004eba:	f7fb feef 	bl	8000c9c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004ebe:	68bb      	ldr	r3, [r7, #8]
 8004ec0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d00c      	beq.n	8004ee2 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d007      	beq.n	8004ee2 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004eda:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004edc:	6878      	ldr	r0, [r7, #4]
 8004ede:	f000 fadb 	bl	8005498 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004ee2:	68bb      	ldr	r3, [r7, #8]
 8004ee4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d00c      	beq.n	8004f06 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d007      	beq.n	8004f06 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004efe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004f00:	6878      	ldr	r0, [r7, #4]
 8004f02:	f000 f8fb 	bl	80050fc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004f06:	68bb      	ldr	r3, [r7, #8]
 8004f08:	f003 0320 	and.w	r3, r3, #32
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d00c      	beq.n	8004f2a <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	f003 0320 	and.w	r3, r3, #32
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d007      	beq.n	8004f2a <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f06f 0220 	mvn.w	r2, #32
 8004f22:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004f24:	6878      	ldr	r0, [r7, #4]
 8004f26:	f000 faad 	bl	8005484 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004f2a:	bf00      	nop
 8004f2c:	3710      	adds	r7, #16
 8004f2e:	46bd      	mov	sp, r7
 8004f30:	bd80      	pop	{r7, pc}

08004f32 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004f32:	b580      	push	{r7, lr}
 8004f34:	b084      	sub	sp, #16
 8004f36:	af00      	add	r7, sp, #0
 8004f38:	6078      	str	r0, [r7, #4]
 8004f3a:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004f3c:	2300      	movs	r3, #0
 8004f3e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004f46:	2b01      	cmp	r3, #1
 8004f48:	d101      	bne.n	8004f4e <HAL_TIM_ConfigClockSource+0x1c>
 8004f4a:	2302      	movs	r3, #2
 8004f4c:	e0b4      	b.n	80050b8 <HAL_TIM_ConfigClockSource+0x186>
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	2201      	movs	r2, #1
 8004f52:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	2202      	movs	r2, #2
 8004f5a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	689b      	ldr	r3, [r3, #8]
 8004f64:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004f66:	68bb      	ldr	r3, [r7, #8]
 8004f68:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004f6c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004f6e:	68bb      	ldr	r3, [r7, #8]
 8004f70:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004f74:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	68ba      	ldr	r2, [r7, #8]
 8004f7c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004f7e:	683b      	ldr	r3, [r7, #0]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004f86:	d03e      	beq.n	8005006 <HAL_TIM_ConfigClockSource+0xd4>
 8004f88:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004f8c:	f200 8087 	bhi.w	800509e <HAL_TIM_ConfigClockSource+0x16c>
 8004f90:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004f94:	f000 8086 	beq.w	80050a4 <HAL_TIM_ConfigClockSource+0x172>
 8004f98:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004f9c:	d87f      	bhi.n	800509e <HAL_TIM_ConfigClockSource+0x16c>
 8004f9e:	2b70      	cmp	r3, #112	@ 0x70
 8004fa0:	d01a      	beq.n	8004fd8 <HAL_TIM_ConfigClockSource+0xa6>
 8004fa2:	2b70      	cmp	r3, #112	@ 0x70
 8004fa4:	d87b      	bhi.n	800509e <HAL_TIM_ConfigClockSource+0x16c>
 8004fa6:	2b60      	cmp	r3, #96	@ 0x60
 8004fa8:	d050      	beq.n	800504c <HAL_TIM_ConfigClockSource+0x11a>
 8004faa:	2b60      	cmp	r3, #96	@ 0x60
 8004fac:	d877      	bhi.n	800509e <HAL_TIM_ConfigClockSource+0x16c>
 8004fae:	2b50      	cmp	r3, #80	@ 0x50
 8004fb0:	d03c      	beq.n	800502c <HAL_TIM_ConfigClockSource+0xfa>
 8004fb2:	2b50      	cmp	r3, #80	@ 0x50
 8004fb4:	d873      	bhi.n	800509e <HAL_TIM_ConfigClockSource+0x16c>
 8004fb6:	2b40      	cmp	r3, #64	@ 0x40
 8004fb8:	d058      	beq.n	800506c <HAL_TIM_ConfigClockSource+0x13a>
 8004fba:	2b40      	cmp	r3, #64	@ 0x40
 8004fbc:	d86f      	bhi.n	800509e <HAL_TIM_ConfigClockSource+0x16c>
 8004fbe:	2b30      	cmp	r3, #48	@ 0x30
 8004fc0:	d064      	beq.n	800508c <HAL_TIM_ConfigClockSource+0x15a>
 8004fc2:	2b30      	cmp	r3, #48	@ 0x30
 8004fc4:	d86b      	bhi.n	800509e <HAL_TIM_ConfigClockSource+0x16c>
 8004fc6:	2b20      	cmp	r3, #32
 8004fc8:	d060      	beq.n	800508c <HAL_TIM_ConfigClockSource+0x15a>
 8004fca:	2b20      	cmp	r3, #32
 8004fcc:	d867      	bhi.n	800509e <HAL_TIM_ConfigClockSource+0x16c>
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d05c      	beq.n	800508c <HAL_TIM_ConfigClockSource+0x15a>
 8004fd2:	2b10      	cmp	r3, #16
 8004fd4:	d05a      	beq.n	800508c <HAL_TIM_ConfigClockSource+0x15a>
 8004fd6:	e062      	b.n	800509e <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004fdc:	683b      	ldr	r3, [r7, #0]
 8004fde:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004fe0:	683b      	ldr	r3, [r7, #0]
 8004fe2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004fe4:	683b      	ldr	r3, [r7, #0]
 8004fe6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004fe8:	f000 f998 	bl	800531c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	689b      	ldr	r3, [r3, #8]
 8004ff2:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004ff4:	68bb      	ldr	r3, [r7, #8]
 8004ff6:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004ffa:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	68ba      	ldr	r2, [r7, #8]
 8005002:	609a      	str	r2, [r3, #8]
      break;
 8005004:	e04f      	b.n	80050a6 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800500a:	683b      	ldr	r3, [r7, #0]
 800500c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800500e:	683b      	ldr	r3, [r7, #0]
 8005010:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005012:	683b      	ldr	r3, [r7, #0]
 8005014:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005016:	f000 f981 	bl	800531c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	689a      	ldr	r2, [r3, #8]
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005028:	609a      	str	r2, [r3, #8]
      break;
 800502a:	e03c      	b.n	80050a6 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005030:	683b      	ldr	r3, [r7, #0]
 8005032:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005034:	683b      	ldr	r3, [r7, #0]
 8005036:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005038:	461a      	mov	r2, r3
 800503a:	f000 f8f5 	bl	8005228 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	2150      	movs	r1, #80	@ 0x50
 8005044:	4618      	mov	r0, r3
 8005046:	f000 f94e 	bl	80052e6 <TIM_ITRx_SetConfig>
      break;
 800504a:	e02c      	b.n	80050a6 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005050:	683b      	ldr	r3, [r7, #0]
 8005052:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005054:	683b      	ldr	r3, [r7, #0]
 8005056:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005058:	461a      	mov	r2, r3
 800505a:	f000 f914 	bl	8005286 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	2160      	movs	r1, #96	@ 0x60
 8005064:	4618      	mov	r0, r3
 8005066:	f000 f93e 	bl	80052e6 <TIM_ITRx_SetConfig>
      break;
 800506a:	e01c      	b.n	80050a6 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005070:	683b      	ldr	r3, [r7, #0]
 8005072:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005074:	683b      	ldr	r3, [r7, #0]
 8005076:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005078:	461a      	mov	r2, r3
 800507a:	f000 f8d5 	bl	8005228 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	2140      	movs	r1, #64	@ 0x40
 8005084:	4618      	mov	r0, r3
 8005086:	f000 f92e 	bl	80052e6 <TIM_ITRx_SetConfig>
      break;
 800508a:	e00c      	b.n	80050a6 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681a      	ldr	r2, [r3, #0]
 8005090:	683b      	ldr	r3, [r7, #0]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	4619      	mov	r1, r3
 8005096:	4610      	mov	r0, r2
 8005098:	f000 f925 	bl	80052e6 <TIM_ITRx_SetConfig>
      break;
 800509c:	e003      	b.n	80050a6 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800509e:	2301      	movs	r3, #1
 80050a0:	73fb      	strb	r3, [r7, #15]
      break;
 80050a2:	e000      	b.n	80050a6 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80050a4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	2201      	movs	r2, #1
 80050aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	2200      	movs	r2, #0
 80050b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80050b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80050b8:	4618      	mov	r0, r3
 80050ba:	3710      	adds	r7, #16
 80050bc:	46bd      	mov	sp, r7
 80050be:	bd80      	pop	{r7, pc}

080050c0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80050c0:	b480      	push	{r7}
 80050c2:	b083      	sub	sp, #12
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80050c8:	bf00      	nop
 80050ca:	370c      	adds	r7, #12
 80050cc:	46bd      	mov	sp, r7
 80050ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d2:	4770      	bx	lr

080050d4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80050d4:	b480      	push	{r7}
 80050d6:	b083      	sub	sp, #12
 80050d8:	af00      	add	r7, sp, #0
 80050da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80050dc:	bf00      	nop
 80050de:	370c      	adds	r7, #12
 80050e0:	46bd      	mov	sp, r7
 80050e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e6:	4770      	bx	lr

080050e8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80050e8:	b480      	push	{r7}
 80050ea:	b083      	sub	sp, #12
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80050f0:	bf00      	nop
 80050f2:	370c      	adds	r7, #12
 80050f4:	46bd      	mov	sp, r7
 80050f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fa:	4770      	bx	lr

080050fc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80050fc:	b480      	push	{r7}
 80050fe:	b083      	sub	sp, #12
 8005100:	af00      	add	r7, sp, #0
 8005102:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005104:	bf00      	nop
 8005106:	370c      	adds	r7, #12
 8005108:	46bd      	mov	sp, r7
 800510a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510e:	4770      	bx	lr

08005110 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005110:	b480      	push	{r7}
 8005112:	b085      	sub	sp, #20
 8005114:	af00      	add	r7, sp, #0
 8005116:	6078      	str	r0, [r7, #4]
 8005118:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	4a3a      	ldr	r2, [pc, #232]	@ (800520c <TIM_Base_SetConfig+0xfc>)
 8005124:	4293      	cmp	r3, r2
 8005126:	d00f      	beq.n	8005148 <TIM_Base_SetConfig+0x38>
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800512e:	d00b      	beq.n	8005148 <TIM_Base_SetConfig+0x38>
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	4a37      	ldr	r2, [pc, #220]	@ (8005210 <TIM_Base_SetConfig+0x100>)
 8005134:	4293      	cmp	r3, r2
 8005136:	d007      	beq.n	8005148 <TIM_Base_SetConfig+0x38>
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	4a36      	ldr	r2, [pc, #216]	@ (8005214 <TIM_Base_SetConfig+0x104>)
 800513c:	4293      	cmp	r3, r2
 800513e:	d003      	beq.n	8005148 <TIM_Base_SetConfig+0x38>
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	4a35      	ldr	r2, [pc, #212]	@ (8005218 <TIM_Base_SetConfig+0x108>)
 8005144:	4293      	cmp	r3, r2
 8005146:	d108      	bne.n	800515a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800514e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005150:	683b      	ldr	r3, [r7, #0]
 8005152:	685b      	ldr	r3, [r3, #4]
 8005154:	68fa      	ldr	r2, [r7, #12]
 8005156:	4313      	orrs	r3, r2
 8005158:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	4a2b      	ldr	r2, [pc, #172]	@ (800520c <TIM_Base_SetConfig+0xfc>)
 800515e:	4293      	cmp	r3, r2
 8005160:	d01b      	beq.n	800519a <TIM_Base_SetConfig+0x8a>
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005168:	d017      	beq.n	800519a <TIM_Base_SetConfig+0x8a>
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	4a28      	ldr	r2, [pc, #160]	@ (8005210 <TIM_Base_SetConfig+0x100>)
 800516e:	4293      	cmp	r3, r2
 8005170:	d013      	beq.n	800519a <TIM_Base_SetConfig+0x8a>
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	4a27      	ldr	r2, [pc, #156]	@ (8005214 <TIM_Base_SetConfig+0x104>)
 8005176:	4293      	cmp	r3, r2
 8005178:	d00f      	beq.n	800519a <TIM_Base_SetConfig+0x8a>
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	4a26      	ldr	r2, [pc, #152]	@ (8005218 <TIM_Base_SetConfig+0x108>)
 800517e:	4293      	cmp	r3, r2
 8005180:	d00b      	beq.n	800519a <TIM_Base_SetConfig+0x8a>
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	4a25      	ldr	r2, [pc, #148]	@ (800521c <TIM_Base_SetConfig+0x10c>)
 8005186:	4293      	cmp	r3, r2
 8005188:	d007      	beq.n	800519a <TIM_Base_SetConfig+0x8a>
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	4a24      	ldr	r2, [pc, #144]	@ (8005220 <TIM_Base_SetConfig+0x110>)
 800518e:	4293      	cmp	r3, r2
 8005190:	d003      	beq.n	800519a <TIM_Base_SetConfig+0x8a>
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	4a23      	ldr	r2, [pc, #140]	@ (8005224 <TIM_Base_SetConfig+0x114>)
 8005196:	4293      	cmp	r3, r2
 8005198:	d108      	bne.n	80051ac <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80051a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80051a2:	683b      	ldr	r3, [r7, #0]
 80051a4:	68db      	ldr	r3, [r3, #12]
 80051a6:	68fa      	ldr	r2, [r7, #12]
 80051a8:	4313      	orrs	r3, r2
 80051aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80051b2:	683b      	ldr	r3, [r7, #0]
 80051b4:	695b      	ldr	r3, [r3, #20]
 80051b6:	4313      	orrs	r3, r2
 80051b8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	68fa      	ldr	r2, [r7, #12]
 80051be:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80051c0:	683b      	ldr	r3, [r7, #0]
 80051c2:	689a      	ldr	r2, [r3, #8]
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80051c8:	683b      	ldr	r3, [r7, #0]
 80051ca:	681a      	ldr	r2, [r3, #0]
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	4a0e      	ldr	r2, [pc, #56]	@ (800520c <TIM_Base_SetConfig+0xfc>)
 80051d4:	4293      	cmp	r3, r2
 80051d6:	d103      	bne.n	80051e0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80051d8:	683b      	ldr	r3, [r7, #0]
 80051da:	691a      	ldr	r2, [r3, #16]
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2201      	movs	r2, #1
 80051e4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	691b      	ldr	r3, [r3, #16]
 80051ea:	f003 0301 	and.w	r3, r3, #1
 80051ee:	2b01      	cmp	r3, #1
 80051f0:	d105      	bne.n	80051fe <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	691b      	ldr	r3, [r3, #16]
 80051f6:	f023 0201 	bic.w	r2, r3, #1
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	611a      	str	r2, [r3, #16]
  }
}
 80051fe:	bf00      	nop
 8005200:	3714      	adds	r7, #20
 8005202:	46bd      	mov	sp, r7
 8005204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005208:	4770      	bx	lr
 800520a:	bf00      	nop
 800520c:	40010000 	.word	0x40010000
 8005210:	40000400 	.word	0x40000400
 8005214:	40000800 	.word	0x40000800
 8005218:	40000c00 	.word	0x40000c00
 800521c:	40014000 	.word	0x40014000
 8005220:	40014400 	.word	0x40014400
 8005224:	40014800 	.word	0x40014800

08005228 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005228:	b480      	push	{r7}
 800522a:	b087      	sub	sp, #28
 800522c:	af00      	add	r7, sp, #0
 800522e:	60f8      	str	r0, [r7, #12]
 8005230:	60b9      	str	r1, [r7, #8]
 8005232:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	6a1b      	ldr	r3, [r3, #32]
 8005238:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	6a1b      	ldr	r3, [r3, #32]
 800523e:	f023 0201 	bic.w	r2, r3, #1
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	699b      	ldr	r3, [r3, #24]
 800524a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800524c:	693b      	ldr	r3, [r7, #16]
 800524e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005252:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	011b      	lsls	r3, r3, #4
 8005258:	693a      	ldr	r2, [r7, #16]
 800525a:	4313      	orrs	r3, r2
 800525c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800525e:	697b      	ldr	r3, [r7, #20]
 8005260:	f023 030a 	bic.w	r3, r3, #10
 8005264:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005266:	697a      	ldr	r2, [r7, #20]
 8005268:	68bb      	ldr	r3, [r7, #8]
 800526a:	4313      	orrs	r3, r2
 800526c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	693a      	ldr	r2, [r7, #16]
 8005272:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	697a      	ldr	r2, [r7, #20]
 8005278:	621a      	str	r2, [r3, #32]
}
 800527a:	bf00      	nop
 800527c:	371c      	adds	r7, #28
 800527e:	46bd      	mov	sp, r7
 8005280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005284:	4770      	bx	lr

08005286 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005286:	b480      	push	{r7}
 8005288:	b087      	sub	sp, #28
 800528a:	af00      	add	r7, sp, #0
 800528c:	60f8      	str	r0, [r7, #12]
 800528e:	60b9      	str	r1, [r7, #8]
 8005290:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	6a1b      	ldr	r3, [r3, #32]
 8005296:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	6a1b      	ldr	r3, [r3, #32]
 800529c:	f023 0210 	bic.w	r2, r3, #16
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	699b      	ldr	r3, [r3, #24]
 80052a8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80052aa:	693b      	ldr	r3, [r7, #16]
 80052ac:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80052b0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	031b      	lsls	r3, r3, #12
 80052b6:	693a      	ldr	r2, [r7, #16]
 80052b8:	4313      	orrs	r3, r2
 80052ba:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80052bc:	697b      	ldr	r3, [r7, #20]
 80052be:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80052c2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80052c4:	68bb      	ldr	r3, [r7, #8]
 80052c6:	011b      	lsls	r3, r3, #4
 80052c8:	697a      	ldr	r2, [r7, #20]
 80052ca:	4313      	orrs	r3, r2
 80052cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	693a      	ldr	r2, [r7, #16]
 80052d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	697a      	ldr	r2, [r7, #20]
 80052d8:	621a      	str	r2, [r3, #32]
}
 80052da:	bf00      	nop
 80052dc:	371c      	adds	r7, #28
 80052de:	46bd      	mov	sp, r7
 80052e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e4:	4770      	bx	lr

080052e6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80052e6:	b480      	push	{r7}
 80052e8:	b085      	sub	sp, #20
 80052ea:	af00      	add	r7, sp, #0
 80052ec:	6078      	str	r0, [r7, #4]
 80052ee:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	689b      	ldr	r3, [r3, #8]
 80052f4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80052fc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80052fe:	683a      	ldr	r2, [r7, #0]
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	4313      	orrs	r3, r2
 8005304:	f043 0307 	orr.w	r3, r3, #7
 8005308:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	68fa      	ldr	r2, [r7, #12]
 800530e:	609a      	str	r2, [r3, #8]
}
 8005310:	bf00      	nop
 8005312:	3714      	adds	r7, #20
 8005314:	46bd      	mov	sp, r7
 8005316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531a:	4770      	bx	lr

0800531c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800531c:	b480      	push	{r7}
 800531e:	b087      	sub	sp, #28
 8005320:	af00      	add	r7, sp, #0
 8005322:	60f8      	str	r0, [r7, #12]
 8005324:	60b9      	str	r1, [r7, #8]
 8005326:	607a      	str	r2, [r7, #4]
 8005328:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	689b      	ldr	r3, [r3, #8]
 800532e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005330:	697b      	ldr	r3, [r7, #20]
 8005332:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005336:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005338:	683b      	ldr	r3, [r7, #0]
 800533a:	021a      	lsls	r2, r3, #8
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	431a      	orrs	r2, r3
 8005340:	68bb      	ldr	r3, [r7, #8]
 8005342:	4313      	orrs	r3, r2
 8005344:	697a      	ldr	r2, [r7, #20]
 8005346:	4313      	orrs	r3, r2
 8005348:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	697a      	ldr	r2, [r7, #20]
 800534e:	609a      	str	r2, [r3, #8]
}
 8005350:	bf00      	nop
 8005352:	371c      	adds	r7, #28
 8005354:	46bd      	mov	sp, r7
 8005356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535a:	4770      	bx	lr

0800535c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800535c:	b480      	push	{r7}
 800535e:	b087      	sub	sp, #28
 8005360:	af00      	add	r7, sp, #0
 8005362:	60f8      	str	r0, [r7, #12]
 8005364:	60b9      	str	r1, [r7, #8]
 8005366:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005368:	68bb      	ldr	r3, [r7, #8]
 800536a:	f003 031f 	and.w	r3, r3, #31
 800536e:	2201      	movs	r2, #1
 8005370:	fa02 f303 	lsl.w	r3, r2, r3
 8005374:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	6a1a      	ldr	r2, [r3, #32]
 800537a:	697b      	ldr	r3, [r7, #20]
 800537c:	43db      	mvns	r3, r3
 800537e:	401a      	ands	r2, r3
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	6a1a      	ldr	r2, [r3, #32]
 8005388:	68bb      	ldr	r3, [r7, #8]
 800538a:	f003 031f 	and.w	r3, r3, #31
 800538e:	6879      	ldr	r1, [r7, #4]
 8005390:	fa01 f303 	lsl.w	r3, r1, r3
 8005394:	431a      	orrs	r2, r3
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	621a      	str	r2, [r3, #32]
}
 800539a:	bf00      	nop
 800539c:	371c      	adds	r7, #28
 800539e:	46bd      	mov	sp, r7
 80053a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a4:	4770      	bx	lr
	...

080053a8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80053a8:	b480      	push	{r7}
 80053aa:	b085      	sub	sp, #20
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	6078      	str	r0, [r7, #4]
 80053b0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80053b8:	2b01      	cmp	r3, #1
 80053ba:	d101      	bne.n	80053c0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80053bc:	2302      	movs	r3, #2
 80053be:	e050      	b.n	8005462 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	2201      	movs	r2, #1
 80053c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	2202      	movs	r2, #2
 80053cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	685b      	ldr	r3, [r3, #4]
 80053d6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	689b      	ldr	r3, [r3, #8]
 80053de:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80053e6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80053e8:	683b      	ldr	r3, [r7, #0]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	68fa      	ldr	r2, [r7, #12]
 80053ee:	4313      	orrs	r3, r2
 80053f0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	68fa      	ldr	r2, [r7, #12]
 80053f8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	4a1c      	ldr	r2, [pc, #112]	@ (8005470 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005400:	4293      	cmp	r3, r2
 8005402:	d018      	beq.n	8005436 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800540c:	d013      	beq.n	8005436 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	4a18      	ldr	r2, [pc, #96]	@ (8005474 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005414:	4293      	cmp	r3, r2
 8005416:	d00e      	beq.n	8005436 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	4a16      	ldr	r2, [pc, #88]	@ (8005478 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800541e:	4293      	cmp	r3, r2
 8005420:	d009      	beq.n	8005436 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	4a15      	ldr	r2, [pc, #84]	@ (800547c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005428:	4293      	cmp	r3, r2
 800542a:	d004      	beq.n	8005436 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	4a13      	ldr	r2, [pc, #76]	@ (8005480 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005432:	4293      	cmp	r3, r2
 8005434:	d10c      	bne.n	8005450 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005436:	68bb      	ldr	r3, [r7, #8]
 8005438:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800543c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800543e:	683b      	ldr	r3, [r7, #0]
 8005440:	685b      	ldr	r3, [r3, #4]
 8005442:	68ba      	ldr	r2, [r7, #8]
 8005444:	4313      	orrs	r3, r2
 8005446:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	68ba      	ldr	r2, [r7, #8]
 800544e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2201      	movs	r2, #1
 8005454:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2200      	movs	r2, #0
 800545c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005460:	2300      	movs	r3, #0
}
 8005462:	4618      	mov	r0, r3
 8005464:	3714      	adds	r7, #20
 8005466:	46bd      	mov	sp, r7
 8005468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546c:	4770      	bx	lr
 800546e:	bf00      	nop
 8005470:	40010000 	.word	0x40010000
 8005474:	40000400 	.word	0x40000400
 8005478:	40000800 	.word	0x40000800
 800547c:	40000c00 	.word	0x40000c00
 8005480:	40014000 	.word	0x40014000

08005484 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005484:	b480      	push	{r7}
 8005486:	b083      	sub	sp, #12
 8005488:	af00      	add	r7, sp, #0
 800548a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800548c:	bf00      	nop
 800548e:	370c      	adds	r7, #12
 8005490:	46bd      	mov	sp, r7
 8005492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005496:	4770      	bx	lr

08005498 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005498:	b480      	push	{r7}
 800549a:	b083      	sub	sp, #12
 800549c:	af00      	add	r7, sp, #0
 800549e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80054a0:	bf00      	nop
 80054a2:	370c      	adds	r7, #12
 80054a4:	46bd      	mov	sp, r7
 80054a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054aa:	4770      	bx	lr

080054ac <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80054ac:	b580      	push	{r7, lr}
 80054ae:	b082      	sub	sp, #8
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d101      	bne.n	80054be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80054ba:	2301      	movs	r3, #1
 80054bc:	e042      	b.n	8005544 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80054c4:	b2db      	uxtb	r3, r3
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d106      	bne.n	80054d8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	2200      	movs	r2, #0
 80054ce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80054d2:	6878      	ldr	r0, [r7, #4]
 80054d4:	f7fc f96c 	bl	80017b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	2224      	movs	r2, #36	@ 0x24
 80054dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	68da      	ldr	r2, [r3, #12]
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80054ee:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80054f0:	6878      	ldr	r0, [r7, #4]
 80054f2:	f000 fdbd 	bl	8006070 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	691a      	ldr	r2, [r3, #16]
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005504:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	695a      	ldr	r2, [r3, #20]
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005514:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	68da      	ldr	r2, [r3, #12]
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005524:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	2200      	movs	r2, #0
 800552a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2220      	movs	r2, #32
 8005530:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	2220      	movs	r2, #32
 8005538:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	2200      	movs	r2, #0
 8005540:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005542:	2300      	movs	r3, #0
}
 8005544:	4618      	mov	r0, r3
 8005546:	3708      	adds	r7, #8
 8005548:	46bd      	mov	sp, r7
 800554a:	bd80      	pop	{r7, pc}

0800554c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800554c:	b580      	push	{r7, lr}
 800554e:	b08a      	sub	sp, #40	@ 0x28
 8005550:	af02      	add	r7, sp, #8
 8005552:	60f8      	str	r0, [r7, #12]
 8005554:	60b9      	str	r1, [r7, #8]
 8005556:	603b      	str	r3, [r7, #0]
 8005558:	4613      	mov	r3, r2
 800555a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800555c:	2300      	movs	r3, #0
 800555e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005566:	b2db      	uxtb	r3, r3
 8005568:	2b20      	cmp	r3, #32
 800556a:	d175      	bne.n	8005658 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800556c:	68bb      	ldr	r3, [r7, #8]
 800556e:	2b00      	cmp	r3, #0
 8005570:	d002      	beq.n	8005578 <HAL_UART_Transmit+0x2c>
 8005572:	88fb      	ldrh	r3, [r7, #6]
 8005574:	2b00      	cmp	r3, #0
 8005576:	d101      	bne.n	800557c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005578:	2301      	movs	r3, #1
 800557a:	e06e      	b.n	800565a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	2200      	movs	r2, #0
 8005580:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	2221      	movs	r2, #33	@ 0x21
 8005586:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800558a:	f7fc fb1b 	bl	8001bc4 <HAL_GetTick>
 800558e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	88fa      	ldrh	r2, [r7, #6]
 8005594:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	88fa      	ldrh	r2, [r7, #6]
 800559a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	689b      	ldr	r3, [r3, #8]
 80055a0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80055a4:	d108      	bne.n	80055b8 <HAL_UART_Transmit+0x6c>
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	691b      	ldr	r3, [r3, #16]
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d104      	bne.n	80055b8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80055ae:	2300      	movs	r3, #0
 80055b0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80055b2:	68bb      	ldr	r3, [r7, #8]
 80055b4:	61bb      	str	r3, [r7, #24]
 80055b6:	e003      	b.n	80055c0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80055b8:	68bb      	ldr	r3, [r7, #8]
 80055ba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80055bc:	2300      	movs	r3, #0
 80055be:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80055c0:	e02e      	b.n	8005620 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80055c2:	683b      	ldr	r3, [r7, #0]
 80055c4:	9300      	str	r3, [sp, #0]
 80055c6:	697b      	ldr	r3, [r7, #20]
 80055c8:	2200      	movs	r2, #0
 80055ca:	2180      	movs	r1, #128	@ 0x80
 80055cc:	68f8      	ldr	r0, [r7, #12]
 80055ce:	f000 fb1f 	bl	8005c10 <UART_WaitOnFlagUntilTimeout>
 80055d2:	4603      	mov	r3, r0
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d005      	beq.n	80055e4 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	2220      	movs	r2, #32
 80055dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80055e0:	2303      	movs	r3, #3
 80055e2:	e03a      	b.n	800565a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80055e4:	69fb      	ldr	r3, [r7, #28]
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d10b      	bne.n	8005602 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80055ea:	69bb      	ldr	r3, [r7, #24]
 80055ec:	881b      	ldrh	r3, [r3, #0]
 80055ee:	461a      	mov	r2, r3
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80055f8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80055fa:	69bb      	ldr	r3, [r7, #24]
 80055fc:	3302      	adds	r3, #2
 80055fe:	61bb      	str	r3, [r7, #24]
 8005600:	e007      	b.n	8005612 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005602:	69fb      	ldr	r3, [r7, #28]
 8005604:	781a      	ldrb	r2, [r3, #0]
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800560c:	69fb      	ldr	r3, [r7, #28]
 800560e:	3301      	adds	r3, #1
 8005610:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005616:	b29b      	uxth	r3, r3
 8005618:	3b01      	subs	r3, #1
 800561a:	b29a      	uxth	r2, r3
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005624:	b29b      	uxth	r3, r3
 8005626:	2b00      	cmp	r3, #0
 8005628:	d1cb      	bne.n	80055c2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800562a:	683b      	ldr	r3, [r7, #0]
 800562c:	9300      	str	r3, [sp, #0]
 800562e:	697b      	ldr	r3, [r7, #20]
 8005630:	2200      	movs	r2, #0
 8005632:	2140      	movs	r1, #64	@ 0x40
 8005634:	68f8      	ldr	r0, [r7, #12]
 8005636:	f000 faeb 	bl	8005c10 <UART_WaitOnFlagUntilTimeout>
 800563a:	4603      	mov	r3, r0
 800563c:	2b00      	cmp	r3, #0
 800563e:	d005      	beq.n	800564c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	2220      	movs	r2, #32
 8005644:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8005648:	2303      	movs	r3, #3
 800564a:	e006      	b.n	800565a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	2220      	movs	r2, #32
 8005650:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8005654:	2300      	movs	r3, #0
 8005656:	e000      	b.n	800565a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8005658:	2302      	movs	r3, #2
  }
}
 800565a:	4618      	mov	r0, r3
 800565c:	3720      	adds	r7, #32
 800565e:	46bd      	mov	sp, r7
 8005660:	bd80      	pop	{r7, pc}

08005662 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005662:	b580      	push	{r7, lr}
 8005664:	b084      	sub	sp, #16
 8005666:	af00      	add	r7, sp, #0
 8005668:	60f8      	str	r0, [r7, #12]
 800566a:	60b9      	str	r1, [r7, #8]
 800566c:	4613      	mov	r3, r2
 800566e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005676:	b2db      	uxtb	r3, r3
 8005678:	2b20      	cmp	r3, #32
 800567a:	d112      	bne.n	80056a2 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800567c:	68bb      	ldr	r3, [r7, #8]
 800567e:	2b00      	cmp	r3, #0
 8005680:	d002      	beq.n	8005688 <HAL_UART_Receive_IT+0x26>
 8005682:	88fb      	ldrh	r3, [r7, #6]
 8005684:	2b00      	cmp	r3, #0
 8005686:	d101      	bne.n	800568c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005688:	2301      	movs	r3, #1
 800568a:	e00b      	b.n	80056a4 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	2200      	movs	r2, #0
 8005690:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005692:	88fb      	ldrh	r3, [r7, #6]
 8005694:	461a      	mov	r2, r3
 8005696:	68b9      	ldr	r1, [r7, #8]
 8005698:	68f8      	ldr	r0, [r7, #12]
 800569a:	f000 fb12 	bl	8005cc2 <UART_Start_Receive_IT>
 800569e:	4603      	mov	r3, r0
 80056a0:	e000      	b.n	80056a4 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80056a2:	2302      	movs	r3, #2
  }
}
 80056a4:	4618      	mov	r0, r3
 80056a6:	3710      	adds	r7, #16
 80056a8:	46bd      	mov	sp, r7
 80056aa:	bd80      	pop	{r7, pc}

080056ac <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80056ac:	b580      	push	{r7, lr}
 80056ae:	b0ba      	sub	sp, #232	@ 0xe8
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	68db      	ldr	r3, [r3, #12]
 80056c4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	695b      	ldr	r3, [r3, #20]
 80056ce:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80056d2:	2300      	movs	r3, #0
 80056d4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80056d8:	2300      	movs	r3, #0
 80056da:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80056de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80056e2:	f003 030f 	and.w	r3, r3, #15
 80056e6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80056ea:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d10f      	bne.n	8005712 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80056f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80056f6:	f003 0320 	and.w	r3, r3, #32
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d009      	beq.n	8005712 <HAL_UART_IRQHandler+0x66>
 80056fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005702:	f003 0320 	and.w	r3, r3, #32
 8005706:	2b00      	cmp	r3, #0
 8005708:	d003      	beq.n	8005712 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800570a:	6878      	ldr	r0, [r7, #4]
 800570c:	f000 fbf2 	bl	8005ef4 <UART_Receive_IT>
      return;
 8005710:	e25b      	b.n	8005bca <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005712:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005716:	2b00      	cmp	r3, #0
 8005718:	f000 80de 	beq.w	80058d8 <HAL_UART_IRQHandler+0x22c>
 800571c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005720:	f003 0301 	and.w	r3, r3, #1
 8005724:	2b00      	cmp	r3, #0
 8005726:	d106      	bne.n	8005736 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005728:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800572c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8005730:	2b00      	cmp	r3, #0
 8005732:	f000 80d1 	beq.w	80058d8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005736:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800573a:	f003 0301 	and.w	r3, r3, #1
 800573e:	2b00      	cmp	r3, #0
 8005740:	d00b      	beq.n	800575a <HAL_UART_IRQHandler+0xae>
 8005742:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005746:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800574a:	2b00      	cmp	r3, #0
 800574c:	d005      	beq.n	800575a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005752:	f043 0201 	orr.w	r2, r3, #1
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800575a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800575e:	f003 0304 	and.w	r3, r3, #4
 8005762:	2b00      	cmp	r3, #0
 8005764:	d00b      	beq.n	800577e <HAL_UART_IRQHandler+0xd2>
 8005766:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800576a:	f003 0301 	and.w	r3, r3, #1
 800576e:	2b00      	cmp	r3, #0
 8005770:	d005      	beq.n	800577e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005776:	f043 0202 	orr.w	r2, r3, #2
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800577e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005782:	f003 0302 	and.w	r3, r3, #2
 8005786:	2b00      	cmp	r3, #0
 8005788:	d00b      	beq.n	80057a2 <HAL_UART_IRQHandler+0xf6>
 800578a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800578e:	f003 0301 	and.w	r3, r3, #1
 8005792:	2b00      	cmp	r3, #0
 8005794:	d005      	beq.n	80057a2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800579a:	f043 0204 	orr.w	r2, r3, #4
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80057a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80057a6:	f003 0308 	and.w	r3, r3, #8
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d011      	beq.n	80057d2 <HAL_UART_IRQHandler+0x126>
 80057ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80057b2:	f003 0320 	and.w	r3, r3, #32
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d105      	bne.n	80057c6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80057ba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80057be:	f003 0301 	and.w	r3, r3, #1
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d005      	beq.n	80057d2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80057ca:	f043 0208 	orr.w	r2, r3, #8
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	f000 81f2 	beq.w	8005bc0 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80057dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80057e0:	f003 0320 	and.w	r3, r3, #32
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d008      	beq.n	80057fa <HAL_UART_IRQHandler+0x14e>
 80057e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80057ec:	f003 0320 	and.w	r3, r3, #32
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d002      	beq.n	80057fa <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80057f4:	6878      	ldr	r0, [r7, #4]
 80057f6:	f000 fb7d 	bl	8005ef4 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	695b      	ldr	r3, [r3, #20]
 8005800:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005804:	2b40      	cmp	r3, #64	@ 0x40
 8005806:	bf0c      	ite	eq
 8005808:	2301      	moveq	r3, #1
 800580a:	2300      	movne	r3, #0
 800580c:	b2db      	uxtb	r3, r3
 800580e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005816:	f003 0308 	and.w	r3, r3, #8
 800581a:	2b00      	cmp	r3, #0
 800581c:	d103      	bne.n	8005826 <HAL_UART_IRQHandler+0x17a>
 800581e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005822:	2b00      	cmp	r3, #0
 8005824:	d04f      	beq.n	80058c6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005826:	6878      	ldr	r0, [r7, #4]
 8005828:	f000 fa85 	bl	8005d36 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	695b      	ldr	r3, [r3, #20]
 8005832:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005836:	2b40      	cmp	r3, #64	@ 0x40
 8005838:	d141      	bne.n	80058be <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	3314      	adds	r3, #20
 8005840:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005844:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005848:	e853 3f00 	ldrex	r3, [r3]
 800584c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005850:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005854:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005858:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	3314      	adds	r3, #20
 8005862:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005866:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800586a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800586e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005872:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005876:	e841 2300 	strex	r3, r2, [r1]
 800587a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800587e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005882:	2b00      	cmp	r3, #0
 8005884:	d1d9      	bne.n	800583a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800588a:	2b00      	cmp	r3, #0
 800588c:	d013      	beq.n	80058b6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005892:	4a7e      	ldr	r2, [pc, #504]	@ (8005a8c <HAL_UART_IRQHandler+0x3e0>)
 8005894:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800589a:	4618      	mov	r0, r3
 800589c:	f7fc fb14 	bl	8001ec8 <HAL_DMA_Abort_IT>
 80058a0:	4603      	mov	r3, r0
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d016      	beq.n	80058d4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80058aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80058ac:	687a      	ldr	r2, [r7, #4]
 80058ae:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80058b0:	4610      	mov	r0, r2
 80058b2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80058b4:	e00e      	b.n	80058d4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80058b6:	6878      	ldr	r0, [r7, #4]
 80058b8:	f000 f994 	bl	8005be4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80058bc:	e00a      	b.n	80058d4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80058be:	6878      	ldr	r0, [r7, #4]
 80058c0:	f000 f990 	bl	8005be4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80058c4:	e006      	b.n	80058d4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80058c6:	6878      	ldr	r0, [r7, #4]
 80058c8:	f000 f98c 	bl	8005be4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	2200      	movs	r2, #0
 80058d0:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80058d2:	e175      	b.n	8005bc0 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80058d4:	bf00      	nop
    return;
 80058d6:	e173      	b.n	8005bc0 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058dc:	2b01      	cmp	r3, #1
 80058de:	f040 814f 	bne.w	8005b80 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80058e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80058e6:	f003 0310 	and.w	r3, r3, #16
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	f000 8148 	beq.w	8005b80 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80058f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80058f4:	f003 0310 	and.w	r3, r3, #16
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	f000 8141 	beq.w	8005b80 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80058fe:	2300      	movs	r3, #0
 8005900:	60bb      	str	r3, [r7, #8]
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	60bb      	str	r3, [r7, #8]
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	685b      	ldr	r3, [r3, #4]
 8005910:	60bb      	str	r3, [r7, #8]
 8005912:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	695b      	ldr	r3, [r3, #20]
 800591a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800591e:	2b40      	cmp	r3, #64	@ 0x40
 8005920:	f040 80b6 	bne.w	8005a90 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	685b      	ldr	r3, [r3, #4]
 800592c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005930:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005934:	2b00      	cmp	r3, #0
 8005936:	f000 8145 	beq.w	8005bc4 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800593e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005942:	429a      	cmp	r2, r3
 8005944:	f080 813e 	bcs.w	8005bc4 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800594e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005954:	69db      	ldr	r3, [r3, #28]
 8005956:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800595a:	f000 8088 	beq.w	8005a6e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	330c      	adds	r3, #12
 8005964:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005968:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800596c:	e853 3f00 	ldrex	r3, [r3]
 8005970:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005974:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005978:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800597c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	330c      	adds	r3, #12
 8005986:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800598a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800598e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005992:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005996:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800599a:	e841 2300 	strex	r3, r2, [r1]
 800599e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80059a2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d1d9      	bne.n	800595e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	3314      	adds	r3, #20
 80059b0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059b2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80059b4:	e853 3f00 	ldrex	r3, [r3]
 80059b8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80059ba:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80059bc:	f023 0301 	bic.w	r3, r3, #1
 80059c0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	3314      	adds	r3, #20
 80059ca:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80059ce:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80059d2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059d4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80059d6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80059da:	e841 2300 	strex	r3, r2, [r1]
 80059de:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80059e0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d1e1      	bne.n	80059aa <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	3314      	adds	r3, #20
 80059ec:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059ee:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80059f0:	e853 3f00 	ldrex	r3, [r3]
 80059f4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80059f6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80059f8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80059fc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	3314      	adds	r3, #20
 8005a06:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005a0a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005a0c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a0e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005a10:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005a12:	e841 2300 	strex	r3, r2, [r1]
 8005a16:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005a18:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d1e3      	bne.n	80059e6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	2220      	movs	r2, #32
 8005a22:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	2200      	movs	r2, #0
 8005a2a:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	330c      	adds	r3, #12
 8005a32:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a34:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005a36:	e853 3f00 	ldrex	r3, [r3]
 8005a3a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005a3c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005a3e:	f023 0310 	bic.w	r3, r3, #16
 8005a42:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	330c      	adds	r3, #12
 8005a4c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8005a50:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005a52:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a54:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005a56:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005a58:	e841 2300 	strex	r3, r2, [r1]
 8005a5c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005a5e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d1e3      	bne.n	8005a2c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a68:	4618      	mov	r0, r3
 8005a6a:	f7fc f9bd 	bl	8001de8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	2202      	movs	r2, #2
 8005a72:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005a7c:	b29b      	uxth	r3, r3
 8005a7e:	1ad3      	subs	r3, r2, r3
 8005a80:	b29b      	uxth	r3, r3
 8005a82:	4619      	mov	r1, r3
 8005a84:	6878      	ldr	r0, [r7, #4]
 8005a86:	f000 f8b7 	bl	8005bf8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005a8a:	e09b      	b.n	8005bc4 <HAL_UART_IRQHandler+0x518>
 8005a8c:	08005dfd 	.word	0x08005dfd
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005a98:	b29b      	uxth	r3, r3
 8005a9a:	1ad3      	subs	r3, r2, r3
 8005a9c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005aa4:	b29b      	uxth	r3, r3
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	f000 808e 	beq.w	8005bc8 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8005aac:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	f000 8089 	beq.w	8005bc8 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	330c      	adds	r3, #12
 8005abc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005abe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ac0:	e853 3f00 	ldrex	r3, [r3]
 8005ac4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005ac6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ac8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005acc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	330c      	adds	r3, #12
 8005ad6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8005ada:	647a      	str	r2, [r7, #68]	@ 0x44
 8005adc:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ade:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005ae0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005ae2:	e841 2300 	strex	r3, r2, [r1]
 8005ae6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005ae8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d1e3      	bne.n	8005ab6 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	3314      	adds	r3, #20
 8005af4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005af6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005af8:	e853 3f00 	ldrex	r3, [r3]
 8005afc:	623b      	str	r3, [r7, #32]
   return(result);
 8005afe:	6a3b      	ldr	r3, [r7, #32]
 8005b00:	f023 0301 	bic.w	r3, r3, #1
 8005b04:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	3314      	adds	r3, #20
 8005b0e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005b12:	633a      	str	r2, [r7, #48]	@ 0x30
 8005b14:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b16:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005b18:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005b1a:	e841 2300 	strex	r3, r2, [r1]
 8005b1e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005b20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d1e3      	bne.n	8005aee <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	2220      	movs	r2, #32
 8005b2a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	2200      	movs	r2, #0
 8005b32:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	330c      	adds	r3, #12
 8005b3a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b3c:	693b      	ldr	r3, [r7, #16]
 8005b3e:	e853 3f00 	ldrex	r3, [r3]
 8005b42:	60fb      	str	r3, [r7, #12]
   return(result);
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	f023 0310 	bic.w	r3, r3, #16
 8005b4a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	330c      	adds	r3, #12
 8005b54:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8005b58:	61fa      	str	r2, [r7, #28]
 8005b5a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b5c:	69b9      	ldr	r1, [r7, #24]
 8005b5e:	69fa      	ldr	r2, [r7, #28]
 8005b60:	e841 2300 	strex	r3, r2, [r1]
 8005b64:	617b      	str	r3, [r7, #20]
   return(result);
 8005b66:	697b      	ldr	r3, [r7, #20]
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d1e3      	bne.n	8005b34 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	2202      	movs	r2, #2
 8005b70:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005b72:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005b76:	4619      	mov	r1, r3
 8005b78:	6878      	ldr	r0, [r7, #4]
 8005b7a:	f000 f83d 	bl	8005bf8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005b7e:	e023      	b.n	8005bc8 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005b80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005b84:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d009      	beq.n	8005ba0 <HAL_UART_IRQHandler+0x4f4>
 8005b8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005b90:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d003      	beq.n	8005ba0 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8005b98:	6878      	ldr	r0, [r7, #4]
 8005b9a:	f000 f943 	bl	8005e24 <UART_Transmit_IT>
    return;
 8005b9e:	e014      	b.n	8005bca <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005ba0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005ba4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d00e      	beq.n	8005bca <HAL_UART_IRQHandler+0x51e>
 8005bac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005bb0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d008      	beq.n	8005bca <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8005bb8:	6878      	ldr	r0, [r7, #4]
 8005bba:	f000 f983 	bl	8005ec4 <UART_EndTransmit_IT>
    return;
 8005bbe:	e004      	b.n	8005bca <HAL_UART_IRQHandler+0x51e>
    return;
 8005bc0:	bf00      	nop
 8005bc2:	e002      	b.n	8005bca <HAL_UART_IRQHandler+0x51e>
      return;
 8005bc4:	bf00      	nop
 8005bc6:	e000      	b.n	8005bca <HAL_UART_IRQHandler+0x51e>
      return;
 8005bc8:	bf00      	nop
  }
}
 8005bca:	37e8      	adds	r7, #232	@ 0xe8
 8005bcc:	46bd      	mov	sp, r7
 8005bce:	bd80      	pop	{r7, pc}

08005bd0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005bd0:	b480      	push	{r7}
 8005bd2:	b083      	sub	sp, #12
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005bd8:	bf00      	nop
 8005bda:	370c      	adds	r7, #12
 8005bdc:	46bd      	mov	sp, r7
 8005bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be2:	4770      	bx	lr

08005be4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005be4:	b480      	push	{r7}
 8005be6:	b083      	sub	sp, #12
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005bec:	bf00      	nop
 8005bee:	370c      	adds	r7, #12
 8005bf0:	46bd      	mov	sp, r7
 8005bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf6:	4770      	bx	lr

08005bf8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005bf8:	b480      	push	{r7}
 8005bfa:	b083      	sub	sp, #12
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	6078      	str	r0, [r7, #4]
 8005c00:	460b      	mov	r3, r1
 8005c02:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005c04:	bf00      	nop
 8005c06:	370c      	adds	r7, #12
 8005c08:	46bd      	mov	sp, r7
 8005c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0e:	4770      	bx	lr

08005c10 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005c10:	b580      	push	{r7, lr}
 8005c12:	b086      	sub	sp, #24
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	60f8      	str	r0, [r7, #12]
 8005c18:	60b9      	str	r1, [r7, #8]
 8005c1a:	603b      	str	r3, [r7, #0]
 8005c1c:	4613      	mov	r3, r2
 8005c1e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005c20:	e03b      	b.n	8005c9a <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c22:	6a3b      	ldr	r3, [r7, #32]
 8005c24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c28:	d037      	beq.n	8005c9a <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c2a:	f7fb ffcb 	bl	8001bc4 <HAL_GetTick>
 8005c2e:	4602      	mov	r2, r0
 8005c30:	683b      	ldr	r3, [r7, #0]
 8005c32:	1ad3      	subs	r3, r2, r3
 8005c34:	6a3a      	ldr	r2, [r7, #32]
 8005c36:	429a      	cmp	r2, r3
 8005c38:	d302      	bcc.n	8005c40 <UART_WaitOnFlagUntilTimeout+0x30>
 8005c3a:	6a3b      	ldr	r3, [r7, #32]
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d101      	bne.n	8005c44 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005c40:	2303      	movs	r3, #3
 8005c42:	e03a      	b.n	8005cba <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	68db      	ldr	r3, [r3, #12]
 8005c4a:	f003 0304 	and.w	r3, r3, #4
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d023      	beq.n	8005c9a <UART_WaitOnFlagUntilTimeout+0x8a>
 8005c52:	68bb      	ldr	r3, [r7, #8]
 8005c54:	2b80      	cmp	r3, #128	@ 0x80
 8005c56:	d020      	beq.n	8005c9a <UART_WaitOnFlagUntilTimeout+0x8a>
 8005c58:	68bb      	ldr	r3, [r7, #8]
 8005c5a:	2b40      	cmp	r3, #64	@ 0x40
 8005c5c:	d01d      	beq.n	8005c9a <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	f003 0308 	and.w	r3, r3, #8
 8005c68:	2b08      	cmp	r3, #8
 8005c6a:	d116      	bne.n	8005c9a <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005c6c:	2300      	movs	r3, #0
 8005c6e:	617b      	str	r3, [r7, #20]
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	617b      	str	r3, [r7, #20]
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	685b      	ldr	r3, [r3, #4]
 8005c7e:	617b      	str	r3, [r7, #20]
 8005c80:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005c82:	68f8      	ldr	r0, [r7, #12]
 8005c84:	f000 f857 	bl	8005d36 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	2208      	movs	r2, #8
 8005c8c:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	2200      	movs	r2, #0
 8005c92:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005c96:	2301      	movs	r3, #1
 8005c98:	e00f      	b.n	8005cba <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	681a      	ldr	r2, [r3, #0]
 8005ca0:	68bb      	ldr	r3, [r7, #8]
 8005ca2:	4013      	ands	r3, r2
 8005ca4:	68ba      	ldr	r2, [r7, #8]
 8005ca6:	429a      	cmp	r2, r3
 8005ca8:	bf0c      	ite	eq
 8005caa:	2301      	moveq	r3, #1
 8005cac:	2300      	movne	r3, #0
 8005cae:	b2db      	uxtb	r3, r3
 8005cb0:	461a      	mov	r2, r3
 8005cb2:	79fb      	ldrb	r3, [r7, #7]
 8005cb4:	429a      	cmp	r2, r3
 8005cb6:	d0b4      	beq.n	8005c22 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005cb8:	2300      	movs	r3, #0
}
 8005cba:	4618      	mov	r0, r3
 8005cbc:	3718      	adds	r7, #24
 8005cbe:	46bd      	mov	sp, r7
 8005cc0:	bd80      	pop	{r7, pc}

08005cc2 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005cc2:	b480      	push	{r7}
 8005cc4:	b085      	sub	sp, #20
 8005cc6:	af00      	add	r7, sp, #0
 8005cc8:	60f8      	str	r0, [r7, #12]
 8005cca:	60b9      	str	r1, [r7, #8]
 8005ccc:	4613      	mov	r3, r2
 8005cce:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	68ba      	ldr	r2, [r7, #8]
 8005cd4:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	88fa      	ldrh	r2, [r7, #6]
 8005cda:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	88fa      	ldrh	r2, [r7, #6]
 8005ce0:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	2200      	movs	r2, #0
 8005ce6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	2222      	movs	r2, #34	@ 0x22
 8005cec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	691b      	ldr	r3, [r3, #16]
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d007      	beq.n	8005d08 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	68da      	ldr	r2, [r3, #12]
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005d06:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	695a      	ldr	r2, [r3, #20]
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	f042 0201 	orr.w	r2, r2, #1
 8005d16:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	68da      	ldr	r2, [r3, #12]
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	f042 0220 	orr.w	r2, r2, #32
 8005d26:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005d28:	2300      	movs	r3, #0
}
 8005d2a:	4618      	mov	r0, r3
 8005d2c:	3714      	adds	r7, #20
 8005d2e:	46bd      	mov	sp, r7
 8005d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d34:	4770      	bx	lr

08005d36 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005d36:	b480      	push	{r7}
 8005d38:	b095      	sub	sp, #84	@ 0x54
 8005d3a:	af00      	add	r7, sp, #0
 8005d3c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	330c      	adds	r3, #12
 8005d44:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d46:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d48:	e853 3f00 	ldrex	r3, [r3]
 8005d4c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005d4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d50:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005d54:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	330c      	adds	r3, #12
 8005d5c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005d5e:	643a      	str	r2, [r7, #64]	@ 0x40
 8005d60:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d62:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005d64:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005d66:	e841 2300 	strex	r3, r2, [r1]
 8005d6a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005d6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d1e5      	bne.n	8005d3e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	3314      	adds	r3, #20
 8005d78:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d7a:	6a3b      	ldr	r3, [r7, #32]
 8005d7c:	e853 3f00 	ldrex	r3, [r3]
 8005d80:	61fb      	str	r3, [r7, #28]
   return(result);
 8005d82:	69fb      	ldr	r3, [r7, #28]
 8005d84:	f023 0301 	bic.w	r3, r3, #1
 8005d88:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	3314      	adds	r3, #20
 8005d90:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005d92:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005d94:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d96:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005d98:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005d9a:	e841 2300 	strex	r3, r2, [r1]
 8005d9e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005da0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d1e5      	bne.n	8005d72 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005daa:	2b01      	cmp	r3, #1
 8005dac:	d119      	bne.n	8005de2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	330c      	adds	r3, #12
 8005db4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	e853 3f00 	ldrex	r3, [r3]
 8005dbc:	60bb      	str	r3, [r7, #8]
   return(result);
 8005dbe:	68bb      	ldr	r3, [r7, #8]
 8005dc0:	f023 0310 	bic.w	r3, r3, #16
 8005dc4:	647b      	str	r3, [r7, #68]	@ 0x44
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	330c      	adds	r3, #12
 8005dcc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005dce:	61ba      	str	r2, [r7, #24]
 8005dd0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dd2:	6979      	ldr	r1, [r7, #20]
 8005dd4:	69ba      	ldr	r2, [r7, #24]
 8005dd6:	e841 2300 	strex	r3, r2, [r1]
 8005dda:	613b      	str	r3, [r7, #16]
   return(result);
 8005ddc:	693b      	ldr	r3, [r7, #16]
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d1e5      	bne.n	8005dae <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	2220      	movs	r2, #32
 8005de6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	2200      	movs	r2, #0
 8005dee:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005df0:	bf00      	nop
 8005df2:	3754      	adds	r7, #84	@ 0x54
 8005df4:	46bd      	mov	sp, r7
 8005df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfa:	4770      	bx	lr

08005dfc <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005dfc:	b580      	push	{r7, lr}
 8005dfe:	b084      	sub	sp, #16
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e08:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	2200      	movs	r2, #0
 8005e0e:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	2200      	movs	r2, #0
 8005e14:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005e16:	68f8      	ldr	r0, [r7, #12]
 8005e18:	f7ff fee4 	bl	8005be4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005e1c:	bf00      	nop
 8005e1e:	3710      	adds	r7, #16
 8005e20:	46bd      	mov	sp, r7
 8005e22:	bd80      	pop	{r7, pc}

08005e24 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005e24:	b480      	push	{r7}
 8005e26:	b085      	sub	sp, #20
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005e32:	b2db      	uxtb	r3, r3
 8005e34:	2b21      	cmp	r3, #33	@ 0x21
 8005e36:	d13e      	bne.n	8005eb6 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	689b      	ldr	r3, [r3, #8]
 8005e3c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005e40:	d114      	bne.n	8005e6c <UART_Transmit_IT+0x48>
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	691b      	ldr	r3, [r3, #16]
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d110      	bne.n	8005e6c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	6a1b      	ldr	r3, [r3, #32]
 8005e4e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	881b      	ldrh	r3, [r3, #0]
 8005e54:	461a      	mov	r2, r3
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005e5e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	6a1b      	ldr	r3, [r3, #32]
 8005e64:	1c9a      	adds	r2, r3, #2
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	621a      	str	r2, [r3, #32]
 8005e6a:	e008      	b.n	8005e7e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	6a1b      	ldr	r3, [r3, #32]
 8005e70:	1c59      	adds	r1, r3, #1
 8005e72:	687a      	ldr	r2, [r7, #4]
 8005e74:	6211      	str	r1, [r2, #32]
 8005e76:	781a      	ldrb	r2, [r3, #0]
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005e82:	b29b      	uxth	r3, r3
 8005e84:	3b01      	subs	r3, #1
 8005e86:	b29b      	uxth	r3, r3
 8005e88:	687a      	ldr	r2, [r7, #4]
 8005e8a:	4619      	mov	r1, r3
 8005e8c:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d10f      	bne.n	8005eb2 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	68da      	ldr	r2, [r3, #12]
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005ea0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	68da      	ldr	r2, [r3, #12]
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005eb0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005eb2:	2300      	movs	r3, #0
 8005eb4:	e000      	b.n	8005eb8 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005eb6:	2302      	movs	r3, #2
  }
}
 8005eb8:	4618      	mov	r0, r3
 8005eba:	3714      	adds	r7, #20
 8005ebc:	46bd      	mov	sp, r7
 8005ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec2:	4770      	bx	lr

08005ec4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005ec4:	b580      	push	{r7, lr}
 8005ec6:	b082      	sub	sp, #8
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	68da      	ldr	r2, [r3, #12]
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005eda:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	2220      	movs	r2, #32
 8005ee0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005ee4:	6878      	ldr	r0, [r7, #4]
 8005ee6:	f7ff fe73 	bl	8005bd0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005eea:	2300      	movs	r3, #0
}
 8005eec:	4618      	mov	r0, r3
 8005eee:	3708      	adds	r7, #8
 8005ef0:	46bd      	mov	sp, r7
 8005ef2:	bd80      	pop	{r7, pc}

08005ef4 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005ef4:	b580      	push	{r7, lr}
 8005ef6:	b08c      	sub	sp, #48	@ 0x30
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005f02:	b2db      	uxtb	r3, r3
 8005f04:	2b22      	cmp	r3, #34	@ 0x22
 8005f06:	f040 80ae 	bne.w	8006066 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	689b      	ldr	r3, [r3, #8]
 8005f0e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005f12:	d117      	bne.n	8005f44 <UART_Receive_IT+0x50>
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	691b      	ldr	r3, [r3, #16]
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d113      	bne.n	8005f44 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005f1c:	2300      	movs	r3, #0
 8005f1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f24:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	685b      	ldr	r3, [r3, #4]
 8005f2c:	b29b      	uxth	r3, r3
 8005f2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f32:	b29a      	uxth	r2, r3
 8005f34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f36:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f3c:	1c9a      	adds	r2, r3, #2
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	629a      	str	r2, [r3, #40]	@ 0x28
 8005f42:	e026      	b.n	8005f92 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f48:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8005f4a:	2300      	movs	r3, #0
 8005f4c:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	689b      	ldr	r3, [r3, #8]
 8005f52:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005f56:	d007      	beq.n	8005f68 <UART_Receive_IT+0x74>
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	689b      	ldr	r3, [r3, #8]
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d10a      	bne.n	8005f76 <UART_Receive_IT+0x82>
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	691b      	ldr	r3, [r3, #16]
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d106      	bne.n	8005f76 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	685b      	ldr	r3, [r3, #4]
 8005f6e:	b2da      	uxtb	r2, r3
 8005f70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f72:	701a      	strb	r2, [r3, #0]
 8005f74:	e008      	b.n	8005f88 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	685b      	ldr	r3, [r3, #4]
 8005f7c:	b2db      	uxtb	r3, r3
 8005f7e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005f82:	b2da      	uxtb	r2, r3
 8005f84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f86:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f8c:	1c5a      	adds	r2, r3, #1
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005f96:	b29b      	uxth	r3, r3
 8005f98:	3b01      	subs	r3, #1
 8005f9a:	b29b      	uxth	r3, r3
 8005f9c:	687a      	ldr	r2, [r7, #4]
 8005f9e:	4619      	mov	r1, r3
 8005fa0:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d15d      	bne.n	8006062 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	68da      	ldr	r2, [r3, #12]
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	f022 0220 	bic.w	r2, r2, #32
 8005fb4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	68da      	ldr	r2, [r3, #12]
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005fc4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	695a      	ldr	r2, [r3, #20]
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	f022 0201 	bic.w	r2, r2, #1
 8005fd4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	2220      	movs	r2, #32
 8005fda:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	2200      	movs	r2, #0
 8005fe2:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005fe8:	2b01      	cmp	r3, #1
 8005fea:	d135      	bne.n	8006058 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	2200      	movs	r2, #0
 8005ff0:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	330c      	adds	r3, #12
 8005ff8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ffa:	697b      	ldr	r3, [r7, #20]
 8005ffc:	e853 3f00 	ldrex	r3, [r3]
 8006000:	613b      	str	r3, [r7, #16]
   return(result);
 8006002:	693b      	ldr	r3, [r7, #16]
 8006004:	f023 0310 	bic.w	r3, r3, #16
 8006008:	627b      	str	r3, [r7, #36]	@ 0x24
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	330c      	adds	r3, #12
 8006010:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006012:	623a      	str	r2, [r7, #32]
 8006014:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006016:	69f9      	ldr	r1, [r7, #28]
 8006018:	6a3a      	ldr	r2, [r7, #32]
 800601a:	e841 2300 	strex	r3, r2, [r1]
 800601e:	61bb      	str	r3, [r7, #24]
   return(result);
 8006020:	69bb      	ldr	r3, [r7, #24]
 8006022:	2b00      	cmp	r3, #0
 8006024:	d1e5      	bne.n	8005ff2 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	f003 0310 	and.w	r3, r3, #16
 8006030:	2b10      	cmp	r3, #16
 8006032:	d10a      	bne.n	800604a <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006034:	2300      	movs	r3, #0
 8006036:	60fb      	str	r3, [r7, #12]
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	60fb      	str	r3, [r7, #12]
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	685b      	ldr	r3, [r3, #4]
 8006046:	60fb      	str	r3, [r7, #12]
 8006048:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800604e:	4619      	mov	r1, r3
 8006050:	6878      	ldr	r0, [r7, #4]
 8006052:	f7ff fdd1 	bl	8005bf8 <HAL_UARTEx_RxEventCallback>
 8006056:	e002      	b.n	800605e <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006058:	6878      	ldr	r0, [r7, #4]
 800605a:	f7fa fd81 	bl	8000b60 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800605e:	2300      	movs	r3, #0
 8006060:	e002      	b.n	8006068 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8006062:	2300      	movs	r3, #0
 8006064:	e000      	b.n	8006068 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8006066:	2302      	movs	r3, #2
  }
}
 8006068:	4618      	mov	r0, r3
 800606a:	3730      	adds	r7, #48	@ 0x30
 800606c:	46bd      	mov	sp, r7
 800606e:	bd80      	pop	{r7, pc}

08006070 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006070:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006074:	b0c0      	sub	sp, #256	@ 0x100
 8006076:	af00      	add	r7, sp, #0
 8006078:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800607c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	691b      	ldr	r3, [r3, #16]
 8006084:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8006088:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800608c:	68d9      	ldr	r1, [r3, #12]
 800608e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006092:	681a      	ldr	r2, [r3, #0]
 8006094:	ea40 0301 	orr.w	r3, r0, r1
 8006098:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800609a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800609e:	689a      	ldr	r2, [r3, #8]
 80060a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060a4:	691b      	ldr	r3, [r3, #16]
 80060a6:	431a      	orrs	r2, r3
 80060a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060ac:	695b      	ldr	r3, [r3, #20]
 80060ae:	431a      	orrs	r2, r3
 80060b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060b4:	69db      	ldr	r3, [r3, #28]
 80060b6:	4313      	orrs	r3, r2
 80060b8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80060bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	68db      	ldr	r3, [r3, #12]
 80060c4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80060c8:	f021 010c 	bic.w	r1, r1, #12
 80060cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060d0:	681a      	ldr	r2, [r3, #0]
 80060d2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80060d6:	430b      	orrs	r3, r1
 80060d8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80060da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	695b      	ldr	r3, [r3, #20]
 80060e2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80060e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060ea:	6999      	ldr	r1, [r3, #24]
 80060ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060f0:	681a      	ldr	r2, [r3, #0]
 80060f2:	ea40 0301 	orr.w	r3, r0, r1
 80060f6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80060f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060fc:	681a      	ldr	r2, [r3, #0]
 80060fe:	4b8f      	ldr	r3, [pc, #572]	@ (800633c <UART_SetConfig+0x2cc>)
 8006100:	429a      	cmp	r2, r3
 8006102:	d005      	beq.n	8006110 <UART_SetConfig+0xa0>
 8006104:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006108:	681a      	ldr	r2, [r3, #0]
 800610a:	4b8d      	ldr	r3, [pc, #564]	@ (8006340 <UART_SetConfig+0x2d0>)
 800610c:	429a      	cmp	r2, r3
 800610e:	d104      	bne.n	800611a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006110:	f7fe fbc4 	bl	800489c <HAL_RCC_GetPCLK2Freq>
 8006114:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8006118:	e003      	b.n	8006122 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800611a:	f7fe fbab 	bl	8004874 <HAL_RCC_GetPCLK1Freq>
 800611e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006122:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006126:	69db      	ldr	r3, [r3, #28]
 8006128:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800612c:	f040 810c 	bne.w	8006348 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006130:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006134:	2200      	movs	r2, #0
 8006136:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800613a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800613e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8006142:	4622      	mov	r2, r4
 8006144:	462b      	mov	r3, r5
 8006146:	1891      	adds	r1, r2, r2
 8006148:	65b9      	str	r1, [r7, #88]	@ 0x58
 800614a:	415b      	adcs	r3, r3
 800614c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800614e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8006152:	4621      	mov	r1, r4
 8006154:	eb12 0801 	adds.w	r8, r2, r1
 8006158:	4629      	mov	r1, r5
 800615a:	eb43 0901 	adc.w	r9, r3, r1
 800615e:	f04f 0200 	mov.w	r2, #0
 8006162:	f04f 0300 	mov.w	r3, #0
 8006166:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800616a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800616e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006172:	4690      	mov	r8, r2
 8006174:	4699      	mov	r9, r3
 8006176:	4623      	mov	r3, r4
 8006178:	eb18 0303 	adds.w	r3, r8, r3
 800617c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006180:	462b      	mov	r3, r5
 8006182:	eb49 0303 	adc.w	r3, r9, r3
 8006186:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800618a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800618e:	685b      	ldr	r3, [r3, #4]
 8006190:	2200      	movs	r2, #0
 8006192:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006196:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800619a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800619e:	460b      	mov	r3, r1
 80061a0:	18db      	adds	r3, r3, r3
 80061a2:	653b      	str	r3, [r7, #80]	@ 0x50
 80061a4:	4613      	mov	r3, r2
 80061a6:	eb42 0303 	adc.w	r3, r2, r3
 80061aa:	657b      	str	r3, [r7, #84]	@ 0x54
 80061ac:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80061b0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80061b4:	f7fa f864 	bl	8000280 <__aeabi_uldivmod>
 80061b8:	4602      	mov	r2, r0
 80061ba:	460b      	mov	r3, r1
 80061bc:	4b61      	ldr	r3, [pc, #388]	@ (8006344 <UART_SetConfig+0x2d4>)
 80061be:	fba3 2302 	umull	r2, r3, r3, r2
 80061c2:	095b      	lsrs	r3, r3, #5
 80061c4:	011c      	lsls	r4, r3, #4
 80061c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80061ca:	2200      	movs	r2, #0
 80061cc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80061d0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80061d4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80061d8:	4642      	mov	r2, r8
 80061da:	464b      	mov	r3, r9
 80061dc:	1891      	adds	r1, r2, r2
 80061de:	64b9      	str	r1, [r7, #72]	@ 0x48
 80061e0:	415b      	adcs	r3, r3
 80061e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80061e4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80061e8:	4641      	mov	r1, r8
 80061ea:	eb12 0a01 	adds.w	sl, r2, r1
 80061ee:	4649      	mov	r1, r9
 80061f0:	eb43 0b01 	adc.w	fp, r3, r1
 80061f4:	f04f 0200 	mov.w	r2, #0
 80061f8:	f04f 0300 	mov.w	r3, #0
 80061fc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006200:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006204:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006208:	4692      	mov	sl, r2
 800620a:	469b      	mov	fp, r3
 800620c:	4643      	mov	r3, r8
 800620e:	eb1a 0303 	adds.w	r3, sl, r3
 8006212:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006216:	464b      	mov	r3, r9
 8006218:	eb4b 0303 	adc.w	r3, fp, r3
 800621c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006220:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006224:	685b      	ldr	r3, [r3, #4]
 8006226:	2200      	movs	r2, #0
 8006228:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800622c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8006230:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006234:	460b      	mov	r3, r1
 8006236:	18db      	adds	r3, r3, r3
 8006238:	643b      	str	r3, [r7, #64]	@ 0x40
 800623a:	4613      	mov	r3, r2
 800623c:	eb42 0303 	adc.w	r3, r2, r3
 8006240:	647b      	str	r3, [r7, #68]	@ 0x44
 8006242:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8006246:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800624a:	f7fa f819 	bl	8000280 <__aeabi_uldivmod>
 800624e:	4602      	mov	r2, r0
 8006250:	460b      	mov	r3, r1
 8006252:	4611      	mov	r1, r2
 8006254:	4b3b      	ldr	r3, [pc, #236]	@ (8006344 <UART_SetConfig+0x2d4>)
 8006256:	fba3 2301 	umull	r2, r3, r3, r1
 800625a:	095b      	lsrs	r3, r3, #5
 800625c:	2264      	movs	r2, #100	@ 0x64
 800625e:	fb02 f303 	mul.w	r3, r2, r3
 8006262:	1acb      	subs	r3, r1, r3
 8006264:	00db      	lsls	r3, r3, #3
 8006266:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800626a:	4b36      	ldr	r3, [pc, #216]	@ (8006344 <UART_SetConfig+0x2d4>)
 800626c:	fba3 2302 	umull	r2, r3, r3, r2
 8006270:	095b      	lsrs	r3, r3, #5
 8006272:	005b      	lsls	r3, r3, #1
 8006274:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8006278:	441c      	add	r4, r3
 800627a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800627e:	2200      	movs	r2, #0
 8006280:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006284:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8006288:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800628c:	4642      	mov	r2, r8
 800628e:	464b      	mov	r3, r9
 8006290:	1891      	adds	r1, r2, r2
 8006292:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006294:	415b      	adcs	r3, r3
 8006296:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006298:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800629c:	4641      	mov	r1, r8
 800629e:	1851      	adds	r1, r2, r1
 80062a0:	6339      	str	r1, [r7, #48]	@ 0x30
 80062a2:	4649      	mov	r1, r9
 80062a4:	414b      	adcs	r3, r1
 80062a6:	637b      	str	r3, [r7, #52]	@ 0x34
 80062a8:	f04f 0200 	mov.w	r2, #0
 80062ac:	f04f 0300 	mov.w	r3, #0
 80062b0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80062b4:	4659      	mov	r1, fp
 80062b6:	00cb      	lsls	r3, r1, #3
 80062b8:	4651      	mov	r1, sl
 80062ba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80062be:	4651      	mov	r1, sl
 80062c0:	00ca      	lsls	r2, r1, #3
 80062c2:	4610      	mov	r0, r2
 80062c4:	4619      	mov	r1, r3
 80062c6:	4603      	mov	r3, r0
 80062c8:	4642      	mov	r2, r8
 80062ca:	189b      	adds	r3, r3, r2
 80062cc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80062d0:	464b      	mov	r3, r9
 80062d2:	460a      	mov	r2, r1
 80062d4:	eb42 0303 	adc.w	r3, r2, r3
 80062d8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80062dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80062e0:	685b      	ldr	r3, [r3, #4]
 80062e2:	2200      	movs	r2, #0
 80062e4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80062e8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80062ec:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80062f0:	460b      	mov	r3, r1
 80062f2:	18db      	adds	r3, r3, r3
 80062f4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80062f6:	4613      	mov	r3, r2
 80062f8:	eb42 0303 	adc.w	r3, r2, r3
 80062fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80062fe:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006302:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8006306:	f7f9 ffbb 	bl	8000280 <__aeabi_uldivmod>
 800630a:	4602      	mov	r2, r0
 800630c:	460b      	mov	r3, r1
 800630e:	4b0d      	ldr	r3, [pc, #52]	@ (8006344 <UART_SetConfig+0x2d4>)
 8006310:	fba3 1302 	umull	r1, r3, r3, r2
 8006314:	095b      	lsrs	r3, r3, #5
 8006316:	2164      	movs	r1, #100	@ 0x64
 8006318:	fb01 f303 	mul.w	r3, r1, r3
 800631c:	1ad3      	subs	r3, r2, r3
 800631e:	00db      	lsls	r3, r3, #3
 8006320:	3332      	adds	r3, #50	@ 0x32
 8006322:	4a08      	ldr	r2, [pc, #32]	@ (8006344 <UART_SetConfig+0x2d4>)
 8006324:	fba2 2303 	umull	r2, r3, r2, r3
 8006328:	095b      	lsrs	r3, r3, #5
 800632a:	f003 0207 	and.w	r2, r3, #7
 800632e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	4422      	add	r2, r4
 8006336:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006338:	e106      	b.n	8006548 <UART_SetConfig+0x4d8>
 800633a:	bf00      	nop
 800633c:	40011000 	.word	0x40011000
 8006340:	40011400 	.word	0x40011400
 8006344:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006348:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800634c:	2200      	movs	r2, #0
 800634e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006352:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8006356:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800635a:	4642      	mov	r2, r8
 800635c:	464b      	mov	r3, r9
 800635e:	1891      	adds	r1, r2, r2
 8006360:	6239      	str	r1, [r7, #32]
 8006362:	415b      	adcs	r3, r3
 8006364:	627b      	str	r3, [r7, #36]	@ 0x24
 8006366:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800636a:	4641      	mov	r1, r8
 800636c:	1854      	adds	r4, r2, r1
 800636e:	4649      	mov	r1, r9
 8006370:	eb43 0501 	adc.w	r5, r3, r1
 8006374:	f04f 0200 	mov.w	r2, #0
 8006378:	f04f 0300 	mov.w	r3, #0
 800637c:	00eb      	lsls	r3, r5, #3
 800637e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006382:	00e2      	lsls	r2, r4, #3
 8006384:	4614      	mov	r4, r2
 8006386:	461d      	mov	r5, r3
 8006388:	4643      	mov	r3, r8
 800638a:	18e3      	adds	r3, r4, r3
 800638c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006390:	464b      	mov	r3, r9
 8006392:	eb45 0303 	adc.w	r3, r5, r3
 8006396:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800639a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800639e:	685b      	ldr	r3, [r3, #4]
 80063a0:	2200      	movs	r2, #0
 80063a2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80063a6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80063aa:	f04f 0200 	mov.w	r2, #0
 80063ae:	f04f 0300 	mov.w	r3, #0
 80063b2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80063b6:	4629      	mov	r1, r5
 80063b8:	008b      	lsls	r3, r1, #2
 80063ba:	4621      	mov	r1, r4
 80063bc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80063c0:	4621      	mov	r1, r4
 80063c2:	008a      	lsls	r2, r1, #2
 80063c4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80063c8:	f7f9 ff5a 	bl	8000280 <__aeabi_uldivmod>
 80063cc:	4602      	mov	r2, r0
 80063ce:	460b      	mov	r3, r1
 80063d0:	4b60      	ldr	r3, [pc, #384]	@ (8006554 <UART_SetConfig+0x4e4>)
 80063d2:	fba3 2302 	umull	r2, r3, r3, r2
 80063d6:	095b      	lsrs	r3, r3, #5
 80063d8:	011c      	lsls	r4, r3, #4
 80063da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80063de:	2200      	movs	r2, #0
 80063e0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80063e4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80063e8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80063ec:	4642      	mov	r2, r8
 80063ee:	464b      	mov	r3, r9
 80063f0:	1891      	adds	r1, r2, r2
 80063f2:	61b9      	str	r1, [r7, #24]
 80063f4:	415b      	adcs	r3, r3
 80063f6:	61fb      	str	r3, [r7, #28]
 80063f8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80063fc:	4641      	mov	r1, r8
 80063fe:	1851      	adds	r1, r2, r1
 8006400:	6139      	str	r1, [r7, #16]
 8006402:	4649      	mov	r1, r9
 8006404:	414b      	adcs	r3, r1
 8006406:	617b      	str	r3, [r7, #20]
 8006408:	f04f 0200 	mov.w	r2, #0
 800640c:	f04f 0300 	mov.w	r3, #0
 8006410:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006414:	4659      	mov	r1, fp
 8006416:	00cb      	lsls	r3, r1, #3
 8006418:	4651      	mov	r1, sl
 800641a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800641e:	4651      	mov	r1, sl
 8006420:	00ca      	lsls	r2, r1, #3
 8006422:	4610      	mov	r0, r2
 8006424:	4619      	mov	r1, r3
 8006426:	4603      	mov	r3, r0
 8006428:	4642      	mov	r2, r8
 800642a:	189b      	adds	r3, r3, r2
 800642c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006430:	464b      	mov	r3, r9
 8006432:	460a      	mov	r2, r1
 8006434:	eb42 0303 	adc.w	r3, r2, r3
 8006438:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800643c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006440:	685b      	ldr	r3, [r3, #4]
 8006442:	2200      	movs	r2, #0
 8006444:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006446:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8006448:	f04f 0200 	mov.w	r2, #0
 800644c:	f04f 0300 	mov.w	r3, #0
 8006450:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8006454:	4649      	mov	r1, r9
 8006456:	008b      	lsls	r3, r1, #2
 8006458:	4641      	mov	r1, r8
 800645a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800645e:	4641      	mov	r1, r8
 8006460:	008a      	lsls	r2, r1, #2
 8006462:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8006466:	f7f9 ff0b 	bl	8000280 <__aeabi_uldivmod>
 800646a:	4602      	mov	r2, r0
 800646c:	460b      	mov	r3, r1
 800646e:	4611      	mov	r1, r2
 8006470:	4b38      	ldr	r3, [pc, #224]	@ (8006554 <UART_SetConfig+0x4e4>)
 8006472:	fba3 2301 	umull	r2, r3, r3, r1
 8006476:	095b      	lsrs	r3, r3, #5
 8006478:	2264      	movs	r2, #100	@ 0x64
 800647a:	fb02 f303 	mul.w	r3, r2, r3
 800647e:	1acb      	subs	r3, r1, r3
 8006480:	011b      	lsls	r3, r3, #4
 8006482:	3332      	adds	r3, #50	@ 0x32
 8006484:	4a33      	ldr	r2, [pc, #204]	@ (8006554 <UART_SetConfig+0x4e4>)
 8006486:	fba2 2303 	umull	r2, r3, r2, r3
 800648a:	095b      	lsrs	r3, r3, #5
 800648c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006490:	441c      	add	r4, r3
 8006492:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006496:	2200      	movs	r2, #0
 8006498:	673b      	str	r3, [r7, #112]	@ 0x70
 800649a:	677a      	str	r2, [r7, #116]	@ 0x74
 800649c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80064a0:	4642      	mov	r2, r8
 80064a2:	464b      	mov	r3, r9
 80064a4:	1891      	adds	r1, r2, r2
 80064a6:	60b9      	str	r1, [r7, #8]
 80064a8:	415b      	adcs	r3, r3
 80064aa:	60fb      	str	r3, [r7, #12]
 80064ac:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80064b0:	4641      	mov	r1, r8
 80064b2:	1851      	adds	r1, r2, r1
 80064b4:	6039      	str	r1, [r7, #0]
 80064b6:	4649      	mov	r1, r9
 80064b8:	414b      	adcs	r3, r1
 80064ba:	607b      	str	r3, [r7, #4]
 80064bc:	f04f 0200 	mov.w	r2, #0
 80064c0:	f04f 0300 	mov.w	r3, #0
 80064c4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80064c8:	4659      	mov	r1, fp
 80064ca:	00cb      	lsls	r3, r1, #3
 80064cc:	4651      	mov	r1, sl
 80064ce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80064d2:	4651      	mov	r1, sl
 80064d4:	00ca      	lsls	r2, r1, #3
 80064d6:	4610      	mov	r0, r2
 80064d8:	4619      	mov	r1, r3
 80064da:	4603      	mov	r3, r0
 80064dc:	4642      	mov	r2, r8
 80064de:	189b      	adds	r3, r3, r2
 80064e0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80064e2:	464b      	mov	r3, r9
 80064e4:	460a      	mov	r2, r1
 80064e6:	eb42 0303 	adc.w	r3, r2, r3
 80064ea:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80064ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80064f0:	685b      	ldr	r3, [r3, #4]
 80064f2:	2200      	movs	r2, #0
 80064f4:	663b      	str	r3, [r7, #96]	@ 0x60
 80064f6:	667a      	str	r2, [r7, #100]	@ 0x64
 80064f8:	f04f 0200 	mov.w	r2, #0
 80064fc:	f04f 0300 	mov.w	r3, #0
 8006500:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8006504:	4649      	mov	r1, r9
 8006506:	008b      	lsls	r3, r1, #2
 8006508:	4641      	mov	r1, r8
 800650a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800650e:	4641      	mov	r1, r8
 8006510:	008a      	lsls	r2, r1, #2
 8006512:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8006516:	f7f9 feb3 	bl	8000280 <__aeabi_uldivmod>
 800651a:	4602      	mov	r2, r0
 800651c:	460b      	mov	r3, r1
 800651e:	4b0d      	ldr	r3, [pc, #52]	@ (8006554 <UART_SetConfig+0x4e4>)
 8006520:	fba3 1302 	umull	r1, r3, r3, r2
 8006524:	095b      	lsrs	r3, r3, #5
 8006526:	2164      	movs	r1, #100	@ 0x64
 8006528:	fb01 f303 	mul.w	r3, r1, r3
 800652c:	1ad3      	subs	r3, r2, r3
 800652e:	011b      	lsls	r3, r3, #4
 8006530:	3332      	adds	r3, #50	@ 0x32
 8006532:	4a08      	ldr	r2, [pc, #32]	@ (8006554 <UART_SetConfig+0x4e4>)
 8006534:	fba2 2303 	umull	r2, r3, r2, r3
 8006538:	095b      	lsrs	r3, r3, #5
 800653a:	f003 020f 	and.w	r2, r3, #15
 800653e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	4422      	add	r2, r4
 8006546:	609a      	str	r2, [r3, #8]
}
 8006548:	bf00      	nop
 800654a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800654e:	46bd      	mov	sp, r7
 8006550:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006554:	51eb851f 	.word	0x51eb851f

08006558 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006558:	b084      	sub	sp, #16
 800655a:	b580      	push	{r7, lr}
 800655c:	b084      	sub	sp, #16
 800655e:	af00      	add	r7, sp, #0
 8006560:	6078      	str	r0, [r7, #4]
 8006562:	f107 001c 	add.w	r0, r7, #28
 8006566:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800656a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800656e:	2b01      	cmp	r3, #1
 8006570:	d123      	bne.n	80065ba <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006576:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	68db      	ldr	r3, [r3, #12]
 8006582:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8006586:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800658a:	687a      	ldr	r2, [r7, #4]
 800658c:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	68db      	ldr	r3, [r3, #12]
 8006592:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800659a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800659e:	2b01      	cmp	r3, #1
 80065a0:	d105      	bne.n	80065ae <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	68db      	ldr	r3, [r3, #12]
 80065a6:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80065ae:	6878      	ldr	r0, [r7, #4]
 80065b0:	f001 fae8 	bl	8007b84 <USB_CoreReset>
 80065b4:	4603      	mov	r3, r0
 80065b6:	73fb      	strb	r3, [r7, #15]
 80065b8:	e01b      	b.n	80065f2 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	68db      	ldr	r3, [r3, #12]
 80065be:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80065c6:	6878      	ldr	r0, [r7, #4]
 80065c8:	f001 fadc 	bl	8007b84 <USB_CoreReset>
 80065cc:	4603      	mov	r3, r0
 80065ce:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80065d0:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d106      	bne.n	80065e6 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80065dc:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	639a      	str	r2, [r3, #56]	@ 0x38
 80065e4:	e005      	b.n	80065f2 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80065ea:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80065f2:	7fbb      	ldrb	r3, [r7, #30]
 80065f4:	2b01      	cmp	r3, #1
 80065f6:	d10b      	bne.n	8006610 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	689b      	ldr	r3, [r3, #8]
 80065fc:	f043 0206 	orr.w	r2, r3, #6
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	689b      	ldr	r3, [r3, #8]
 8006608:	f043 0220 	orr.w	r2, r3, #32
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006610:	7bfb      	ldrb	r3, [r7, #15]
}
 8006612:	4618      	mov	r0, r3
 8006614:	3710      	adds	r7, #16
 8006616:	46bd      	mov	sp, r7
 8006618:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800661c:	b004      	add	sp, #16
 800661e:	4770      	bx	lr

08006620 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8006620:	b480      	push	{r7}
 8006622:	b087      	sub	sp, #28
 8006624:	af00      	add	r7, sp, #0
 8006626:	60f8      	str	r0, [r7, #12]
 8006628:	60b9      	str	r1, [r7, #8]
 800662a:	4613      	mov	r3, r2
 800662c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800662e:	79fb      	ldrb	r3, [r7, #7]
 8006630:	2b02      	cmp	r3, #2
 8006632:	d165      	bne.n	8006700 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8006634:	68bb      	ldr	r3, [r7, #8]
 8006636:	4a41      	ldr	r2, [pc, #260]	@ (800673c <USB_SetTurnaroundTime+0x11c>)
 8006638:	4293      	cmp	r3, r2
 800663a:	d906      	bls.n	800664a <USB_SetTurnaroundTime+0x2a>
 800663c:	68bb      	ldr	r3, [r7, #8]
 800663e:	4a40      	ldr	r2, [pc, #256]	@ (8006740 <USB_SetTurnaroundTime+0x120>)
 8006640:	4293      	cmp	r3, r2
 8006642:	d202      	bcs.n	800664a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8006644:	230f      	movs	r3, #15
 8006646:	617b      	str	r3, [r7, #20]
 8006648:	e062      	b.n	8006710 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800664a:	68bb      	ldr	r3, [r7, #8]
 800664c:	4a3c      	ldr	r2, [pc, #240]	@ (8006740 <USB_SetTurnaroundTime+0x120>)
 800664e:	4293      	cmp	r3, r2
 8006650:	d306      	bcc.n	8006660 <USB_SetTurnaroundTime+0x40>
 8006652:	68bb      	ldr	r3, [r7, #8]
 8006654:	4a3b      	ldr	r2, [pc, #236]	@ (8006744 <USB_SetTurnaroundTime+0x124>)
 8006656:	4293      	cmp	r3, r2
 8006658:	d202      	bcs.n	8006660 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800665a:	230e      	movs	r3, #14
 800665c:	617b      	str	r3, [r7, #20]
 800665e:	e057      	b.n	8006710 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8006660:	68bb      	ldr	r3, [r7, #8]
 8006662:	4a38      	ldr	r2, [pc, #224]	@ (8006744 <USB_SetTurnaroundTime+0x124>)
 8006664:	4293      	cmp	r3, r2
 8006666:	d306      	bcc.n	8006676 <USB_SetTurnaroundTime+0x56>
 8006668:	68bb      	ldr	r3, [r7, #8]
 800666a:	4a37      	ldr	r2, [pc, #220]	@ (8006748 <USB_SetTurnaroundTime+0x128>)
 800666c:	4293      	cmp	r3, r2
 800666e:	d202      	bcs.n	8006676 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8006670:	230d      	movs	r3, #13
 8006672:	617b      	str	r3, [r7, #20]
 8006674:	e04c      	b.n	8006710 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8006676:	68bb      	ldr	r3, [r7, #8]
 8006678:	4a33      	ldr	r2, [pc, #204]	@ (8006748 <USB_SetTurnaroundTime+0x128>)
 800667a:	4293      	cmp	r3, r2
 800667c:	d306      	bcc.n	800668c <USB_SetTurnaroundTime+0x6c>
 800667e:	68bb      	ldr	r3, [r7, #8]
 8006680:	4a32      	ldr	r2, [pc, #200]	@ (800674c <USB_SetTurnaroundTime+0x12c>)
 8006682:	4293      	cmp	r3, r2
 8006684:	d802      	bhi.n	800668c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8006686:	230c      	movs	r3, #12
 8006688:	617b      	str	r3, [r7, #20]
 800668a:	e041      	b.n	8006710 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800668c:	68bb      	ldr	r3, [r7, #8]
 800668e:	4a2f      	ldr	r2, [pc, #188]	@ (800674c <USB_SetTurnaroundTime+0x12c>)
 8006690:	4293      	cmp	r3, r2
 8006692:	d906      	bls.n	80066a2 <USB_SetTurnaroundTime+0x82>
 8006694:	68bb      	ldr	r3, [r7, #8]
 8006696:	4a2e      	ldr	r2, [pc, #184]	@ (8006750 <USB_SetTurnaroundTime+0x130>)
 8006698:	4293      	cmp	r3, r2
 800669a:	d802      	bhi.n	80066a2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800669c:	230b      	movs	r3, #11
 800669e:	617b      	str	r3, [r7, #20]
 80066a0:	e036      	b.n	8006710 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80066a2:	68bb      	ldr	r3, [r7, #8]
 80066a4:	4a2a      	ldr	r2, [pc, #168]	@ (8006750 <USB_SetTurnaroundTime+0x130>)
 80066a6:	4293      	cmp	r3, r2
 80066a8:	d906      	bls.n	80066b8 <USB_SetTurnaroundTime+0x98>
 80066aa:	68bb      	ldr	r3, [r7, #8]
 80066ac:	4a29      	ldr	r2, [pc, #164]	@ (8006754 <USB_SetTurnaroundTime+0x134>)
 80066ae:	4293      	cmp	r3, r2
 80066b0:	d802      	bhi.n	80066b8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80066b2:	230a      	movs	r3, #10
 80066b4:	617b      	str	r3, [r7, #20]
 80066b6:	e02b      	b.n	8006710 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80066b8:	68bb      	ldr	r3, [r7, #8]
 80066ba:	4a26      	ldr	r2, [pc, #152]	@ (8006754 <USB_SetTurnaroundTime+0x134>)
 80066bc:	4293      	cmp	r3, r2
 80066be:	d906      	bls.n	80066ce <USB_SetTurnaroundTime+0xae>
 80066c0:	68bb      	ldr	r3, [r7, #8]
 80066c2:	4a25      	ldr	r2, [pc, #148]	@ (8006758 <USB_SetTurnaroundTime+0x138>)
 80066c4:	4293      	cmp	r3, r2
 80066c6:	d202      	bcs.n	80066ce <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80066c8:	2309      	movs	r3, #9
 80066ca:	617b      	str	r3, [r7, #20]
 80066cc:	e020      	b.n	8006710 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80066ce:	68bb      	ldr	r3, [r7, #8]
 80066d0:	4a21      	ldr	r2, [pc, #132]	@ (8006758 <USB_SetTurnaroundTime+0x138>)
 80066d2:	4293      	cmp	r3, r2
 80066d4:	d306      	bcc.n	80066e4 <USB_SetTurnaroundTime+0xc4>
 80066d6:	68bb      	ldr	r3, [r7, #8]
 80066d8:	4a20      	ldr	r2, [pc, #128]	@ (800675c <USB_SetTurnaroundTime+0x13c>)
 80066da:	4293      	cmp	r3, r2
 80066dc:	d802      	bhi.n	80066e4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80066de:	2308      	movs	r3, #8
 80066e0:	617b      	str	r3, [r7, #20]
 80066e2:	e015      	b.n	8006710 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80066e4:	68bb      	ldr	r3, [r7, #8]
 80066e6:	4a1d      	ldr	r2, [pc, #116]	@ (800675c <USB_SetTurnaroundTime+0x13c>)
 80066e8:	4293      	cmp	r3, r2
 80066ea:	d906      	bls.n	80066fa <USB_SetTurnaroundTime+0xda>
 80066ec:	68bb      	ldr	r3, [r7, #8]
 80066ee:	4a1c      	ldr	r2, [pc, #112]	@ (8006760 <USB_SetTurnaroundTime+0x140>)
 80066f0:	4293      	cmp	r3, r2
 80066f2:	d202      	bcs.n	80066fa <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80066f4:	2307      	movs	r3, #7
 80066f6:	617b      	str	r3, [r7, #20]
 80066f8:	e00a      	b.n	8006710 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80066fa:	2306      	movs	r3, #6
 80066fc:	617b      	str	r3, [r7, #20]
 80066fe:	e007      	b.n	8006710 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8006700:	79fb      	ldrb	r3, [r7, #7]
 8006702:	2b00      	cmp	r3, #0
 8006704:	d102      	bne.n	800670c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8006706:	2309      	movs	r3, #9
 8006708:	617b      	str	r3, [r7, #20]
 800670a:	e001      	b.n	8006710 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800670c:	2309      	movs	r3, #9
 800670e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	68db      	ldr	r3, [r3, #12]
 8006714:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	68da      	ldr	r2, [r3, #12]
 8006720:	697b      	ldr	r3, [r7, #20]
 8006722:	029b      	lsls	r3, r3, #10
 8006724:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8006728:	431a      	orrs	r2, r3
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800672e:	2300      	movs	r3, #0
}
 8006730:	4618      	mov	r0, r3
 8006732:	371c      	adds	r7, #28
 8006734:	46bd      	mov	sp, r7
 8006736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800673a:	4770      	bx	lr
 800673c:	00d8acbf 	.word	0x00d8acbf
 8006740:	00e4e1c0 	.word	0x00e4e1c0
 8006744:	00f42400 	.word	0x00f42400
 8006748:	01067380 	.word	0x01067380
 800674c:	011a499f 	.word	0x011a499f
 8006750:	01312cff 	.word	0x01312cff
 8006754:	014ca43f 	.word	0x014ca43f
 8006758:	016e3600 	.word	0x016e3600
 800675c:	01a6ab1f 	.word	0x01a6ab1f
 8006760:	01e84800 	.word	0x01e84800

08006764 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006764:	b480      	push	{r7}
 8006766:	b083      	sub	sp, #12
 8006768:	af00      	add	r7, sp, #0
 800676a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	689b      	ldr	r3, [r3, #8]
 8006770:	f043 0201 	orr.w	r2, r3, #1
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006778:	2300      	movs	r3, #0
}
 800677a:	4618      	mov	r0, r3
 800677c:	370c      	adds	r7, #12
 800677e:	46bd      	mov	sp, r7
 8006780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006784:	4770      	bx	lr

08006786 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006786:	b480      	push	{r7}
 8006788:	b083      	sub	sp, #12
 800678a:	af00      	add	r7, sp, #0
 800678c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	689b      	ldr	r3, [r3, #8]
 8006792:	f023 0201 	bic.w	r2, r3, #1
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800679a:	2300      	movs	r3, #0
}
 800679c:	4618      	mov	r0, r3
 800679e:	370c      	adds	r7, #12
 80067a0:	46bd      	mov	sp, r7
 80067a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a6:	4770      	bx	lr

080067a8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80067a8:	b580      	push	{r7, lr}
 80067aa:	b084      	sub	sp, #16
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	6078      	str	r0, [r7, #4]
 80067b0:	460b      	mov	r3, r1
 80067b2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80067b4:	2300      	movs	r3, #0
 80067b6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	68db      	ldr	r3, [r3, #12]
 80067bc:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80067c4:	78fb      	ldrb	r3, [r7, #3]
 80067c6:	2b01      	cmp	r3, #1
 80067c8:	d115      	bne.n	80067f6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	68db      	ldr	r3, [r3, #12]
 80067ce:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80067d6:	200a      	movs	r0, #10
 80067d8:	f7fb fa00 	bl	8001bdc <HAL_Delay>
      ms += 10U;
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	330a      	adds	r3, #10
 80067e0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80067e2:	6878      	ldr	r0, [r7, #4]
 80067e4:	f001 f93f 	bl	8007a66 <USB_GetMode>
 80067e8:	4603      	mov	r3, r0
 80067ea:	2b01      	cmp	r3, #1
 80067ec:	d01e      	beq.n	800682c <USB_SetCurrentMode+0x84>
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	2bc7      	cmp	r3, #199	@ 0xc7
 80067f2:	d9f0      	bls.n	80067d6 <USB_SetCurrentMode+0x2e>
 80067f4:	e01a      	b.n	800682c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80067f6:	78fb      	ldrb	r3, [r7, #3]
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d115      	bne.n	8006828 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	68db      	ldr	r3, [r3, #12]
 8006800:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006808:	200a      	movs	r0, #10
 800680a:	f7fb f9e7 	bl	8001bdc <HAL_Delay>
      ms += 10U;
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	330a      	adds	r3, #10
 8006812:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006814:	6878      	ldr	r0, [r7, #4]
 8006816:	f001 f926 	bl	8007a66 <USB_GetMode>
 800681a:	4603      	mov	r3, r0
 800681c:	2b00      	cmp	r3, #0
 800681e:	d005      	beq.n	800682c <USB_SetCurrentMode+0x84>
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	2bc7      	cmp	r3, #199	@ 0xc7
 8006824:	d9f0      	bls.n	8006808 <USB_SetCurrentMode+0x60>
 8006826:	e001      	b.n	800682c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006828:	2301      	movs	r3, #1
 800682a:	e005      	b.n	8006838 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	2bc8      	cmp	r3, #200	@ 0xc8
 8006830:	d101      	bne.n	8006836 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006832:	2301      	movs	r3, #1
 8006834:	e000      	b.n	8006838 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006836:	2300      	movs	r3, #0
}
 8006838:	4618      	mov	r0, r3
 800683a:	3710      	adds	r7, #16
 800683c:	46bd      	mov	sp, r7
 800683e:	bd80      	pop	{r7, pc}

08006840 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006840:	b084      	sub	sp, #16
 8006842:	b580      	push	{r7, lr}
 8006844:	b086      	sub	sp, #24
 8006846:	af00      	add	r7, sp, #0
 8006848:	6078      	str	r0, [r7, #4]
 800684a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800684e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006852:	2300      	movs	r3, #0
 8006854:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800685a:	2300      	movs	r3, #0
 800685c:	613b      	str	r3, [r7, #16]
 800685e:	e009      	b.n	8006874 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006860:	687a      	ldr	r2, [r7, #4]
 8006862:	693b      	ldr	r3, [r7, #16]
 8006864:	3340      	adds	r3, #64	@ 0x40
 8006866:	009b      	lsls	r3, r3, #2
 8006868:	4413      	add	r3, r2
 800686a:	2200      	movs	r2, #0
 800686c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800686e:	693b      	ldr	r3, [r7, #16]
 8006870:	3301      	adds	r3, #1
 8006872:	613b      	str	r3, [r7, #16]
 8006874:	693b      	ldr	r3, [r7, #16]
 8006876:	2b0e      	cmp	r3, #14
 8006878:	d9f2      	bls.n	8006860 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800687a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800687e:	2b00      	cmp	r3, #0
 8006880:	d11c      	bne.n	80068bc <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006888:	685b      	ldr	r3, [r3, #4]
 800688a:	68fa      	ldr	r2, [r7, #12]
 800688c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006890:	f043 0302 	orr.w	r3, r3, #2
 8006894:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800689a:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80068a6:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80068b2:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	639a      	str	r2, [r3, #56]	@ 0x38
 80068ba:	e00b      	b.n	80068d4 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80068c0:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80068cc:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80068da:	461a      	mov	r2, r3
 80068dc:	2300      	movs	r3, #0
 80068de:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80068e0:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80068e4:	2b01      	cmp	r3, #1
 80068e6:	d10d      	bne.n	8006904 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80068e8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d104      	bne.n	80068fa <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80068f0:	2100      	movs	r1, #0
 80068f2:	6878      	ldr	r0, [r7, #4]
 80068f4:	f000 f968 	bl	8006bc8 <USB_SetDevSpeed>
 80068f8:	e008      	b.n	800690c <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80068fa:	2101      	movs	r1, #1
 80068fc:	6878      	ldr	r0, [r7, #4]
 80068fe:	f000 f963 	bl	8006bc8 <USB_SetDevSpeed>
 8006902:	e003      	b.n	800690c <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006904:	2103      	movs	r1, #3
 8006906:	6878      	ldr	r0, [r7, #4]
 8006908:	f000 f95e 	bl	8006bc8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800690c:	2110      	movs	r1, #16
 800690e:	6878      	ldr	r0, [r7, #4]
 8006910:	f000 f8fa 	bl	8006b08 <USB_FlushTxFifo>
 8006914:	4603      	mov	r3, r0
 8006916:	2b00      	cmp	r3, #0
 8006918:	d001      	beq.n	800691e <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 800691a:	2301      	movs	r3, #1
 800691c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800691e:	6878      	ldr	r0, [r7, #4]
 8006920:	f000 f924 	bl	8006b6c <USB_FlushRxFifo>
 8006924:	4603      	mov	r3, r0
 8006926:	2b00      	cmp	r3, #0
 8006928:	d001      	beq.n	800692e <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 800692a:	2301      	movs	r3, #1
 800692c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006934:	461a      	mov	r2, r3
 8006936:	2300      	movs	r3, #0
 8006938:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006940:	461a      	mov	r2, r3
 8006942:	2300      	movs	r3, #0
 8006944:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800694c:	461a      	mov	r2, r3
 800694e:	2300      	movs	r3, #0
 8006950:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006952:	2300      	movs	r3, #0
 8006954:	613b      	str	r3, [r7, #16]
 8006956:	e043      	b.n	80069e0 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006958:	693b      	ldr	r3, [r7, #16]
 800695a:	015a      	lsls	r2, r3, #5
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	4413      	add	r3, r2
 8006960:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800696a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800696e:	d118      	bne.n	80069a2 <USB_DevInit+0x162>
    {
      if (i == 0U)
 8006970:	693b      	ldr	r3, [r7, #16]
 8006972:	2b00      	cmp	r3, #0
 8006974:	d10a      	bne.n	800698c <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006976:	693b      	ldr	r3, [r7, #16]
 8006978:	015a      	lsls	r2, r3, #5
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	4413      	add	r3, r2
 800697e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006982:	461a      	mov	r2, r3
 8006984:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006988:	6013      	str	r3, [r2, #0]
 800698a:	e013      	b.n	80069b4 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800698c:	693b      	ldr	r3, [r7, #16]
 800698e:	015a      	lsls	r2, r3, #5
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	4413      	add	r3, r2
 8006994:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006998:	461a      	mov	r2, r3
 800699a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800699e:	6013      	str	r3, [r2, #0]
 80069a0:	e008      	b.n	80069b4 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80069a2:	693b      	ldr	r3, [r7, #16]
 80069a4:	015a      	lsls	r2, r3, #5
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	4413      	add	r3, r2
 80069aa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80069ae:	461a      	mov	r2, r3
 80069b0:	2300      	movs	r3, #0
 80069b2:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80069b4:	693b      	ldr	r3, [r7, #16]
 80069b6:	015a      	lsls	r2, r3, #5
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	4413      	add	r3, r2
 80069bc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80069c0:	461a      	mov	r2, r3
 80069c2:	2300      	movs	r3, #0
 80069c4:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80069c6:	693b      	ldr	r3, [r7, #16]
 80069c8:	015a      	lsls	r2, r3, #5
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	4413      	add	r3, r2
 80069ce:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80069d2:	461a      	mov	r2, r3
 80069d4:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80069d8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80069da:	693b      	ldr	r3, [r7, #16]
 80069dc:	3301      	adds	r3, #1
 80069de:	613b      	str	r3, [r7, #16]
 80069e0:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80069e4:	461a      	mov	r2, r3
 80069e6:	693b      	ldr	r3, [r7, #16]
 80069e8:	4293      	cmp	r3, r2
 80069ea:	d3b5      	bcc.n	8006958 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80069ec:	2300      	movs	r3, #0
 80069ee:	613b      	str	r3, [r7, #16]
 80069f0:	e043      	b.n	8006a7a <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80069f2:	693b      	ldr	r3, [r7, #16]
 80069f4:	015a      	lsls	r2, r3, #5
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	4413      	add	r3, r2
 80069fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006a04:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006a08:	d118      	bne.n	8006a3c <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8006a0a:	693b      	ldr	r3, [r7, #16]
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d10a      	bne.n	8006a26 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006a10:	693b      	ldr	r3, [r7, #16]
 8006a12:	015a      	lsls	r2, r3, #5
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	4413      	add	r3, r2
 8006a18:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006a1c:	461a      	mov	r2, r3
 8006a1e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006a22:	6013      	str	r3, [r2, #0]
 8006a24:	e013      	b.n	8006a4e <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006a26:	693b      	ldr	r3, [r7, #16]
 8006a28:	015a      	lsls	r2, r3, #5
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	4413      	add	r3, r2
 8006a2e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006a32:	461a      	mov	r2, r3
 8006a34:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8006a38:	6013      	str	r3, [r2, #0]
 8006a3a:	e008      	b.n	8006a4e <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006a3c:	693b      	ldr	r3, [r7, #16]
 8006a3e:	015a      	lsls	r2, r3, #5
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	4413      	add	r3, r2
 8006a44:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006a48:	461a      	mov	r2, r3
 8006a4a:	2300      	movs	r3, #0
 8006a4c:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006a4e:	693b      	ldr	r3, [r7, #16]
 8006a50:	015a      	lsls	r2, r3, #5
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	4413      	add	r3, r2
 8006a56:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006a5a:	461a      	mov	r2, r3
 8006a5c:	2300      	movs	r3, #0
 8006a5e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006a60:	693b      	ldr	r3, [r7, #16]
 8006a62:	015a      	lsls	r2, r3, #5
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	4413      	add	r3, r2
 8006a68:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006a6c:	461a      	mov	r2, r3
 8006a6e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006a72:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006a74:	693b      	ldr	r3, [r7, #16]
 8006a76:	3301      	adds	r3, #1
 8006a78:	613b      	str	r3, [r7, #16]
 8006a7a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006a7e:	461a      	mov	r2, r3
 8006a80:	693b      	ldr	r3, [r7, #16]
 8006a82:	4293      	cmp	r3, r2
 8006a84:	d3b5      	bcc.n	80069f2 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006a8c:	691b      	ldr	r3, [r3, #16]
 8006a8e:	68fa      	ldr	r2, [r7, #12]
 8006a90:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006a94:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006a98:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	2200      	movs	r2, #0
 8006a9e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8006aa6:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006aa8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d105      	bne.n	8006abc <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	699b      	ldr	r3, [r3, #24]
 8006ab4:	f043 0210 	orr.w	r2, r3, #16
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	699a      	ldr	r2, [r3, #24]
 8006ac0:	4b10      	ldr	r3, [pc, #64]	@ (8006b04 <USB_DevInit+0x2c4>)
 8006ac2:	4313      	orrs	r3, r2
 8006ac4:	687a      	ldr	r2, [r7, #4]
 8006ac6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006ac8:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d005      	beq.n	8006adc <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	699b      	ldr	r3, [r3, #24]
 8006ad4:	f043 0208 	orr.w	r2, r3, #8
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006adc:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006ae0:	2b01      	cmp	r3, #1
 8006ae2:	d107      	bne.n	8006af4 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	699b      	ldr	r3, [r3, #24]
 8006ae8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006aec:	f043 0304 	orr.w	r3, r3, #4
 8006af0:	687a      	ldr	r2, [r7, #4]
 8006af2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006af4:	7dfb      	ldrb	r3, [r7, #23]
}
 8006af6:	4618      	mov	r0, r3
 8006af8:	3718      	adds	r7, #24
 8006afa:	46bd      	mov	sp, r7
 8006afc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006b00:	b004      	add	sp, #16
 8006b02:	4770      	bx	lr
 8006b04:	803c3800 	.word	0x803c3800

08006b08 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006b08:	b480      	push	{r7}
 8006b0a:	b085      	sub	sp, #20
 8006b0c:	af00      	add	r7, sp, #0
 8006b0e:	6078      	str	r0, [r7, #4]
 8006b10:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006b12:	2300      	movs	r3, #0
 8006b14:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	3301      	adds	r3, #1
 8006b1a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006b22:	d901      	bls.n	8006b28 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006b24:	2303      	movs	r3, #3
 8006b26:	e01b      	b.n	8006b60 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	691b      	ldr	r3, [r3, #16]
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	daf2      	bge.n	8006b16 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006b30:	2300      	movs	r3, #0
 8006b32:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006b34:	683b      	ldr	r3, [r7, #0]
 8006b36:	019b      	lsls	r3, r3, #6
 8006b38:	f043 0220 	orr.w	r2, r3, #32
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	3301      	adds	r3, #1
 8006b44:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006b4c:	d901      	bls.n	8006b52 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006b4e:	2303      	movs	r3, #3
 8006b50:	e006      	b.n	8006b60 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	691b      	ldr	r3, [r3, #16]
 8006b56:	f003 0320 	and.w	r3, r3, #32
 8006b5a:	2b20      	cmp	r3, #32
 8006b5c:	d0f0      	beq.n	8006b40 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006b5e:	2300      	movs	r3, #0
}
 8006b60:	4618      	mov	r0, r3
 8006b62:	3714      	adds	r7, #20
 8006b64:	46bd      	mov	sp, r7
 8006b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b6a:	4770      	bx	lr

08006b6c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006b6c:	b480      	push	{r7}
 8006b6e:	b085      	sub	sp, #20
 8006b70:	af00      	add	r7, sp, #0
 8006b72:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006b74:	2300      	movs	r3, #0
 8006b76:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	3301      	adds	r3, #1
 8006b7c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006b84:	d901      	bls.n	8006b8a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006b86:	2303      	movs	r3, #3
 8006b88:	e018      	b.n	8006bbc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	691b      	ldr	r3, [r3, #16]
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	daf2      	bge.n	8006b78 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006b92:	2300      	movs	r3, #0
 8006b94:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	2210      	movs	r2, #16
 8006b9a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	3301      	adds	r3, #1
 8006ba0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006ba8:	d901      	bls.n	8006bae <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006baa:	2303      	movs	r3, #3
 8006bac:	e006      	b.n	8006bbc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	691b      	ldr	r3, [r3, #16]
 8006bb2:	f003 0310 	and.w	r3, r3, #16
 8006bb6:	2b10      	cmp	r3, #16
 8006bb8:	d0f0      	beq.n	8006b9c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006bba:	2300      	movs	r3, #0
}
 8006bbc:	4618      	mov	r0, r3
 8006bbe:	3714      	adds	r7, #20
 8006bc0:	46bd      	mov	sp, r7
 8006bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc6:	4770      	bx	lr

08006bc8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006bc8:	b480      	push	{r7}
 8006bca:	b085      	sub	sp, #20
 8006bcc:	af00      	add	r7, sp, #0
 8006bce:	6078      	str	r0, [r7, #4]
 8006bd0:	460b      	mov	r3, r1
 8006bd2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006bde:	681a      	ldr	r2, [r3, #0]
 8006be0:	78fb      	ldrb	r3, [r7, #3]
 8006be2:	68f9      	ldr	r1, [r7, #12]
 8006be4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006be8:	4313      	orrs	r3, r2
 8006bea:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006bec:	2300      	movs	r3, #0
}
 8006bee:	4618      	mov	r0, r3
 8006bf0:	3714      	adds	r7, #20
 8006bf2:	46bd      	mov	sp, r7
 8006bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf8:	4770      	bx	lr

08006bfa <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8006bfa:	b480      	push	{r7}
 8006bfc:	b087      	sub	sp, #28
 8006bfe:	af00      	add	r7, sp, #0
 8006c00:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8006c06:	693b      	ldr	r3, [r7, #16]
 8006c08:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006c0c:	689b      	ldr	r3, [r3, #8]
 8006c0e:	f003 0306 	and.w	r3, r3, #6
 8006c12:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d102      	bne.n	8006c20 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8006c1a:	2300      	movs	r3, #0
 8006c1c:	75fb      	strb	r3, [r7, #23]
 8006c1e:	e00a      	b.n	8006c36 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	2b02      	cmp	r3, #2
 8006c24:	d002      	beq.n	8006c2c <USB_GetDevSpeed+0x32>
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	2b06      	cmp	r3, #6
 8006c2a:	d102      	bne.n	8006c32 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8006c2c:	2302      	movs	r3, #2
 8006c2e:	75fb      	strb	r3, [r7, #23]
 8006c30:	e001      	b.n	8006c36 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8006c32:	230f      	movs	r3, #15
 8006c34:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8006c36:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c38:	4618      	mov	r0, r3
 8006c3a:	371c      	adds	r7, #28
 8006c3c:	46bd      	mov	sp, r7
 8006c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c42:	4770      	bx	lr

08006c44 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006c44:	b480      	push	{r7}
 8006c46:	b085      	sub	sp, #20
 8006c48:	af00      	add	r7, sp, #0
 8006c4a:	6078      	str	r0, [r7, #4]
 8006c4c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006c52:	683b      	ldr	r3, [r7, #0]
 8006c54:	781b      	ldrb	r3, [r3, #0]
 8006c56:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006c58:	683b      	ldr	r3, [r7, #0]
 8006c5a:	785b      	ldrb	r3, [r3, #1]
 8006c5c:	2b01      	cmp	r3, #1
 8006c5e:	d13a      	bne.n	8006cd6 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006c66:	69da      	ldr	r2, [r3, #28]
 8006c68:	683b      	ldr	r3, [r7, #0]
 8006c6a:	781b      	ldrb	r3, [r3, #0]
 8006c6c:	f003 030f 	and.w	r3, r3, #15
 8006c70:	2101      	movs	r1, #1
 8006c72:	fa01 f303 	lsl.w	r3, r1, r3
 8006c76:	b29b      	uxth	r3, r3
 8006c78:	68f9      	ldr	r1, [r7, #12]
 8006c7a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006c7e:	4313      	orrs	r3, r2
 8006c80:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8006c82:	68bb      	ldr	r3, [r7, #8]
 8006c84:	015a      	lsls	r2, r3, #5
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	4413      	add	r3, r2
 8006c8a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d155      	bne.n	8006d44 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006c98:	68bb      	ldr	r3, [r7, #8]
 8006c9a:	015a      	lsls	r2, r3, #5
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	4413      	add	r3, r2
 8006ca0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006ca4:	681a      	ldr	r2, [r3, #0]
 8006ca6:	683b      	ldr	r3, [r7, #0]
 8006ca8:	689b      	ldr	r3, [r3, #8]
 8006caa:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006cae:	683b      	ldr	r3, [r7, #0]
 8006cb0:	791b      	ldrb	r3, [r3, #4]
 8006cb2:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006cb4:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006cb6:	68bb      	ldr	r3, [r7, #8]
 8006cb8:	059b      	lsls	r3, r3, #22
 8006cba:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006cbc:	4313      	orrs	r3, r2
 8006cbe:	68ba      	ldr	r2, [r7, #8]
 8006cc0:	0151      	lsls	r1, r2, #5
 8006cc2:	68fa      	ldr	r2, [r7, #12]
 8006cc4:	440a      	add	r2, r1
 8006cc6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006cca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006cce:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006cd2:	6013      	str	r3, [r2, #0]
 8006cd4:	e036      	b.n	8006d44 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006cdc:	69da      	ldr	r2, [r3, #28]
 8006cde:	683b      	ldr	r3, [r7, #0]
 8006ce0:	781b      	ldrb	r3, [r3, #0]
 8006ce2:	f003 030f 	and.w	r3, r3, #15
 8006ce6:	2101      	movs	r1, #1
 8006ce8:	fa01 f303 	lsl.w	r3, r1, r3
 8006cec:	041b      	lsls	r3, r3, #16
 8006cee:	68f9      	ldr	r1, [r7, #12]
 8006cf0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006cf4:	4313      	orrs	r3, r2
 8006cf6:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8006cf8:	68bb      	ldr	r3, [r7, #8]
 8006cfa:	015a      	lsls	r2, r3, #5
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	4413      	add	r3, r2
 8006d00:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d11a      	bne.n	8006d44 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006d0e:	68bb      	ldr	r3, [r7, #8]
 8006d10:	015a      	lsls	r2, r3, #5
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	4413      	add	r3, r2
 8006d16:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006d1a:	681a      	ldr	r2, [r3, #0]
 8006d1c:	683b      	ldr	r3, [r7, #0]
 8006d1e:	689b      	ldr	r3, [r3, #8]
 8006d20:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8006d24:	683b      	ldr	r3, [r7, #0]
 8006d26:	791b      	ldrb	r3, [r3, #4]
 8006d28:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006d2a:	430b      	orrs	r3, r1
 8006d2c:	4313      	orrs	r3, r2
 8006d2e:	68ba      	ldr	r2, [r7, #8]
 8006d30:	0151      	lsls	r1, r2, #5
 8006d32:	68fa      	ldr	r2, [r7, #12]
 8006d34:	440a      	add	r2, r1
 8006d36:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006d3a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006d3e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006d42:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8006d44:	2300      	movs	r3, #0
}
 8006d46:	4618      	mov	r0, r3
 8006d48:	3714      	adds	r7, #20
 8006d4a:	46bd      	mov	sp, r7
 8006d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d50:	4770      	bx	lr
	...

08006d54 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006d54:	b480      	push	{r7}
 8006d56:	b085      	sub	sp, #20
 8006d58:	af00      	add	r7, sp, #0
 8006d5a:	6078      	str	r0, [r7, #4]
 8006d5c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006d62:	683b      	ldr	r3, [r7, #0]
 8006d64:	781b      	ldrb	r3, [r3, #0]
 8006d66:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8006d68:	683b      	ldr	r3, [r7, #0]
 8006d6a:	785b      	ldrb	r3, [r3, #1]
 8006d6c:	2b01      	cmp	r3, #1
 8006d6e:	d161      	bne.n	8006e34 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006d70:	68bb      	ldr	r3, [r7, #8]
 8006d72:	015a      	lsls	r2, r3, #5
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	4413      	add	r3, r2
 8006d78:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006d82:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006d86:	d11f      	bne.n	8006dc8 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8006d88:	68bb      	ldr	r3, [r7, #8]
 8006d8a:	015a      	lsls	r2, r3, #5
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	4413      	add	r3, r2
 8006d90:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	68ba      	ldr	r2, [r7, #8]
 8006d98:	0151      	lsls	r1, r2, #5
 8006d9a:	68fa      	ldr	r2, [r7, #12]
 8006d9c:	440a      	add	r2, r1
 8006d9e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006da2:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006da6:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8006da8:	68bb      	ldr	r3, [r7, #8]
 8006daa:	015a      	lsls	r2, r3, #5
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	4413      	add	r3, r2
 8006db0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	68ba      	ldr	r2, [r7, #8]
 8006db8:	0151      	lsls	r1, r2, #5
 8006dba:	68fa      	ldr	r2, [r7, #12]
 8006dbc:	440a      	add	r2, r1
 8006dbe:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006dc2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006dc6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006dce:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006dd0:	683b      	ldr	r3, [r7, #0]
 8006dd2:	781b      	ldrb	r3, [r3, #0]
 8006dd4:	f003 030f 	and.w	r3, r3, #15
 8006dd8:	2101      	movs	r1, #1
 8006dda:	fa01 f303 	lsl.w	r3, r1, r3
 8006dde:	b29b      	uxth	r3, r3
 8006de0:	43db      	mvns	r3, r3
 8006de2:	68f9      	ldr	r1, [r7, #12]
 8006de4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006de8:	4013      	ands	r3, r2
 8006dea:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006df2:	69da      	ldr	r2, [r3, #28]
 8006df4:	683b      	ldr	r3, [r7, #0]
 8006df6:	781b      	ldrb	r3, [r3, #0]
 8006df8:	f003 030f 	and.w	r3, r3, #15
 8006dfc:	2101      	movs	r1, #1
 8006dfe:	fa01 f303 	lsl.w	r3, r1, r3
 8006e02:	b29b      	uxth	r3, r3
 8006e04:	43db      	mvns	r3, r3
 8006e06:	68f9      	ldr	r1, [r7, #12]
 8006e08:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006e0c:	4013      	ands	r3, r2
 8006e0e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8006e10:	68bb      	ldr	r3, [r7, #8]
 8006e12:	015a      	lsls	r2, r3, #5
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	4413      	add	r3, r2
 8006e18:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006e1c:	681a      	ldr	r2, [r3, #0]
 8006e1e:	68bb      	ldr	r3, [r7, #8]
 8006e20:	0159      	lsls	r1, r3, #5
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	440b      	add	r3, r1
 8006e26:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006e2a:	4619      	mov	r1, r3
 8006e2c:	4b35      	ldr	r3, [pc, #212]	@ (8006f04 <USB_DeactivateEndpoint+0x1b0>)
 8006e2e:	4013      	ands	r3, r2
 8006e30:	600b      	str	r3, [r1, #0]
 8006e32:	e060      	b.n	8006ef6 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006e34:	68bb      	ldr	r3, [r7, #8]
 8006e36:	015a      	lsls	r2, r3, #5
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	4413      	add	r3, r2
 8006e3c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006e46:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006e4a:	d11f      	bne.n	8006e8c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006e4c:	68bb      	ldr	r3, [r7, #8]
 8006e4e:	015a      	lsls	r2, r3, #5
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	4413      	add	r3, r2
 8006e54:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	68ba      	ldr	r2, [r7, #8]
 8006e5c:	0151      	lsls	r1, r2, #5
 8006e5e:	68fa      	ldr	r2, [r7, #12]
 8006e60:	440a      	add	r2, r1
 8006e62:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006e66:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006e6a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8006e6c:	68bb      	ldr	r3, [r7, #8]
 8006e6e:	015a      	lsls	r2, r3, #5
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	4413      	add	r3, r2
 8006e74:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	68ba      	ldr	r2, [r7, #8]
 8006e7c:	0151      	lsls	r1, r2, #5
 8006e7e:	68fa      	ldr	r2, [r7, #12]
 8006e80:	440a      	add	r2, r1
 8006e82:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006e86:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006e8a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006e92:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006e94:	683b      	ldr	r3, [r7, #0]
 8006e96:	781b      	ldrb	r3, [r3, #0]
 8006e98:	f003 030f 	and.w	r3, r3, #15
 8006e9c:	2101      	movs	r1, #1
 8006e9e:	fa01 f303 	lsl.w	r3, r1, r3
 8006ea2:	041b      	lsls	r3, r3, #16
 8006ea4:	43db      	mvns	r3, r3
 8006ea6:	68f9      	ldr	r1, [r7, #12]
 8006ea8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006eac:	4013      	ands	r3, r2
 8006eae:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006eb6:	69da      	ldr	r2, [r3, #28]
 8006eb8:	683b      	ldr	r3, [r7, #0]
 8006eba:	781b      	ldrb	r3, [r3, #0]
 8006ebc:	f003 030f 	and.w	r3, r3, #15
 8006ec0:	2101      	movs	r1, #1
 8006ec2:	fa01 f303 	lsl.w	r3, r1, r3
 8006ec6:	041b      	lsls	r3, r3, #16
 8006ec8:	43db      	mvns	r3, r3
 8006eca:	68f9      	ldr	r1, [r7, #12]
 8006ecc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006ed0:	4013      	ands	r3, r2
 8006ed2:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8006ed4:	68bb      	ldr	r3, [r7, #8]
 8006ed6:	015a      	lsls	r2, r3, #5
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	4413      	add	r3, r2
 8006edc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006ee0:	681a      	ldr	r2, [r3, #0]
 8006ee2:	68bb      	ldr	r3, [r7, #8]
 8006ee4:	0159      	lsls	r1, r3, #5
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	440b      	add	r3, r1
 8006eea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006eee:	4619      	mov	r1, r3
 8006ef0:	4b05      	ldr	r3, [pc, #20]	@ (8006f08 <USB_DeactivateEndpoint+0x1b4>)
 8006ef2:	4013      	ands	r3, r2
 8006ef4:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8006ef6:	2300      	movs	r3, #0
}
 8006ef8:	4618      	mov	r0, r3
 8006efa:	3714      	adds	r7, #20
 8006efc:	46bd      	mov	sp, r7
 8006efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f02:	4770      	bx	lr
 8006f04:	ec337800 	.word	0xec337800
 8006f08:	eff37800 	.word	0xeff37800

08006f0c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006f0c:	b580      	push	{r7, lr}
 8006f0e:	b08a      	sub	sp, #40	@ 0x28
 8006f10:	af02      	add	r7, sp, #8
 8006f12:	60f8      	str	r0, [r7, #12]
 8006f14:	60b9      	str	r1, [r7, #8]
 8006f16:	4613      	mov	r3, r2
 8006f18:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8006f1e:	68bb      	ldr	r3, [r7, #8]
 8006f20:	781b      	ldrb	r3, [r3, #0]
 8006f22:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006f24:	68bb      	ldr	r3, [r7, #8]
 8006f26:	785b      	ldrb	r3, [r3, #1]
 8006f28:	2b01      	cmp	r3, #1
 8006f2a:	f040 817f 	bne.w	800722c <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006f2e:	68bb      	ldr	r3, [r7, #8]
 8006f30:	691b      	ldr	r3, [r3, #16]
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d132      	bne.n	8006f9c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006f36:	69bb      	ldr	r3, [r7, #24]
 8006f38:	015a      	lsls	r2, r3, #5
 8006f3a:	69fb      	ldr	r3, [r7, #28]
 8006f3c:	4413      	add	r3, r2
 8006f3e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006f42:	691b      	ldr	r3, [r3, #16]
 8006f44:	69ba      	ldr	r2, [r7, #24]
 8006f46:	0151      	lsls	r1, r2, #5
 8006f48:	69fa      	ldr	r2, [r7, #28]
 8006f4a:	440a      	add	r2, r1
 8006f4c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006f50:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8006f54:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8006f58:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006f5a:	69bb      	ldr	r3, [r7, #24]
 8006f5c:	015a      	lsls	r2, r3, #5
 8006f5e:	69fb      	ldr	r3, [r7, #28]
 8006f60:	4413      	add	r3, r2
 8006f62:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006f66:	691b      	ldr	r3, [r3, #16]
 8006f68:	69ba      	ldr	r2, [r7, #24]
 8006f6a:	0151      	lsls	r1, r2, #5
 8006f6c:	69fa      	ldr	r2, [r7, #28]
 8006f6e:	440a      	add	r2, r1
 8006f70:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006f74:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006f78:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006f7a:	69bb      	ldr	r3, [r7, #24]
 8006f7c:	015a      	lsls	r2, r3, #5
 8006f7e:	69fb      	ldr	r3, [r7, #28]
 8006f80:	4413      	add	r3, r2
 8006f82:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006f86:	691b      	ldr	r3, [r3, #16]
 8006f88:	69ba      	ldr	r2, [r7, #24]
 8006f8a:	0151      	lsls	r1, r2, #5
 8006f8c:	69fa      	ldr	r2, [r7, #28]
 8006f8e:	440a      	add	r2, r1
 8006f90:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006f94:	0cdb      	lsrs	r3, r3, #19
 8006f96:	04db      	lsls	r3, r3, #19
 8006f98:	6113      	str	r3, [r2, #16]
 8006f9a:	e097      	b.n	80070cc <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006f9c:	69bb      	ldr	r3, [r7, #24]
 8006f9e:	015a      	lsls	r2, r3, #5
 8006fa0:	69fb      	ldr	r3, [r7, #28]
 8006fa2:	4413      	add	r3, r2
 8006fa4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006fa8:	691b      	ldr	r3, [r3, #16]
 8006faa:	69ba      	ldr	r2, [r7, #24]
 8006fac:	0151      	lsls	r1, r2, #5
 8006fae:	69fa      	ldr	r2, [r7, #28]
 8006fb0:	440a      	add	r2, r1
 8006fb2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006fb6:	0cdb      	lsrs	r3, r3, #19
 8006fb8:	04db      	lsls	r3, r3, #19
 8006fba:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006fbc:	69bb      	ldr	r3, [r7, #24]
 8006fbe:	015a      	lsls	r2, r3, #5
 8006fc0:	69fb      	ldr	r3, [r7, #28]
 8006fc2:	4413      	add	r3, r2
 8006fc4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006fc8:	691b      	ldr	r3, [r3, #16]
 8006fca:	69ba      	ldr	r2, [r7, #24]
 8006fcc:	0151      	lsls	r1, r2, #5
 8006fce:	69fa      	ldr	r2, [r7, #28]
 8006fd0:	440a      	add	r2, r1
 8006fd2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006fd6:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8006fda:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8006fde:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8006fe0:	69bb      	ldr	r3, [r7, #24]
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d11a      	bne.n	800701c <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8006fe6:	68bb      	ldr	r3, [r7, #8]
 8006fe8:	691a      	ldr	r2, [r3, #16]
 8006fea:	68bb      	ldr	r3, [r7, #8]
 8006fec:	689b      	ldr	r3, [r3, #8]
 8006fee:	429a      	cmp	r2, r3
 8006ff0:	d903      	bls.n	8006ffa <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8006ff2:	68bb      	ldr	r3, [r7, #8]
 8006ff4:	689a      	ldr	r2, [r3, #8]
 8006ff6:	68bb      	ldr	r3, [r7, #8]
 8006ff8:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006ffa:	69bb      	ldr	r3, [r7, #24]
 8006ffc:	015a      	lsls	r2, r3, #5
 8006ffe:	69fb      	ldr	r3, [r7, #28]
 8007000:	4413      	add	r3, r2
 8007002:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007006:	691b      	ldr	r3, [r3, #16]
 8007008:	69ba      	ldr	r2, [r7, #24]
 800700a:	0151      	lsls	r1, r2, #5
 800700c:	69fa      	ldr	r2, [r7, #28]
 800700e:	440a      	add	r2, r1
 8007010:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007014:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007018:	6113      	str	r3, [r2, #16]
 800701a:	e044      	b.n	80070a6 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800701c:	68bb      	ldr	r3, [r7, #8]
 800701e:	691a      	ldr	r2, [r3, #16]
 8007020:	68bb      	ldr	r3, [r7, #8]
 8007022:	689b      	ldr	r3, [r3, #8]
 8007024:	4413      	add	r3, r2
 8007026:	1e5a      	subs	r2, r3, #1
 8007028:	68bb      	ldr	r3, [r7, #8]
 800702a:	689b      	ldr	r3, [r3, #8]
 800702c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007030:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 8007032:	69bb      	ldr	r3, [r7, #24]
 8007034:	015a      	lsls	r2, r3, #5
 8007036:	69fb      	ldr	r3, [r7, #28]
 8007038:	4413      	add	r3, r2
 800703a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800703e:	691a      	ldr	r2, [r3, #16]
 8007040:	8afb      	ldrh	r3, [r7, #22]
 8007042:	04d9      	lsls	r1, r3, #19
 8007044:	4ba4      	ldr	r3, [pc, #656]	@ (80072d8 <USB_EPStartXfer+0x3cc>)
 8007046:	400b      	ands	r3, r1
 8007048:	69b9      	ldr	r1, [r7, #24]
 800704a:	0148      	lsls	r0, r1, #5
 800704c:	69f9      	ldr	r1, [r7, #28]
 800704e:	4401      	add	r1, r0
 8007050:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8007054:	4313      	orrs	r3, r2
 8007056:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8007058:	68bb      	ldr	r3, [r7, #8]
 800705a:	791b      	ldrb	r3, [r3, #4]
 800705c:	2b01      	cmp	r3, #1
 800705e:	d122      	bne.n	80070a6 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8007060:	69bb      	ldr	r3, [r7, #24]
 8007062:	015a      	lsls	r2, r3, #5
 8007064:	69fb      	ldr	r3, [r7, #28]
 8007066:	4413      	add	r3, r2
 8007068:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800706c:	691b      	ldr	r3, [r3, #16]
 800706e:	69ba      	ldr	r2, [r7, #24]
 8007070:	0151      	lsls	r1, r2, #5
 8007072:	69fa      	ldr	r2, [r7, #28]
 8007074:	440a      	add	r2, r1
 8007076:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800707a:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800707e:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 8007080:	69bb      	ldr	r3, [r7, #24]
 8007082:	015a      	lsls	r2, r3, #5
 8007084:	69fb      	ldr	r3, [r7, #28]
 8007086:	4413      	add	r3, r2
 8007088:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800708c:	691a      	ldr	r2, [r3, #16]
 800708e:	8afb      	ldrh	r3, [r7, #22]
 8007090:	075b      	lsls	r3, r3, #29
 8007092:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8007096:	69b9      	ldr	r1, [r7, #24]
 8007098:	0148      	lsls	r0, r1, #5
 800709a:	69f9      	ldr	r1, [r7, #28]
 800709c:	4401      	add	r1, r0
 800709e:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80070a2:	4313      	orrs	r3, r2
 80070a4:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80070a6:	69bb      	ldr	r3, [r7, #24]
 80070a8:	015a      	lsls	r2, r3, #5
 80070aa:	69fb      	ldr	r3, [r7, #28]
 80070ac:	4413      	add	r3, r2
 80070ae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80070b2:	691a      	ldr	r2, [r3, #16]
 80070b4:	68bb      	ldr	r3, [r7, #8]
 80070b6:	691b      	ldr	r3, [r3, #16]
 80070b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80070bc:	69b9      	ldr	r1, [r7, #24]
 80070be:	0148      	lsls	r0, r1, #5
 80070c0:	69f9      	ldr	r1, [r7, #28]
 80070c2:	4401      	add	r1, r0
 80070c4:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80070c8:	4313      	orrs	r3, r2
 80070ca:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80070cc:	79fb      	ldrb	r3, [r7, #7]
 80070ce:	2b01      	cmp	r3, #1
 80070d0:	d14b      	bne.n	800716a <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80070d2:	68bb      	ldr	r3, [r7, #8]
 80070d4:	69db      	ldr	r3, [r3, #28]
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d009      	beq.n	80070ee <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80070da:	69bb      	ldr	r3, [r7, #24]
 80070dc:	015a      	lsls	r2, r3, #5
 80070de:	69fb      	ldr	r3, [r7, #28]
 80070e0:	4413      	add	r3, r2
 80070e2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80070e6:	461a      	mov	r2, r3
 80070e8:	68bb      	ldr	r3, [r7, #8]
 80070ea:	69db      	ldr	r3, [r3, #28]
 80070ec:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80070ee:	68bb      	ldr	r3, [r7, #8]
 80070f0:	791b      	ldrb	r3, [r3, #4]
 80070f2:	2b01      	cmp	r3, #1
 80070f4:	d128      	bne.n	8007148 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80070f6:	69fb      	ldr	r3, [r7, #28]
 80070f8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80070fc:	689b      	ldr	r3, [r3, #8]
 80070fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007102:	2b00      	cmp	r3, #0
 8007104:	d110      	bne.n	8007128 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007106:	69bb      	ldr	r3, [r7, #24]
 8007108:	015a      	lsls	r2, r3, #5
 800710a:	69fb      	ldr	r3, [r7, #28]
 800710c:	4413      	add	r3, r2
 800710e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	69ba      	ldr	r2, [r7, #24]
 8007116:	0151      	lsls	r1, r2, #5
 8007118:	69fa      	ldr	r2, [r7, #28]
 800711a:	440a      	add	r2, r1
 800711c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007120:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007124:	6013      	str	r3, [r2, #0]
 8007126:	e00f      	b.n	8007148 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007128:	69bb      	ldr	r3, [r7, #24]
 800712a:	015a      	lsls	r2, r3, #5
 800712c:	69fb      	ldr	r3, [r7, #28]
 800712e:	4413      	add	r3, r2
 8007130:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	69ba      	ldr	r2, [r7, #24]
 8007138:	0151      	lsls	r1, r2, #5
 800713a:	69fa      	ldr	r2, [r7, #28]
 800713c:	440a      	add	r2, r1
 800713e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007142:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007146:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007148:	69bb      	ldr	r3, [r7, #24]
 800714a:	015a      	lsls	r2, r3, #5
 800714c:	69fb      	ldr	r3, [r7, #28]
 800714e:	4413      	add	r3, r2
 8007150:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	69ba      	ldr	r2, [r7, #24]
 8007158:	0151      	lsls	r1, r2, #5
 800715a:	69fa      	ldr	r2, [r7, #28]
 800715c:	440a      	add	r2, r1
 800715e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007162:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8007166:	6013      	str	r3, [r2, #0]
 8007168:	e166      	b.n	8007438 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800716a:	69bb      	ldr	r3, [r7, #24]
 800716c:	015a      	lsls	r2, r3, #5
 800716e:	69fb      	ldr	r3, [r7, #28]
 8007170:	4413      	add	r3, r2
 8007172:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	69ba      	ldr	r2, [r7, #24]
 800717a:	0151      	lsls	r1, r2, #5
 800717c:	69fa      	ldr	r2, [r7, #28]
 800717e:	440a      	add	r2, r1
 8007180:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007184:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8007188:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800718a:	68bb      	ldr	r3, [r7, #8]
 800718c:	791b      	ldrb	r3, [r3, #4]
 800718e:	2b01      	cmp	r3, #1
 8007190:	d015      	beq.n	80071be <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8007192:	68bb      	ldr	r3, [r7, #8]
 8007194:	691b      	ldr	r3, [r3, #16]
 8007196:	2b00      	cmp	r3, #0
 8007198:	f000 814e 	beq.w	8007438 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800719c:	69fb      	ldr	r3, [r7, #28]
 800719e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80071a2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80071a4:	68bb      	ldr	r3, [r7, #8]
 80071a6:	781b      	ldrb	r3, [r3, #0]
 80071a8:	f003 030f 	and.w	r3, r3, #15
 80071ac:	2101      	movs	r1, #1
 80071ae:	fa01 f303 	lsl.w	r3, r1, r3
 80071b2:	69f9      	ldr	r1, [r7, #28]
 80071b4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80071b8:	4313      	orrs	r3, r2
 80071ba:	634b      	str	r3, [r1, #52]	@ 0x34
 80071bc:	e13c      	b.n	8007438 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80071be:	69fb      	ldr	r3, [r7, #28]
 80071c0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80071c4:	689b      	ldr	r3, [r3, #8]
 80071c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d110      	bne.n	80071f0 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80071ce:	69bb      	ldr	r3, [r7, #24]
 80071d0:	015a      	lsls	r2, r3, #5
 80071d2:	69fb      	ldr	r3, [r7, #28]
 80071d4:	4413      	add	r3, r2
 80071d6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	69ba      	ldr	r2, [r7, #24]
 80071de:	0151      	lsls	r1, r2, #5
 80071e0:	69fa      	ldr	r2, [r7, #28]
 80071e2:	440a      	add	r2, r1
 80071e4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80071e8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80071ec:	6013      	str	r3, [r2, #0]
 80071ee:	e00f      	b.n	8007210 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80071f0:	69bb      	ldr	r3, [r7, #24]
 80071f2:	015a      	lsls	r2, r3, #5
 80071f4:	69fb      	ldr	r3, [r7, #28]
 80071f6:	4413      	add	r3, r2
 80071f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	69ba      	ldr	r2, [r7, #24]
 8007200:	0151      	lsls	r1, r2, #5
 8007202:	69fa      	ldr	r2, [r7, #28]
 8007204:	440a      	add	r2, r1
 8007206:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800720a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800720e:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8007210:	68bb      	ldr	r3, [r7, #8]
 8007212:	68d9      	ldr	r1, [r3, #12]
 8007214:	68bb      	ldr	r3, [r7, #8]
 8007216:	781a      	ldrb	r2, [r3, #0]
 8007218:	68bb      	ldr	r3, [r7, #8]
 800721a:	691b      	ldr	r3, [r3, #16]
 800721c:	b298      	uxth	r0, r3
 800721e:	79fb      	ldrb	r3, [r7, #7]
 8007220:	9300      	str	r3, [sp, #0]
 8007222:	4603      	mov	r3, r0
 8007224:	68f8      	ldr	r0, [r7, #12]
 8007226:	f000 f9b9 	bl	800759c <USB_WritePacket>
 800722a:	e105      	b.n	8007438 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800722c:	69bb      	ldr	r3, [r7, #24]
 800722e:	015a      	lsls	r2, r3, #5
 8007230:	69fb      	ldr	r3, [r7, #28]
 8007232:	4413      	add	r3, r2
 8007234:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007238:	691b      	ldr	r3, [r3, #16]
 800723a:	69ba      	ldr	r2, [r7, #24]
 800723c:	0151      	lsls	r1, r2, #5
 800723e:	69fa      	ldr	r2, [r7, #28]
 8007240:	440a      	add	r2, r1
 8007242:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007246:	0cdb      	lsrs	r3, r3, #19
 8007248:	04db      	lsls	r3, r3, #19
 800724a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800724c:	69bb      	ldr	r3, [r7, #24]
 800724e:	015a      	lsls	r2, r3, #5
 8007250:	69fb      	ldr	r3, [r7, #28]
 8007252:	4413      	add	r3, r2
 8007254:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007258:	691b      	ldr	r3, [r3, #16]
 800725a:	69ba      	ldr	r2, [r7, #24]
 800725c:	0151      	lsls	r1, r2, #5
 800725e:	69fa      	ldr	r2, [r7, #28]
 8007260:	440a      	add	r2, r1
 8007262:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007266:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800726a:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800726e:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8007270:	69bb      	ldr	r3, [r7, #24]
 8007272:	2b00      	cmp	r3, #0
 8007274:	d132      	bne.n	80072dc <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 8007276:	68bb      	ldr	r3, [r7, #8]
 8007278:	691b      	ldr	r3, [r3, #16]
 800727a:	2b00      	cmp	r3, #0
 800727c:	d003      	beq.n	8007286 <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 800727e:	68bb      	ldr	r3, [r7, #8]
 8007280:	689a      	ldr	r2, [r3, #8]
 8007282:	68bb      	ldr	r3, [r7, #8]
 8007284:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8007286:	68bb      	ldr	r3, [r7, #8]
 8007288:	689a      	ldr	r2, [r3, #8]
 800728a:	68bb      	ldr	r3, [r7, #8]
 800728c:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800728e:	69bb      	ldr	r3, [r7, #24]
 8007290:	015a      	lsls	r2, r3, #5
 8007292:	69fb      	ldr	r3, [r7, #28]
 8007294:	4413      	add	r3, r2
 8007296:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800729a:	691a      	ldr	r2, [r3, #16]
 800729c:	68bb      	ldr	r3, [r7, #8]
 800729e:	6a1b      	ldr	r3, [r3, #32]
 80072a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80072a4:	69b9      	ldr	r1, [r7, #24]
 80072a6:	0148      	lsls	r0, r1, #5
 80072a8:	69f9      	ldr	r1, [r7, #28]
 80072aa:	4401      	add	r1, r0
 80072ac:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80072b0:	4313      	orrs	r3, r2
 80072b2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80072b4:	69bb      	ldr	r3, [r7, #24]
 80072b6:	015a      	lsls	r2, r3, #5
 80072b8:	69fb      	ldr	r3, [r7, #28]
 80072ba:	4413      	add	r3, r2
 80072bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80072c0:	691b      	ldr	r3, [r3, #16]
 80072c2:	69ba      	ldr	r2, [r7, #24]
 80072c4:	0151      	lsls	r1, r2, #5
 80072c6:	69fa      	ldr	r2, [r7, #28]
 80072c8:	440a      	add	r2, r1
 80072ca:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80072ce:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80072d2:	6113      	str	r3, [r2, #16]
 80072d4:	e062      	b.n	800739c <USB_EPStartXfer+0x490>
 80072d6:	bf00      	nop
 80072d8:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 80072dc:	68bb      	ldr	r3, [r7, #8]
 80072de:	691b      	ldr	r3, [r3, #16]
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d123      	bne.n	800732c <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80072e4:	69bb      	ldr	r3, [r7, #24]
 80072e6:	015a      	lsls	r2, r3, #5
 80072e8:	69fb      	ldr	r3, [r7, #28]
 80072ea:	4413      	add	r3, r2
 80072ec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80072f0:	691a      	ldr	r2, [r3, #16]
 80072f2:	68bb      	ldr	r3, [r7, #8]
 80072f4:	689b      	ldr	r3, [r3, #8]
 80072f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80072fa:	69b9      	ldr	r1, [r7, #24]
 80072fc:	0148      	lsls	r0, r1, #5
 80072fe:	69f9      	ldr	r1, [r7, #28]
 8007300:	4401      	add	r1, r0
 8007302:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8007306:	4313      	orrs	r3, r2
 8007308:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800730a:	69bb      	ldr	r3, [r7, #24]
 800730c:	015a      	lsls	r2, r3, #5
 800730e:	69fb      	ldr	r3, [r7, #28]
 8007310:	4413      	add	r3, r2
 8007312:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007316:	691b      	ldr	r3, [r3, #16]
 8007318:	69ba      	ldr	r2, [r7, #24]
 800731a:	0151      	lsls	r1, r2, #5
 800731c:	69fa      	ldr	r2, [r7, #28]
 800731e:	440a      	add	r2, r1
 8007320:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007324:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007328:	6113      	str	r3, [r2, #16]
 800732a:	e037      	b.n	800739c <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800732c:	68bb      	ldr	r3, [r7, #8]
 800732e:	691a      	ldr	r2, [r3, #16]
 8007330:	68bb      	ldr	r3, [r7, #8]
 8007332:	689b      	ldr	r3, [r3, #8]
 8007334:	4413      	add	r3, r2
 8007336:	1e5a      	subs	r2, r3, #1
 8007338:	68bb      	ldr	r3, [r7, #8]
 800733a:	689b      	ldr	r3, [r3, #8]
 800733c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007340:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8007342:	68bb      	ldr	r3, [r7, #8]
 8007344:	689b      	ldr	r3, [r3, #8]
 8007346:	8afa      	ldrh	r2, [r7, #22]
 8007348:	fb03 f202 	mul.w	r2, r3, r2
 800734c:	68bb      	ldr	r3, [r7, #8]
 800734e:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8007350:	69bb      	ldr	r3, [r7, #24]
 8007352:	015a      	lsls	r2, r3, #5
 8007354:	69fb      	ldr	r3, [r7, #28]
 8007356:	4413      	add	r3, r2
 8007358:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800735c:	691a      	ldr	r2, [r3, #16]
 800735e:	8afb      	ldrh	r3, [r7, #22]
 8007360:	04d9      	lsls	r1, r3, #19
 8007362:	4b38      	ldr	r3, [pc, #224]	@ (8007444 <USB_EPStartXfer+0x538>)
 8007364:	400b      	ands	r3, r1
 8007366:	69b9      	ldr	r1, [r7, #24]
 8007368:	0148      	lsls	r0, r1, #5
 800736a:	69f9      	ldr	r1, [r7, #28]
 800736c:	4401      	add	r1, r0
 800736e:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8007372:	4313      	orrs	r3, r2
 8007374:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8007376:	69bb      	ldr	r3, [r7, #24]
 8007378:	015a      	lsls	r2, r3, #5
 800737a:	69fb      	ldr	r3, [r7, #28]
 800737c:	4413      	add	r3, r2
 800737e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007382:	691a      	ldr	r2, [r3, #16]
 8007384:	68bb      	ldr	r3, [r7, #8]
 8007386:	6a1b      	ldr	r3, [r3, #32]
 8007388:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800738c:	69b9      	ldr	r1, [r7, #24]
 800738e:	0148      	lsls	r0, r1, #5
 8007390:	69f9      	ldr	r1, [r7, #28]
 8007392:	4401      	add	r1, r0
 8007394:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8007398:	4313      	orrs	r3, r2
 800739a:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 800739c:	79fb      	ldrb	r3, [r7, #7]
 800739e:	2b01      	cmp	r3, #1
 80073a0:	d10d      	bne.n	80073be <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80073a2:	68bb      	ldr	r3, [r7, #8]
 80073a4:	68db      	ldr	r3, [r3, #12]
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d009      	beq.n	80073be <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80073aa:	68bb      	ldr	r3, [r7, #8]
 80073ac:	68d9      	ldr	r1, [r3, #12]
 80073ae:	69bb      	ldr	r3, [r7, #24]
 80073b0:	015a      	lsls	r2, r3, #5
 80073b2:	69fb      	ldr	r3, [r7, #28]
 80073b4:	4413      	add	r3, r2
 80073b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80073ba:	460a      	mov	r2, r1
 80073bc:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80073be:	68bb      	ldr	r3, [r7, #8]
 80073c0:	791b      	ldrb	r3, [r3, #4]
 80073c2:	2b01      	cmp	r3, #1
 80073c4:	d128      	bne.n	8007418 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80073c6:	69fb      	ldr	r3, [r7, #28]
 80073c8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80073cc:	689b      	ldr	r3, [r3, #8]
 80073ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d110      	bne.n	80073f8 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80073d6:	69bb      	ldr	r3, [r7, #24]
 80073d8:	015a      	lsls	r2, r3, #5
 80073da:	69fb      	ldr	r3, [r7, #28]
 80073dc:	4413      	add	r3, r2
 80073de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	69ba      	ldr	r2, [r7, #24]
 80073e6:	0151      	lsls	r1, r2, #5
 80073e8:	69fa      	ldr	r2, [r7, #28]
 80073ea:	440a      	add	r2, r1
 80073ec:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80073f0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80073f4:	6013      	str	r3, [r2, #0]
 80073f6:	e00f      	b.n	8007418 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80073f8:	69bb      	ldr	r3, [r7, #24]
 80073fa:	015a      	lsls	r2, r3, #5
 80073fc:	69fb      	ldr	r3, [r7, #28]
 80073fe:	4413      	add	r3, r2
 8007400:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	69ba      	ldr	r2, [r7, #24]
 8007408:	0151      	lsls	r1, r2, #5
 800740a:	69fa      	ldr	r2, [r7, #28]
 800740c:	440a      	add	r2, r1
 800740e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007412:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007416:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007418:	69bb      	ldr	r3, [r7, #24]
 800741a:	015a      	lsls	r2, r3, #5
 800741c:	69fb      	ldr	r3, [r7, #28]
 800741e:	4413      	add	r3, r2
 8007420:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	69ba      	ldr	r2, [r7, #24]
 8007428:	0151      	lsls	r1, r2, #5
 800742a:	69fa      	ldr	r2, [r7, #28]
 800742c:	440a      	add	r2, r1
 800742e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007432:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8007436:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007438:	2300      	movs	r3, #0
}
 800743a:	4618      	mov	r0, r3
 800743c:	3720      	adds	r7, #32
 800743e:	46bd      	mov	sp, r7
 8007440:	bd80      	pop	{r7, pc}
 8007442:	bf00      	nop
 8007444:	1ff80000 	.word	0x1ff80000

08007448 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007448:	b480      	push	{r7}
 800744a:	b087      	sub	sp, #28
 800744c:	af00      	add	r7, sp, #0
 800744e:	6078      	str	r0, [r7, #4]
 8007450:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007452:	2300      	movs	r3, #0
 8007454:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8007456:	2300      	movs	r3, #0
 8007458:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800745e:	683b      	ldr	r3, [r7, #0]
 8007460:	785b      	ldrb	r3, [r3, #1]
 8007462:	2b01      	cmp	r3, #1
 8007464:	d14a      	bne.n	80074fc <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007466:	683b      	ldr	r3, [r7, #0]
 8007468:	781b      	ldrb	r3, [r3, #0]
 800746a:	015a      	lsls	r2, r3, #5
 800746c:	693b      	ldr	r3, [r7, #16]
 800746e:	4413      	add	r3, r2
 8007470:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800747a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800747e:	f040 8086 	bne.w	800758e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8007482:	683b      	ldr	r3, [r7, #0]
 8007484:	781b      	ldrb	r3, [r3, #0]
 8007486:	015a      	lsls	r2, r3, #5
 8007488:	693b      	ldr	r3, [r7, #16]
 800748a:	4413      	add	r3, r2
 800748c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	683a      	ldr	r2, [r7, #0]
 8007494:	7812      	ldrb	r2, [r2, #0]
 8007496:	0151      	lsls	r1, r2, #5
 8007498:	693a      	ldr	r2, [r7, #16]
 800749a:	440a      	add	r2, r1
 800749c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80074a0:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80074a4:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80074a6:	683b      	ldr	r3, [r7, #0]
 80074a8:	781b      	ldrb	r3, [r3, #0]
 80074aa:	015a      	lsls	r2, r3, #5
 80074ac:	693b      	ldr	r3, [r7, #16]
 80074ae:	4413      	add	r3, r2
 80074b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	683a      	ldr	r2, [r7, #0]
 80074b8:	7812      	ldrb	r2, [r2, #0]
 80074ba:	0151      	lsls	r1, r2, #5
 80074bc:	693a      	ldr	r2, [r7, #16]
 80074be:	440a      	add	r2, r1
 80074c0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80074c4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80074c8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	3301      	adds	r3, #1
 80074ce:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	f242 7210 	movw	r2, #10000	@ 0x2710
 80074d6:	4293      	cmp	r3, r2
 80074d8:	d902      	bls.n	80074e0 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80074da:	2301      	movs	r3, #1
 80074dc:	75fb      	strb	r3, [r7, #23]
          break;
 80074de:	e056      	b.n	800758e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80074e0:	683b      	ldr	r3, [r7, #0]
 80074e2:	781b      	ldrb	r3, [r3, #0]
 80074e4:	015a      	lsls	r2, r3, #5
 80074e6:	693b      	ldr	r3, [r7, #16]
 80074e8:	4413      	add	r3, r2
 80074ea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80074f4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80074f8:	d0e7      	beq.n	80074ca <USB_EPStopXfer+0x82>
 80074fa:	e048      	b.n	800758e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80074fc:	683b      	ldr	r3, [r7, #0]
 80074fe:	781b      	ldrb	r3, [r3, #0]
 8007500:	015a      	lsls	r2, r3, #5
 8007502:	693b      	ldr	r3, [r7, #16]
 8007504:	4413      	add	r3, r2
 8007506:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007510:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007514:	d13b      	bne.n	800758e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8007516:	683b      	ldr	r3, [r7, #0]
 8007518:	781b      	ldrb	r3, [r3, #0]
 800751a:	015a      	lsls	r2, r3, #5
 800751c:	693b      	ldr	r3, [r7, #16]
 800751e:	4413      	add	r3, r2
 8007520:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	683a      	ldr	r2, [r7, #0]
 8007528:	7812      	ldrb	r2, [r2, #0]
 800752a:	0151      	lsls	r1, r2, #5
 800752c:	693a      	ldr	r2, [r7, #16]
 800752e:	440a      	add	r2, r1
 8007530:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007534:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007538:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800753a:	683b      	ldr	r3, [r7, #0]
 800753c:	781b      	ldrb	r3, [r3, #0]
 800753e:	015a      	lsls	r2, r3, #5
 8007540:	693b      	ldr	r3, [r7, #16]
 8007542:	4413      	add	r3, r2
 8007544:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	683a      	ldr	r2, [r7, #0]
 800754c:	7812      	ldrb	r2, [r2, #0]
 800754e:	0151      	lsls	r1, r2, #5
 8007550:	693a      	ldr	r2, [r7, #16]
 8007552:	440a      	add	r2, r1
 8007554:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007558:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800755c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	3301      	adds	r3, #1
 8007562:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	f242 7210 	movw	r2, #10000	@ 0x2710
 800756a:	4293      	cmp	r3, r2
 800756c:	d902      	bls.n	8007574 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800756e:	2301      	movs	r3, #1
 8007570:	75fb      	strb	r3, [r7, #23]
          break;
 8007572:	e00c      	b.n	800758e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8007574:	683b      	ldr	r3, [r7, #0]
 8007576:	781b      	ldrb	r3, [r3, #0]
 8007578:	015a      	lsls	r2, r3, #5
 800757a:	693b      	ldr	r3, [r7, #16]
 800757c:	4413      	add	r3, r2
 800757e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007588:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800758c:	d0e7      	beq.n	800755e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800758e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007590:	4618      	mov	r0, r3
 8007592:	371c      	adds	r7, #28
 8007594:	46bd      	mov	sp, r7
 8007596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800759a:	4770      	bx	lr

0800759c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800759c:	b480      	push	{r7}
 800759e:	b089      	sub	sp, #36	@ 0x24
 80075a0:	af00      	add	r7, sp, #0
 80075a2:	60f8      	str	r0, [r7, #12]
 80075a4:	60b9      	str	r1, [r7, #8]
 80075a6:	4611      	mov	r1, r2
 80075a8:	461a      	mov	r2, r3
 80075aa:	460b      	mov	r3, r1
 80075ac:	71fb      	strb	r3, [r7, #7]
 80075ae:	4613      	mov	r3, r2
 80075b0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80075b6:	68bb      	ldr	r3, [r7, #8]
 80075b8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80075ba:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d123      	bne.n	800760a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80075c2:	88bb      	ldrh	r3, [r7, #4]
 80075c4:	3303      	adds	r3, #3
 80075c6:	089b      	lsrs	r3, r3, #2
 80075c8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80075ca:	2300      	movs	r3, #0
 80075cc:	61bb      	str	r3, [r7, #24]
 80075ce:	e018      	b.n	8007602 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80075d0:	79fb      	ldrb	r3, [r7, #7]
 80075d2:	031a      	lsls	r2, r3, #12
 80075d4:	697b      	ldr	r3, [r7, #20]
 80075d6:	4413      	add	r3, r2
 80075d8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80075dc:	461a      	mov	r2, r3
 80075de:	69fb      	ldr	r3, [r7, #28]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	6013      	str	r3, [r2, #0]
      pSrc++;
 80075e4:	69fb      	ldr	r3, [r7, #28]
 80075e6:	3301      	adds	r3, #1
 80075e8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80075ea:	69fb      	ldr	r3, [r7, #28]
 80075ec:	3301      	adds	r3, #1
 80075ee:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80075f0:	69fb      	ldr	r3, [r7, #28]
 80075f2:	3301      	adds	r3, #1
 80075f4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80075f6:	69fb      	ldr	r3, [r7, #28]
 80075f8:	3301      	adds	r3, #1
 80075fa:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80075fc:	69bb      	ldr	r3, [r7, #24]
 80075fe:	3301      	adds	r3, #1
 8007600:	61bb      	str	r3, [r7, #24]
 8007602:	69ba      	ldr	r2, [r7, #24]
 8007604:	693b      	ldr	r3, [r7, #16]
 8007606:	429a      	cmp	r2, r3
 8007608:	d3e2      	bcc.n	80075d0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800760a:	2300      	movs	r3, #0
}
 800760c:	4618      	mov	r0, r3
 800760e:	3724      	adds	r7, #36	@ 0x24
 8007610:	46bd      	mov	sp, r7
 8007612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007616:	4770      	bx	lr

08007618 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007618:	b480      	push	{r7}
 800761a:	b08b      	sub	sp, #44	@ 0x2c
 800761c:	af00      	add	r7, sp, #0
 800761e:	60f8      	str	r0, [r7, #12]
 8007620:	60b9      	str	r1, [r7, #8]
 8007622:	4613      	mov	r3, r2
 8007624:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800762a:	68bb      	ldr	r3, [r7, #8]
 800762c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800762e:	88fb      	ldrh	r3, [r7, #6]
 8007630:	089b      	lsrs	r3, r3, #2
 8007632:	b29b      	uxth	r3, r3
 8007634:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8007636:	88fb      	ldrh	r3, [r7, #6]
 8007638:	f003 0303 	and.w	r3, r3, #3
 800763c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800763e:	2300      	movs	r3, #0
 8007640:	623b      	str	r3, [r7, #32]
 8007642:	e014      	b.n	800766e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007644:	69bb      	ldr	r3, [r7, #24]
 8007646:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800764a:	681a      	ldr	r2, [r3, #0]
 800764c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800764e:	601a      	str	r2, [r3, #0]
    pDest++;
 8007650:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007652:	3301      	adds	r3, #1
 8007654:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007656:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007658:	3301      	adds	r3, #1
 800765a:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800765c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800765e:	3301      	adds	r3, #1
 8007660:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007662:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007664:	3301      	adds	r3, #1
 8007666:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8007668:	6a3b      	ldr	r3, [r7, #32]
 800766a:	3301      	adds	r3, #1
 800766c:	623b      	str	r3, [r7, #32]
 800766e:	6a3a      	ldr	r2, [r7, #32]
 8007670:	697b      	ldr	r3, [r7, #20]
 8007672:	429a      	cmp	r2, r3
 8007674:	d3e6      	bcc.n	8007644 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8007676:	8bfb      	ldrh	r3, [r7, #30]
 8007678:	2b00      	cmp	r3, #0
 800767a:	d01e      	beq.n	80076ba <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800767c:	2300      	movs	r3, #0
 800767e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8007680:	69bb      	ldr	r3, [r7, #24]
 8007682:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007686:	461a      	mov	r2, r3
 8007688:	f107 0310 	add.w	r3, r7, #16
 800768c:	6812      	ldr	r2, [r2, #0]
 800768e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8007690:	693a      	ldr	r2, [r7, #16]
 8007692:	6a3b      	ldr	r3, [r7, #32]
 8007694:	b2db      	uxtb	r3, r3
 8007696:	00db      	lsls	r3, r3, #3
 8007698:	fa22 f303 	lsr.w	r3, r2, r3
 800769c:	b2da      	uxtb	r2, r3
 800769e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076a0:	701a      	strb	r2, [r3, #0]
      i++;
 80076a2:	6a3b      	ldr	r3, [r7, #32]
 80076a4:	3301      	adds	r3, #1
 80076a6:	623b      	str	r3, [r7, #32]
      pDest++;
 80076a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076aa:	3301      	adds	r3, #1
 80076ac:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 80076ae:	8bfb      	ldrh	r3, [r7, #30]
 80076b0:	3b01      	subs	r3, #1
 80076b2:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80076b4:	8bfb      	ldrh	r3, [r7, #30]
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d1ea      	bne.n	8007690 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80076ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80076bc:	4618      	mov	r0, r3
 80076be:	372c      	adds	r7, #44	@ 0x2c
 80076c0:	46bd      	mov	sp, r7
 80076c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c6:	4770      	bx	lr

080076c8 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80076c8:	b480      	push	{r7}
 80076ca:	b085      	sub	sp, #20
 80076cc:	af00      	add	r7, sp, #0
 80076ce:	6078      	str	r0, [r7, #4]
 80076d0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80076d6:	683b      	ldr	r3, [r7, #0]
 80076d8:	781b      	ldrb	r3, [r3, #0]
 80076da:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80076dc:	683b      	ldr	r3, [r7, #0]
 80076de:	785b      	ldrb	r3, [r3, #1]
 80076e0:	2b01      	cmp	r3, #1
 80076e2:	d12c      	bne.n	800773e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80076e4:	68bb      	ldr	r3, [r7, #8]
 80076e6:	015a      	lsls	r2, r3, #5
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	4413      	add	r3, r2
 80076ec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	db12      	blt.n	800771c <USB_EPSetStall+0x54>
 80076f6:	68bb      	ldr	r3, [r7, #8]
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d00f      	beq.n	800771c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80076fc:	68bb      	ldr	r3, [r7, #8]
 80076fe:	015a      	lsls	r2, r3, #5
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	4413      	add	r3, r2
 8007704:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	68ba      	ldr	r2, [r7, #8]
 800770c:	0151      	lsls	r1, r2, #5
 800770e:	68fa      	ldr	r2, [r7, #12]
 8007710:	440a      	add	r2, r1
 8007712:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007716:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800771a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800771c:	68bb      	ldr	r3, [r7, #8]
 800771e:	015a      	lsls	r2, r3, #5
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	4413      	add	r3, r2
 8007724:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	68ba      	ldr	r2, [r7, #8]
 800772c:	0151      	lsls	r1, r2, #5
 800772e:	68fa      	ldr	r2, [r7, #12]
 8007730:	440a      	add	r2, r1
 8007732:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007736:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800773a:	6013      	str	r3, [r2, #0]
 800773c:	e02b      	b.n	8007796 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800773e:	68bb      	ldr	r3, [r7, #8]
 8007740:	015a      	lsls	r2, r3, #5
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	4413      	add	r3, r2
 8007746:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	2b00      	cmp	r3, #0
 800774e:	db12      	blt.n	8007776 <USB_EPSetStall+0xae>
 8007750:	68bb      	ldr	r3, [r7, #8]
 8007752:	2b00      	cmp	r3, #0
 8007754:	d00f      	beq.n	8007776 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8007756:	68bb      	ldr	r3, [r7, #8]
 8007758:	015a      	lsls	r2, r3, #5
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	4413      	add	r3, r2
 800775e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	68ba      	ldr	r2, [r7, #8]
 8007766:	0151      	lsls	r1, r2, #5
 8007768:	68fa      	ldr	r2, [r7, #12]
 800776a:	440a      	add	r2, r1
 800776c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007770:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8007774:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8007776:	68bb      	ldr	r3, [r7, #8]
 8007778:	015a      	lsls	r2, r3, #5
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	4413      	add	r3, r2
 800777e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	68ba      	ldr	r2, [r7, #8]
 8007786:	0151      	lsls	r1, r2, #5
 8007788:	68fa      	ldr	r2, [r7, #12]
 800778a:	440a      	add	r2, r1
 800778c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007790:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8007794:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007796:	2300      	movs	r3, #0
}
 8007798:	4618      	mov	r0, r3
 800779a:	3714      	adds	r7, #20
 800779c:	46bd      	mov	sp, r7
 800779e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a2:	4770      	bx	lr

080077a4 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80077a4:	b480      	push	{r7}
 80077a6:	b085      	sub	sp, #20
 80077a8:	af00      	add	r7, sp, #0
 80077aa:	6078      	str	r0, [r7, #4]
 80077ac:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80077b2:	683b      	ldr	r3, [r7, #0]
 80077b4:	781b      	ldrb	r3, [r3, #0]
 80077b6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80077b8:	683b      	ldr	r3, [r7, #0]
 80077ba:	785b      	ldrb	r3, [r3, #1]
 80077bc:	2b01      	cmp	r3, #1
 80077be:	d128      	bne.n	8007812 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80077c0:	68bb      	ldr	r3, [r7, #8]
 80077c2:	015a      	lsls	r2, r3, #5
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	4413      	add	r3, r2
 80077c8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	68ba      	ldr	r2, [r7, #8]
 80077d0:	0151      	lsls	r1, r2, #5
 80077d2:	68fa      	ldr	r2, [r7, #12]
 80077d4:	440a      	add	r2, r1
 80077d6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80077da:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80077de:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80077e0:	683b      	ldr	r3, [r7, #0]
 80077e2:	791b      	ldrb	r3, [r3, #4]
 80077e4:	2b03      	cmp	r3, #3
 80077e6:	d003      	beq.n	80077f0 <USB_EPClearStall+0x4c>
 80077e8:	683b      	ldr	r3, [r7, #0]
 80077ea:	791b      	ldrb	r3, [r3, #4]
 80077ec:	2b02      	cmp	r3, #2
 80077ee:	d138      	bne.n	8007862 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80077f0:	68bb      	ldr	r3, [r7, #8]
 80077f2:	015a      	lsls	r2, r3, #5
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	4413      	add	r3, r2
 80077f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	68ba      	ldr	r2, [r7, #8]
 8007800:	0151      	lsls	r1, r2, #5
 8007802:	68fa      	ldr	r2, [r7, #12]
 8007804:	440a      	add	r2, r1
 8007806:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800780a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800780e:	6013      	str	r3, [r2, #0]
 8007810:	e027      	b.n	8007862 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007812:	68bb      	ldr	r3, [r7, #8]
 8007814:	015a      	lsls	r2, r3, #5
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	4413      	add	r3, r2
 800781a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	68ba      	ldr	r2, [r7, #8]
 8007822:	0151      	lsls	r1, r2, #5
 8007824:	68fa      	ldr	r2, [r7, #12]
 8007826:	440a      	add	r2, r1
 8007828:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800782c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007830:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007832:	683b      	ldr	r3, [r7, #0]
 8007834:	791b      	ldrb	r3, [r3, #4]
 8007836:	2b03      	cmp	r3, #3
 8007838:	d003      	beq.n	8007842 <USB_EPClearStall+0x9e>
 800783a:	683b      	ldr	r3, [r7, #0]
 800783c:	791b      	ldrb	r3, [r3, #4]
 800783e:	2b02      	cmp	r3, #2
 8007840:	d10f      	bne.n	8007862 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007842:	68bb      	ldr	r3, [r7, #8]
 8007844:	015a      	lsls	r2, r3, #5
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	4413      	add	r3, r2
 800784a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	68ba      	ldr	r2, [r7, #8]
 8007852:	0151      	lsls	r1, r2, #5
 8007854:	68fa      	ldr	r2, [r7, #12]
 8007856:	440a      	add	r2, r1
 8007858:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800785c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007860:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8007862:	2300      	movs	r3, #0
}
 8007864:	4618      	mov	r0, r3
 8007866:	3714      	adds	r7, #20
 8007868:	46bd      	mov	sp, r7
 800786a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800786e:	4770      	bx	lr

08007870 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8007870:	b480      	push	{r7}
 8007872:	b085      	sub	sp, #20
 8007874:	af00      	add	r7, sp, #0
 8007876:	6078      	str	r0, [r7, #4]
 8007878:	460b      	mov	r3, r1
 800787a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	68fa      	ldr	r2, [r7, #12]
 800788a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800788e:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8007892:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800789a:	681a      	ldr	r2, [r3, #0]
 800789c:	78fb      	ldrb	r3, [r7, #3]
 800789e:	011b      	lsls	r3, r3, #4
 80078a0:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 80078a4:	68f9      	ldr	r1, [r7, #12]
 80078a6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80078aa:	4313      	orrs	r3, r2
 80078ac:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80078ae:	2300      	movs	r3, #0
}
 80078b0:	4618      	mov	r0, r3
 80078b2:	3714      	adds	r7, #20
 80078b4:	46bd      	mov	sp, r7
 80078b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ba:	4770      	bx	lr

080078bc <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80078bc:	b480      	push	{r7}
 80078be:	b085      	sub	sp, #20
 80078c0:	af00      	add	r7, sp, #0
 80078c2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	68fa      	ldr	r2, [r7, #12]
 80078d2:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80078d6:	f023 0303 	bic.w	r3, r3, #3
 80078da:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80078e2:	685b      	ldr	r3, [r3, #4]
 80078e4:	68fa      	ldr	r2, [r7, #12]
 80078e6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80078ea:	f023 0302 	bic.w	r3, r3, #2
 80078ee:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80078f0:	2300      	movs	r3, #0
}
 80078f2:	4618      	mov	r0, r3
 80078f4:	3714      	adds	r7, #20
 80078f6:	46bd      	mov	sp, r7
 80078f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078fc:	4770      	bx	lr

080078fe <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80078fe:	b480      	push	{r7}
 8007900:	b085      	sub	sp, #20
 8007902:	af00      	add	r7, sp, #0
 8007904:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	68fa      	ldr	r2, [r7, #12]
 8007914:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8007918:	f023 0303 	bic.w	r3, r3, #3
 800791c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007924:	685b      	ldr	r3, [r3, #4]
 8007926:	68fa      	ldr	r2, [r7, #12]
 8007928:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800792c:	f043 0302 	orr.w	r3, r3, #2
 8007930:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007932:	2300      	movs	r3, #0
}
 8007934:	4618      	mov	r0, r3
 8007936:	3714      	adds	r7, #20
 8007938:	46bd      	mov	sp, r7
 800793a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800793e:	4770      	bx	lr

08007940 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8007940:	b480      	push	{r7}
 8007942:	b085      	sub	sp, #20
 8007944:	af00      	add	r7, sp, #0
 8007946:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	695b      	ldr	r3, [r3, #20]
 800794c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	699b      	ldr	r3, [r3, #24]
 8007952:	68fa      	ldr	r2, [r7, #12]
 8007954:	4013      	ands	r3, r2
 8007956:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007958:	68fb      	ldr	r3, [r7, #12]
}
 800795a:	4618      	mov	r0, r3
 800795c:	3714      	adds	r7, #20
 800795e:	46bd      	mov	sp, r7
 8007960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007964:	4770      	bx	lr

08007966 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8007966:	b480      	push	{r7}
 8007968:	b085      	sub	sp, #20
 800796a:	af00      	add	r7, sp, #0
 800796c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007978:	699b      	ldr	r3, [r3, #24]
 800797a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007982:	69db      	ldr	r3, [r3, #28]
 8007984:	68ba      	ldr	r2, [r7, #8]
 8007986:	4013      	ands	r3, r2
 8007988:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800798a:	68bb      	ldr	r3, [r7, #8]
 800798c:	0c1b      	lsrs	r3, r3, #16
}
 800798e:	4618      	mov	r0, r3
 8007990:	3714      	adds	r7, #20
 8007992:	46bd      	mov	sp, r7
 8007994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007998:	4770      	bx	lr

0800799a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800799a:	b480      	push	{r7}
 800799c:	b085      	sub	sp, #20
 800799e:	af00      	add	r7, sp, #0
 80079a0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80079ac:	699b      	ldr	r3, [r3, #24]
 80079ae:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80079b6:	69db      	ldr	r3, [r3, #28]
 80079b8:	68ba      	ldr	r2, [r7, #8]
 80079ba:	4013      	ands	r3, r2
 80079bc:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80079be:	68bb      	ldr	r3, [r7, #8]
 80079c0:	b29b      	uxth	r3, r3
}
 80079c2:	4618      	mov	r0, r3
 80079c4:	3714      	adds	r7, #20
 80079c6:	46bd      	mov	sp, r7
 80079c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079cc:	4770      	bx	lr

080079ce <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80079ce:	b480      	push	{r7}
 80079d0:	b085      	sub	sp, #20
 80079d2:	af00      	add	r7, sp, #0
 80079d4:	6078      	str	r0, [r7, #4]
 80079d6:	460b      	mov	r3, r1
 80079d8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80079de:	78fb      	ldrb	r3, [r7, #3]
 80079e0:	015a      	lsls	r2, r3, #5
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	4413      	add	r3, r2
 80079e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80079ea:	689b      	ldr	r3, [r3, #8]
 80079ec:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80079f4:	695b      	ldr	r3, [r3, #20]
 80079f6:	68ba      	ldr	r2, [r7, #8]
 80079f8:	4013      	ands	r3, r2
 80079fa:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80079fc:	68bb      	ldr	r3, [r7, #8]
}
 80079fe:	4618      	mov	r0, r3
 8007a00:	3714      	adds	r7, #20
 8007a02:	46bd      	mov	sp, r7
 8007a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a08:	4770      	bx	lr

08007a0a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007a0a:	b480      	push	{r7}
 8007a0c:	b087      	sub	sp, #28
 8007a0e:	af00      	add	r7, sp, #0
 8007a10:	6078      	str	r0, [r7, #4]
 8007a12:	460b      	mov	r3, r1
 8007a14:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8007a1a:	697b      	ldr	r3, [r7, #20]
 8007a1c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007a20:	691b      	ldr	r3, [r3, #16]
 8007a22:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8007a24:	697b      	ldr	r3, [r7, #20]
 8007a26:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007a2a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007a2c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8007a2e:	78fb      	ldrb	r3, [r7, #3]
 8007a30:	f003 030f 	and.w	r3, r3, #15
 8007a34:	68fa      	ldr	r2, [r7, #12]
 8007a36:	fa22 f303 	lsr.w	r3, r2, r3
 8007a3a:	01db      	lsls	r3, r3, #7
 8007a3c:	b2db      	uxtb	r3, r3
 8007a3e:	693a      	ldr	r2, [r7, #16]
 8007a40:	4313      	orrs	r3, r2
 8007a42:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8007a44:	78fb      	ldrb	r3, [r7, #3]
 8007a46:	015a      	lsls	r2, r3, #5
 8007a48:	697b      	ldr	r3, [r7, #20]
 8007a4a:	4413      	add	r3, r2
 8007a4c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007a50:	689b      	ldr	r3, [r3, #8]
 8007a52:	693a      	ldr	r2, [r7, #16]
 8007a54:	4013      	ands	r3, r2
 8007a56:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007a58:	68bb      	ldr	r3, [r7, #8]
}
 8007a5a:	4618      	mov	r0, r3
 8007a5c:	371c      	adds	r7, #28
 8007a5e:	46bd      	mov	sp, r7
 8007a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a64:	4770      	bx	lr

08007a66 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8007a66:	b480      	push	{r7}
 8007a68:	b083      	sub	sp, #12
 8007a6a:	af00      	add	r7, sp, #0
 8007a6c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	695b      	ldr	r3, [r3, #20]
 8007a72:	f003 0301 	and.w	r3, r3, #1
}
 8007a76:	4618      	mov	r0, r3
 8007a78:	370c      	adds	r7, #12
 8007a7a:	46bd      	mov	sp, r7
 8007a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a80:	4770      	bx	lr

08007a82 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8007a82:	b480      	push	{r7}
 8007a84:	b085      	sub	sp, #20
 8007a86:	af00      	add	r7, sp, #0
 8007a88:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	68fa      	ldr	r2, [r7, #12]
 8007a98:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007a9c:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8007aa0:	f023 0307 	bic.w	r3, r3, #7
 8007aa4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007aac:	685b      	ldr	r3, [r3, #4]
 8007aae:	68fa      	ldr	r2, [r7, #12]
 8007ab0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007ab4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007ab8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007aba:	2300      	movs	r3, #0
}
 8007abc:	4618      	mov	r0, r3
 8007abe:	3714      	adds	r7, #20
 8007ac0:	46bd      	mov	sp, r7
 8007ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac6:	4770      	bx	lr

08007ac8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8007ac8:	b480      	push	{r7}
 8007aca:	b087      	sub	sp, #28
 8007acc:	af00      	add	r7, sp, #0
 8007ace:	60f8      	str	r0, [r7, #12]
 8007ad0:	460b      	mov	r3, r1
 8007ad2:	607a      	str	r2, [r7, #4]
 8007ad4:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	333c      	adds	r3, #60	@ 0x3c
 8007ade:	3304      	adds	r3, #4
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8007ae4:	693b      	ldr	r3, [r7, #16]
 8007ae6:	4a26      	ldr	r2, [pc, #152]	@ (8007b80 <USB_EP0_OutStart+0xb8>)
 8007ae8:	4293      	cmp	r3, r2
 8007aea:	d90a      	bls.n	8007b02 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007aec:	697b      	ldr	r3, [r7, #20]
 8007aee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007af8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007afc:	d101      	bne.n	8007b02 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8007afe:	2300      	movs	r3, #0
 8007b00:	e037      	b.n	8007b72 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8007b02:	697b      	ldr	r3, [r7, #20]
 8007b04:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007b08:	461a      	mov	r2, r3
 8007b0a:	2300      	movs	r3, #0
 8007b0c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007b0e:	697b      	ldr	r3, [r7, #20]
 8007b10:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007b14:	691b      	ldr	r3, [r3, #16]
 8007b16:	697a      	ldr	r2, [r7, #20]
 8007b18:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007b1c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007b20:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8007b22:	697b      	ldr	r3, [r7, #20]
 8007b24:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007b28:	691b      	ldr	r3, [r3, #16]
 8007b2a:	697a      	ldr	r2, [r7, #20]
 8007b2c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007b30:	f043 0318 	orr.w	r3, r3, #24
 8007b34:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8007b36:	697b      	ldr	r3, [r7, #20]
 8007b38:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007b3c:	691b      	ldr	r3, [r3, #16]
 8007b3e:	697a      	ldr	r2, [r7, #20]
 8007b40:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007b44:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8007b48:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8007b4a:	7afb      	ldrb	r3, [r7, #11]
 8007b4c:	2b01      	cmp	r3, #1
 8007b4e:	d10f      	bne.n	8007b70 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8007b50:	697b      	ldr	r3, [r7, #20]
 8007b52:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007b56:	461a      	mov	r2, r3
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8007b5c:	697b      	ldr	r3, [r7, #20]
 8007b5e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	697a      	ldr	r2, [r7, #20]
 8007b66:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007b6a:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8007b6e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007b70:	2300      	movs	r3, #0
}
 8007b72:	4618      	mov	r0, r3
 8007b74:	371c      	adds	r7, #28
 8007b76:	46bd      	mov	sp, r7
 8007b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b7c:	4770      	bx	lr
 8007b7e:	bf00      	nop
 8007b80:	4f54300a 	.word	0x4f54300a

08007b84 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007b84:	b480      	push	{r7}
 8007b86:	b085      	sub	sp, #20
 8007b88:	af00      	add	r7, sp, #0
 8007b8a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007b8c:	2300      	movs	r3, #0
 8007b8e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	3301      	adds	r3, #1
 8007b94:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007b9c:	d901      	bls.n	8007ba2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007b9e:	2303      	movs	r3, #3
 8007ba0:	e01b      	b.n	8007bda <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	691b      	ldr	r3, [r3, #16]
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	daf2      	bge.n	8007b90 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007baa:	2300      	movs	r3, #0
 8007bac:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	691b      	ldr	r3, [r3, #16]
 8007bb2:	f043 0201 	orr.w	r2, r3, #1
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	3301      	adds	r3, #1
 8007bbe:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007bc6:	d901      	bls.n	8007bcc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007bc8:	2303      	movs	r3, #3
 8007bca:	e006      	b.n	8007bda <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	691b      	ldr	r3, [r3, #16]
 8007bd0:	f003 0301 	and.w	r3, r3, #1
 8007bd4:	2b01      	cmp	r3, #1
 8007bd6:	d0f0      	beq.n	8007bba <USB_CoreReset+0x36>

  return HAL_OK;
 8007bd8:	2300      	movs	r3, #0
}
 8007bda:	4618      	mov	r0, r3
 8007bdc:	3714      	adds	r7, #20
 8007bde:	46bd      	mov	sp, r7
 8007be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be4:	4770      	bx	lr
	...

08007be8 <__NVIC_SetPriority>:
{
 8007be8:	b480      	push	{r7}
 8007bea:	b083      	sub	sp, #12
 8007bec:	af00      	add	r7, sp, #0
 8007bee:	4603      	mov	r3, r0
 8007bf0:	6039      	str	r1, [r7, #0]
 8007bf2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007bf4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	db0a      	blt.n	8007c12 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007bfc:	683b      	ldr	r3, [r7, #0]
 8007bfe:	b2da      	uxtb	r2, r3
 8007c00:	490c      	ldr	r1, [pc, #48]	@ (8007c34 <__NVIC_SetPriority+0x4c>)
 8007c02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007c06:	0112      	lsls	r2, r2, #4
 8007c08:	b2d2      	uxtb	r2, r2
 8007c0a:	440b      	add	r3, r1
 8007c0c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8007c10:	e00a      	b.n	8007c28 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007c12:	683b      	ldr	r3, [r7, #0]
 8007c14:	b2da      	uxtb	r2, r3
 8007c16:	4908      	ldr	r1, [pc, #32]	@ (8007c38 <__NVIC_SetPriority+0x50>)
 8007c18:	79fb      	ldrb	r3, [r7, #7]
 8007c1a:	f003 030f 	and.w	r3, r3, #15
 8007c1e:	3b04      	subs	r3, #4
 8007c20:	0112      	lsls	r2, r2, #4
 8007c22:	b2d2      	uxtb	r2, r2
 8007c24:	440b      	add	r3, r1
 8007c26:	761a      	strb	r2, [r3, #24]
}
 8007c28:	bf00      	nop
 8007c2a:	370c      	adds	r7, #12
 8007c2c:	46bd      	mov	sp, r7
 8007c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c32:	4770      	bx	lr
 8007c34:	e000e100 	.word	0xe000e100
 8007c38:	e000ed00 	.word	0xe000ed00

08007c3c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8007c3c:	b580      	push	{r7, lr}
 8007c3e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8007c40:	4b05      	ldr	r3, [pc, #20]	@ (8007c58 <SysTick_Handler+0x1c>)
 8007c42:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8007c44:	f002 f984 	bl	8009f50 <xTaskGetSchedulerState>
 8007c48:	4603      	mov	r3, r0
 8007c4a:	2b01      	cmp	r3, #1
 8007c4c:	d001      	beq.n	8007c52 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8007c4e:	f000 fd9b 	bl	8008788 <xPortSysTickHandler>
  }
}
 8007c52:	bf00      	nop
 8007c54:	bd80      	pop	{r7, pc}
 8007c56:	bf00      	nop
 8007c58:	e000e010 	.word	0xe000e010

08007c5c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8007c5c:	b580      	push	{r7, lr}
 8007c5e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8007c60:	2100      	movs	r1, #0
 8007c62:	f06f 0004 	mvn.w	r0, #4
 8007c66:	f7ff ffbf 	bl	8007be8 <__NVIC_SetPriority>
#endif
}
 8007c6a:	bf00      	nop
 8007c6c:	bd80      	pop	{r7, pc}
	...

08007c70 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8007c70:	b480      	push	{r7}
 8007c72:	b083      	sub	sp, #12
 8007c74:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007c76:	f3ef 8305 	mrs	r3, IPSR
 8007c7a:	603b      	str	r3, [r7, #0]
  return(result);
 8007c7c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d003      	beq.n	8007c8a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8007c82:	f06f 0305 	mvn.w	r3, #5
 8007c86:	607b      	str	r3, [r7, #4]
 8007c88:	e00c      	b.n	8007ca4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8007c8a:	4b0a      	ldr	r3, [pc, #40]	@ (8007cb4 <osKernelInitialize+0x44>)
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d105      	bne.n	8007c9e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8007c92:	4b08      	ldr	r3, [pc, #32]	@ (8007cb4 <osKernelInitialize+0x44>)
 8007c94:	2201      	movs	r2, #1
 8007c96:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8007c98:	2300      	movs	r3, #0
 8007c9a:	607b      	str	r3, [r7, #4]
 8007c9c:	e002      	b.n	8007ca4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8007c9e:	f04f 33ff 	mov.w	r3, #4294967295
 8007ca2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007ca4:	687b      	ldr	r3, [r7, #4]
}
 8007ca6:	4618      	mov	r0, r3
 8007ca8:	370c      	adds	r7, #12
 8007caa:	46bd      	mov	sp, r7
 8007cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb0:	4770      	bx	lr
 8007cb2:	bf00      	nop
 8007cb4:	200007c0 	.word	0x200007c0

08007cb8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8007cb8:	b580      	push	{r7, lr}
 8007cba:	b082      	sub	sp, #8
 8007cbc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007cbe:	f3ef 8305 	mrs	r3, IPSR
 8007cc2:	603b      	str	r3, [r7, #0]
  return(result);
 8007cc4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d003      	beq.n	8007cd2 <osKernelStart+0x1a>
    stat = osErrorISR;
 8007cca:	f06f 0305 	mvn.w	r3, #5
 8007cce:	607b      	str	r3, [r7, #4]
 8007cd0:	e010      	b.n	8007cf4 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8007cd2:	4b0b      	ldr	r3, [pc, #44]	@ (8007d00 <osKernelStart+0x48>)
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	2b01      	cmp	r3, #1
 8007cd8:	d109      	bne.n	8007cee <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8007cda:	f7ff ffbf 	bl	8007c5c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8007cde:	4b08      	ldr	r3, [pc, #32]	@ (8007d00 <osKernelStart+0x48>)
 8007ce0:	2202      	movs	r2, #2
 8007ce2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8007ce4:	f001 fcd0 	bl	8009688 <vTaskStartScheduler>
      stat = osOK;
 8007ce8:	2300      	movs	r3, #0
 8007cea:	607b      	str	r3, [r7, #4]
 8007cec:	e002      	b.n	8007cf4 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8007cee:	f04f 33ff 	mov.w	r3, #4294967295
 8007cf2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007cf4:	687b      	ldr	r3, [r7, #4]
}
 8007cf6:	4618      	mov	r0, r3
 8007cf8:	3708      	adds	r7, #8
 8007cfa:	46bd      	mov	sp, r7
 8007cfc:	bd80      	pop	{r7, pc}
 8007cfe:	bf00      	nop
 8007d00:	200007c0 	.word	0x200007c0

08007d04 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8007d04:	b580      	push	{r7, lr}
 8007d06:	b08e      	sub	sp, #56	@ 0x38
 8007d08:	af04      	add	r7, sp, #16
 8007d0a:	60f8      	str	r0, [r7, #12]
 8007d0c:	60b9      	str	r1, [r7, #8]
 8007d0e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8007d10:	2300      	movs	r3, #0
 8007d12:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007d14:	f3ef 8305 	mrs	r3, IPSR
 8007d18:	617b      	str	r3, [r7, #20]
  return(result);
 8007d1a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d17e      	bne.n	8007e1e <osThreadNew+0x11a>
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d07b      	beq.n	8007e1e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8007d26:	2380      	movs	r3, #128	@ 0x80
 8007d28:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8007d2a:	2318      	movs	r3, #24
 8007d2c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8007d2e:	2300      	movs	r3, #0
 8007d30:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8007d32:	f04f 33ff 	mov.w	r3, #4294967295
 8007d36:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d045      	beq.n	8007dca <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d002      	beq.n	8007d4c <osThreadNew+0x48>
        name = attr->name;
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	699b      	ldr	r3, [r3, #24]
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d002      	beq.n	8007d5a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	699b      	ldr	r3, [r3, #24]
 8007d58:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8007d5a:	69fb      	ldr	r3, [r7, #28]
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d008      	beq.n	8007d72 <osThreadNew+0x6e>
 8007d60:	69fb      	ldr	r3, [r7, #28]
 8007d62:	2b38      	cmp	r3, #56	@ 0x38
 8007d64:	d805      	bhi.n	8007d72 <osThreadNew+0x6e>
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	685b      	ldr	r3, [r3, #4]
 8007d6a:	f003 0301 	and.w	r3, r3, #1
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d001      	beq.n	8007d76 <osThreadNew+0x72>
        return (NULL);
 8007d72:	2300      	movs	r3, #0
 8007d74:	e054      	b.n	8007e20 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	695b      	ldr	r3, [r3, #20]
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d003      	beq.n	8007d86 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	695b      	ldr	r3, [r3, #20]
 8007d82:	089b      	lsrs	r3, r3, #2
 8007d84:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	689b      	ldr	r3, [r3, #8]
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d00e      	beq.n	8007dac <osThreadNew+0xa8>
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	68db      	ldr	r3, [r3, #12]
 8007d92:	2ba7      	cmp	r3, #167	@ 0xa7
 8007d94:	d90a      	bls.n	8007dac <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d006      	beq.n	8007dac <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	695b      	ldr	r3, [r3, #20]
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d002      	beq.n	8007dac <osThreadNew+0xa8>
        mem = 1;
 8007da6:	2301      	movs	r3, #1
 8007da8:	61bb      	str	r3, [r7, #24]
 8007daa:	e010      	b.n	8007dce <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	689b      	ldr	r3, [r3, #8]
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d10c      	bne.n	8007dce <osThreadNew+0xca>
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	68db      	ldr	r3, [r3, #12]
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d108      	bne.n	8007dce <osThreadNew+0xca>
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	691b      	ldr	r3, [r3, #16]
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d104      	bne.n	8007dce <osThreadNew+0xca>
          mem = 0;
 8007dc4:	2300      	movs	r3, #0
 8007dc6:	61bb      	str	r3, [r7, #24]
 8007dc8:	e001      	b.n	8007dce <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8007dca:	2300      	movs	r3, #0
 8007dcc:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8007dce:	69bb      	ldr	r3, [r7, #24]
 8007dd0:	2b01      	cmp	r3, #1
 8007dd2:	d110      	bne.n	8007df6 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8007dd8:	687a      	ldr	r2, [r7, #4]
 8007dda:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007ddc:	9202      	str	r2, [sp, #8]
 8007dde:	9301      	str	r3, [sp, #4]
 8007de0:	69fb      	ldr	r3, [r7, #28]
 8007de2:	9300      	str	r3, [sp, #0]
 8007de4:	68bb      	ldr	r3, [r7, #8]
 8007de6:	6a3a      	ldr	r2, [r7, #32]
 8007de8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007dea:	68f8      	ldr	r0, [r7, #12]
 8007dec:	f001 fa58 	bl	80092a0 <xTaskCreateStatic>
 8007df0:	4603      	mov	r3, r0
 8007df2:	613b      	str	r3, [r7, #16]
 8007df4:	e013      	b.n	8007e1e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8007df6:	69bb      	ldr	r3, [r7, #24]
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d110      	bne.n	8007e1e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8007dfc:	6a3b      	ldr	r3, [r7, #32]
 8007dfe:	b29a      	uxth	r2, r3
 8007e00:	f107 0310 	add.w	r3, r7, #16
 8007e04:	9301      	str	r3, [sp, #4]
 8007e06:	69fb      	ldr	r3, [r7, #28]
 8007e08:	9300      	str	r3, [sp, #0]
 8007e0a:	68bb      	ldr	r3, [r7, #8]
 8007e0c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007e0e:	68f8      	ldr	r0, [r7, #12]
 8007e10:	f001 faa6 	bl	8009360 <xTaskCreate>
 8007e14:	4603      	mov	r3, r0
 8007e16:	2b01      	cmp	r3, #1
 8007e18:	d001      	beq.n	8007e1e <osThreadNew+0x11a>
            hTask = NULL;
 8007e1a:	2300      	movs	r3, #0
 8007e1c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8007e1e:	693b      	ldr	r3, [r7, #16]
}
 8007e20:	4618      	mov	r0, r3
 8007e22:	3728      	adds	r7, #40	@ 0x28
 8007e24:	46bd      	mov	sp, r7
 8007e26:	bd80      	pop	{r7, pc}

08007e28 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8007e28:	b580      	push	{r7, lr}
 8007e2a:	b084      	sub	sp, #16
 8007e2c:	af00      	add	r7, sp, #0
 8007e2e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007e30:	f3ef 8305 	mrs	r3, IPSR
 8007e34:	60bb      	str	r3, [r7, #8]
  return(result);
 8007e36:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d003      	beq.n	8007e44 <osDelay+0x1c>
    stat = osErrorISR;
 8007e3c:	f06f 0305 	mvn.w	r3, #5
 8007e40:	60fb      	str	r3, [r7, #12]
 8007e42:	e007      	b.n	8007e54 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8007e44:	2300      	movs	r3, #0
 8007e46:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d002      	beq.n	8007e54 <osDelay+0x2c>
      vTaskDelay(ticks);
 8007e4e:	6878      	ldr	r0, [r7, #4]
 8007e50:	f001 fbe4 	bl	800961c <vTaskDelay>
    }
  }

  return (stat);
 8007e54:	68fb      	ldr	r3, [r7, #12]
}
 8007e56:	4618      	mov	r0, r3
 8007e58:	3710      	adds	r7, #16
 8007e5a:	46bd      	mov	sp, r7
 8007e5c:	bd80      	pop	{r7, pc}
	...

08007e60 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8007e60:	b480      	push	{r7}
 8007e62:	b085      	sub	sp, #20
 8007e64:	af00      	add	r7, sp, #0
 8007e66:	60f8      	str	r0, [r7, #12]
 8007e68:	60b9      	str	r1, [r7, #8]
 8007e6a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	4a07      	ldr	r2, [pc, #28]	@ (8007e8c <vApplicationGetIdleTaskMemory+0x2c>)
 8007e70:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8007e72:	68bb      	ldr	r3, [r7, #8]
 8007e74:	4a06      	ldr	r2, [pc, #24]	@ (8007e90 <vApplicationGetIdleTaskMemory+0x30>)
 8007e76:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	2280      	movs	r2, #128	@ 0x80
 8007e7c:	601a      	str	r2, [r3, #0]
}
 8007e7e:	bf00      	nop
 8007e80:	3714      	adds	r7, #20
 8007e82:	46bd      	mov	sp, r7
 8007e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e88:	4770      	bx	lr
 8007e8a:	bf00      	nop
 8007e8c:	200007c4 	.word	0x200007c4
 8007e90:	2000086c 	.word	0x2000086c

08007e94 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8007e94:	b480      	push	{r7}
 8007e96:	b085      	sub	sp, #20
 8007e98:	af00      	add	r7, sp, #0
 8007e9a:	60f8      	str	r0, [r7, #12]
 8007e9c:	60b9      	str	r1, [r7, #8]
 8007e9e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	4a07      	ldr	r2, [pc, #28]	@ (8007ec0 <vApplicationGetTimerTaskMemory+0x2c>)
 8007ea4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8007ea6:	68bb      	ldr	r3, [r7, #8]
 8007ea8:	4a06      	ldr	r2, [pc, #24]	@ (8007ec4 <vApplicationGetTimerTaskMemory+0x30>)
 8007eaa:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007eb2:	601a      	str	r2, [r3, #0]
}
 8007eb4:	bf00      	nop
 8007eb6:	3714      	adds	r7, #20
 8007eb8:	46bd      	mov	sp, r7
 8007eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ebe:	4770      	bx	lr
 8007ec0:	20000a6c 	.word	0x20000a6c
 8007ec4:	20000b14 	.word	0x20000b14

08007ec8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007ec8:	b580      	push	{r7, lr}
 8007eca:	b08a      	sub	sp, #40	@ 0x28
 8007ecc:	af00      	add	r7, sp, #0
 8007ece:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007ed0:	2300      	movs	r3, #0
 8007ed2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007ed4:	f001 fc48 	bl	8009768 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007ed8:	4b5c      	ldr	r3, [pc, #368]	@ (800804c <pvPortMalloc+0x184>)
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d101      	bne.n	8007ee4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007ee0:	f000 f924 	bl	800812c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007ee4:	4b5a      	ldr	r3, [pc, #360]	@ (8008050 <pvPortMalloc+0x188>)
 8007ee6:	681a      	ldr	r2, [r3, #0]
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	4013      	ands	r3, r2
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	f040 8095 	bne.w	800801c <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d01e      	beq.n	8007f36 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8007ef8:	2208      	movs	r2, #8
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	4413      	add	r3, r2
 8007efe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	f003 0307 	and.w	r3, r3, #7
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d015      	beq.n	8007f36 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	f023 0307 	bic.w	r3, r3, #7
 8007f10:	3308      	adds	r3, #8
 8007f12:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	f003 0307 	and.w	r3, r3, #7
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d00b      	beq.n	8007f36 <pvPortMalloc+0x6e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007f1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f22:	f383 8811 	msr	BASEPRI, r3
 8007f26:	f3bf 8f6f 	isb	sy
 8007f2a:	f3bf 8f4f 	dsb	sy
 8007f2e:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007f30:	bf00      	nop
 8007f32:	bf00      	nop
 8007f34:	e7fd      	b.n	8007f32 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d06f      	beq.n	800801c <pvPortMalloc+0x154>
 8007f3c:	4b45      	ldr	r3, [pc, #276]	@ (8008054 <pvPortMalloc+0x18c>)
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	687a      	ldr	r2, [r7, #4]
 8007f42:	429a      	cmp	r2, r3
 8007f44:	d86a      	bhi.n	800801c <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007f46:	4b44      	ldr	r3, [pc, #272]	@ (8008058 <pvPortMalloc+0x190>)
 8007f48:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007f4a:	4b43      	ldr	r3, [pc, #268]	@ (8008058 <pvPortMalloc+0x190>)
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007f50:	e004      	b.n	8007f5c <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8007f52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f54:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007f56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007f5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f5e:	685b      	ldr	r3, [r3, #4]
 8007f60:	687a      	ldr	r2, [r7, #4]
 8007f62:	429a      	cmp	r2, r3
 8007f64:	d903      	bls.n	8007f6e <pvPortMalloc+0xa6>
 8007f66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d1f1      	bne.n	8007f52 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007f6e:	4b37      	ldr	r3, [pc, #220]	@ (800804c <pvPortMalloc+0x184>)
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007f74:	429a      	cmp	r2, r3
 8007f76:	d051      	beq.n	800801c <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007f78:	6a3b      	ldr	r3, [r7, #32]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	2208      	movs	r2, #8
 8007f7e:	4413      	add	r3, r2
 8007f80:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007f82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f84:	681a      	ldr	r2, [r3, #0]
 8007f86:	6a3b      	ldr	r3, [r7, #32]
 8007f88:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007f8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f8c:	685a      	ldr	r2, [r3, #4]
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	1ad2      	subs	r2, r2, r3
 8007f92:	2308      	movs	r3, #8
 8007f94:	005b      	lsls	r3, r3, #1
 8007f96:	429a      	cmp	r2, r3
 8007f98:	d920      	bls.n	8007fdc <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007f9a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	4413      	add	r3, r2
 8007fa0:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007fa2:	69bb      	ldr	r3, [r7, #24]
 8007fa4:	f003 0307 	and.w	r3, r3, #7
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d00b      	beq.n	8007fc4 <pvPortMalloc+0xfc>
	__asm volatile
 8007fac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007fb0:	f383 8811 	msr	BASEPRI, r3
 8007fb4:	f3bf 8f6f 	isb	sy
 8007fb8:	f3bf 8f4f 	dsb	sy
 8007fbc:	613b      	str	r3, [r7, #16]
}
 8007fbe:	bf00      	nop
 8007fc0:	bf00      	nop
 8007fc2:	e7fd      	b.n	8007fc0 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007fc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fc6:	685a      	ldr	r2, [r3, #4]
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	1ad2      	subs	r2, r2, r3
 8007fcc:	69bb      	ldr	r3, [r7, #24]
 8007fce:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007fd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fd2:	687a      	ldr	r2, [r7, #4]
 8007fd4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007fd6:	69b8      	ldr	r0, [r7, #24]
 8007fd8:	f000 f90a 	bl	80081f0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007fdc:	4b1d      	ldr	r3, [pc, #116]	@ (8008054 <pvPortMalloc+0x18c>)
 8007fde:	681a      	ldr	r2, [r3, #0]
 8007fe0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fe2:	685b      	ldr	r3, [r3, #4]
 8007fe4:	1ad3      	subs	r3, r2, r3
 8007fe6:	4a1b      	ldr	r2, [pc, #108]	@ (8008054 <pvPortMalloc+0x18c>)
 8007fe8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007fea:	4b1a      	ldr	r3, [pc, #104]	@ (8008054 <pvPortMalloc+0x18c>)
 8007fec:	681a      	ldr	r2, [r3, #0]
 8007fee:	4b1b      	ldr	r3, [pc, #108]	@ (800805c <pvPortMalloc+0x194>)
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	429a      	cmp	r2, r3
 8007ff4:	d203      	bcs.n	8007ffe <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007ff6:	4b17      	ldr	r3, [pc, #92]	@ (8008054 <pvPortMalloc+0x18c>)
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	4a18      	ldr	r2, [pc, #96]	@ (800805c <pvPortMalloc+0x194>)
 8007ffc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007ffe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008000:	685a      	ldr	r2, [r3, #4]
 8008002:	4b13      	ldr	r3, [pc, #76]	@ (8008050 <pvPortMalloc+0x188>)
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	431a      	orrs	r2, r3
 8008008:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800800a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800800c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800800e:	2200      	movs	r2, #0
 8008010:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8008012:	4b13      	ldr	r3, [pc, #76]	@ (8008060 <pvPortMalloc+0x198>)
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	3301      	adds	r3, #1
 8008018:	4a11      	ldr	r2, [pc, #68]	@ (8008060 <pvPortMalloc+0x198>)
 800801a:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800801c:	f001 fbb2 	bl	8009784 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008020:	69fb      	ldr	r3, [r7, #28]
 8008022:	f003 0307 	and.w	r3, r3, #7
 8008026:	2b00      	cmp	r3, #0
 8008028:	d00b      	beq.n	8008042 <pvPortMalloc+0x17a>
	__asm volatile
 800802a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800802e:	f383 8811 	msr	BASEPRI, r3
 8008032:	f3bf 8f6f 	isb	sy
 8008036:	f3bf 8f4f 	dsb	sy
 800803a:	60fb      	str	r3, [r7, #12]
}
 800803c:	bf00      	nop
 800803e:	bf00      	nop
 8008040:	e7fd      	b.n	800803e <pvPortMalloc+0x176>
	return pvReturn;
 8008042:	69fb      	ldr	r3, [r7, #28]
}
 8008044:	4618      	mov	r0, r3
 8008046:	3728      	adds	r7, #40	@ 0x28
 8008048:	46bd      	mov	sp, r7
 800804a:	bd80      	pop	{r7, pc}
 800804c:	20004b1c 	.word	0x20004b1c
 8008050:	20004b30 	.word	0x20004b30
 8008054:	20004b20 	.word	0x20004b20
 8008058:	20004b14 	.word	0x20004b14
 800805c:	20004b24 	.word	0x20004b24
 8008060:	20004b28 	.word	0x20004b28

08008064 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008064:	b580      	push	{r7, lr}
 8008066:	b086      	sub	sp, #24
 8008068:	af00      	add	r7, sp, #0
 800806a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	2b00      	cmp	r3, #0
 8008074:	d04f      	beq.n	8008116 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008076:	2308      	movs	r3, #8
 8008078:	425b      	negs	r3, r3
 800807a:	697a      	ldr	r2, [r7, #20]
 800807c:	4413      	add	r3, r2
 800807e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008080:	697b      	ldr	r3, [r7, #20]
 8008082:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008084:	693b      	ldr	r3, [r7, #16]
 8008086:	685a      	ldr	r2, [r3, #4]
 8008088:	4b25      	ldr	r3, [pc, #148]	@ (8008120 <vPortFree+0xbc>)
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	4013      	ands	r3, r2
 800808e:	2b00      	cmp	r3, #0
 8008090:	d10b      	bne.n	80080aa <vPortFree+0x46>
	__asm volatile
 8008092:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008096:	f383 8811 	msr	BASEPRI, r3
 800809a:	f3bf 8f6f 	isb	sy
 800809e:	f3bf 8f4f 	dsb	sy
 80080a2:	60fb      	str	r3, [r7, #12]
}
 80080a4:	bf00      	nop
 80080a6:	bf00      	nop
 80080a8:	e7fd      	b.n	80080a6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80080aa:	693b      	ldr	r3, [r7, #16]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d00b      	beq.n	80080ca <vPortFree+0x66>
	__asm volatile
 80080b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080b6:	f383 8811 	msr	BASEPRI, r3
 80080ba:	f3bf 8f6f 	isb	sy
 80080be:	f3bf 8f4f 	dsb	sy
 80080c2:	60bb      	str	r3, [r7, #8]
}
 80080c4:	bf00      	nop
 80080c6:	bf00      	nop
 80080c8:	e7fd      	b.n	80080c6 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80080ca:	693b      	ldr	r3, [r7, #16]
 80080cc:	685a      	ldr	r2, [r3, #4]
 80080ce:	4b14      	ldr	r3, [pc, #80]	@ (8008120 <vPortFree+0xbc>)
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	4013      	ands	r3, r2
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d01e      	beq.n	8008116 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80080d8:	693b      	ldr	r3, [r7, #16]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d11a      	bne.n	8008116 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80080e0:	693b      	ldr	r3, [r7, #16]
 80080e2:	685a      	ldr	r2, [r3, #4]
 80080e4:	4b0e      	ldr	r3, [pc, #56]	@ (8008120 <vPortFree+0xbc>)
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	43db      	mvns	r3, r3
 80080ea:	401a      	ands	r2, r3
 80080ec:	693b      	ldr	r3, [r7, #16]
 80080ee:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80080f0:	f001 fb3a 	bl	8009768 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80080f4:	693b      	ldr	r3, [r7, #16]
 80080f6:	685a      	ldr	r2, [r3, #4]
 80080f8:	4b0a      	ldr	r3, [pc, #40]	@ (8008124 <vPortFree+0xc0>)
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	4413      	add	r3, r2
 80080fe:	4a09      	ldr	r2, [pc, #36]	@ (8008124 <vPortFree+0xc0>)
 8008100:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008102:	6938      	ldr	r0, [r7, #16]
 8008104:	f000 f874 	bl	80081f0 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008108:	4b07      	ldr	r3, [pc, #28]	@ (8008128 <vPortFree+0xc4>)
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	3301      	adds	r3, #1
 800810e:	4a06      	ldr	r2, [pc, #24]	@ (8008128 <vPortFree+0xc4>)
 8008110:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8008112:	f001 fb37 	bl	8009784 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008116:	bf00      	nop
 8008118:	3718      	adds	r7, #24
 800811a:	46bd      	mov	sp, r7
 800811c:	bd80      	pop	{r7, pc}
 800811e:	bf00      	nop
 8008120:	20004b30 	.word	0x20004b30
 8008124:	20004b20 	.word	0x20004b20
 8008128:	20004b2c 	.word	0x20004b2c

0800812c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800812c:	b480      	push	{r7}
 800812e:	b085      	sub	sp, #20
 8008130:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008132:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8008136:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008138:	4b27      	ldr	r3, [pc, #156]	@ (80081d8 <prvHeapInit+0xac>)
 800813a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	f003 0307 	and.w	r3, r3, #7
 8008142:	2b00      	cmp	r3, #0
 8008144:	d00c      	beq.n	8008160 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	3307      	adds	r3, #7
 800814a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	f023 0307 	bic.w	r3, r3, #7
 8008152:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008154:	68ba      	ldr	r2, [r7, #8]
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	1ad3      	subs	r3, r2, r3
 800815a:	4a1f      	ldr	r2, [pc, #124]	@ (80081d8 <prvHeapInit+0xac>)
 800815c:	4413      	add	r3, r2
 800815e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008164:	4a1d      	ldr	r2, [pc, #116]	@ (80081dc <prvHeapInit+0xb0>)
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800816a:	4b1c      	ldr	r3, [pc, #112]	@ (80081dc <prvHeapInit+0xb0>)
 800816c:	2200      	movs	r2, #0
 800816e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	68ba      	ldr	r2, [r7, #8]
 8008174:	4413      	add	r3, r2
 8008176:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008178:	2208      	movs	r2, #8
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	1a9b      	subs	r3, r3, r2
 800817e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	f023 0307 	bic.w	r3, r3, #7
 8008186:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	4a15      	ldr	r2, [pc, #84]	@ (80081e0 <prvHeapInit+0xb4>)
 800818c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800818e:	4b14      	ldr	r3, [pc, #80]	@ (80081e0 <prvHeapInit+0xb4>)
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	2200      	movs	r2, #0
 8008194:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008196:	4b12      	ldr	r3, [pc, #72]	@ (80081e0 <prvHeapInit+0xb4>)
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	2200      	movs	r2, #0
 800819c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80081a2:	683b      	ldr	r3, [r7, #0]
 80081a4:	68fa      	ldr	r2, [r7, #12]
 80081a6:	1ad2      	subs	r2, r2, r3
 80081a8:	683b      	ldr	r3, [r7, #0]
 80081aa:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80081ac:	4b0c      	ldr	r3, [pc, #48]	@ (80081e0 <prvHeapInit+0xb4>)
 80081ae:	681a      	ldr	r2, [r3, #0]
 80081b0:	683b      	ldr	r3, [r7, #0]
 80081b2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80081b4:	683b      	ldr	r3, [r7, #0]
 80081b6:	685b      	ldr	r3, [r3, #4]
 80081b8:	4a0a      	ldr	r2, [pc, #40]	@ (80081e4 <prvHeapInit+0xb8>)
 80081ba:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80081bc:	683b      	ldr	r3, [r7, #0]
 80081be:	685b      	ldr	r3, [r3, #4]
 80081c0:	4a09      	ldr	r2, [pc, #36]	@ (80081e8 <prvHeapInit+0xbc>)
 80081c2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80081c4:	4b09      	ldr	r3, [pc, #36]	@ (80081ec <prvHeapInit+0xc0>)
 80081c6:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80081ca:	601a      	str	r2, [r3, #0]
}
 80081cc:	bf00      	nop
 80081ce:	3714      	adds	r7, #20
 80081d0:	46bd      	mov	sp, r7
 80081d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081d6:	4770      	bx	lr
 80081d8:	20000f14 	.word	0x20000f14
 80081dc:	20004b14 	.word	0x20004b14
 80081e0:	20004b1c 	.word	0x20004b1c
 80081e4:	20004b24 	.word	0x20004b24
 80081e8:	20004b20 	.word	0x20004b20
 80081ec:	20004b30 	.word	0x20004b30

080081f0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80081f0:	b480      	push	{r7}
 80081f2:	b085      	sub	sp, #20
 80081f4:	af00      	add	r7, sp, #0
 80081f6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80081f8:	4b28      	ldr	r3, [pc, #160]	@ (800829c <prvInsertBlockIntoFreeList+0xac>)
 80081fa:	60fb      	str	r3, [r7, #12]
 80081fc:	e002      	b.n	8008204 <prvInsertBlockIntoFreeList+0x14>
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	60fb      	str	r3, [r7, #12]
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	687a      	ldr	r2, [r7, #4]
 800820a:	429a      	cmp	r2, r3
 800820c:	d8f7      	bhi.n	80081fe <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	685b      	ldr	r3, [r3, #4]
 8008216:	68ba      	ldr	r2, [r7, #8]
 8008218:	4413      	add	r3, r2
 800821a:	687a      	ldr	r2, [r7, #4]
 800821c:	429a      	cmp	r2, r3
 800821e:	d108      	bne.n	8008232 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	685a      	ldr	r2, [r3, #4]
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	685b      	ldr	r3, [r3, #4]
 8008228:	441a      	add	r2, r3
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	685b      	ldr	r3, [r3, #4]
 800823a:	68ba      	ldr	r2, [r7, #8]
 800823c:	441a      	add	r2, r3
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	429a      	cmp	r2, r3
 8008244:	d118      	bne.n	8008278 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	681a      	ldr	r2, [r3, #0]
 800824a:	4b15      	ldr	r3, [pc, #84]	@ (80082a0 <prvInsertBlockIntoFreeList+0xb0>)
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	429a      	cmp	r2, r3
 8008250:	d00d      	beq.n	800826e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	685a      	ldr	r2, [r3, #4]
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	685b      	ldr	r3, [r3, #4]
 800825c:	441a      	add	r2, r3
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	681a      	ldr	r2, [r3, #0]
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	601a      	str	r2, [r3, #0]
 800826c:	e008      	b.n	8008280 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800826e:	4b0c      	ldr	r3, [pc, #48]	@ (80082a0 <prvInsertBlockIntoFreeList+0xb0>)
 8008270:	681a      	ldr	r2, [r3, #0]
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	601a      	str	r2, [r3, #0]
 8008276:	e003      	b.n	8008280 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	681a      	ldr	r2, [r3, #0]
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008280:	68fa      	ldr	r2, [r7, #12]
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	429a      	cmp	r2, r3
 8008286:	d002      	beq.n	800828e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	687a      	ldr	r2, [r7, #4]
 800828c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800828e:	bf00      	nop
 8008290:	3714      	adds	r7, #20
 8008292:	46bd      	mov	sp, r7
 8008294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008298:	4770      	bx	lr
 800829a:	bf00      	nop
 800829c:	20004b14 	.word	0x20004b14
 80082a0:	20004b1c 	.word	0x20004b1c

080082a4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80082a4:	b480      	push	{r7}
 80082a6:	b083      	sub	sp, #12
 80082a8:	af00      	add	r7, sp, #0
 80082aa:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	f103 0208 	add.w	r2, r3, #8
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	f04f 32ff 	mov.w	r2, #4294967295
 80082bc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	f103 0208 	add.w	r2, r3, #8
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	f103 0208 	add.w	r2, r3, #8
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	2200      	movs	r2, #0
 80082d6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80082d8:	bf00      	nop
 80082da:	370c      	adds	r7, #12
 80082dc:	46bd      	mov	sp, r7
 80082de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082e2:	4770      	bx	lr

080082e4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80082e4:	b480      	push	{r7}
 80082e6:	b083      	sub	sp, #12
 80082e8:	af00      	add	r7, sp, #0
 80082ea:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	2200      	movs	r2, #0
 80082f0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80082f2:	bf00      	nop
 80082f4:	370c      	adds	r7, #12
 80082f6:	46bd      	mov	sp, r7
 80082f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082fc:	4770      	bx	lr

080082fe <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80082fe:	b480      	push	{r7}
 8008300:	b085      	sub	sp, #20
 8008302:	af00      	add	r7, sp, #0
 8008304:	6078      	str	r0, [r7, #4]
 8008306:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	685b      	ldr	r3, [r3, #4]
 800830c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800830e:	683b      	ldr	r3, [r7, #0]
 8008310:	68fa      	ldr	r2, [r7, #12]
 8008312:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	689a      	ldr	r2, [r3, #8]
 8008318:	683b      	ldr	r3, [r7, #0]
 800831a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	689b      	ldr	r3, [r3, #8]
 8008320:	683a      	ldr	r2, [r7, #0]
 8008322:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	683a      	ldr	r2, [r7, #0]
 8008328:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800832a:	683b      	ldr	r3, [r7, #0]
 800832c:	687a      	ldr	r2, [r7, #4]
 800832e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	1c5a      	adds	r2, r3, #1
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	601a      	str	r2, [r3, #0]
}
 800833a:	bf00      	nop
 800833c:	3714      	adds	r7, #20
 800833e:	46bd      	mov	sp, r7
 8008340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008344:	4770      	bx	lr

08008346 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008346:	b480      	push	{r7}
 8008348:	b085      	sub	sp, #20
 800834a:	af00      	add	r7, sp, #0
 800834c:	6078      	str	r0, [r7, #4]
 800834e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008350:	683b      	ldr	r3, [r7, #0]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008356:	68bb      	ldr	r3, [r7, #8]
 8008358:	f1b3 3fff 	cmp.w	r3, #4294967295
 800835c:	d103      	bne.n	8008366 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	691b      	ldr	r3, [r3, #16]
 8008362:	60fb      	str	r3, [r7, #12]
 8008364:	e00c      	b.n	8008380 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	3308      	adds	r3, #8
 800836a:	60fb      	str	r3, [r7, #12]
 800836c:	e002      	b.n	8008374 <vListInsert+0x2e>
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	685b      	ldr	r3, [r3, #4]
 8008372:	60fb      	str	r3, [r7, #12]
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	685b      	ldr	r3, [r3, #4]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	68ba      	ldr	r2, [r7, #8]
 800837c:	429a      	cmp	r2, r3
 800837e:	d2f6      	bcs.n	800836e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	685a      	ldr	r2, [r3, #4]
 8008384:	683b      	ldr	r3, [r7, #0]
 8008386:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008388:	683b      	ldr	r3, [r7, #0]
 800838a:	685b      	ldr	r3, [r3, #4]
 800838c:	683a      	ldr	r2, [r7, #0]
 800838e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008390:	683b      	ldr	r3, [r7, #0]
 8008392:	68fa      	ldr	r2, [r7, #12]
 8008394:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	683a      	ldr	r2, [r7, #0]
 800839a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800839c:	683b      	ldr	r3, [r7, #0]
 800839e:	687a      	ldr	r2, [r7, #4]
 80083a0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	1c5a      	adds	r2, r3, #1
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	601a      	str	r2, [r3, #0]
}
 80083ac:	bf00      	nop
 80083ae:	3714      	adds	r7, #20
 80083b0:	46bd      	mov	sp, r7
 80083b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083b6:	4770      	bx	lr

080083b8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80083b8:	b480      	push	{r7}
 80083ba:	b085      	sub	sp, #20
 80083bc:	af00      	add	r7, sp, #0
 80083be:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	691b      	ldr	r3, [r3, #16]
 80083c4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	685b      	ldr	r3, [r3, #4]
 80083ca:	687a      	ldr	r2, [r7, #4]
 80083cc:	6892      	ldr	r2, [r2, #8]
 80083ce:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	689b      	ldr	r3, [r3, #8]
 80083d4:	687a      	ldr	r2, [r7, #4]
 80083d6:	6852      	ldr	r2, [r2, #4]
 80083d8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	685b      	ldr	r3, [r3, #4]
 80083de:	687a      	ldr	r2, [r7, #4]
 80083e0:	429a      	cmp	r2, r3
 80083e2:	d103      	bne.n	80083ec <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	689a      	ldr	r2, [r3, #8]
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	2200      	movs	r2, #0
 80083f0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	1e5a      	subs	r2, r3, #1
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	681b      	ldr	r3, [r3, #0]
}
 8008400:	4618      	mov	r0, r3
 8008402:	3714      	adds	r7, #20
 8008404:	46bd      	mov	sp, r7
 8008406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800840a:	4770      	bx	lr

0800840c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800840c:	b480      	push	{r7}
 800840e:	b085      	sub	sp, #20
 8008410:	af00      	add	r7, sp, #0
 8008412:	60f8      	str	r0, [r7, #12]
 8008414:	60b9      	str	r1, [r7, #8]
 8008416:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	3b04      	subs	r3, #4
 800841c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8008424:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	3b04      	subs	r3, #4
 800842a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800842c:	68bb      	ldr	r3, [r7, #8]
 800842e:	f023 0201 	bic.w	r2, r3, #1
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	3b04      	subs	r3, #4
 800843a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800843c:	4a0c      	ldr	r2, [pc, #48]	@ (8008470 <pxPortInitialiseStack+0x64>)
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	3b14      	subs	r3, #20
 8008446:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008448:	687a      	ldr	r2, [r7, #4]
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	3b04      	subs	r3, #4
 8008452:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	f06f 0202 	mvn.w	r2, #2
 800845a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	3b20      	subs	r3, #32
 8008460:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008462:	68fb      	ldr	r3, [r7, #12]
}
 8008464:	4618      	mov	r0, r3
 8008466:	3714      	adds	r7, #20
 8008468:	46bd      	mov	sp, r7
 800846a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800846e:	4770      	bx	lr
 8008470:	08008475 	.word	0x08008475

08008474 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008474:	b480      	push	{r7}
 8008476:	b085      	sub	sp, #20
 8008478:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800847a:	2300      	movs	r3, #0
 800847c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800847e:	4b13      	ldr	r3, [pc, #76]	@ (80084cc <prvTaskExitError+0x58>)
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008486:	d00b      	beq.n	80084a0 <prvTaskExitError+0x2c>
	__asm volatile
 8008488:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800848c:	f383 8811 	msr	BASEPRI, r3
 8008490:	f3bf 8f6f 	isb	sy
 8008494:	f3bf 8f4f 	dsb	sy
 8008498:	60fb      	str	r3, [r7, #12]
}
 800849a:	bf00      	nop
 800849c:	bf00      	nop
 800849e:	e7fd      	b.n	800849c <prvTaskExitError+0x28>
	__asm volatile
 80084a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084a4:	f383 8811 	msr	BASEPRI, r3
 80084a8:	f3bf 8f6f 	isb	sy
 80084ac:	f3bf 8f4f 	dsb	sy
 80084b0:	60bb      	str	r3, [r7, #8]
}
 80084b2:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80084b4:	bf00      	nop
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d0fc      	beq.n	80084b6 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80084bc:	bf00      	nop
 80084be:	bf00      	nop
 80084c0:	3714      	adds	r7, #20
 80084c2:	46bd      	mov	sp, r7
 80084c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084c8:	4770      	bx	lr
 80084ca:	bf00      	nop
 80084cc:	20000020 	.word	0x20000020

080084d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80084d0:	4b07      	ldr	r3, [pc, #28]	@ (80084f0 <pxCurrentTCBConst2>)
 80084d2:	6819      	ldr	r1, [r3, #0]
 80084d4:	6808      	ldr	r0, [r1, #0]
 80084d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084da:	f380 8809 	msr	PSP, r0
 80084de:	f3bf 8f6f 	isb	sy
 80084e2:	f04f 0000 	mov.w	r0, #0
 80084e6:	f380 8811 	msr	BASEPRI, r0
 80084ea:	4770      	bx	lr
 80084ec:	f3af 8000 	nop.w

080084f0 <pxCurrentTCBConst2>:
 80084f0:	20004b7c 	.word	0x20004b7c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80084f4:	bf00      	nop
 80084f6:	bf00      	nop

080084f8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80084f8:	4808      	ldr	r0, [pc, #32]	@ (800851c <prvPortStartFirstTask+0x24>)
 80084fa:	6800      	ldr	r0, [r0, #0]
 80084fc:	6800      	ldr	r0, [r0, #0]
 80084fe:	f380 8808 	msr	MSP, r0
 8008502:	f04f 0000 	mov.w	r0, #0
 8008506:	f380 8814 	msr	CONTROL, r0
 800850a:	b662      	cpsie	i
 800850c:	b661      	cpsie	f
 800850e:	f3bf 8f4f 	dsb	sy
 8008512:	f3bf 8f6f 	isb	sy
 8008516:	df00      	svc	0
 8008518:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800851a:	bf00      	nop
 800851c:	e000ed08 	.word	0xe000ed08

08008520 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008520:	b580      	push	{r7, lr}
 8008522:	b086      	sub	sp, #24
 8008524:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008526:	4b47      	ldr	r3, [pc, #284]	@ (8008644 <xPortStartScheduler+0x124>)
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	4a47      	ldr	r2, [pc, #284]	@ (8008648 <xPortStartScheduler+0x128>)
 800852c:	4293      	cmp	r3, r2
 800852e:	d10b      	bne.n	8008548 <xPortStartScheduler+0x28>
	__asm volatile
 8008530:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008534:	f383 8811 	msr	BASEPRI, r3
 8008538:	f3bf 8f6f 	isb	sy
 800853c:	f3bf 8f4f 	dsb	sy
 8008540:	60fb      	str	r3, [r7, #12]
}
 8008542:	bf00      	nop
 8008544:	bf00      	nop
 8008546:	e7fd      	b.n	8008544 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008548:	4b3e      	ldr	r3, [pc, #248]	@ (8008644 <xPortStartScheduler+0x124>)
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	4a3f      	ldr	r2, [pc, #252]	@ (800864c <xPortStartScheduler+0x12c>)
 800854e:	4293      	cmp	r3, r2
 8008550:	d10b      	bne.n	800856a <xPortStartScheduler+0x4a>
	__asm volatile
 8008552:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008556:	f383 8811 	msr	BASEPRI, r3
 800855a:	f3bf 8f6f 	isb	sy
 800855e:	f3bf 8f4f 	dsb	sy
 8008562:	613b      	str	r3, [r7, #16]
}
 8008564:	bf00      	nop
 8008566:	bf00      	nop
 8008568:	e7fd      	b.n	8008566 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800856a:	4b39      	ldr	r3, [pc, #228]	@ (8008650 <xPortStartScheduler+0x130>)
 800856c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800856e:	697b      	ldr	r3, [r7, #20]
 8008570:	781b      	ldrb	r3, [r3, #0]
 8008572:	b2db      	uxtb	r3, r3
 8008574:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008576:	697b      	ldr	r3, [r7, #20]
 8008578:	22ff      	movs	r2, #255	@ 0xff
 800857a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800857c:	697b      	ldr	r3, [r7, #20]
 800857e:	781b      	ldrb	r3, [r3, #0]
 8008580:	b2db      	uxtb	r3, r3
 8008582:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008584:	78fb      	ldrb	r3, [r7, #3]
 8008586:	b2db      	uxtb	r3, r3
 8008588:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800858c:	b2da      	uxtb	r2, r3
 800858e:	4b31      	ldr	r3, [pc, #196]	@ (8008654 <xPortStartScheduler+0x134>)
 8008590:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008592:	4b31      	ldr	r3, [pc, #196]	@ (8008658 <xPortStartScheduler+0x138>)
 8008594:	2207      	movs	r2, #7
 8008596:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008598:	e009      	b.n	80085ae <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800859a:	4b2f      	ldr	r3, [pc, #188]	@ (8008658 <xPortStartScheduler+0x138>)
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	3b01      	subs	r3, #1
 80085a0:	4a2d      	ldr	r2, [pc, #180]	@ (8008658 <xPortStartScheduler+0x138>)
 80085a2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80085a4:	78fb      	ldrb	r3, [r7, #3]
 80085a6:	b2db      	uxtb	r3, r3
 80085a8:	005b      	lsls	r3, r3, #1
 80085aa:	b2db      	uxtb	r3, r3
 80085ac:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80085ae:	78fb      	ldrb	r3, [r7, #3]
 80085b0:	b2db      	uxtb	r3, r3
 80085b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80085b6:	2b80      	cmp	r3, #128	@ 0x80
 80085b8:	d0ef      	beq.n	800859a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80085ba:	4b27      	ldr	r3, [pc, #156]	@ (8008658 <xPortStartScheduler+0x138>)
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	f1c3 0307 	rsb	r3, r3, #7
 80085c2:	2b04      	cmp	r3, #4
 80085c4:	d00b      	beq.n	80085de <xPortStartScheduler+0xbe>
	__asm volatile
 80085c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085ca:	f383 8811 	msr	BASEPRI, r3
 80085ce:	f3bf 8f6f 	isb	sy
 80085d2:	f3bf 8f4f 	dsb	sy
 80085d6:	60bb      	str	r3, [r7, #8]
}
 80085d8:	bf00      	nop
 80085da:	bf00      	nop
 80085dc:	e7fd      	b.n	80085da <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80085de:	4b1e      	ldr	r3, [pc, #120]	@ (8008658 <xPortStartScheduler+0x138>)
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	021b      	lsls	r3, r3, #8
 80085e4:	4a1c      	ldr	r2, [pc, #112]	@ (8008658 <xPortStartScheduler+0x138>)
 80085e6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80085e8:	4b1b      	ldr	r3, [pc, #108]	@ (8008658 <xPortStartScheduler+0x138>)
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80085f0:	4a19      	ldr	r2, [pc, #100]	@ (8008658 <xPortStartScheduler+0x138>)
 80085f2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	b2da      	uxtb	r2, r3
 80085f8:	697b      	ldr	r3, [r7, #20]
 80085fa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80085fc:	4b17      	ldr	r3, [pc, #92]	@ (800865c <xPortStartScheduler+0x13c>)
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	4a16      	ldr	r2, [pc, #88]	@ (800865c <xPortStartScheduler+0x13c>)
 8008602:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8008606:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008608:	4b14      	ldr	r3, [pc, #80]	@ (800865c <xPortStartScheduler+0x13c>)
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	4a13      	ldr	r2, [pc, #76]	@ (800865c <xPortStartScheduler+0x13c>)
 800860e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8008612:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008614:	f000 f8da 	bl	80087cc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008618:	4b11      	ldr	r3, [pc, #68]	@ (8008660 <xPortStartScheduler+0x140>)
 800861a:	2200      	movs	r2, #0
 800861c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800861e:	f000 f8f9 	bl	8008814 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008622:	4b10      	ldr	r3, [pc, #64]	@ (8008664 <xPortStartScheduler+0x144>)
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	4a0f      	ldr	r2, [pc, #60]	@ (8008664 <xPortStartScheduler+0x144>)
 8008628:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800862c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800862e:	f7ff ff63 	bl	80084f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008632:	f001 fa0f 	bl	8009a54 <vTaskSwitchContext>
	prvTaskExitError();
 8008636:	f7ff ff1d 	bl	8008474 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800863a:	2300      	movs	r3, #0
}
 800863c:	4618      	mov	r0, r3
 800863e:	3718      	adds	r7, #24
 8008640:	46bd      	mov	sp, r7
 8008642:	bd80      	pop	{r7, pc}
 8008644:	e000ed00 	.word	0xe000ed00
 8008648:	410fc271 	.word	0x410fc271
 800864c:	410fc270 	.word	0x410fc270
 8008650:	e000e400 	.word	0xe000e400
 8008654:	20004b34 	.word	0x20004b34
 8008658:	20004b38 	.word	0x20004b38
 800865c:	e000ed20 	.word	0xe000ed20
 8008660:	20000020 	.word	0x20000020
 8008664:	e000ef34 	.word	0xe000ef34

08008668 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008668:	b480      	push	{r7}
 800866a:	b083      	sub	sp, #12
 800866c:	af00      	add	r7, sp, #0
	__asm volatile
 800866e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008672:	f383 8811 	msr	BASEPRI, r3
 8008676:	f3bf 8f6f 	isb	sy
 800867a:	f3bf 8f4f 	dsb	sy
 800867e:	607b      	str	r3, [r7, #4]
}
 8008680:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008682:	4b10      	ldr	r3, [pc, #64]	@ (80086c4 <vPortEnterCritical+0x5c>)
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	3301      	adds	r3, #1
 8008688:	4a0e      	ldr	r2, [pc, #56]	@ (80086c4 <vPortEnterCritical+0x5c>)
 800868a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800868c:	4b0d      	ldr	r3, [pc, #52]	@ (80086c4 <vPortEnterCritical+0x5c>)
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	2b01      	cmp	r3, #1
 8008692:	d110      	bne.n	80086b6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008694:	4b0c      	ldr	r3, [pc, #48]	@ (80086c8 <vPortEnterCritical+0x60>)
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	b2db      	uxtb	r3, r3
 800869a:	2b00      	cmp	r3, #0
 800869c:	d00b      	beq.n	80086b6 <vPortEnterCritical+0x4e>
	__asm volatile
 800869e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086a2:	f383 8811 	msr	BASEPRI, r3
 80086a6:	f3bf 8f6f 	isb	sy
 80086aa:	f3bf 8f4f 	dsb	sy
 80086ae:	603b      	str	r3, [r7, #0]
}
 80086b0:	bf00      	nop
 80086b2:	bf00      	nop
 80086b4:	e7fd      	b.n	80086b2 <vPortEnterCritical+0x4a>
	}
}
 80086b6:	bf00      	nop
 80086b8:	370c      	adds	r7, #12
 80086ba:	46bd      	mov	sp, r7
 80086bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086c0:	4770      	bx	lr
 80086c2:	bf00      	nop
 80086c4:	20000020 	.word	0x20000020
 80086c8:	e000ed04 	.word	0xe000ed04

080086cc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80086cc:	b480      	push	{r7}
 80086ce:	b083      	sub	sp, #12
 80086d0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80086d2:	4b12      	ldr	r3, [pc, #72]	@ (800871c <vPortExitCritical+0x50>)
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d10b      	bne.n	80086f2 <vPortExitCritical+0x26>
	__asm volatile
 80086da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086de:	f383 8811 	msr	BASEPRI, r3
 80086e2:	f3bf 8f6f 	isb	sy
 80086e6:	f3bf 8f4f 	dsb	sy
 80086ea:	607b      	str	r3, [r7, #4]
}
 80086ec:	bf00      	nop
 80086ee:	bf00      	nop
 80086f0:	e7fd      	b.n	80086ee <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80086f2:	4b0a      	ldr	r3, [pc, #40]	@ (800871c <vPortExitCritical+0x50>)
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	3b01      	subs	r3, #1
 80086f8:	4a08      	ldr	r2, [pc, #32]	@ (800871c <vPortExitCritical+0x50>)
 80086fa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80086fc:	4b07      	ldr	r3, [pc, #28]	@ (800871c <vPortExitCritical+0x50>)
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	2b00      	cmp	r3, #0
 8008702:	d105      	bne.n	8008710 <vPortExitCritical+0x44>
 8008704:	2300      	movs	r3, #0
 8008706:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008708:	683b      	ldr	r3, [r7, #0]
 800870a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800870e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008710:	bf00      	nop
 8008712:	370c      	adds	r7, #12
 8008714:	46bd      	mov	sp, r7
 8008716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800871a:	4770      	bx	lr
 800871c:	20000020 	.word	0x20000020

08008720 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008720:	f3ef 8009 	mrs	r0, PSP
 8008724:	f3bf 8f6f 	isb	sy
 8008728:	4b15      	ldr	r3, [pc, #84]	@ (8008780 <pxCurrentTCBConst>)
 800872a:	681a      	ldr	r2, [r3, #0]
 800872c:	f01e 0f10 	tst.w	lr, #16
 8008730:	bf08      	it	eq
 8008732:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008736:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800873a:	6010      	str	r0, [r2, #0]
 800873c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008740:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8008744:	f380 8811 	msr	BASEPRI, r0
 8008748:	f3bf 8f4f 	dsb	sy
 800874c:	f3bf 8f6f 	isb	sy
 8008750:	f001 f980 	bl	8009a54 <vTaskSwitchContext>
 8008754:	f04f 0000 	mov.w	r0, #0
 8008758:	f380 8811 	msr	BASEPRI, r0
 800875c:	bc09      	pop	{r0, r3}
 800875e:	6819      	ldr	r1, [r3, #0]
 8008760:	6808      	ldr	r0, [r1, #0]
 8008762:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008766:	f01e 0f10 	tst.w	lr, #16
 800876a:	bf08      	it	eq
 800876c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008770:	f380 8809 	msr	PSP, r0
 8008774:	f3bf 8f6f 	isb	sy
 8008778:	4770      	bx	lr
 800877a:	bf00      	nop
 800877c:	f3af 8000 	nop.w

08008780 <pxCurrentTCBConst>:
 8008780:	20004b7c 	.word	0x20004b7c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008784:	bf00      	nop
 8008786:	bf00      	nop

08008788 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008788:	b580      	push	{r7, lr}
 800878a:	b082      	sub	sp, #8
 800878c:	af00      	add	r7, sp, #0
	__asm volatile
 800878e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008792:	f383 8811 	msr	BASEPRI, r3
 8008796:	f3bf 8f6f 	isb	sy
 800879a:	f3bf 8f4f 	dsb	sy
 800879e:	607b      	str	r3, [r7, #4]
}
 80087a0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80087a2:	f001 f89d 	bl	80098e0 <xTaskIncrementTick>
 80087a6:	4603      	mov	r3, r0
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d003      	beq.n	80087b4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80087ac:	4b06      	ldr	r3, [pc, #24]	@ (80087c8 <xPortSysTickHandler+0x40>)
 80087ae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80087b2:	601a      	str	r2, [r3, #0]
 80087b4:	2300      	movs	r3, #0
 80087b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80087b8:	683b      	ldr	r3, [r7, #0]
 80087ba:	f383 8811 	msr	BASEPRI, r3
}
 80087be:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80087c0:	bf00      	nop
 80087c2:	3708      	adds	r7, #8
 80087c4:	46bd      	mov	sp, r7
 80087c6:	bd80      	pop	{r7, pc}
 80087c8:	e000ed04 	.word	0xe000ed04

080087cc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80087cc:	b480      	push	{r7}
 80087ce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80087d0:	4b0b      	ldr	r3, [pc, #44]	@ (8008800 <vPortSetupTimerInterrupt+0x34>)
 80087d2:	2200      	movs	r2, #0
 80087d4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80087d6:	4b0b      	ldr	r3, [pc, #44]	@ (8008804 <vPortSetupTimerInterrupt+0x38>)
 80087d8:	2200      	movs	r2, #0
 80087da:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80087dc:	4b0a      	ldr	r3, [pc, #40]	@ (8008808 <vPortSetupTimerInterrupt+0x3c>)
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	4a0a      	ldr	r2, [pc, #40]	@ (800880c <vPortSetupTimerInterrupt+0x40>)
 80087e2:	fba2 2303 	umull	r2, r3, r2, r3
 80087e6:	099b      	lsrs	r3, r3, #6
 80087e8:	4a09      	ldr	r2, [pc, #36]	@ (8008810 <vPortSetupTimerInterrupt+0x44>)
 80087ea:	3b01      	subs	r3, #1
 80087ec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80087ee:	4b04      	ldr	r3, [pc, #16]	@ (8008800 <vPortSetupTimerInterrupt+0x34>)
 80087f0:	2207      	movs	r2, #7
 80087f2:	601a      	str	r2, [r3, #0]
}
 80087f4:	bf00      	nop
 80087f6:	46bd      	mov	sp, r7
 80087f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087fc:	4770      	bx	lr
 80087fe:	bf00      	nop
 8008800:	e000e010 	.word	0xe000e010
 8008804:	e000e018 	.word	0xe000e018
 8008808:	20000014 	.word	0x20000014
 800880c:	10624dd3 	.word	0x10624dd3
 8008810:	e000e014 	.word	0xe000e014

08008814 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008814:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8008824 <vPortEnableVFP+0x10>
 8008818:	6801      	ldr	r1, [r0, #0]
 800881a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800881e:	6001      	str	r1, [r0, #0]
 8008820:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008822:	bf00      	nop
 8008824:	e000ed88 	.word	0xe000ed88

08008828 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008828:	b480      	push	{r7}
 800882a:	b085      	sub	sp, #20
 800882c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800882e:	f3ef 8305 	mrs	r3, IPSR
 8008832:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	2b0f      	cmp	r3, #15
 8008838:	d915      	bls.n	8008866 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800883a:	4a18      	ldr	r2, [pc, #96]	@ (800889c <vPortValidateInterruptPriority+0x74>)
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	4413      	add	r3, r2
 8008840:	781b      	ldrb	r3, [r3, #0]
 8008842:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008844:	4b16      	ldr	r3, [pc, #88]	@ (80088a0 <vPortValidateInterruptPriority+0x78>)
 8008846:	781b      	ldrb	r3, [r3, #0]
 8008848:	7afa      	ldrb	r2, [r7, #11]
 800884a:	429a      	cmp	r2, r3
 800884c:	d20b      	bcs.n	8008866 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800884e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008852:	f383 8811 	msr	BASEPRI, r3
 8008856:	f3bf 8f6f 	isb	sy
 800885a:	f3bf 8f4f 	dsb	sy
 800885e:	607b      	str	r3, [r7, #4]
}
 8008860:	bf00      	nop
 8008862:	bf00      	nop
 8008864:	e7fd      	b.n	8008862 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008866:	4b0f      	ldr	r3, [pc, #60]	@ (80088a4 <vPortValidateInterruptPriority+0x7c>)
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800886e:	4b0e      	ldr	r3, [pc, #56]	@ (80088a8 <vPortValidateInterruptPriority+0x80>)
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	429a      	cmp	r2, r3
 8008874:	d90b      	bls.n	800888e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8008876:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800887a:	f383 8811 	msr	BASEPRI, r3
 800887e:	f3bf 8f6f 	isb	sy
 8008882:	f3bf 8f4f 	dsb	sy
 8008886:	603b      	str	r3, [r7, #0]
}
 8008888:	bf00      	nop
 800888a:	bf00      	nop
 800888c:	e7fd      	b.n	800888a <vPortValidateInterruptPriority+0x62>
	}
 800888e:	bf00      	nop
 8008890:	3714      	adds	r7, #20
 8008892:	46bd      	mov	sp, r7
 8008894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008898:	4770      	bx	lr
 800889a:	bf00      	nop
 800889c:	e000e3f0 	.word	0xe000e3f0
 80088a0:	20004b34 	.word	0x20004b34
 80088a4:	e000ed0c 	.word	0xe000ed0c
 80088a8:	20004b38 	.word	0x20004b38

080088ac <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80088ac:	b580      	push	{r7, lr}
 80088ae:	b084      	sub	sp, #16
 80088b0:	af00      	add	r7, sp, #0
 80088b2:	6078      	str	r0, [r7, #4]
 80088b4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d10b      	bne.n	80088d8 <xQueueGenericReset+0x2c>
	__asm volatile
 80088c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088c4:	f383 8811 	msr	BASEPRI, r3
 80088c8:	f3bf 8f6f 	isb	sy
 80088cc:	f3bf 8f4f 	dsb	sy
 80088d0:	60bb      	str	r3, [r7, #8]
}
 80088d2:	bf00      	nop
 80088d4:	bf00      	nop
 80088d6:	e7fd      	b.n	80088d4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80088d8:	f7ff fec6 	bl	8008668 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	681a      	ldr	r2, [r3, #0]
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80088e4:	68f9      	ldr	r1, [r7, #12]
 80088e6:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80088e8:	fb01 f303 	mul.w	r3, r1, r3
 80088ec:	441a      	add	r2, r3
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	2200      	movs	r2, #0
 80088f6:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	681a      	ldr	r2, [r3, #0]
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	681a      	ldr	r2, [r3, #0]
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008908:	3b01      	subs	r3, #1
 800890a:	68f9      	ldr	r1, [r7, #12]
 800890c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800890e:	fb01 f303 	mul.w	r3, r1, r3
 8008912:	441a      	add	r2, r3
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	22ff      	movs	r2, #255	@ 0xff
 800891c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	22ff      	movs	r2, #255	@ 0xff
 8008924:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8008928:	683b      	ldr	r3, [r7, #0]
 800892a:	2b00      	cmp	r3, #0
 800892c:	d114      	bne.n	8008958 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	691b      	ldr	r3, [r3, #16]
 8008932:	2b00      	cmp	r3, #0
 8008934:	d01a      	beq.n	800896c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	3310      	adds	r3, #16
 800893a:	4618      	mov	r0, r3
 800893c:	f001 f942 	bl	8009bc4 <xTaskRemoveFromEventList>
 8008940:	4603      	mov	r3, r0
 8008942:	2b00      	cmp	r3, #0
 8008944:	d012      	beq.n	800896c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008946:	4b0d      	ldr	r3, [pc, #52]	@ (800897c <xQueueGenericReset+0xd0>)
 8008948:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800894c:	601a      	str	r2, [r3, #0]
 800894e:	f3bf 8f4f 	dsb	sy
 8008952:	f3bf 8f6f 	isb	sy
 8008956:	e009      	b.n	800896c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	3310      	adds	r3, #16
 800895c:	4618      	mov	r0, r3
 800895e:	f7ff fca1 	bl	80082a4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	3324      	adds	r3, #36	@ 0x24
 8008966:	4618      	mov	r0, r3
 8008968:	f7ff fc9c 	bl	80082a4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800896c:	f7ff feae 	bl	80086cc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008970:	2301      	movs	r3, #1
}
 8008972:	4618      	mov	r0, r3
 8008974:	3710      	adds	r7, #16
 8008976:	46bd      	mov	sp, r7
 8008978:	bd80      	pop	{r7, pc}
 800897a:	bf00      	nop
 800897c:	e000ed04 	.word	0xe000ed04

08008980 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008980:	b580      	push	{r7, lr}
 8008982:	b08e      	sub	sp, #56	@ 0x38
 8008984:	af02      	add	r7, sp, #8
 8008986:	60f8      	str	r0, [r7, #12]
 8008988:	60b9      	str	r1, [r7, #8]
 800898a:	607a      	str	r2, [r7, #4]
 800898c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	2b00      	cmp	r3, #0
 8008992:	d10b      	bne.n	80089ac <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8008994:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008998:	f383 8811 	msr	BASEPRI, r3
 800899c:	f3bf 8f6f 	isb	sy
 80089a0:	f3bf 8f4f 	dsb	sy
 80089a4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80089a6:	bf00      	nop
 80089a8:	bf00      	nop
 80089aa:	e7fd      	b.n	80089a8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80089ac:	683b      	ldr	r3, [r7, #0]
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d10b      	bne.n	80089ca <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80089b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089b6:	f383 8811 	msr	BASEPRI, r3
 80089ba:	f3bf 8f6f 	isb	sy
 80089be:	f3bf 8f4f 	dsb	sy
 80089c2:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80089c4:	bf00      	nop
 80089c6:	bf00      	nop
 80089c8:	e7fd      	b.n	80089c6 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d002      	beq.n	80089d6 <xQueueGenericCreateStatic+0x56>
 80089d0:	68bb      	ldr	r3, [r7, #8]
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d001      	beq.n	80089da <xQueueGenericCreateStatic+0x5a>
 80089d6:	2301      	movs	r3, #1
 80089d8:	e000      	b.n	80089dc <xQueueGenericCreateStatic+0x5c>
 80089da:	2300      	movs	r3, #0
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d10b      	bne.n	80089f8 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80089e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089e4:	f383 8811 	msr	BASEPRI, r3
 80089e8:	f3bf 8f6f 	isb	sy
 80089ec:	f3bf 8f4f 	dsb	sy
 80089f0:	623b      	str	r3, [r7, #32]
}
 80089f2:	bf00      	nop
 80089f4:	bf00      	nop
 80089f6:	e7fd      	b.n	80089f4 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d102      	bne.n	8008a04 <xQueueGenericCreateStatic+0x84>
 80089fe:	68bb      	ldr	r3, [r7, #8]
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d101      	bne.n	8008a08 <xQueueGenericCreateStatic+0x88>
 8008a04:	2301      	movs	r3, #1
 8008a06:	e000      	b.n	8008a0a <xQueueGenericCreateStatic+0x8a>
 8008a08:	2300      	movs	r3, #0
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d10b      	bne.n	8008a26 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8008a0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a12:	f383 8811 	msr	BASEPRI, r3
 8008a16:	f3bf 8f6f 	isb	sy
 8008a1a:	f3bf 8f4f 	dsb	sy
 8008a1e:	61fb      	str	r3, [r7, #28]
}
 8008a20:	bf00      	nop
 8008a22:	bf00      	nop
 8008a24:	e7fd      	b.n	8008a22 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8008a26:	2350      	movs	r3, #80	@ 0x50
 8008a28:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8008a2a:	697b      	ldr	r3, [r7, #20]
 8008a2c:	2b50      	cmp	r3, #80	@ 0x50
 8008a2e:	d00b      	beq.n	8008a48 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8008a30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a34:	f383 8811 	msr	BASEPRI, r3
 8008a38:	f3bf 8f6f 	isb	sy
 8008a3c:	f3bf 8f4f 	dsb	sy
 8008a40:	61bb      	str	r3, [r7, #24]
}
 8008a42:	bf00      	nop
 8008a44:	bf00      	nop
 8008a46:	e7fd      	b.n	8008a44 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8008a48:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008a4a:	683b      	ldr	r3, [r7, #0]
 8008a4c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8008a4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d00d      	beq.n	8008a70 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008a54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a56:	2201      	movs	r2, #1
 8008a58:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008a5c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8008a60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a62:	9300      	str	r3, [sp, #0]
 8008a64:	4613      	mov	r3, r2
 8008a66:	687a      	ldr	r2, [r7, #4]
 8008a68:	68b9      	ldr	r1, [r7, #8]
 8008a6a:	68f8      	ldr	r0, [r7, #12]
 8008a6c:	f000 f805 	bl	8008a7a <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008a70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8008a72:	4618      	mov	r0, r3
 8008a74:	3730      	adds	r7, #48	@ 0x30
 8008a76:	46bd      	mov	sp, r7
 8008a78:	bd80      	pop	{r7, pc}

08008a7a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008a7a:	b580      	push	{r7, lr}
 8008a7c:	b084      	sub	sp, #16
 8008a7e:	af00      	add	r7, sp, #0
 8008a80:	60f8      	str	r0, [r7, #12]
 8008a82:	60b9      	str	r1, [r7, #8]
 8008a84:	607a      	str	r2, [r7, #4]
 8008a86:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8008a88:	68bb      	ldr	r3, [r7, #8]
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d103      	bne.n	8008a96 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008a8e:	69bb      	ldr	r3, [r7, #24]
 8008a90:	69ba      	ldr	r2, [r7, #24]
 8008a92:	601a      	str	r2, [r3, #0]
 8008a94:	e002      	b.n	8008a9c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008a96:	69bb      	ldr	r3, [r7, #24]
 8008a98:	687a      	ldr	r2, [r7, #4]
 8008a9a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008a9c:	69bb      	ldr	r3, [r7, #24]
 8008a9e:	68fa      	ldr	r2, [r7, #12]
 8008aa0:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008aa2:	69bb      	ldr	r3, [r7, #24]
 8008aa4:	68ba      	ldr	r2, [r7, #8]
 8008aa6:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008aa8:	2101      	movs	r1, #1
 8008aaa:	69b8      	ldr	r0, [r7, #24]
 8008aac:	f7ff fefe 	bl	80088ac <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8008ab0:	69bb      	ldr	r3, [r7, #24]
 8008ab2:	78fa      	ldrb	r2, [r7, #3]
 8008ab4:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8008ab8:	bf00      	nop
 8008aba:	3710      	adds	r7, #16
 8008abc:	46bd      	mov	sp, r7
 8008abe:	bd80      	pop	{r7, pc}

08008ac0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008ac0:	b580      	push	{r7, lr}
 8008ac2:	b08e      	sub	sp, #56	@ 0x38
 8008ac4:	af00      	add	r7, sp, #0
 8008ac6:	60f8      	str	r0, [r7, #12]
 8008ac8:	60b9      	str	r1, [r7, #8]
 8008aca:	607a      	str	r2, [r7, #4]
 8008acc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008ace:	2300      	movs	r3, #0
 8008ad0:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8008ad6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d10b      	bne.n	8008af4 <xQueueGenericSend+0x34>
	__asm volatile
 8008adc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ae0:	f383 8811 	msr	BASEPRI, r3
 8008ae4:	f3bf 8f6f 	isb	sy
 8008ae8:	f3bf 8f4f 	dsb	sy
 8008aec:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8008aee:	bf00      	nop
 8008af0:	bf00      	nop
 8008af2:	e7fd      	b.n	8008af0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008af4:	68bb      	ldr	r3, [r7, #8]
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d103      	bne.n	8008b02 <xQueueGenericSend+0x42>
 8008afa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008afc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d101      	bne.n	8008b06 <xQueueGenericSend+0x46>
 8008b02:	2301      	movs	r3, #1
 8008b04:	e000      	b.n	8008b08 <xQueueGenericSend+0x48>
 8008b06:	2300      	movs	r3, #0
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d10b      	bne.n	8008b24 <xQueueGenericSend+0x64>
	__asm volatile
 8008b0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b10:	f383 8811 	msr	BASEPRI, r3
 8008b14:	f3bf 8f6f 	isb	sy
 8008b18:	f3bf 8f4f 	dsb	sy
 8008b1c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8008b1e:	bf00      	nop
 8008b20:	bf00      	nop
 8008b22:	e7fd      	b.n	8008b20 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008b24:	683b      	ldr	r3, [r7, #0]
 8008b26:	2b02      	cmp	r3, #2
 8008b28:	d103      	bne.n	8008b32 <xQueueGenericSend+0x72>
 8008b2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b2c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008b2e:	2b01      	cmp	r3, #1
 8008b30:	d101      	bne.n	8008b36 <xQueueGenericSend+0x76>
 8008b32:	2301      	movs	r3, #1
 8008b34:	e000      	b.n	8008b38 <xQueueGenericSend+0x78>
 8008b36:	2300      	movs	r3, #0
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d10b      	bne.n	8008b54 <xQueueGenericSend+0x94>
	__asm volatile
 8008b3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b40:	f383 8811 	msr	BASEPRI, r3
 8008b44:	f3bf 8f6f 	isb	sy
 8008b48:	f3bf 8f4f 	dsb	sy
 8008b4c:	623b      	str	r3, [r7, #32]
}
 8008b4e:	bf00      	nop
 8008b50:	bf00      	nop
 8008b52:	e7fd      	b.n	8008b50 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008b54:	f001 f9fc 	bl	8009f50 <xTaskGetSchedulerState>
 8008b58:	4603      	mov	r3, r0
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d102      	bne.n	8008b64 <xQueueGenericSend+0xa4>
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d101      	bne.n	8008b68 <xQueueGenericSend+0xa8>
 8008b64:	2301      	movs	r3, #1
 8008b66:	e000      	b.n	8008b6a <xQueueGenericSend+0xaa>
 8008b68:	2300      	movs	r3, #0
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d10b      	bne.n	8008b86 <xQueueGenericSend+0xc6>
	__asm volatile
 8008b6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b72:	f383 8811 	msr	BASEPRI, r3
 8008b76:	f3bf 8f6f 	isb	sy
 8008b7a:	f3bf 8f4f 	dsb	sy
 8008b7e:	61fb      	str	r3, [r7, #28]
}
 8008b80:	bf00      	nop
 8008b82:	bf00      	nop
 8008b84:	e7fd      	b.n	8008b82 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008b86:	f7ff fd6f 	bl	8008668 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008b8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b8c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008b8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b90:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008b92:	429a      	cmp	r2, r3
 8008b94:	d302      	bcc.n	8008b9c <xQueueGenericSend+0xdc>
 8008b96:	683b      	ldr	r3, [r7, #0]
 8008b98:	2b02      	cmp	r3, #2
 8008b9a:	d129      	bne.n	8008bf0 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008b9c:	683a      	ldr	r2, [r7, #0]
 8008b9e:	68b9      	ldr	r1, [r7, #8]
 8008ba0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008ba2:	f000 fa0f 	bl	8008fc4 <prvCopyDataToQueue>
 8008ba6:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008ba8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008baa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d010      	beq.n	8008bd2 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008bb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008bb2:	3324      	adds	r3, #36	@ 0x24
 8008bb4:	4618      	mov	r0, r3
 8008bb6:	f001 f805 	bl	8009bc4 <xTaskRemoveFromEventList>
 8008bba:	4603      	mov	r3, r0
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d013      	beq.n	8008be8 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008bc0:	4b3f      	ldr	r3, [pc, #252]	@ (8008cc0 <xQueueGenericSend+0x200>)
 8008bc2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008bc6:	601a      	str	r2, [r3, #0]
 8008bc8:	f3bf 8f4f 	dsb	sy
 8008bcc:	f3bf 8f6f 	isb	sy
 8008bd0:	e00a      	b.n	8008be8 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8008bd2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d007      	beq.n	8008be8 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008bd8:	4b39      	ldr	r3, [pc, #228]	@ (8008cc0 <xQueueGenericSend+0x200>)
 8008bda:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008bde:	601a      	str	r2, [r3, #0]
 8008be0:	f3bf 8f4f 	dsb	sy
 8008be4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008be8:	f7ff fd70 	bl	80086cc <vPortExitCritical>
				return pdPASS;
 8008bec:	2301      	movs	r3, #1
 8008bee:	e063      	b.n	8008cb8 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d103      	bne.n	8008bfe <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008bf6:	f7ff fd69 	bl	80086cc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8008bfa:	2300      	movs	r3, #0
 8008bfc:	e05c      	b.n	8008cb8 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008bfe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d106      	bne.n	8008c12 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008c04:	f107 0314 	add.w	r3, r7, #20
 8008c08:	4618      	mov	r0, r3
 8008c0a:	f001 f83f 	bl	8009c8c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008c0e:	2301      	movs	r3, #1
 8008c10:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008c12:	f7ff fd5b 	bl	80086cc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008c16:	f000 fda7 	bl	8009768 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008c1a:	f7ff fd25 	bl	8008668 <vPortEnterCritical>
 8008c1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c20:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008c24:	b25b      	sxtb	r3, r3
 8008c26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c2a:	d103      	bne.n	8008c34 <xQueueGenericSend+0x174>
 8008c2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c2e:	2200      	movs	r2, #0
 8008c30:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008c34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c36:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008c3a:	b25b      	sxtb	r3, r3
 8008c3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c40:	d103      	bne.n	8008c4a <xQueueGenericSend+0x18a>
 8008c42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c44:	2200      	movs	r2, #0
 8008c46:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008c4a:	f7ff fd3f 	bl	80086cc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008c4e:	1d3a      	adds	r2, r7, #4
 8008c50:	f107 0314 	add.w	r3, r7, #20
 8008c54:	4611      	mov	r1, r2
 8008c56:	4618      	mov	r0, r3
 8008c58:	f001 f82e 	bl	8009cb8 <xTaskCheckForTimeOut>
 8008c5c:	4603      	mov	r3, r0
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d124      	bne.n	8008cac <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008c62:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008c64:	f000 faa6 	bl	80091b4 <prvIsQueueFull>
 8008c68:	4603      	mov	r3, r0
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d018      	beq.n	8008ca0 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008c6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c70:	3310      	adds	r3, #16
 8008c72:	687a      	ldr	r2, [r7, #4]
 8008c74:	4611      	mov	r1, r2
 8008c76:	4618      	mov	r0, r3
 8008c78:	f000 ff52 	bl	8009b20 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008c7c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008c7e:	f000 fa31 	bl	80090e4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8008c82:	f000 fd7f 	bl	8009784 <xTaskResumeAll>
 8008c86:	4603      	mov	r3, r0
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	f47f af7c 	bne.w	8008b86 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8008c8e:	4b0c      	ldr	r3, [pc, #48]	@ (8008cc0 <xQueueGenericSend+0x200>)
 8008c90:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008c94:	601a      	str	r2, [r3, #0]
 8008c96:	f3bf 8f4f 	dsb	sy
 8008c9a:	f3bf 8f6f 	isb	sy
 8008c9e:	e772      	b.n	8008b86 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008ca0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008ca2:	f000 fa1f 	bl	80090e4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008ca6:	f000 fd6d 	bl	8009784 <xTaskResumeAll>
 8008caa:	e76c      	b.n	8008b86 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008cac:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008cae:	f000 fa19 	bl	80090e4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008cb2:	f000 fd67 	bl	8009784 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8008cb6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008cb8:	4618      	mov	r0, r3
 8008cba:	3738      	adds	r7, #56	@ 0x38
 8008cbc:	46bd      	mov	sp, r7
 8008cbe:	bd80      	pop	{r7, pc}
 8008cc0:	e000ed04 	.word	0xe000ed04

08008cc4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008cc4:	b580      	push	{r7, lr}
 8008cc6:	b090      	sub	sp, #64	@ 0x40
 8008cc8:	af00      	add	r7, sp, #0
 8008cca:	60f8      	str	r0, [r7, #12]
 8008ccc:	60b9      	str	r1, [r7, #8]
 8008cce:	607a      	str	r2, [r7, #4]
 8008cd0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8008cd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d10b      	bne.n	8008cf4 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8008cdc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ce0:	f383 8811 	msr	BASEPRI, r3
 8008ce4:	f3bf 8f6f 	isb	sy
 8008ce8:	f3bf 8f4f 	dsb	sy
 8008cec:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8008cee:	bf00      	nop
 8008cf0:	bf00      	nop
 8008cf2:	e7fd      	b.n	8008cf0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008cf4:	68bb      	ldr	r3, [r7, #8]
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d103      	bne.n	8008d02 <xQueueGenericSendFromISR+0x3e>
 8008cfa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008cfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d101      	bne.n	8008d06 <xQueueGenericSendFromISR+0x42>
 8008d02:	2301      	movs	r3, #1
 8008d04:	e000      	b.n	8008d08 <xQueueGenericSendFromISR+0x44>
 8008d06:	2300      	movs	r3, #0
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d10b      	bne.n	8008d24 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8008d0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d10:	f383 8811 	msr	BASEPRI, r3
 8008d14:	f3bf 8f6f 	isb	sy
 8008d18:	f3bf 8f4f 	dsb	sy
 8008d1c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8008d1e:	bf00      	nop
 8008d20:	bf00      	nop
 8008d22:	e7fd      	b.n	8008d20 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008d24:	683b      	ldr	r3, [r7, #0]
 8008d26:	2b02      	cmp	r3, #2
 8008d28:	d103      	bne.n	8008d32 <xQueueGenericSendFromISR+0x6e>
 8008d2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d2c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008d2e:	2b01      	cmp	r3, #1
 8008d30:	d101      	bne.n	8008d36 <xQueueGenericSendFromISR+0x72>
 8008d32:	2301      	movs	r3, #1
 8008d34:	e000      	b.n	8008d38 <xQueueGenericSendFromISR+0x74>
 8008d36:	2300      	movs	r3, #0
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d10b      	bne.n	8008d54 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8008d3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d40:	f383 8811 	msr	BASEPRI, r3
 8008d44:	f3bf 8f6f 	isb	sy
 8008d48:	f3bf 8f4f 	dsb	sy
 8008d4c:	623b      	str	r3, [r7, #32]
}
 8008d4e:	bf00      	nop
 8008d50:	bf00      	nop
 8008d52:	e7fd      	b.n	8008d50 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008d54:	f7ff fd68 	bl	8008828 <vPortValidateInterruptPriority>
	__asm volatile
 8008d58:	f3ef 8211 	mrs	r2, BASEPRI
 8008d5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d60:	f383 8811 	msr	BASEPRI, r3
 8008d64:	f3bf 8f6f 	isb	sy
 8008d68:	f3bf 8f4f 	dsb	sy
 8008d6c:	61fa      	str	r2, [r7, #28]
 8008d6e:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 8008d70:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008d72:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008d74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d76:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008d78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008d7c:	429a      	cmp	r2, r3
 8008d7e:	d302      	bcc.n	8008d86 <xQueueGenericSendFromISR+0xc2>
 8008d80:	683b      	ldr	r3, [r7, #0]
 8008d82:	2b02      	cmp	r3, #2
 8008d84:	d12f      	bne.n	8008de6 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008d86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d88:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008d8c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008d90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d94:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008d96:	683a      	ldr	r2, [r7, #0]
 8008d98:	68b9      	ldr	r1, [r7, #8]
 8008d9a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8008d9c:	f000 f912 	bl	8008fc4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008da0:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8008da4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008da8:	d112      	bne.n	8008dd0 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008daa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008dac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d016      	beq.n	8008de0 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008db2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008db4:	3324      	adds	r3, #36	@ 0x24
 8008db6:	4618      	mov	r0, r3
 8008db8:	f000 ff04 	bl	8009bc4 <xTaskRemoveFromEventList>
 8008dbc:	4603      	mov	r3, r0
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d00e      	beq.n	8008de0 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d00b      	beq.n	8008de0 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	2201      	movs	r2, #1
 8008dcc:	601a      	str	r2, [r3, #0]
 8008dce:	e007      	b.n	8008de0 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008dd0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8008dd4:	3301      	adds	r3, #1
 8008dd6:	b2db      	uxtb	r3, r3
 8008dd8:	b25a      	sxtb	r2, r3
 8008dda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ddc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8008de0:	2301      	movs	r3, #1
 8008de2:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8008de4:	e001      	b.n	8008dea <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008de6:	2300      	movs	r3, #0
 8008de8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008dea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008dec:	617b      	str	r3, [r7, #20]
	__asm volatile
 8008dee:	697b      	ldr	r3, [r7, #20]
 8008df0:	f383 8811 	msr	BASEPRI, r3
}
 8008df4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008df6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8008df8:	4618      	mov	r0, r3
 8008dfa:	3740      	adds	r7, #64	@ 0x40
 8008dfc:	46bd      	mov	sp, r7
 8008dfe:	bd80      	pop	{r7, pc}

08008e00 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008e00:	b580      	push	{r7, lr}
 8008e02:	b08c      	sub	sp, #48	@ 0x30
 8008e04:	af00      	add	r7, sp, #0
 8008e06:	60f8      	str	r0, [r7, #12]
 8008e08:	60b9      	str	r1, [r7, #8]
 8008e0a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008e0c:	2300      	movs	r3, #0
 8008e0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008e14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d10b      	bne.n	8008e32 <xQueueReceive+0x32>
	__asm volatile
 8008e1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e1e:	f383 8811 	msr	BASEPRI, r3
 8008e22:	f3bf 8f6f 	isb	sy
 8008e26:	f3bf 8f4f 	dsb	sy
 8008e2a:	623b      	str	r3, [r7, #32]
}
 8008e2c:	bf00      	nop
 8008e2e:	bf00      	nop
 8008e30:	e7fd      	b.n	8008e2e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008e32:	68bb      	ldr	r3, [r7, #8]
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d103      	bne.n	8008e40 <xQueueReceive+0x40>
 8008e38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d101      	bne.n	8008e44 <xQueueReceive+0x44>
 8008e40:	2301      	movs	r3, #1
 8008e42:	e000      	b.n	8008e46 <xQueueReceive+0x46>
 8008e44:	2300      	movs	r3, #0
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d10b      	bne.n	8008e62 <xQueueReceive+0x62>
	__asm volatile
 8008e4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e4e:	f383 8811 	msr	BASEPRI, r3
 8008e52:	f3bf 8f6f 	isb	sy
 8008e56:	f3bf 8f4f 	dsb	sy
 8008e5a:	61fb      	str	r3, [r7, #28]
}
 8008e5c:	bf00      	nop
 8008e5e:	bf00      	nop
 8008e60:	e7fd      	b.n	8008e5e <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008e62:	f001 f875 	bl	8009f50 <xTaskGetSchedulerState>
 8008e66:	4603      	mov	r3, r0
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d102      	bne.n	8008e72 <xQueueReceive+0x72>
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d101      	bne.n	8008e76 <xQueueReceive+0x76>
 8008e72:	2301      	movs	r3, #1
 8008e74:	e000      	b.n	8008e78 <xQueueReceive+0x78>
 8008e76:	2300      	movs	r3, #0
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d10b      	bne.n	8008e94 <xQueueReceive+0x94>
	__asm volatile
 8008e7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e80:	f383 8811 	msr	BASEPRI, r3
 8008e84:	f3bf 8f6f 	isb	sy
 8008e88:	f3bf 8f4f 	dsb	sy
 8008e8c:	61bb      	str	r3, [r7, #24]
}
 8008e8e:	bf00      	nop
 8008e90:	bf00      	nop
 8008e92:	e7fd      	b.n	8008e90 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008e94:	f7ff fbe8 	bl	8008668 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008e98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e9c:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008e9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d01f      	beq.n	8008ee4 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008ea4:	68b9      	ldr	r1, [r7, #8]
 8008ea6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008ea8:	f000 f8f6 	bl	8009098 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008eac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008eae:	1e5a      	subs	r2, r3, #1
 8008eb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008eb2:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008eb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008eb6:	691b      	ldr	r3, [r3, #16]
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d00f      	beq.n	8008edc <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008ebc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ebe:	3310      	adds	r3, #16
 8008ec0:	4618      	mov	r0, r3
 8008ec2:	f000 fe7f 	bl	8009bc4 <xTaskRemoveFromEventList>
 8008ec6:	4603      	mov	r3, r0
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d007      	beq.n	8008edc <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008ecc:	4b3c      	ldr	r3, [pc, #240]	@ (8008fc0 <xQueueReceive+0x1c0>)
 8008ece:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008ed2:	601a      	str	r2, [r3, #0]
 8008ed4:	f3bf 8f4f 	dsb	sy
 8008ed8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008edc:	f7ff fbf6 	bl	80086cc <vPortExitCritical>
				return pdPASS;
 8008ee0:	2301      	movs	r3, #1
 8008ee2:	e069      	b.n	8008fb8 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d103      	bne.n	8008ef2 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008eea:	f7ff fbef 	bl	80086cc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008eee:	2300      	movs	r3, #0
 8008ef0:	e062      	b.n	8008fb8 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008ef2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d106      	bne.n	8008f06 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008ef8:	f107 0310 	add.w	r3, r7, #16
 8008efc:	4618      	mov	r0, r3
 8008efe:	f000 fec5 	bl	8009c8c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008f02:	2301      	movs	r3, #1
 8008f04:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008f06:	f7ff fbe1 	bl	80086cc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008f0a:	f000 fc2d 	bl	8009768 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008f0e:	f7ff fbab 	bl	8008668 <vPortEnterCritical>
 8008f12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f14:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008f18:	b25b      	sxtb	r3, r3
 8008f1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f1e:	d103      	bne.n	8008f28 <xQueueReceive+0x128>
 8008f20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f22:	2200      	movs	r2, #0
 8008f24:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008f28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f2a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008f2e:	b25b      	sxtb	r3, r3
 8008f30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f34:	d103      	bne.n	8008f3e <xQueueReceive+0x13e>
 8008f36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f38:	2200      	movs	r2, #0
 8008f3a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008f3e:	f7ff fbc5 	bl	80086cc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008f42:	1d3a      	adds	r2, r7, #4
 8008f44:	f107 0310 	add.w	r3, r7, #16
 8008f48:	4611      	mov	r1, r2
 8008f4a:	4618      	mov	r0, r3
 8008f4c:	f000 feb4 	bl	8009cb8 <xTaskCheckForTimeOut>
 8008f50:	4603      	mov	r3, r0
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d123      	bne.n	8008f9e <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008f56:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008f58:	f000 f916 	bl	8009188 <prvIsQueueEmpty>
 8008f5c:	4603      	mov	r3, r0
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d017      	beq.n	8008f92 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008f62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f64:	3324      	adds	r3, #36	@ 0x24
 8008f66:	687a      	ldr	r2, [r7, #4]
 8008f68:	4611      	mov	r1, r2
 8008f6a:	4618      	mov	r0, r3
 8008f6c:	f000 fdd8 	bl	8009b20 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008f70:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008f72:	f000 f8b7 	bl	80090e4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008f76:	f000 fc05 	bl	8009784 <xTaskResumeAll>
 8008f7a:	4603      	mov	r3, r0
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d189      	bne.n	8008e94 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8008f80:	4b0f      	ldr	r3, [pc, #60]	@ (8008fc0 <xQueueReceive+0x1c0>)
 8008f82:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008f86:	601a      	str	r2, [r3, #0]
 8008f88:	f3bf 8f4f 	dsb	sy
 8008f8c:	f3bf 8f6f 	isb	sy
 8008f90:	e780      	b.n	8008e94 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008f92:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008f94:	f000 f8a6 	bl	80090e4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008f98:	f000 fbf4 	bl	8009784 <xTaskResumeAll>
 8008f9c:	e77a      	b.n	8008e94 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008f9e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008fa0:	f000 f8a0 	bl	80090e4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008fa4:	f000 fbee 	bl	8009784 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008fa8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008faa:	f000 f8ed 	bl	8009188 <prvIsQueueEmpty>
 8008fae:	4603      	mov	r3, r0
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	f43f af6f 	beq.w	8008e94 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008fb6:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008fb8:	4618      	mov	r0, r3
 8008fba:	3730      	adds	r7, #48	@ 0x30
 8008fbc:	46bd      	mov	sp, r7
 8008fbe:	bd80      	pop	{r7, pc}
 8008fc0:	e000ed04 	.word	0xe000ed04

08008fc4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008fc4:	b580      	push	{r7, lr}
 8008fc6:	b086      	sub	sp, #24
 8008fc8:	af00      	add	r7, sp, #0
 8008fca:	60f8      	str	r0, [r7, #12]
 8008fcc:	60b9      	str	r1, [r7, #8]
 8008fce:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008fd0:	2300      	movs	r3, #0
 8008fd2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008fd8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d10d      	bne.n	8008ffe <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d14d      	bne.n	8009086 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	689b      	ldr	r3, [r3, #8]
 8008fee:	4618      	mov	r0, r3
 8008ff0:	f000 ffcc 	bl	8009f8c <xTaskPriorityDisinherit>
 8008ff4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	2200      	movs	r2, #0
 8008ffa:	609a      	str	r2, [r3, #8]
 8008ffc:	e043      	b.n	8009086 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	2b00      	cmp	r3, #0
 8009002:	d119      	bne.n	8009038 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	6858      	ldr	r0, [r3, #4]
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800900c:	461a      	mov	r2, r3
 800900e:	68b9      	ldr	r1, [r7, #8]
 8009010:	f003 fe5e 	bl	800ccd0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	685a      	ldr	r2, [r3, #4]
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800901c:	441a      	add	r2, r3
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	685a      	ldr	r2, [r3, #4]
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	689b      	ldr	r3, [r3, #8]
 800902a:	429a      	cmp	r2, r3
 800902c:	d32b      	bcc.n	8009086 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	681a      	ldr	r2, [r3, #0]
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	605a      	str	r2, [r3, #4]
 8009036:	e026      	b.n	8009086 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	68d8      	ldr	r0, [r3, #12]
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009040:	461a      	mov	r2, r3
 8009042:	68b9      	ldr	r1, [r7, #8]
 8009044:	f003 fe44 	bl	800ccd0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	68da      	ldr	r2, [r3, #12]
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009050:	425b      	negs	r3, r3
 8009052:	441a      	add	r2, r3
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	68da      	ldr	r2, [r3, #12]
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	429a      	cmp	r2, r3
 8009062:	d207      	bcs.n	8009074 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	689a      	ldr	r2, [r3, #8]
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800906c:	425b      	negs	r3, r3
 800906e:	441a      	add	r2, r3
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	2b02      	cmp	r3, #2
 8009078:	d105      	bne.n	8009086 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800907a:	693b      	ldr	r3, [r7, #16]
 800907c:	2b00      	cmp	r3, #0
 800907e:	d002      	beq.n	8009086 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8009080:	693b      	ldr	r3, [r7, #16]
 8009082:	3b01      	subs	r3, #1
 8009084:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009086:	693b      	ldr	r3, [r7, #16]
 8009088:	1c5a      	adds	r2, r3, #1
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800908e:	697b      	ldr	r3, [r7, #20]
}
 8009090:	4618      	mov	r0, r3
 8009092:	3718      	adds	r7, #24
 8009094:	46bd      	mov	sp, r7
 8009096:	bd80      	pop	{r7, pc}

08009098 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8009098:	b580      	push	{r7, lr}
 800909a:	b082      	sub	sp, #8
 800909c:	af00      	add	r7, sp, #0
 800909e:	6078      	str	r0, [r7, #4]
 80090a0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d018      	beq.n	80090dc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	68da      	ldr	r2, [r3, #12]
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80090b2:	441a      	add	r2, r3
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	68da      	ldr	r2, [r3, #12]
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	689b      	ldr	r3, [r3, #8]
 80090c0:	429a      	cmp	r2, r3
 80090c2:	d303      	bcc.n	80090cc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	681a      	ldr	r2, [r3, #0]
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	68d9      	ldr	r1, [r3, #12]
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80090d4:	461a      	mov	r2, r3
 80090d6:	6838      	ldr	r0, [r7, #0]
 80090d8:	f003 fdfa 	bl	800ccd0 <memcpy>
	}
}
 80090dc:	bf00      	nop
 80090de:	3708      	adds	r7, #8
 80090e0:	46bd      	mov	sp, r7
 80090e2:	bd80      	pop	{r7, pc}

080090e4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80090e4:	b580      	push	{r7, lr}
 80090e6:	b084      	sub	sp, #16
 80090e8:	af00      	add	r7, sp, #0
 80090ea:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80090ec:	f7ff fabc 	bl	8008668 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80090f6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80090f8:	e011      	b.n	800911e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d012      	beq.n	8009128 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	3324      	adds	r3, #36	@ 0x24
 8009106:	4618      	mov	r0, r3
 8009108:	f000 fd5c 	bl	8009bc4 <xTaskRemoveFromEventList>
 800910c:	4603      	mov	r3, r0
 800910e:	2b00      	cmp	r3, #0
 8009110:	d001      	beq.n	8009116 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8009112:	f000 fe35 	bl	8009d80 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8009116:	7bfb      	ldrb	r3, [r7, #15]
 8009118:	3b01      	subs	r3, #1
 800911a:	b2db      	uxtb	r3, r3
 800911c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800911e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009122:	2b00      	cmp	r3, #0
 8009124:	dce9      	bgt.n	80090fa <prvUnlockQueue+0x16>
 8009126:	e000      	b.n	800912a <prvUnlockQueue+0x46>
					break;
 8009128:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	22ff      	movs	r2, #255	@ 0xff
 800912e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8009132:	f7ff facb 	bl	80086cc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8009136:	f7ff fa97 	bl	8008668 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009140:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009142:	e011      	b.n	8009168 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	691b      	ldr	r3, [r3, #16]
 8009148:	2b00      	cmp	r3, #0
 800914a:	d012      	beq.n	8009172 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	3310      	adds	r3, #16
 8009150:	4618      	mov	r0, r3
 8009152:	f000 fd37 	bl	8009bc4 <xTaskRemoveFromEventList>
 8009156:	4603      	mov	r3, r0
 8009158:	2b00      	cmp	r3, #0
 800915a:	d001      	beq.n	8009160 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800915c:	f000 fe10 	bl	8009d80 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8009160:	7bbb      	ldrb	r3, [r7, #14]
 8009162:	3b01      	subs	r3, #1
 8009164:	b2db      	uxtb	r3, r3
 8009166:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009168:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800916c:	2b00      	cmp	r3, #0
 800916e:	dce9      	bgt.n	8009144 <prvUnlockQueue+0x60>
 8009170:	e000      	b.n	8009174 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8009172:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	22ff      	movs	r2, #255	@ 0xff
 8009178:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800917c:	f7ff faa6 	bl	80086cc <vPortExitCritical>
}
 8009180:	bf00      	nop
 8009182:	3710      	adds	r7, #16
 8009184:	46bd      	mov	sp, r7
 8009186:	bd80      	pop	{r7, pc}

08009188 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009188:	b580      	push	{r7, lr}
 800918a:	b084      	sub	sp, #16
 800918c:	af00      	add	r7, sp, #0
 800918e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009190:	f7ff fa6a 	bl	8008668 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009198:	2b00      	cmp	r3, #0
 800919a:	d102      	bne.n	80091a2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800919c:	2301      	movs	r3, #1
 800919e:	60fb      	str	r3, [r7, #12]
 80091a0:	e001      	b.n	80091a6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80091a2:	2300      	movs	r3, #0
 80091a4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80091a6:	f7ff fa91 	bl	80086cc <vPortExitCritical>

	return xReturn;
 80091aa:	68fb      	ldr	r3, [r7, #12]
}
 80091ac:	4618      	mov	r0, r3
 80091ae:	3710      	adds	r7, #16
 80091b0:	46bd      	mov	sp, r7
 80091b2:	bd80      	pop	{r7, pc}

080091b4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80091b4:	b580      	push	{r7, lr}
 80091b6:	b084      	sub	sp, #16
 80091b8:	af00      	add	r7, sp, #0
 80091ba:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80091bc:	f7ff fa54 	bl	8008668 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80091c8:	429a      	cmp	r2, r3
 80091ca:	d102      	bne.n	80091d2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80091cc:	2301      	movs	r3, #1
 80091ce:	60fb      	str	r3, [r7, #12]
 80091d0:	e001      	b.n	80091d6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80091d2:	2300      	movs	r3, #0
 80091d4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80091d6:	f7ff fa79 	bl	80086cc <vPortExitCritical>

	return xReturn;
 80091da:	68fb      	ldr	r3, [r7, #12]
}
 80091dc:	4618      	mov	r0, r3
 80091de:	3710      	adds	r7, #16
 80091e0:	46bd      	mov	sp, r7
 80091e2:	bd80      	pop	{r7, pc}

080091e4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80091e4:	b480      	push	{r7}
 80091e6:	b085      	sub	sp, #20
 80091e8:	af00      	add	r7, sp, #0
 80091ea:	6078      	str	r0, [r7, #4]
 80091ec:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80091ee:	2300      	movs	r3, #0
 80091f0:	60fb      	str	r3, [r7, #12]
 80091f2:	e014      	b.n	800921e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80091f4:	4a0f      	ldr	r2, [pc, #60]	@ (8009234 <vQueueAddToRegistry+0x50>)
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	d10b      	bne.n	8009218 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8009200:	490c      	ldr	r1, [pc, #48]	@ (8009234 <vQueueAddToRegistry+0x50>)
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	683a      	ldr	r2, [r7, #0]
 8009206:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800920a:	4a0a      	ldr	r2, [pc, #40]	@ (8009234 <vQueueAddToRegistry+0x50>)
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	00db      	lsls	r3, r3, #3
 8009210:	4413      	add	r3, r2
 8009212:	687a      	ldr	r2, [r7, #4]
 8009214:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8009216:	e006      	b.n	8009226 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	3301      	adds	r3, #1
 800921c:	60fb      	str	r3, [r7, #12]
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	2b07      	cmp	r3, #7
 8009222:	d9e7      	bls.n	80091f4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8009224:	bf00      	nop
 8009226:	bf00      	nop
 8009228:	3714      	adds	r7, #20
 800922a:	46bd      	mov	sp, r7
 800922c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009230:	4770      	bx	lr
 8009232:	bf00      	nop
 8009234:	20004b3c 	.word	0x20004b3c

08009238 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009238:	b580      	push	{r7, lr}
 800923a:	b086      	sub	sp, #24
 800923c:	af00      	add	r7, sp, #0
 800923e:	60f8      	str	r0, [r7, #12]
 8009240:	60b9      	str	r1, [r7, #8]
 8009242:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8009248:	f7ff fa0e 	bl	8008668 <vPortEnterCritical>
 800924c:	697b      	ldr	r3, [r7, #20]
 800924e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009252:	b25b      	sxtb	r3, r3
 8009254:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009258:	d103      	bne.n	8009262 <vQueueWaitForMessageRestricted+0x2a>
 800925a:	697b      	ldr	r3, [r7, #20]
 800925c:	2200      	movs	r2, #0
 800925e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009262:	697b      	ldr	r3, [r7, #20]
 8009264:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009268:	b25b      	sxtb	r3, r3
 800926a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800926e:	d103      	bne.n	8009278 <vQueueWaitForMessageRestricted+0x40>
 8009270:	697b      	ldr	r3, [r7, #20]
 8009272:	2200      	movs	r2, #0
 8009274:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009278:	f7ff fa28 	bl	80086cc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800927c:	697b      	ldr	r3, [r7, #20]
 800927e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009280:	2b00      	cmp	r3, #0
 8009282:	d106      	bne.n	8009292 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8009284:	697b      	ldr	r3, [r7, #20]
 8009286:	3324      	adds	r3, #36	@ 0x24
 8009288:	687a      	ldr	r2, [r7, #4]
 800928a:	68b9      	ldr	r1, [r7, #8]
 800928c:	4618      	mov	r0, r3
 800928e:	f000 fc6d 	bl	8009b6c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8009292:	6978      	ldr	r0, [r7, #20]
 8009294:	f7ff ff26 	bl	80090e4 <prvUnlockQueue>
	}
 8009298:	bf00      	nop
 800929a:	3718      	adds	r7, #24
 800929c:	46bd      	mov	sp, r7
 800929e:	bd80      	pop	{r7, pc}

080092a0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80092a0:	b580      	push	{r7, lr}
 80092a2:	b08e      	sub	sp, #56	@ 0x38
 80092a4:	af04      	add	r7, sp, #16
 80092a6:	60f8      	str	r0, [r7, #12]
 80092a8:	60b9      	str	r1, [r7, #8]
 80092aa:	607a      	str	r2, [r7, #4]
 80092ac:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80092ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d10b      	bne.n	80092cc <xTaskCreateStatic+0x2c>
	__asm volatile
 80092b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80092b8:	f383 8811 	msr	BASEPRI, r3
 80092bc:	f3bf 8f6f 	isb	sy
 80092c0:	f3bf 8f4f 	dsb	sy
 80092c4:	623b      	str	r3, [r7, #32]
}
 80092c6:	bf00      	nop
 80092c8:	bf00      	nop
 80092ca:	e7fd      	b.n	80092c8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80092cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d10b      	bne.n	80092ea <xTaskCreateStatic+0x4a>
	__asm volatile
 80092d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80092d6:	f383 8811 	msr	BASEPRI, r3
 80092da:	f3bf 8f6f 	isb	sy
 80092de:	f3bf 8f4f 	dsb	sy
 80092e2:	61fb      	str	r3, [r7, #28]
}
 80092e4:	bf00      	nop
 80092e6:	bf00      	nop
 80092e8:	e7fd      	b.n	80092e6 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80092ea:	23a8      	movs	r3, #168	@ 0xa8
 80092ec:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80092ee:	693b      	ldr	r3, [r7, #16]
 80092f0:	2ba8      	cmp	r3, #168	@ 0xa8
 80092f2:	d00b      	beq.n	800930c <xTaskCreateStatic+0x6c>
	__asm volatile
 80092f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80092f8:	f383 8811 	msr	BASEPRI, r3
 80092fc:	f3bf 8f6f 	isb	sy
 8009300:	f3bf 8f4f 	dsb	sy
 8009304:	61bb      	str	r3, [r7, #24]
}
 8009306:	bf00      	nop
 8009308:	bf00      	nop
 800930a:	e7fd      	b.n	8009308 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800930c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800930e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009310:	2b00      	cmp	r3, #0
 8009312:	d01e      	beq.n	8009352 <xTaskCreateStatic+0xb2>
 8009314:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009316:	2b00      	cmp	r3, #0
 8009318:	d01b      	beq.n	8009352 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800931a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800931c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800931e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009320:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009322:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009324:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009326:	2202      	movs	r2, #2
 8009328:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800932c:	2300      	movs	r3, #0
 800932e:	9303      	str	r3, [sp, #12]
 8009330:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009332:	9302      	str	r3, [sp, #8]
 8009334:	f107 0314 	add.w	r3, r7, #20
 8009338:	9301      	str	r3, [sp, #4]
 800933a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800933c:	9300      	str	r3, [sp, #0]
 800933e:	683b      	ldr	r3, [r7, #0]
 8009340:	687a      	ldr	r2, [r7, #4]
 8009342:	68b9      	ldr	r1, [r7, #8]
 8009344:	68f8      	ldr	r0, [r7, #12]
 8009346:	f000 f851 	bl	80093ec <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800934a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800934c:	f000 f8f6 	bl	800953c <prvAddNewTaskToReadyList>
 8009350:	e001      	b.n	8009356 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8009352:	2300      	movs	r3, #0
 8009354:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8009356:	697b      	ldr	r3, [r7, #20]
	}
 8009358:	4618      	mov	r0, r3
 800935a:	3728      	adds	r7, #40	@ 0x28
 800935c:	46bd      	mov	sp, r7
 800935e:	bd80      	pop	{r7, pc}

08009360 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009360:	b580      	push	{r7, lr}
 8009362:	b08c      	sub	sp, #48	@ 0x30
 8009364:	af04      	add	r7, sp, #16
 8009366:	60f8      	str	r0, [r7, #12]
 8009368:	60b9      	str	r1, [r7, #8]
 800936a:	603b      	str	r3, [r7, #0]
 800936c:	4613      	mov	r3, r2
 800936e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009370:	88fb      	ldrh	r3, [r7, #6]
 8009372:	009b      	lsls	r3, r3, #2
 8009374:	4618      	mov	r0, r3
 8009376:	f7fe fda7 	bl	8007ec8 <pvPortMalloc>
 800937a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800937c:	697b      	ldr	r3, [r7, #20]
 800937e:	2b00      	cmp	r3, #0
 8009380:	d00e      	beq.n	80093a0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009382:	20a8      	movs	r0, #168	@ 0xa8
 8009384:	f7fe fda0 	bl	8007ec8 <pvPortMalloc>
 8009388:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800938a:	69fb      	ldr	r3, [r7, #28]
 800938c:	2b00      	cmp	r3, #0
 800938e:	d003      	beq.n	8009398 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009390:	69fb      	ldr	r3, [r7, #28]
 8009392:	697a      	ldr	r2, [r7, #20]
 8009394:	631a      	str	r2, [r3, #48]	@ 0x30
 8009396:	e005      	b.n	80093a4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009398:	6978      	ldr	r0, [r7, #20]
 800939a:	f7fe fe63 	bl	8008064 <vPortFree>
 800939e:	e001      	b.n	80093a4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80093a0:	2300      	movs	r3, #0
 80093a2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80093a4:	69fb      	ldr	r3, [r7, #28]
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d017      	beq.n	80093da <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80093aa:	69fb      	ldr	r3, [r7, #28]
 80093ac:	2200      	movs	r2, #0
 80093ae:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80093b2:	88fa      	ldrh	r2, [r7, #6]
 80093b4:	2300      	movs	r3, #0
 80093b6:	9303      	str	r3, [sp, #12]
 80093b8:	69fb      	ldr	r3, [r7, #28]
 80093ba:	9302      	str	r3, [sp, #8]
 80093bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80093be:	9301      	str	r3, [sp, #4]
 80093c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093c2:	9300      	str	r3, [sp, #0]
 80093c4:	683b      	ldr	r3, [r7, #0]
 80093c6:	68b9      	ldr	r1, [r7, #8]
 80093c8:	68f8      	ldr	r0, [r7, #12]
 80093ca:	f000 f80f 	bl	80093ec <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80093ce:	69f8      	ldr	r0, [r7, #28]
 80093d0:	f000 f8b4 	bl	800953c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80093d4:	2301      	movs	r3, #1
 80093d6:	61bb      	str	r3, [r7, #24]
 80093d8:	e002      	b.n	80093e0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80093da:	f04f 33ff 	mov.w	r3, #4294967295
 80093de:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80093e0:	69bb      	ldr	r3, [r7, #24]
	}
 80093e2:	4618      	mov	r0, r3
 80093e4:	3720      	adds	r7, #32
 80093e6:	46bd      	mov	sp, r7
 80093e8:	bd80      	pop	{r7, pc}
	...

080093ec <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80093ec:	b580      	push	{r7, lr}
 80093ee:	b088      	sub	sp, #32
 80093f0:	af00      	add	r7, sp, #0
 80093f2:	60f8      	str	r0, [r7, #12]
 80093f4:	60b9      	str	r1, [r7, #8]
 80093f6:	607a      	str	r2, [r7, #4]
 80093f8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80093fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093fc:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	009b      	lsls	r3, r3, #2
 8009402:	461a      	mov	r2, r3
 8009404:	21a5      	movs	r1, #165	@ 0xa5
 8009406:	f003 fbd1 	bl	800cbac <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800940a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800940c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8009414:	3b01      	subs	r3, #1
 8009416:	009b      	lsls	r3, r3, #2
 8009418:	4413      	add	r3, r2
 800941a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800941c:	69bb      	ldr	r3, [r7, #24]
 800941e:	f023 0307 	bic.w	r3, r3, #7
 8009422:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009424:	69bb      	ldr	r3, [r7, #24]
 8009426:	f003 0307 	and.w	r3, r3, #7
 800942a:	2b00      	cmp	r3, #0
 800942c:	d00b      	beq.n	8009446 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800942e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009432:	f383 8811 	msr	BASEPRI, r3
 8009436:	f3bf 8f6f 	isb	sy
 800943a:	f3bf 8f4f 	dsb	sy
 800943e:	617b      	str	r3, [r7, #20]
}
 8009440:	bf00      	nop
 8009442:	bf00      	nop
 8009444:	e7fd      	b.n	8009442 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8009446:	68bb      	ldr	r3, [r7, #8]
 8009448:	2b00      	cmp	r3, #0
 800944a:	d01f      	beq.n	800948c <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800944c:	2300      	movs	r3, #0
 800944e:	61fb      	str	r3, [r7, #28]
 8009450:	e012      	b.n	8009478 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009452:	68ba      	ldr	r2, [r7, #8]
 8009454:	69fb      	ldr	r3, [r7, #28]
 8009456:	4413      	add	r3, r2
 8009458:	7819      	ldrb	r1, [r3, #0]
 800945a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800945c:	69fb      	ldr	r3, [r7, #28]
 800945e:	4413      	add	r3, r2
 8009460:	3334      	adds	r3, #52	@ 0x34
 8009462:	460a      	mov	r2, r1
 8009464:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8009466:	68ba      	ldr	r2, [r7, #8]
 8009468:	69fb      	ldr	r3, [r7, #28]
 800946a:	4413      	add	r3, r2
 800946c:	781b      	ldrb	r3, [r3, #0]
 800946e:	2b00      	cmp	r3, #0
 8009470:	d006      	beq.n	8009480 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009472:	69fb      	ldr	r3, [r7, #28]
 8009474:	3301      	adds	r3, #1
 8009476:	61fb      	str	r3, [r7, #28]
 8009478:	69fb      	ldr	r3, [r7, #28]
 800947a:	2b0f      	cmp	r3, #15
 800947c:	d9e9      	bls.n	8009452 <prvInitialiseNewTask+0x66>
 800947e:	e000      	b.n	8009482 <prvInitialiseNewTask+0x96>
			{
				break;
 8009480:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009482:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009484:	2200      	movs	r2, #0
 8009486:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800948a:	e003      	b.n	8009494 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800948c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800948e:	2200      	movs	r2, #0
 8009490:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009494:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009496:	2b37      	cmp	r3, #55	@ 0x37
 8009498:	d901      	bls.n	800949e <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800949a:	2337      	movs	r3, #55	@ 0x37
 800949c:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800949e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094a0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80094a2:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80094a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094a6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80094a8:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80094aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094ac:	2200      	movs	r2, #0
 80094ae:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80094b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094b2:	3304      	adds	r3, #4
 80094b4:	4618      	mov	r0, r3
 80094b6:	f7fe ff15 	bl	80082e4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80094ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094bc:	3318      	adds	r3, #24
 80094be:	4618      	mov	r0, r3
 80094c0:	f7fe ff10 	bl	80082e4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80094c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094c6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80094c8:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80094ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80094cc:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80094d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094d2:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80094d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094d6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80094d8:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80094da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094dc:	2200      	movs	r2, #0
 80094de:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80094e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094e4:	2200      	movs	r2, #0
 80094e6:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80094ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094ec:	3354      	adds	r3, #84	@ 0x54
 80094ee:	224c      	movs	r2, #76	@ 0x4c
 80094f0:	2100      	movs	r1, #0
 80094f2:	4618      	mov	r0, r3
 80094f4:	f003 fb5a 	bl	800cbac <memset>
 80094f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094fa:	4a0d      	ldr	r2, [pc, #52]	@ (8009530 <prvInitialiseNewTask+0x144>)
 80094fc:	659a      	str	r2, [r3, #88]	@ 0x58
 80094fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009500:	4a0c      	ldr	r2, [pc, #48]	@ (8009534 <prvInitialiseNewTask+0x148>)
 8009502:	65da      	str	r2, [r3, #92]	@ 0x5c
 8009504:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009506:	4a0c      	ldr	r2, [pc, #48]	@ (8009538 <prvInitialiseNewTask+0x14c>)
 8009508:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800950a:	683a      	ldr	r2, [r7, #0]
 800950c:	68f9      	ldr	r1, [r7, #12]
 800950e:	69b8      	ldr	r0, [r7, #24]
 8009510:	f7fe ff7c 	bl	800840c <pxPortInitialiseStack>
 8009514:	4602      	mov	r2, r0
 8009516:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009518:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800951a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800951c:	2b00      	cmp	r3, #0
 800951e:	d002      	beq.n	8009526 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009520:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009522:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009524:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009526:	bf00      	nop
 8009528:	3720      	adds	r7, #32
 800952a:	46bd      	mov	sp, r7
 800952c:	bd80      	pop	{r7, pc}
 800952e:	bf00      	nop
 8009530:	20005b80 	.word	0x20005b80
 8009534:	20005be8 	.word	0x20005be8
 8009538:	20005c50 	.word	0x20005c50

0800953c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800953c:	b580      	push	{r7, lr}
 800953e:	b082      	sub	sp, #8
 8009540:	af00      	add	r7, sp, #0
 8009542:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009544:	f7ff f890 	bl	8008668 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009548:	4b2d      	ldr	r3, [pc, #180]	@ (8009600 <prvAddNewTaskToReadyList+0xc4>)
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	3301      	adds	r3, #1
 800954e:	4a2c      	ldr	r2, [pc, #176]	@ (8009600 <prvAddNewTaskToReadyList+0xc4>)
 8009550:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8009552:	4b2c      	ldr	r3, [pc, #176]	@ (8009604 <prvAddNewTaskToReadyList+0xc8>)
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	2b00      	cmp	r3, #0
 8009558:	d109      	bne.n	800956e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800955a:	4a2a      	ldr	r2, [pc, #168]	@ (8009604 <prvAddNewTaskToReadyList+0xc8>)
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009560:	4b27      	ldr	r3, [pc, #156]	@ (8009600 <prvAddNewTaskToReadyList+0xc4>)
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	2b01      	cmp	r3, #1
 8009566:	d110      	bne.n	800958a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009568:	f000 fc2e 	bl	8009dc8 <prvInitialiseTaskLists>
 800956c:	e00d      	b.n	800958a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800956e:	4b26      	ldr	r3, [pc, #152]	@ (8009608 <prvAddNewTaskToReadyList+0xcc>)
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	2b00      	cmp	r3, #0
 8009574:	d109      	bne.n	800958a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009576:	4b23      	ldr	r3, [pc, #140]	@ (8009604 <prvAddNewTaskToReadyList+0xc8>)
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009580:	429a      	cmp	r2, r3
 8009582:	d802      	bhi.n	800958a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009584:	4a1f      	ldr	r2, [pc, #124]	@ (8009604 <prvAddNewTaskToReadyList+0xc8>)
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800958a:	4b20      	ldr	r3, [pc, #128]	@ (800960c <prvAddNewTaskToReadyList+0xd0>)
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	3301      	adds	r3, #1
 8009590:	4a1e      	ldr	r2, [pc, #120]	@ (800960c <prvAddNewTaskToReadyList+0xd0>)
 8009592:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8009594:	4b1d      	ldr	r3, [pc, #116]	@ (800960c <prvAddNewTaskToReadyList+0xd0>)
 8009596:	681a      	ldr	r2, [r3, #0]
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80095a0:	4b1b      	ldr	r3, [pc, #108]	@ (8009610 <prvAddNewTaskToReadyList+0xd4>)
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	429a      	cmp	r2, r3
 80095a6:	d903      	bls.n	80095b0 <prvAddNewTaskToReadyList+0x74>
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80095ac:	4a18      	ldr	r2, [pc, #96]	@ (8009610 <prvAddNewTaskToReadyList+0xd4>)
 80095ae:	6013      	str	r3, [r2, #0]
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80095b4:	4613      	mov	r3, r2
 80095b6:	009b      	lsls	r3, r3, #2
 80095b8:	4413      	add	r3, r2
 80095ba:	009b      	lsls	r3, r3, #2
 80095bc:	4a15      	ldr	r2, [pc, #84]	@ (8009614 <prvAddNewTaskToReadyList+0xd8>)
 80095be:	441a      	add	r2, r3
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	3304      	adds	r3, #4
 80095c4:	4619      	mov	r1, r3
 80095c6:	4610      	mov	r0, r2
 80095c8:	f7fe fe99 	bl	80082fe <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80095cc:	f7ff f87e 	bl	80086cc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80095d0:	4b0d      	ldr	r3, [pc, #52]	@ (8009608 <prvAddNewTaskToReadyList+0xcc>)
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d00e      	beq.n	80095f6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80095d8:	4b0a      	ldr	r3, [pc, #40]	@ (8009604 <prvAddNewTaskToReadyList+0xc8>)
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80095e2:	429a      	cmp	r2, r3
 80095e4:	d207      	bcs.n	80095f6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80095e6:	4b0c      	ldr	r3, [pc, #48]	@ (8009618 <prvAddNewTaskToReadyList+0xdc>)
 80095e8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80095ec:	601a      	str	r2, [r3, #0]
 80095ee:	f3bf 8f4f 	dsb	sy
 80095f2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80095f6:	bf00      	nop
 80095f8:	3708      	adds	r7, #8
 80095fa:	46bd      	mov	sp, r7
 80095fc:	bd80      	pop	{r7, pc}
 80095fe:	bf00      	nop
 8009600:	20005050 	.word	0x20005050
 8009604:	20004b7c 	.word	0x20004b7c
 8009608:	2000505c 	.word	0x2000505c
 800960c:	2000506c 	.word	0x2000506c
 8009610:	20005058 	.word	0x20005058
 8009614:	20004b80 	.word	0x20004b80
 8009618:	e000ed04 	.word	0xe000ed04

0800961c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800961c:	b580      	push	{r7, lr}
 800961e:	b084      	sub	sp, #16
 8009620:	af00      	add	r7, sp, #0
 8009622:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009624:	2300      	movs	r3, #0
 8009626:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	2b00      	cmp	r3, #0
 800962c:	d018      	beq.n	8009660 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800962e:	4b14      	ldr	r3, [pc, #80]	@ (8009680 <vTaskDelay+0x64>)
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	2b00      	cmp	r3, #0
 8009634:	d00b      	beq.n	800964e <vTaskDelay+0x32>
	__asm volatile
 8009636:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800963a:	f383 8811 	msr	BASEPRI, r3
 800963e:	f3bf 8f6f 	isb	sy
 8009642:	f3bf 8f4f 	dsb	sy
 8009646:	60bb      	str	r3, [r7, #8]
}
 8009648:	bf00      	nop
 800964a:	bf00      	nop
 800964c:	e7fd      	b.n	800964a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800964e:	f000 f88b 	bl	8009768 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009652:	2100      	movs	r1, #0
 8009654:	6878      	ldr	r0, [r7, #4]
 8009656:	f000 fd09 	bl	800a06c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800965a:	f000 f893 	bl	8009784 <xTaskResumeAll>
 800965e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	2b00      	cmp	r3, #0
 8009664:	d107      	bne.n	8009676 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8009666:	4b07      	ldr	r3, [pc, #28]	@ (8009684 <vTaskDelay+0x68>)
 8009668:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800966c:	601a      	str	r2, [r3, #0]
 800966e:	f3bf 8f4f 	dsb	sy
 8009672:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009676:	bf00      	nop
 8009678:	3710      	adds	r7, #16
 800967a:	46bd      	mov	sp, r7
 800967c:	bd80      	pop	{r7, pc}
 800967e:	bf00      	nop
 8009680:	20005078 	.word	0x20005078
 8009684:	e000ed04 	.word	0xe000ed04

08009688 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009688:	b580      	push	{r7, lr}
 800968a:	b08a      	sub	sp, #40	@ 0x28
 800968c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800968e:	2300      	movs	r3, #0
 8009690:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8009692:	2300      	movs	r3, #0
 8009694:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8009696:	463a      	mov	r2, r7
 8009698:	1d39      	adds	r1, r7, #4
 800969a:	f107 0308 	add.w	r3, r7, #8
 800969e:	4618      	mov	r0, r3
 80096a0:	f7fe fbde 	bl	8007e60 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80096a4:	6839      	ldr	r1, [r7, #0]
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	68ba      	ldr	r2, [r7, #8]
 80096aa:	9202      	str	r2, [sp, #8]
 80096ac:	9301      	str	r3, [sp, #4]
 80096ae:	2300      	movs	r3, #0
 80096b0:	9300      	str	r3, [sp, #0]
 80096b2:	2300      	movs	r3, #0
 80096b4:	460a      	mov	r2, r1
 80096b6:	4924      	ldr	r1, [pc, #144]	@ (8009748 <vTaskStartScheduler+0xc0>)
 80096b8:	4824      	ldr	r0, [pc, #144]	@ (800974c <vTaskStartScheduler+0xc4>)
 80096ba:	f7ff fdf1 	bl	80092a0 <xTaskCreateStatic>
 80096be:	4603      	mov	r3, r0
 80096c0:	4a23      	ldr	r2, [pc, #140]	@ (8009750 <vTaskStartScheduler+0xc8>)
 80096c2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80096c4:	4b22      	ldr	r3, [pc, #136]	@ (8009750 <vTaskStartScheduler+0xc8>)
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	d002      	beq.n	80096d2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80096cc:	2301      	movs	r3, #1
 80096ce:	617b      	str	r3, [r7, #20]
 80096d0:	e001      	b.n	80096d6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80096d2:	2300      	movs	r3, #0
 80096d4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80096d6:	697b      	ldr	r3, [r7, #20]
 80096d8:	2b01      	cmp	r3, #1
 80096da:	d102      	bne.n	80096e2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80096dc:	f000 fd1a 	bl	800a114 <xTimerCreateTimerTask>
 80096e0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80096e2:	697b      	ldr	r3, [r7, #20]
 80096e4:	2b01      	cmp	r3, #1
 80096e6:	d11b      	bne.n	8009720 <vTaskStartScheduler+0x98>
	__asm volatile
 80096e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80096ec:	f383 8811 	msr	BASEPRI, r3
 80096f0:	f3bf 8f6f 	isb	sy
 80096f4:	f3bf 8f4f 	dsb	sy
 80096f8:	613b      	str	r3, [r7, #16]
}
 80096fa:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80096fc:	4b15      	ldr	r3, [pc, #84]	@ (8009754 <vTaskStartScheduler+0xcc>)
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	3354      	adds	r3, #84	@ 0x54
 8009702:	4a15      	ldr	r2, [pc, #84]	@ (8009758 <vTaskStartScheduler+0xd0>)
 8009704:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009706:	4b15      	ldr	r3, [pc, #84]	@ (800975c <vTaskStartScheduler+0xd4>)
 8009708:	f04f 32ff 	mov.w	r2, #4294967295
 800970c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800970e:	4b14      	ldr	r3, [pc, #80]	@ (8009760 <vTaskStartScheduler+0xd8>)
 8009710:	2201      	movs	r2, #1
 8009712:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009714:	4b13      	ldr	r3, [pc, #76]	@ (8009764 <vTaskStartScheduler+0xdc>)
 8009716:	2200      	movs	r2, #0
 8009718:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800971a:	f7fe ff01 	bl	8008520 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800971e:	e00f      	b.n	8009740 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009720:	697b      	ldr	r3, [r7, #20]
 8009722:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009726:	d10b      	bne.n	8009740 <vTaskStartScheduler+0xb8>
	__asm volatile
 8009728:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800972c:	f383 8811 	msr	BASEPRI, r3
 8009730:	f3bf 8f6f 	isb	sy
 8009734:	f3bf 8f4f 	dsb	sy
 8009738:	60fb      	str	r3, [r7, #12]
}
 800973a:	bf00      	nop
 800973c:	bf00      	nop
 800973e:	e7fd      	b.n	800973c <vTaskStartScheduler+0xb4>
}
 8009740:	bf00      	nop
 8009742:	3718      	adds	r7, #24
 8009744:	46bd      	mov	sp, r7
 8009746:	bd80      	pop	{r7, pc}
 8009748:	0800d614 	.word	0x0800d614
 800974c:	08009d99 	.word	0x08009d99
 8009750:	20005074 	.word	0x20005074
 8009754:	20004b7c 	.word	0x20004b7c
 8009758:	20000134 	.word	0x20000134
 800975c:	20005070 	.word	0x20005070
 8009760:	2000505c 	.word	0x2000505c
 8009764:	20005054 	.word	0x20005054

08009768 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009768:	b480      	push	{r7}
 800976a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800976c:	4b04      	ldr	r3, [pc, #16]	@ (8009780 <vTaskSuspendAll+0x18>)
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	3301      	adds	r3, #1
 8009772:	4a03      	ldr	r2, [pc, #12]	@ (8009780 <vTaskSuspendAll+0x18>)
 8009774:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8009776:	bf00      	nop
 8009778:	46bd      	mov	sp, r7
 800977a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800977e:	4770      	bx	lr
 8009780:	20005078 	.word	0x20005078

08009784 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009784:	b580      	push	{r7, lr}
 8009786:	b084      	sub	sp, #16
 8009788:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800978a:	2300      	movs	r3, #0
 800978c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800978e:	2300      	movs	r3, #0
 8009790:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009792:	4b42      	ldr	r3, [pc, #264]	@ (800989c <xTaskResumeAll+0x118>)
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	2b00      	cmp	r3, #0
 8009798:	d10b      	bne.n	80097b2 <xTaskResumeAll+0x2e>
	__asm volatile
 800979a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800979e:	f383 8811 	msr	BASEPRI, r3
 80097a2:	f3bf 8f6f 	isb	sy
 80097a6:	f3bf 8f4f 	dsb	sy
 80097aa:	603b      	str	r3, [r7, #0]
}
 80097ac:	bf00      	nop
 80097ae:	bf00      	nop
 80097b0:	e7fd      	b.n	80097ae <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80097b2:	f7fe ff59 	bl	8008668 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80097b6:	4b39      	ldr	r3, [pc, #228]	@ (800989c <xTaskResumeAll+0x118>)
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	3b01      	subs	r3, #1
 80097bc:	4a37      	ldr	r2, [pc, #220]	@ (800989c <xTaskResumeAll+0x118>)
 80097be:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80097c0:	4b36      	ldr	r3, [pc, #216]	@ (800989c <xTaskResumeAll+0x118>)
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	d162      	bne.n	800988e <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80097c8:	4b35      	ldr	r3, [pc, #212]	@ (80098a0 <xTaskResumeAll+0x11c>)
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d05e      	beq.n	800988e <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80097d0:	e02f      	b.n	8009832 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80097d2:	4b34      	ldr	r3, [pc, #208]	@ (80098a4 <xTaskResumeAll+0x120>)
 80097d4:	68db      	ldr	r3, [r3, #12]
 80097d6:	68db      	ldr	r3, [r3, #12]
 80097d8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	3318      	adds	r3, #24
 80097de:	4618      	mov	r0, r3
 80097e0:	f7fe fdea 	bl	80083b8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	3304      	adds	r3, #4
 80097e8:	4618      	mov	r0, r3
 80097ea:	f7fe fde5 	bl	80083b8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80097f2:	4b2d      	ldr	r3, [pc, #180]	@ (80098a8 <xTaskResumeAll+0x124>)
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	429a      	cmp	r2, r3
 80097f8:	d903      	bls.n	8009802 <xTaskResumeAll+0x7e>
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80097fe:	4a2a      	ldr	r2, [pc, #168]	@ (80098a8 <xTaskResumeAll+0x124>)
 8009800:	6013      	str	r3, [r2, #0]
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009806:	4613      	mov	r3, r2
 8009808:	009b      	lsls	r3, r3, #2
 800980a:	4413      	add	r3, r2
 800980c:	009b      	lsls	r3, r3, #2
 800980e:	4a27      	ldr	r2, [pc, #156]	@ (80098ac <xTaskResumeAll+0x128>)
 8009810:	441a      	add	r2, r3
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	3304      	adds	r3, #4
 8009816:	4619      	mov	r1, r3
 8009818:	4610      	mov	r0, r2
 800981a:	f7fe fd70 	bl	80082fe <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800981e:	68fb      	ldr	r3, [r7, #12]
 8009820:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009822:	4b23      	ldr	r3, [pc, #140]	@ (80098b0 <xTaskResumeAll+0x12c>)
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009828:	429a      	cmp	r2, r3
 800982a:	d302      	bcc.n	8009832 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800982c:	4b21      	ldr	r3, [pc, #132]	@ (80098b4 <xTaskResumeAll+0x130>)
 800982e:	2201      	movs	r2, #1
 8009830:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009832:	4b1c      	ldr	r3, [pc, #112]	@ (80098a4 <xTaskResumeAll+0x120>)
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	2b00      	cmp	r3, #0
 8009838:	d1cb      	bne.n	80097d2 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	2b00      	cmp	r3, #0
 800983e:	d001      	beq.n	8009844 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009840:	f000 fb66 	bl	8009f10 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8009844:	4b1c      	ldr	r3, [pc, #112]	@ (80098b8 <xTaskResumeAll+0x134>)
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	2b00      	cmp	r3, #0
 800984e:	d010      	beq.n	8009872 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009850:	f000 f846 	bl	80098e0 <xTaskIncrementTick>
 8009854:	4603      	mov	r3, r0
 8009856:	2b00      	cmp	r3, #0
 8009858:	d002      	beq.n	8009860 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800985a:	4b16      	ldr	r3, [pc, #88]	@ (80098b4 <xTaskResumeAll+0x130>)
 800985c:	2201      	movs	r2, #1
 800985e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	3b01      	subs	r3, #1
 8009864:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	2b00      	cmp	r3, #0
 800986a:	d1f1      	bne.n	8009850 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800986c:	4b12      	ldr	r3, [pc, #72]	@ (80098b8 <xTaskResumeAll+0x134>)
 800986e:	2200      	movs	r2, #0
 8009870:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009872:	4b10      	ldr	r3, [pc, #64]	@ (80098b4 <xTaskResumeAll+0x130>)
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	2b00      	cmp	r3, #0
 8009878:	d009      	beq.n	800988e <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800987a:	2301      	movs	r3, #1
 800987c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800987e:	4b0f      	ldr	r3, [pc, #60]	@ (80098bc <xTaskResumeAll+0x138>)
 8009880:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009884:	601a      	str	r2, [r3, #0]
 8009886:	f3bf 8f4f 	dsb	sy
 800988a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800988e:	f7fe ff1d 	bl	80086cc <vPortExitCritical>

	return xAlreadyYielded;
 8009892:	68bb      	ldr	r3, [r7, #8]
}
 8009894:	4618      	mov	r0, r3
 8009896:	3710      	adds	r7, #16
 8009898:	46bd      	mov	sp, r7
 800989a:	bd80      	pop	{r7, pc}
 800989c:	20005078 	.word	0x20005078
 80098a0:	20005050 	.word	0x20005050
 80098a4:	20005010 	.word	0x20005010
 80098a8:	20005058 	.word	0x20005058
 80098ac:	20004b80 	.word	0x20004b80
 80098b0:	20004b7c 	.word	0x20004b7c
 80098b4:	20005064 	.word	0x20005064
 80098b8:	20005060 	.word	0x20005060
 80098bc:	e000ed04 	.word	0xe000ed04

080098c0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80098c0:	b480      	push	{r7}
 80098c2:	b083      	sub	sp, #12
 80098c4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80098c6:	4b05      	ldr	r3, [pc, #20]	@ (80098dc <xTaskGetTickCount+0x1c>)
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80098cc:	687b      	ldr	r3, [r7, #4]
}
 80098ce:	4618      	mov	r0, r3
 80098d0:	370c      	adds	r7, #12
 80098d2:	46bd      	mov	sp, r7
 80098d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098d8:	4770      	bx	lr
 80098da:	bf00      	nop
 80098dc:	20005054 	.word	0x20005054

080098e0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80098e0:	b580      	push	{r7, lr}
 80098e2:	b086      	sub	sp, #24
 80098e4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80098e6:	2300      	movs	r3, #0
 80098e8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80098ea:	4b4f      	ldr	r3, [pc, #316]	@ (8009a28 <xTaskIncrementTick+0x148>)
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	f040 8090 	bne.w	8009a14 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80098f4:	4b4d      	ldr	r3, [pc, #308]	@ (8009a2c <xTaskIncrementTick+0x14c>)
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	3301      	adds	r3, #1
 80098fa:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80098fc:	4a4b      	ldr	r2, [pc, #300]	@ (8009a2c <xTaskIncrementTick+0x14c>)
 80098fe:	693b      	ldr	r3, [r7, #16]
 8009900:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009902:	693b      	ldr	r3, [r7, #16]
 8009904:	2b00      	cmp	r3, #0
 8009906:	d121      	bne.n	800994c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8009908:	4b49      	ldr	r3, [pc, #292]	@ (8009a30 <xTaskIncrementTick+0x150>)
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	2b00      	cmp	r3, #0
 8009910:	d00b      	beq.n	800992a <xTaskIncrementTick+0x4a>
	__asm volatile
 8009912:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009916:	f383 8811 	msr	BASEPRI, r3
 800991a:	f3bf 8f6f 	isb	sy
 800991e:	f3bf 8f4f 	dsb	sy
 8009922:	603b      	str	r3, [r7, #0]
}
 8009924:	bf00      	nop
 8009926:	bf00      	nop
 8009928:	e7fd      	b.n	8009926 <xTaskIncrementTick+0x46>
 800992a:	4b41      	ldr	r3, [pc, #260]	@ (8009a30 <xTaskIncrementTick+0x150>)
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	60fb      	str	r3, [r7, #12]
 8009930:	4b40      	ldr	r3, [pc, #256]	@ (8009a34 <xTaskIncrementTick+0x154>)
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	4a3e      	ldr	r2, [pc, #248]	@ (8009a30 <xTaskIncrementTick+0x150>)
 8009936:	6013      	str	r3, [r2, #0]
 8009938:	4a3e      	ldr	r2, [pc, #248]	@ (8009a34 <xTaskIncrementTick+0x154>)
 800993a:	68fb      	ldr	r3, [r7, #12]
 800993c:	6013      	str	r3, [r2, #0]
 800993e:	4b3e      	ldr	r3, [pc, #248]	@ (8009a38 <xTaskIncrementTick+0x158>)
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	3301      	adds	r3, #1
 8009944:	4a3c      	ldr	r2, [pc, #240]	@ (8009a38 <xTaskIncrementTick+0x158>)
 8009946:	6013      	str	r3, [r2, #0]
 8009948:	f000 fae2 	bl	8009f10 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800994c:	4b3b      	ldr	r3, [pc, #236]	@ (8009a3c <xTaskIncrementTick+0x15c>)
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	693a      	ldr	r2, [r7, #16]
 8009952:	429a      	cmp	r2, r3
 8009954:	d349      	bcc.n	80099ea <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009956:	4b36      	ldr	r3, [pc, #216]	@ (8009a30 <xTaskIncrementTick+0x150>)
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	2b00      	cmp	r3, #0
 800995e:	d104      	bne.n	800996a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009960:	4b36      	ldr	r3, [pc, #216]	@ (8009a3c <xTaskIncrementTick+0x15c>)
 8009962:	f04f 32ff 	mov.w	r2, #4294967295
 8009966:	601a      	str	r2, [r3, #0]
					break;
 8009968:	e03f      	b.n	80099ea <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800996a:	4b31      	ldr	r3, [pc, #196]	@ (8009a30 <xTaskIncrementTick+0x150>)
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	68db      	ldr	r3, [r3, #12]
 8009970:	68db      	ldr	r3, [r3, #12]
 8009972:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009974:	68bb      	ldr	r3, [r7, #8]
 8009976:	685b      	ldr	r3, [r3, #4]
 8009978:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800997a:	693a      	ldr	r2, [r7, #16]
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	429a      	cmp	r2, r3
 8009980:	d203      	bcs.n	800998a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009982:	4a2e      	ldr	r2, [pc, #184]	@ (8009a3c <xTaskIncrementTick+0x15c>)
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009988:	e02f      	b.n	80099ea <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800998a:	68bb      	ldr	r3, [r7, #8]
 800998c:	3304      	adds	r3, #4
 800998e:	4618      	mov	r0, r3
 8009990:	f7fe fd12 	bl	80083b8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009994:	68bb      	ldr	r3, [r7, #8]
 8009996:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009998:	2b00      	cmp	r3, #0
 800999a:	d004      	beq.n	80099a6 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800999c:	68bb      	ldr	r3, [r7, #8]
 800999e:	3318      	adds	r3, #24
 80099a0:	4618      	mov	r0, r3
 80099a2:	f7fe fd09 	bl	80083b8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80099a6:	68bb      	ldr	r3, [r7, #8]
 80099a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80099aa:	4b25      	ldr	r3, [pc, #148]	@ (8009a40 <xTaskIncrementTick+0x160>)
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	429a      	cmp	r2, r3
 80099b0:	d903      	bls.n	80099ba <xTaskIncrementTick+0xda>
 80099b2:	68bb      	ldr	r3, [r7, #8]
 80099b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80099b6:	4a22      	ldr	r2, [pc, #136]	@ (8009a40 <xTaskIncrementTick+0x160>)
 80099b8:	6013      	str	r3, [r2, #0]
 80099ba:	68bb      	ldr	r3, [r7, #8]
 80099bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80099be:	4613      	mov	r3, r2
 80099c0:	009b      	lsls	r3, r3, #2
 80099c2:	4413      	add	r3, r2
 80099c4:	009b      	lsls	r3, r3, #2
 80099c6:	4a1f      	ldr	r2, [pc, #124]	@ (8009a44 <xTaskIncrementTick+0x164>)
 80099c8:	441a      	add	r2, r3
 80099ca:	68bb      	ldr	r3, [r7, #8]
 80099cc:	3304      	adds	r3, #4
 80099ce:	4619      	mov	r1, r3
 80099d0:	4610      	mov	r0, r2
 80099d2:	f7fe fc94 	bl	80082fe <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80099d6:	68bb      	ldr	r3, [r7, #8]
 80099d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80099da:	4b1b      	ldr	r3, [pc, #108]	@ (8009a48 <xTaskIncrementTick+0x168>)
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80099e0:	429a      	cmp	r2, r3
 80099e2:	d3b8      	bcc.n	8009956 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80099e4:	2301      	movs	r3, #1
 80099e6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80099e8:	e7b5      	b.n	8009956 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80099ea:	4b17      	ldr	r3, [pc, #92]	@ (8009a48 <xTaskIncrementTick+0x168>)
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80099f0:	4914      	ldr	r1, [pc, #80]	@ (8009a44 <xTaskIncrementTick+0x164>)
 80099f2:	4613      	mov	r3, r2
 80099f4:	009b      	lsls	r3, r3, #2
 80099f6:	4413      	add	r3, r2
 80099f8:	009b      	lsls	r3, r3, #2
 80099fa:	440b      	add	r3, r1
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	2b01      	cmp	r3, #1
 8009a00:	d901      	bls.n	8009a06 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8009a02:	2301      	movs	r3, #1
 8009a04:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8009a06:	4b11      	ldr	r3, [pc, #68]	@ (8009a4c <xTaskIncrementTick+0x16c>)
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d007      	beq.n	8009a1e <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8009a0e:	2301      	movs	r3, #1
 8009a10:	617b      	str	r3, [r7, #20]
 8009a12:	e004      	b.n	8009a1e <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8009a14:	4b0e      	ldr	r3, [pc, #56]	@ (8009a50 <xTaskIncrementTick+0x170>)
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	3301      	adds	r3, #1
 8009a1a:	4a0d      	ldr	r2, [pc, #52]	@ (8009a50 <xTaskIncrementTick+0x170>)
 8009a1c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8009a1e:	697b      	ldr	r3, [r7, #20]
}
 8009a20:	4618      	mov	r0, r3
 8009a22:	3718      	adds	r7, #24
 8009a24:	46bd      	mov	sp, r7
 8009a26:	bd80      	pop	{r7, pc}
 8009a28:	20005078 	.word	0x20005078
 8009a2c:	20005054 	.word	0x20005054
 8009a30:	20005008 	.word	0x20005008
 8009a34:	2000500c 	.word	0x2000500c
 8009a38:	20005068 	.word	0x20005068
 8009a3c:	20005070 	.word	0x20005070
 8009a40:	20005058 	.word	0x20005058
 8009a44:	20004b80 	.word	0x20004b80
 8009a48:	20004b7c 	.word	0x20004b7c
 8009a4c:	20005064 	.word	0x20005064
 8009a50:	20005060 	.word	0x20005060

08009a54 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009a54:	b480      	push	{r7}
 8009a56:	b085      	sub	sp, #20
 8009a58:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009a5a:	4b2b      	ldr	r3, [pc, #172]	@ (8009b08 <vTaskSwitchContext+0xb4>)
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	d003      	beq.n	8009a6a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009a62:	4b2a      	ldr	r3, [pc, #168]	@ (8009b0c <vTaskSwitchContext+0xb8>)
 8009a64:	2201      	movs	r2, #1
 8009a66:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009a68:	e047      	b.n	8009afa <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8009a6a:	4b28      	ldr	r3, [pc, #160]	@ (8009b0c <vTaskSwitchContext+0xb8>)
 8009a6c:	2200      	movs	r2, #0
 8009a6e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009a70:	4b27      	ldr	r3, [pc, #156]	@ (8009b10 <vTaskSwitchContext+0xbc>)
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	60fb      	str	r3, [r7, #12]
 8009a76:	e011      	b.n	8009a9c <vTaskSwitchContext+0x48>
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	d10b      	bne.n	8009a96 <vTaskSwitchContext+0x42>
	__asm volatile
 8009a7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a82:	f383 8811 	msr	BASEPRI, r3
 8009a86:	f3bf 8f6f 	isb	sy
 8009a8a:	f3bf 8f4f 	dsb	sy
 8009a8e:	607b      	str	r3, [r7, #4]
}
 8009a90:	bf00      	nop
 8009a92:	bf00      	nop
 8009a94:	e7fd      	b.n	8009a92 <vTaskSwitchContext+0x3e>
 8009a96:	68fb      	ldr	r3, [r7, #12]
 8009a98:	3b01      	subs	r3, #1
 8009a9a:	60fb      	str	r3, [r7, #12]
 8009a9c:	491d      	ldr	r1, [pc, #116]	@ (8009b14 <vTaskSwitchContext+0xc0>)
 8009a9e:	68fa      	ldr	r2, [r7, #12]
 8009aa0:	4613      	mov	r3, r2
 8009aa2:	009b      	lsls	r3, r3, #2
 8009aa4:	4413      	add	r3, r2
 8009aa6:	009b      	lsls	r3, r3, #2
 8009aa8:	440b      	add	r3, r1
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	d0e3      	beq.n	8009a78 <vTaskSwitchContext+0x24>
 8009ab0:	68fa      	ldr	r2, [r7, #12]
 8009ab2:	4613      	mov	r3, r2
 8009ab4:	009b      	lsls	r3, r3, #2
 8009ab6:	4413      	add	r3, r2
 8009ab8:	009b      	lsls	r3, r3, #2
 8009aba:	4a16      	ldr	r2, [pc, #88]	@ (8009b14 <vTaskSwitchContext+0xc0>)
 8009abc:	4413      	add	r3, r2
 8009abe:	60bb      	str	r3, [r7, #8]
 8009ac0:	68bb      	ldr	r3, [r7, #8]
 8009ac2:	685b      	ldr	r3, [r3, #4]
 8009ac4:	685a      	ldr	r2, [r3, #4]
 8009ac6:	68bb      	ldr	r3, [r7, #8]
 8009ac8:	605a      	str	r2, [r3, #4]
 8009aca:	68bb      	ldr	r3, [r7, #8]
 8009acc:	685a      	ldr	r2, [r3, #4]
 8009ace:	68bb      	ldr	r3, [r7, #8]
 8009ad0:	3308      	adds	r3, #8
 8009ad2:	429a      	cmp	r2, r3
 8009ad4:	d104      	bne.n	8009ae0 <vTaskSwitchContext+0x8c>
 8009ad6:	68bb      	ldr	r3, [r7, #8]
 8009ad8:	685b      	ldr	r3, [r3, #4]
 8009ada:	685a      	ldr	r2, [r3, #4]
 8009adc:	68bb      	ldr	r3, [r7, #8]
 8009ade:	605a      	str	r2, [r3, #4]
 8009ae0:	68bb      	ldr	r3, [r7, #8]
 8009ae2:	685b      	ldr	r3, [r3, #4]
 8009ae4:	68db      	ldr	r3, [r3, #12]
 8009ae6:	4a0c      	ldr	r2, [pc, #48]	@ (8009b18 <vTaskSwitchContext+0xc4>)
 8009ae8:	6013      	str	r3, [r2, #0]
 8009aea:	4a09      	ldr	r2, [pc, #36]	@ (8009b10 <vTaskSwitchContext+0xbc>)
 8009aec:	68fb      	ldr	r3, [r7, #12]
 8009aee:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009af0:	4b09      	ldr	r3, [pc, #36]	@ (8009b18 <vTaskSwitchContext+0xc4>)
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	3354      	adds	r3, #84	@ 0x54
 8009af6:	4a09      	ldr	r2, [pc, #36]	@ (8009b1c <vTaskSwitchContext+0xc8>)
 8009af8:	6013      	str	r3, [r2, #0]
}
 8009afa:	bf00      	nop
 8009afc:	3714      	adds	r7, #20
 8009afe:	46bd      	mov	sp, r7
 8009b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b04:	4770      	bx	lr
 8009b06:	bf00      	nop
 8009b08:	20005078 	.word	0x20005078
 8009b0c:	20005064 	.word	0x20005064
 8009b10:	20005058 	.word	0x20005058
 8009b14:	20004b80 	.word	0x20004b80
 8009b18:	20004b7c 	.word	0x20004b7c
 8009b1c:	20000134 	.word	0x20000134

08009b20 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009b20:	b580      	push	{r7, lr}
 8009b22:	b084      	sub	sp, #16
 8009b24:	af00      	add	r7, sp, #0
 8009b26:	6078      	str	r0, [r7, #4]
 8009b28:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d10b      	bne.n	8009b48 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8009b30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b34:	f383 8811 	msr	BASEPRI, r3
 8009b38:	f3bf 8f6f 	isb	sy
 8009b3c:	f3bf 8f4f 	dsb	sy
 8009b40:	60fb      	str	r3, [r7, #12]
}
 8009b42:	bf00      	nop
 8009b44:	bf00      	nop
 8009b46:	e7fd      	b.n	8009b44 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009b48:	4b07      	ldr	r3, [pc, #28]	@ (8009b68 <vTaskPlaceOnEventList+0x48>)
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	3318      	adds	r3, #24
 8009b4e:	4619      	mov	r1, r3
 8009b50:	6878      	ldr	r0, [r7, #4]
 8009b52:	f7fe fbf8 	bl	8008346 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009b56:	2101      	movs	r1, #1
 8009b58:	6838      	ldr	r0, [r7, #0]
 8009b5a:	f000 fa87 	bl	800a06c <prvAddCurrentTaskToDelayedList>
}
 8009b5e:	bf00      	nop
 8009b60:	3710      	adds	r7, #16
 8009b62:	46bd      	mov	sp, r7
 8009b64:	bd80      	pop	{r7, pc}
 8009b66:	bf00      	nop
 8009b68:	20004b7c 	.word	0x20004b7c

08009b6c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009b6c:	b580      	push	{r7, lr}
 8009b6e:	b086      	sub	sp, #24
 8009b70:	af00      	add	r7, sp, #0
 8009b72:	60f8      	str	r0, [r7, #12]
 8009b74:	60b9      	str	r1, [r7, #8]
 8009b76:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	d10b      	bne.n	8009b96 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8009b7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b82:	f383 8811 	msr	BASEPRI, r3
 8009b86:	f3bf 8f6f 	isb	sy
 8009b8a:	f3bf 8f4f 	dsb	sy
 8009b8e:	617b      	str	r3, [r7, #20]
}
 8009b90:	bf00      	nop
 8009b92:	bf00      	nop
 8009b94:	e7fd      	b.n	8009b92 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009b96:	4b0a      	ldr	r3, [pc, #40]	@ (8009bc0 <vTaskPlaceOnEventListRestricted+0x54>)
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	3318      	adds	r3, #24
 8009b9c:	4619      	mov	r1, r3
 8009b9e:	68f8      	ldr	r0, [r7, #12]
 8009ba0:	f7fe fbad 	bl	80082fe <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	d002      	beq.n	8009bb0 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8009baa:	f04f 33ff 	mov.w	r3, #4294967295
 8009bae:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8009bb0:	6879      	ldr	r1, [r7, #4]
 8009bb2:	68b8      	ldr	r0, [r7, #8]
 8009bb4:	f000 fa5a 	bl	800a06c <prvAddCurrentTaskToDelayedList>
	}
 8009bb8:	bf00      	nop
 8009bba:	3718      	adds	r7, #24
 8009bbc:	46bd      	mov	sp, r7
 8009bbe:	bd80      	pop	{r7, pc}
 8009bc0:	20004b7c 	.word	0x20004b7c

08009bc4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009bc4:	b580      	push	{r7, lr}
 8009bc6:	b086      	sub	sp, #24
 8009bc8:	af00      	add	r7, sp, #0
 8009bca:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	68db      	ldr	r3, [r3, #12]
 8009bd0:	68db      	ldr	r3, [r3, #12]
 8009bd2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009bd4:	693b      	ldr	r3, [r7, #16]
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	d10b      	bne.n	8009bf2 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8009bda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009bde:	f383 8811 	msr	BASEPRI, r3
 8009be2:	f3bf 8f6f 	isb	sy
 8009be6:	f3bf 8f4f 	dsb	sy
 8009bea:	60fb      	str	r3, [r7, #12]
}
 8009bec:	bf00      	nop
 8009bee:	bf00      	nop
 8009bf0:	e7fd      	b.n	8009bee <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009bf2:	693b      	ldr	r3, [r7, #16]
 8009bf4:	3318      	adds	r3, #24
 8009bf6:	4618      	mov	r0, r3
 8009bf8:	f7fe fbde 	bl	80083b8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009bfc:	4b1d      	ldr	r3, [pc, #116]	@ (8009c74 <xTaskRemoveFromEventList+0xb0>)
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	d11d      	bne.n	8009c40 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009c04:	693b      	ldr	r3, [r7, #16]
 8009c06:	3304      	adds	r3, #4
 8009c08:	4618      	mov	r0, r3
 8009c0a:	f7fe fbd5 	bl	80083b8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009c0e:	693b      	ldr	r3, [r7, #16]
 8009c10:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009c12:	4b19      	ldr	r3, [pc, #100]	@ (8009c78 <xTaskRemoveFromEventList+0xb4>)
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	429a      	cmp	r2, r3
 8009c18:	d903      	bls.n	8009c22 <xTaskRemoveFromEventList+0x5e>
 8009c1a:	693b      	ldr	r3, [r7, #16]
 8009c1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c1e:	4a16      	ldr	r2, [pc, #88]	@ (8009c78 <xTaskRemoveFromEventList+0xb4>)
 8009c20:	6013      	str	r3, [r2, #0]
 8009c22:	693b      	ldr	r3, [r7, #16]
 8009c24:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009c26:	4613      	mov	r3, r2
 8009c28:	009b      	lsls	r3, r3, #2
 8009c2a:	4413      	add	r3, r2
 8009c2c:	009b      	lsls	r3, r3, #2
 8009c2e:	4a13      	ldr	r2, [pc, #76]	@ (8009c7c <xTaskRemoveFromEventList+0xb8>)
 8009c30:	441a      	add	r2, r3
 8009c32:	693b      	ldr	r3, [r7, #16]
 8009c34:	3304      	adds	r3, #4
 8009c36:	4619      	mov	r1, r3
 8009c38:	4610      	mov	r0, r2
 8009c3a:	f7fe fb60 	bl	80082fe <vListInsertEnd>
 8009c3e:	e005      	b.n	8009c4c <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009c40:	693b      	ldr	r3, [r7, #16]
 8009c42:	3318      	adds	r3, #24
 8009c44:	4619      	mov	r1, r3
 8009c46:	480e      	ldr	r0, [pc, #56]	@ (8009c80 <xTaskRemoveFromEventList+0xbc>)
 8009c48:	f7fe fb59 	bl	80082fe <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009c4c:	693b      	ldr	r3, [r7, #16]
 8009c4e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009c50:	4b0c      	ldr	r3, [pc, #48]	@ (8009c84 <xTaskRemoveFromEventList+0xc0>)
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c56:	429a      	cmp	r2, r3
 8009c58:	d905      	bls.n	8009c66 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009c5a:	2301      	movs	r3, #1
 8009c5c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009c5e:	4b0a      	ldr	r3, [pc, #40]	@ (8009c88 <xTaskRemoveFromEventList+0xc4>)
 8009c60:	2201      	movs	r2, #1
 8009c62:	601a      	str	r2, [r3, #0]
 8009c64:	e001      	b.n	8009c6a <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8009c66:	2300      	movs	r3, #0
 8009c68:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8009c6a:	697b      	ldr	r3, [r7, #20]
}
 8009c6c:	4618      	mov	r0, r3
 8009c6e:	3718      	adds	r7, #24
 8009c70:	46bd      	mov	sp, r7
 8009c72:	bd80      	pop	{r7, pc}
 8009c74:	20005078 	.word	0x20005078
 8009c78:	20005058 	.word	0x20005058
 8009c7c:	20004b80 	.word	0x20004b80
 8009c80:	20005010 	.word	0x20005010
 8009c84:	20004b7c 	.word	0x20004b7c
 8009c88:	20005064 	.word	0x20005064

08009c8c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009c8c:	b480      	push	{r7}
 8009c8e:	b083      	sub	sp, #12
 8009c90:	af00      	add	r7, sp, #0
 8009c92:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009c94:	4b06      	ldr	r3, [pc, #24]	@ (8009cb0 <vTaskInternalSetTimeOutState+0x24>)
 8009c96:	681a      	ldr	r2, [r3, #0]
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009c9c:	4b05      	ldr	r3, [pc, #20]	@ (8009cb4 <vTaskInternalSetTimeOutState+0x28>)
 8009c9e:	681a      	ldr	r2, [r3, #0]
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	605a      	str	r2, [r3, #4]
}
 8009ca4:	bf00      	nop
 8009ca6:	370c      	adds	r7, #12
 8009ca8:	46bd      	mov	sp, r7
 8009caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cae:	4770      	bx	lr
 8009cb0:	20005068 	.word	0x20005068
 8009cb4:	20005054 	.word	0x20005054

08009cb8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009cb8:	b580      	push	{r7, lr}
 8009cba:	b088      	sub	sp, #32
 8009cbc:	af00      	add	r7, sp, #0
 8009cbe:	6078      	str	r0, [r7, #4]
 8009cc0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	2b00      	cmp	r3, #0
 8009cc6:	d10b      	bne.n	8009ce0 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8009cc8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ccc:	f383 8811 	msr	BASEPRI, r3
 8009cd0:	f3bf 8f6f 	isb	sy
 8009cd4:	f3bf 8f4f 	dsb	sy
 8009cd8:	613b      	str	r3, [r7, #16]
}
 8009cda:	bf00      	nop
 8009cdc:	bf00      	nop
 8009cde:	e7fd      	b.n	8009cdc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8009ce0:	683b      	ldr	r3, [r7, #0]
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	d10b      	bne.n	8009cfe <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8009ce6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009cea:	f383 8811 	msr	BASEPRI, r3
 8009cee:	f3bf 8f6f 	isb	sy
 8009cf2:	f3bf 8f4f 	dsb	sy
 8009cf6:	60fb      	str	r3, [r7, #12]
}
 8009cf8:	bf00      	nop
 8009cfa:	bf00      	nop
 8009cfc:	e7fd      	b.n	8009cfa <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8009cfe:	f7fe fcb3 	bl	8008668 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8009d02:	4b1d      	ldr	r3, [pc, #116]	@ (8009d78 <xTaskCheckForTimeOut+0xc0>)
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	685b      	ldr	r3, [r3, #4]
 8009d0c:	69ba      	ldr	r2, [r7, #24]
 8009d0e:	1ad3      	subs	r3, r2, r3
 8009d10:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009d12:	683b      	ldr	r3, [r7, #0]
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d1a:	d102      	bne.n	8009d22 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009d1c:	2300      	movs	r3, #0
 8009d1e:	61fb      	str	r3, [r7, #28]
 8009d20:	e023      	b.n	8009d6a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	681a      	ldr	r2, [r3, #0]
 8009d26:	4b15      	ldr	r3, [pc, #84]	@ (8009d7c <xTaskCheckForTimeOut+0xc4>)
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	429a      	cmp	r2, r3
 8009d2c:	d007      	beq.n	8009d3e <xTaskCheckForTimeOut+0x86>
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	685b      	ldr	r3, [r3, #4]
 8009d32:	69ba      	ldr	r2, [r7, #24]
 8009d34:	429a      	cmp	r2, r3
 8009d36:	d302      	bcc.n	8009d3e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009d38:	2301      	movs	r3, #1
 8009d3a:	61fb      	str	r3, [r7, #28]
 8009d3c:	e015      	b.n	8009d6a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009d3e:	683b      	ldr	r3, [r7, #0]
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	697a      	ldr	r2, [r7, #20]
 8009d44:	429a      	cmp	r2, r3
 8009d46:	d20b      	bcs.n	8009d60 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009d48:	683b      	ldr	r3, [r7, #0]
 8009d4a:	681a      	ldr	r2, [r3, #0]
 8009d4c:	697b      	ldr	r3, [r7, #20]
 8009d4e:	1ad2      	subs	r2, r2, r3
 8009d50:	683b      	ldr	r3, [r7, #0]
 8009d52:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009d54:	6878      	ldr	r0, [r7, #4]
 8009d56:	f7ff ff99 	bl	8009c8c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009d5a:	2300      	movs	r3, #0
 8009d5c:	61fb      	str	r3, [r7, #28]
 8009d5e:	e004      	b.n	8009d6a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8009d60:	683b      	ldr	r3, [r7, #0]
 8009d62:	2200      	movs	r2, #0
 8009d64:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009d66:	2301      	movs	r3, #1
 8009d68:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8009d6a:	f7fe fcaf 	bl	80086cc <vPortExitCritical>

	return xReturn;
 8009d6e:	69fb      	ldr	r3, [r7, #28]
}
 8009d70:	4618      	mov	r0, r3
 8009d72:	3720      	adds	r7, #32
 8009d74:	46bd      	mov	sp, r7
 8009d76:	bd80      	pop	{r7, pc}
 8009d78:	20005054 	.word	0x20005054
 8009d7c:	20005068 	.word	0x20005068

08009d80 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009d80:	b480      	push	{r7}
 8009d82:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009d84:	4b03      	ldr	r3, [pc, #12]	@ (8009d94 <vTaskMissedYield+0x14>)
 8009d86:	2201      	movs	r2, #1
 8009d88:	601a      	str	r2, [r3, #0]
}
 8009d8a:	bf00      	nop
 8009d8c:	46bd      	mov	sp, r7
 8009d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d92:	4770      	bx	lr
 8009d94:	20005064 	.word	0x20005064

08009d98 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009d98:	b580      	push	{r7, lr}
 8009d9a:	b082      	sub	sp, #8
 8009d9c:	af00      	add	r7, sp, #0
 8009d9e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009da0:	f000 f852 	bl	8009e48 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009da4:	4b06      	ldr	r3, [pc, #24]	@ (8009dc0 <prvIdleTask+0x28>)
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	2b01      	cmp	r3, #1
 8009daa:	d9f9      	bls.n	8009da0 <prvIdleTask+0x8>
			{
				taskYIELD();
 8009dac:	4b05      	ldr	r3, [pc, #20]	@ (8009dc4 <prvIdleTask+0x2c>)
 8009dae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009db2:	601a      	str	r2, [r3, #0]
 8009db4:	f3bf 8f4f 	dsb	sy
 8009db8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009dbc:	e7f0      	b.n	8009da0 <prvIdleTask+0x8>
 8009dbe:	bf00      	nop
 8009dc0:	20004b80 	.word	0x20004b80
 8009dc4:	e000ed04 	.word	0xe000ed04

08009dc8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009dc8:	b580      	push	{r7, lr}
 8009dca:	b082      	sub	sp, #8
 8009dcc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009dce:	2300      	movs	r3, #0
 8009dd0:	607b      	str	r3, [r7, #4]
 8009dd2:	e00c      	b.n	8009dee <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009dd4:	687a      	ldr	r2, [r7, #4]
 8009dd6:	4613      	mov	r3, r2
 8009dd8:	009b      	lsls	r3, r3, #2
 8009dda:	4413      	add	r3, r2
 8009ddc:	009b      	lsls	r3, r3, #2
 8009dde:	4a12      	ldr	r2, [pc, #72]	@ (8009e28 <prvInitialiseTaskLists+0x60>)
 8009de0:	4413      	add	r3, r2
 8009de2:	4618      	mov	r0, r3
 8009de4:	f7fe fa5e 	bl	80082a4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	3301      	adds	r3, #1
 8009dec:	607b      	str	r3, [r7, #4]
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	2b37      	cmp	r3, #55	@ 0x37
 8009df2:	d9ef      	bls.n	8009dd4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009df4:	480d      	ldr	r0, [pc, #52]	@ (8009e2c <prvInitialiseTaskLists+0x64>)
 8009df6:	f7fe fa55 	bl	80082a4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009dfa:	480d      	ldr	r0, [pc, #52]	@ (8009e30 <prvInitialiseTaskLists+0x68>)
 8009dfc:	f7fe fa52 	bl	80082a4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009e00:	480c      	ldr	r0, [pc, #48]	@ (8009e34 <prvInitialiseTaskLists+0x6c>)
 8009e02:	f7fe fa4f 	bl	80082a4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009e06:	480c      	ldr	r0, [pc, #48]	@ (8009e38 <prvInitialiseTaskLists+0x70>)
 8009e08:	f7fe fa4c 	bl	80082a4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009e0c:	480b      	ldr	r0, [pc, #44]	@ (8009e3c <prvInitialiseTaskLists+0x74>)
 8009e0e:	f7fe fa49 	bl	80082a4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009e12:	4b0b      	ldr	r3, [pc, #44]	@ (8009e40 <prvInitialiseTaskLists+0x78>)
 8009e14:	4a05      	ldr	r2, [pc, #20]	@ (8009e2c <prvInitialiseTaskLists+0x64>)
 8009e16:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009e18:	4b0a      	ldr	r3, [pc, #40]	@ (8009e44 <prvInitialiseTaskLists+0x7c>)
 8009e1a:	4a05      	ldr	r2, [pc, #20]	@ (8009e30 <prvInitialiseTaskLists+0x68>)
 8009e1c:	601a      	str	r2, [r3, #0]
}
 8009e1e:	bf00      	nop
 8009e20:	3708      	adds	r7, #8
 8009e22:	46bd      	mov	sp, r7
 8009e24:	bd80      	pop	{r7, pc}
 8009e26:	bf00      	nop
 8009e28:	20004b80 	.word	0x20004b80
 8009e2c:	20004fe0 	.word	0x20004fe0
 8009e30:	20004ff4 	.word	0x20004ff4
 8009e34:	20005010 	.word	0x20005010
 8009e38:	20005024 	.word	0x20005024
 8009e3c:	2000503c 	.word	0x2000503c
 8009e40:	20005008 	.word	0x20005008
 8009e44:	2000500c 	.word	0x2000500c

08009e48 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009e48:	b580      	push	{r7, lr}
 8009e4a:	b082      	sub	sp, #8
 8009e4c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009e4e:	e019      	b.n	8009e84 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009e50:	f7fe fc0a 	bl	8008668 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009e54:	4b10      	ldr	r3, [pc, #64]	@ (8009e98 <prvCheckTasksWaitingTermination+0x50>)
 8009e56:	68db      	ldr	r3, [r3, #12]
 8009e58:	68db      	ldr	r3, [r3, #12]
 8009e5a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	3304      	adds	r3, #4
 8009e60:	4618      	mov	r0, r3
 8009e62:	f7fe faa9 	bl	80083b8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009e66:	4b0d      	ldr	r3, [pc, #52]	@ (8009e9c <prvCheckTasksWaitingTermination+0x54>)
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	3b01      	subs	r3, #1
 8009e6c:	4a0b      	ldr	r2, [pc, #44]	@ (8009e9c <prvCheckTasksWaitingTermination+0x54>)
 8009e6e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009e70:	4b0b      	ldr	r3, [pc, #44]	@ (8009ea0 <prvCheckTasksWaitingTermination+0x58>)
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	3b01      	subs	r3, #1
 8009e76:	4a0a      	ldr	r2, [pc, #40]	@ (8009ea0 <prvCheckTasksWaitingTermination+0x58>)
 8009e78:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009e7a:	f7fe fc27 	bl	80086cc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009e7e:	6878      	ldr	r0, [r7, #4]
 8009e80:	f000 f810 	bl	8009ea4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009e84:	4b06      	ldr	r3, [pc, #24]	@ (8009ea0 <prvCheckTasksWaitingTermination+0x58>)
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	d1e1      	bne.n	8009e50 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009e8c:	bf00      	nop
 8009e8e:	bf00      	nop
 8009e90:	3708      	adds	r7, #8
 8009e92:	46bd      	mov	sp, r7
 8009e94:	bd80      	pop	{r7, pc}
 8009e96:	bf00      	nop
 8009e98:	20005024 	.word	0x20005024
 8009e9c:	20005050 	.word	0x20005050
 8009ea0:	20005038 	.word	0x20005038

08009ea4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009ea4:	b580      	push	{r7, lr}
 8009ea6:	b084      	sub	sp, #16
 8009ea8:	af00      	add	r7, sp, #0
 8009eaa:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	3354      	adds	r3, #84	@ 0x54
 8009eb0:	4618      	mov	r0, r3
 8009eb2:	f002 fe83 	bl	800cbbc <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	d108      	bne.n	8009ed2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009ec4:	4618      	mov	r0, r3
 8009ec6:	f7fe f8cd 	bl	8008064 <vPortFree>
				vPortFree( pxTCB );
 8009eca:	6878      	ldr	r0, [r7, #4]
 8009ecc:	f7fe f8ca 	bl	8008064 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009ed0:	e019      	b.n	8009f06 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8009ed8:	2b01      	cmp	r3, #1
 8009eda:	d103      	bne.n	8009ee4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8009edc:	6878      	ldr	r0, [r7, #4]
 8009ede:	f7fe f8c1 	bl	8008064 <vPortFree>
	}
 8009ee2:	e010      	b.n	8009f06 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8009eea:	2b02      	cmp	r3, #2
 8009eec:	d00b      	beq.n	8009f06 <prvDeleteTCB+0x62>
	__asm volatile
 8009eee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ef2:	f383 8811 	msr	BASEPRI, r3
 8009ef6:	f3bf 8f6f 	isb	sy
 8009efa:	f3bf 8f4f 	dsb	sy
 8009efe:	60fb      	str	r3, [r7, #12]
}
 8009f00:	bf00      	nop
 8009f02:	bf00      	nop
 8009f04:	e7fd      	b.n	8009f02 <prvDeleteTCB+0x5e>
	}
 8009f06:	bf00      	nop
 8009f08:	3710      	adds	r7, #16
 8009f0a:	46bd      	mov	sp, r7
 8009f0c:	bd80      	pop	{r7, pc}
	...

08009f10 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009f10:	b480      	push	{r7}
 8009f12:	b083      	sub	sp, #12
 8009f14:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009f16:	4b0c      	ldr	r3, [pc, #48]	@ (8009f48 <prvResetNextTaskUnblockTime+0x38>)
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	2b00      	cmp	r3, #0
 8009f1e:	d104      	bne.n	8009f2a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009f20:	4b0a      	ldr	r3, [pc, #40]	@ (8009f4c <prvResetNextTaskUnblockTime+0x3c>)
 8009f22:	f04f 32ff 	mov.w	r2, #4294967295
 8009f26:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009f28:	e008      	b.n	8009f3c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009f2a:	4b07      	ldr	r3, [pc, #28]	@ (8009f48 <prvResetNextTaskUnblockTime+0x38>)
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	68db      	ldr	r3, [r3, #12]
 8009f30:	68db      	ldr	r3, [r3, #12]
 8009f32:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	685b      	ldr	r3, [r3, #4]
 8009f38:	4a04      	ldr	r2, [pc, #16]	@ (8009f4c <prvResetNextTaskUnblockTime+0x3c>)
 8009f3a:	6013      	str	r3, [r2, #0]
}
 8009f3c:	bf00      	nop
 8009f3e:	370c      	adds	r7, #12
 8009f40:	46bd      	mov	sp, r7
 8009f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f46:	4770      	bx	lr
 8009f48:	20005008 	.word	0x20005008
 8009f4c:	20005070 	.word	0x20005070

08009f50 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009f50:	b480      	push	{r7}
 8009f52:	b083      	sub	sp, #12
 8009f54:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009f56:	4b0b      	ldr	r3, [pc, #44]	@ (8009f84 <xTaskGetSchedulerState+0x34>)
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	d102      	bne.n	8009f64 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009f5e:	2301      	movs	r3, #1
 8009f60:	607b      	str	r3, [r7, #4]
 8009f62:	e008      	b.n	8009f76 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009f64:	4b08      	ldr	r3, [pc, #32]	@ (8009f88 <xTaskGetSchedulerState+0x38>)
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	d102      	bne.n	8009f72 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009f6c:	2302      	movs	r3, #2
 8009f6e:	607b      	str	r3, [r7, #4]
 8009f70:	e001      	b.n	8009f76 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009f72:	2300      	movs	r3, #0
 8009f74:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009f76:	687b      	ldr	r3, [r7, #4]
	}
 8009f78:	4618      	mov	r0, r3
 8009f7a:	370c      	adds	r7, #12
 8009f7c:	46bd      	mov	sp, r7
 8009f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f82:	4770      	bx	lr
 8009f84:	2000505c 	.word	0x2000505c
 8009f88:	20005078 	.word	0x20005078

08009f8c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009f8c:	b580      	push	{r7, lr}
 8009f8e:	b086      	sub	sp, #24
 8009f90:	af00      	add	r7, sp, #0
 8009f92:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009f98:	2300      	movs	r3, #0
 8009f9a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	2b00      	cmp	r3, #0
 8009fa0:	d058      	beq.n	800a054 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009fa2:	4b2f      	ldr	r3, [pc, #188]	@ (800a060 <xTaskPriorityDisinherit+0xd4>)
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	693a      	ldr	r2, [r7, #16]
 8009fa8:	429a      	cmp	r2, r3
 8009faa:	d00b      	beq.n	8009fc4 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8009fac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009fb0:	f383 8811 	msr	BASEPRI, r3
 8009fb4:	f3bf 8f6f 	isb	sy
 8009fb8:	f3bf 8f4f 	dsb	sy
 8009fbc:	60fb      	str	r3, [r7, #12]
}
 8009fbe:	bf00      	nop
 8009fc0:	bf00      	nop
 8009fc2:	e7fd      	b.n	8009fc0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8009fc4:	693b      	ldr	r3, [r7, #16]
 8009fc6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	d10b      	bne.n	8009fe4 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8009fcc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009fd0:	f383 8811 	msr	BASEPRI, r3
 8009fd4:	f3bf 8f6f 	isb	sy
 8009fd8:	f3bf 8f4f 	dsb	sy
 8009fdc:	60bb      	str	r3, [r7, #8]
}
 8009fde:	bf00      	nop
 8009fe0:	bf00      	nop
 8009fe2:	e7fd      	b.n	8009fe0 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8009fe4:	693b      	ldr	r3, [r7, #16]
 8009fe6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009fe8:	1e5a      	subs	r2, r3, #1
 8009fea:	693b      	ldr	r3, [r7, #16]
 8009fec:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009fee:	693b      	ldr	r3, [r7, #16]
 8009ff0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009ff2:	693b      	ldr	r3, [r7, #16]
 8009ff4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009ff6:	429a      	cmp	r2, r3
 8009ff8:	d02c      	beq.n	800a054 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009ffa:	693b      	ldr	r3, [r7, #16]
 8009ffc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	d128      	bne.n	800a054 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a002:	693b      	ldr	r3, [r7, #16]
 800a004:	3304      	adds	r3, #4
 800a006:	4618      	mov	r0, r3
 800a008:	f7fe f9d6 	bl	80083b8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a00c:	693b      	ldr	r3, [r7, #16]
 800a00e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a010:	693b      	ldr	r3, [r7, #16]
 800a012:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a014:	693b      	ldr	r3, [r7, #16]
 800a016:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a018:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800a01c:	693b      	ldr	r3, [r7, #16]
 800a01e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800a020:	693b      	ldr	r3, [r7, #16]
 800a022:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a024:	4b0f      	ldr	r3, [pc, #60]	@ (800a064 <xTaskPriorityDisinherit+0xd8>)
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	429a      	cmp	r2, r3
 800a02a:	d903      	bls.n	800a034 <xTaskPriorityDisinherit+0xa8>
 800a02c:	693b      	ldr	r3, [r7, #16]
 800a02e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a030:	4a0c      	ldr	r2, [pc, #48]	@ (800a064 <xTaskPriorityDisinherit+0xd8>)
 800a032:	6013      	str	r3, [r2, #0]
 800a034:	693b      	ldr	r3, [r7, #16]
 800a036:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a038:	4613      	mov	r3, r2
 800a03a:	009b      	lsls	r3, r3, #2
 800a03c:	4413      	add	r3, r2
 800a03e:	009b      	lsls	r3, r3, #2
 800a040:	4a09      	ldr	r2, [pc, #36]	@ (800a068 <xTaskPriorityDisinherit+0xdc>)
 800a042:	441a      	add	r2, r3
 800a044:	693b      	ldr	r3, [r7, #16]
 800a046:	3304      	adds	r3, #4
 800a048:	4619      	mov	r1, r3
 800a04a:	4610      	mov	r0, r2
 800a04c:	f7fe f957 	bl	80082fe <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800a050:	2301      	movs	r3, #1
 800a052:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a054:	697b      	ldr	r3, [r7, #20]
	}
 800a056:	4618      	mov	r0, r3
 800a058:	3718      	adds	r7, #24
 800a05a:	46bd      	mov	sp, r7
 800a05c:	bd80      	pop	{r7, pc}
 800a05e:	bf00      	nop
 800a060:	20004b7c 	.word	0x20004b7c
 800a064:	20005058 	.word	0x20005058
 800a068:	20004b80 	.word	0x20004b80

0800a06c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a06c:	b580      	push	{r7, lr}
 800a06e:	b084      	sub	sp, #16
 800a070:	af00      	add	r7, sp, #0
 800a072:	6078      	str	r0, [r7, #4]
 800a074:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a076:	4b21      	ldr	r3, [pc, #132]	@ (800a0fc <prvAddCurrentTaskToDelayedList+0x90>)
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a07c:	4b20      	ldr	r3, [pc, #128]	@ (800a100 <prvAddCurrentTaskToDelayedList+0x94>)
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	3304      	adds	r3, #4
 800a082:	4618      	mov	r0, r3
 800a084:	f7fe f998 	bl	80083b8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a08e:	d10a      	bne.n	800a0a6 <prvAddCurrentTaskToDelayedList+0x3a>
 800a090:	683b      	ldr	r3, [r7, #0]
 800a092:	2b00      	cmp	r3, #0
 800a094:	d007      	beq.n	800a0a6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a096:	4b1a      	ldr	r3, [pc, #104]	@ (800a100 <prvAddCurrentTaskToDelayedList+0x94>)
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	3304      	adds	r3, #4
 800a09c:	4619      	mov	r1, r3
 800a09e:	4819      	ldr	r0, [pc, #100]	@ (800a104 <prvAddCurrentTaskToDelayedList+0x98>)
 800a0a0:	f7fe f92d 	bl	80082fe <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a0a4:	e026      	b.n	800a0f4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a0a6:	68fa      	ldr	r2, [r7, #12]
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	4413      	add	r3, r2
 800a0ac:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a0ae:	4b14      	ldr	r3, [pc, #80]	@ (800a100 <prvAddCurrentTaskToDelayedList+0x94>)
 800a0b0:	681b      	ldr	r3, [r3, #0]
 800a0b2:	68ba      	ldr	r2, [r7, #8]
 800a0b4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a0b6:	68ba      	ldr	r2, [r7, #8]
 800a0b8:	68fb      	ldr	r3, [r7, #12]
 800a0ba:	429a      	cmp	r2, r3
 800a0bc:	d209      	bcs.n	800a0d2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a0be:	4b12      	ldr	r3, [pc, #72]	@ (800a108 <prvAddCurrentTaskToDelayedList+0x9c>)
 800a0c0:	681a      	ldr	r2, [r3, #0]
 800a0c2:	4b0f      	ldr	r3, [pc, #60]	@ (800a100 <prvAddCurrentTaskToDelayedList+0x94>)
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	3304      	adds	r3, #4
 800a0c8:	4619      	mov	r1, r3
 800a0ca:	4610      	mov	r0, r2
 800a0cc:	f7fe f93b 	bl	8008346 <vListInsert>
}
 800a0d0:	e010      	b.n	800a0f4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a0d2:	4b0e      	ldr	r3, [pc, #56]	@ (800a10c <prvAddCurrentTaskToDelayedList+0xa0>)
 800a0d4:	681a      	ldr	r2, [r3, #0]
 800a0d6:	4b0a      	ldr	r3, [pc, #40]	@ (800a100 <prvAddCurrentTaskToDelayedList+0x94>)
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	3304      	adds	r3, #4
 800a0dc:	4619      	mov	r1, r3
 800a0de:	4610      	mov	r0, r2
 800a0e0:	f7fe f931 	bl	8008346 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a0e4:	4b0a      	ldr	r3, [pc, #40]	@ (800a110 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	68ba      	ldr	r2, [r7, #8]
 800a0ea:	429a      	cmp	r2, r3
 800a0ec:	d202      	bcs.n	800a0f4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800a0ee:	4a08      	ldr	r2, [pc, #32]	@ (800a110 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a0f0:	68bb      	ldr	r3, [r7, #8]
 800a0f2:	6013      	str	r3, [r2, #0]
}
 800a0f4:	bf00      	nop
 800a0f6:	3710      	adds	r7, #16
 800a0f8:	46bd      	mov	sp, r7
 800a0fa:	bd80      	pop	{r7, pc}
 800a0fc:	20005054 	.word	0x20005054
 800a100:	20004b7c 	.word	0x20004b7c
 800a104:	2000503c 	.word	0x2000503c
 800a108:	2000500c 	.word	0x2000500c
 800a10c:	20005008 	.word	0x20005008
 800a110:	20005070 	.word	0x20005070

0800a114 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800a114:	b580      	push	{r7, lr}
 800a116:	b08a      	sub	sp, #40	@ 0x28
 800a118:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800a11a:	2300      	movs	r3, #0
 800a11c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800a11e:	f000 fb13 	bl	800a748 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800a122:	4b1d      	ldr	r3, [pc, #116]	@ (800a198 <xTimerCreateTimerTask+0x84>)
 800a124:	681b      	ldr	r3, [r3, #0]
 800a126:	2b00      	cmp	r3, #0
 800a128:	d021      	beq.n	800a16e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800a12a:	2300      	movs	r3, #0
 800a12c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800a12e:	2300      	movs	r3, #0
 800a130:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800a132:	1d3a      	adds	r2, r7, #4
 800a134:	f107 0108 	add.w	r1, r7, #8
 800a138:	f107 030c 	add.w	r3, r7, #12
 800a13c:	4618      	mov	r0, r3
 800a13e:	f7fd fea9 	bl	8007e94 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800a142:	6879      	ldr	r1, [r7, #4]
 800a144:	68bb      	ldr	r3, [r7, #8]
 800a146:	68fa      	ldr	r2, [r7, #12]
 800a148:	9202      	str	r2, [sp, #8]
 800a14a:	9301      	str	r3, [sp, #4]
 800a14c:	2302      	movs	r3, #2
 800a14e:	9300      	str	r3, [sp, #0]
 800a150:	2300      	movs	r3, #0
 800a152:	460a      	mov	r2, r1
 800a154:	4911      	ldr	r1, [pc, #68]	@ (800a19c <xTimerCreateTimerTask+0x88>)
 800a156:	4812      	ldr	r0, [pc, #72]	@ (800a1a0 <xTimerCreateTimerTask+0x8c>)
 800a158:	f7ff f8a2 	bl	80092a0 <xTaskCreateStatic>
 800a15c:	4603      	mov	r3, r0
 800a15e:	4a11      	ldr	r2, [pc, #68]	@ (800a1a4 <xTimerCreateTimerTask+0x90>)
 800a160:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800a162:	4b10      	ldr	r3, [pc, #64]	@ (800a1a4 <xTimerCreateTimerTask+0x90>)
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	2b00      	cmp	r3, #0
 800a168:	d001      	beq.n	800a16e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800a16a:	2301      	movs	r3, #1
 800a16c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800a16e:	697b      	ldr	r3, [r7, #20]
 800a170:	2b00      	cmp	r3, #0
 800a172:	d10b      	bne.n	800a18c <xTimerCreateTimerTask+0x78>
	__asm volatile
 800a174:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a178:	f383 8811 	msr	BASEPRI, r3
 800a17c:	f3bf 8f6f 	isb	sy
 800a180:	f3bf 8f4f 	dsb	sy
 800a184:	613b      	str	r3, [r7, #16]
}
 800a186:	bf00      	nop
 800a188:	bf00      	nop
 800a18a:	e7fd      	b.n	800a188 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800a18c:	697b      	ldr	r3, [r7, #20]
}
 800a18e:	4618      	mov	r0, r3
 800a190:	3718      	adds	r7, #24
 800a192:	46bd      	mov	sp, r7
 800a194:	bd80      	pop	{r7, pc}
 800a196:	bf00      	nop
 800a198:	200050ac 	.word	0x200050ac
 800a19c:	0800d61c 	.word	0x0800d61c
 800a1a0:	0800a2e1 	.word	0x0800a2e1
 800a1a4:	200050b0 	.word	0x200050b0

0800a1a8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800a1a8:	b580      	push	{r7, lr}
 800a1aa:	b08a      	sub	sp, #40	@ 0x28
 800a1ac:	af00      	add	r7, sp, #0
 800a1ae:	60f8      	str	r0, [r7, #12]
 800a1b0:	60b9      	str	r1, [r7, #8]
 800a1b2:	607a      	str	r2, [r7, #4]
 800a1b4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800a1b6:	2300      	movs	r3, #0
 800a1b8:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800a1ba:	68fb      	ldr	r3, [r7, #12]
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	d10b      	bne.n	800a1d8 <xTimerGenericCommand+0x30>
	__asm volatile
 800a1c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a1c4:	f383 8811 	msr	BASEPRI, r3
 800a1c8:	f3bf 8f6f 	isb	sy
 800a1cc:	f3bf 8f4f 	dsb	sy
 800a1d0:	623b      	str	r3, [r7, #32]
}
 800a1d2:	bf00      	nop
 800a1d4:	bf00      	nop
 800a1d6:	e7fd      	b.n	800a1d4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800a1d8:	4b19      	ldr	r3, [pc, #100]	@ (800a240 <xTimerGenericCommand+0x98>)
 800a1da:	681b      	ldr	r3, [r3, #0]
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	d02a      	beq.n	800a236 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800a1e0:	68bb      	ldr	r3, [r7, #8]
 800a1e2:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800a1e8:	68fb      	ldr	r3, [r7, #12]
 800a1ea:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800a1ec:	68bb      	ldr	r3, [r7, #8]
 800a1ee:	2b05      	cmp	r3, #5
 800a1f0:	dc18      	bgt.n	800a224 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800a1f2:	f7ff fead 	bl	8009f50 <xTaskGetSchedulerState>
 800a1f6:	4603      	mov	r3, r0
 800a1f8:	2b02      	cmp	r3, #2
 800a1fa:	d109      	bne.n	800a210 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800a1fc:	4b10      	ldr	r3, [pc, #64]	@ (800a240 <xTimerGenericCommand+0x98>)
 800a1fe:	6818      	ldr	r0, [r3, #0]
 800a200:	f107 0110 	add.w	r1, r7, #16
 800a204:	2300      	movs	r3, #0
 800a206:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a208:	f7fe fc5a 	bl	8008ac0 <xQueueGenericSend>
 800a20c:	6278      	str	r0, [r7, #36]	@ 0x24
 800a20e:	e012      	b.n	800a236 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800a210:	4b0b      	ldr	r3, [pc, #44]	@ (800a240 <xTimerGenericCommand+0x98>)
 800a212:	6818      	ldr	r0, [r3, #0]
 800a214:	f107 0110 	add.w	r1, r7, #16
 800a218:	2300      	movs	r3, #0
 800a21a:	2200      	movs	r2, #0
 800a21c:	f7fe fc50 	bl	8008ac0 <xQueueGenericSend>
 800a220:	6278      	str	r0, [r7, #36]	@ 0x24
 800a222:	e008      	b.n	800a236 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800a224:	4b06      	ldr	r3, [pc, #24]	@ (800a240 <xTimerGenericCommand+0x98>)
 800a226:	6818      	ldr	r0, [r3, #0]
 800a228:	f107 0110 	add.w	r1, r7, #16
 800a22c:	2300      	movs	r3, #0
 800a22e:	683a      	ldr	r2, [r7, #0]
 800a230:	f7fe fd48 	bl	8008cc4 <xQueueGenericSendFromISR>
 800a234:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800a236:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800a238:	4618      	mov	r0, r3
 800a23a:	3728      	adds	r7, #40	@ 0x28
 800a23c:	46bd      	mov	sp, r7
 800a23e:	bd80      	pop	{r7, pc}
 800a240:	200050ac 	.word	0x200050ac

0800a244 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800a244:	b580      	push	{r7, lr}
 800a246:	b088      	sub	sp, #32
 800a248:	af02      	add	r7, sp, #8
 800a24a:	6078      	str	r0, [r7, #4]
 800a24c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a24e:	4b23      	ldr	r3, [pc, #140]	@ (800a2dc <prvProcessExpiredTimer+0x98>)
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	68db      	ldr	r3, [r3, #12]
 800a254:	68db      	ldr	r3, [r3, #12]
 800a256:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a258:	697b      	ldr	r3, [r7, #20]
 800a25a:	3304      	adds	r3, #4
 800a25c:	4618      	mov	r0, r3
 800a25e:	f7fe f8ab 	bl	80083b8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a262:	697b      	ldr	r3, [r7, #20]
 800a264:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a268:	f003 0304 	and.w	r3, r3, #4
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	d023      	beq.n	800a2b8 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800a270:	697b      	ldr	r3, [r7, #20]
 800a272:	699a      	ldr	r2, [r3, #24]
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	18d1      	adds	r1, r2, r3
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	683a      	ldr	r2, [r7, #0]
 800a27c:	6978      	ldr	r0, [r7, #20]
 800a27e:	f000 f8d5 	bl	800a42c <prvInsertTimerInActiveList>
 800a282:	4603      	mov	r3, r0
 800a284:	2b00      	cmp	r3, #0
 800a286:	d020      	beq.n	800a2ca <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a288:	2300      	movs	r3, #0
 800a28a:	9300      	str	r3, [sp, #0]
 800a28c:	2300      	movs	r3, #0
 800a28e:	687a      	ldr	r2, [r7, #4]
 800a290:	2100      	movs	r1, #0
 800a292:	6978      	ldr	r0, [r7, #20]
 800a294:	f7ff ff88 	bl	800a1a8 <xTimerGenericCommand>
 800a298:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800a29a:	693b      	ldr	r3, [r7, #16]
 800a29c:	2b00      	cmp	r3, #0
 800a29e:	d114      	bne.n	800a2ca <prvProcessExpiredTimer+0x86>
	__asm volatile
 800a2a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a2a4:	f383 8811 	msr	BASEPRI, r3
 800a2a8:	f3bf 8f6f 	isb	sy
 800a2ac:	f3bf 8f4f 	dsb	sy
 800a2b0:	60fb      	str	r3, [r7, #12]
}
 800a2b2:	bf00      	nop
 800a2b4:	bf00      	nop
 800a2b6:	e7fd      	b.n	800a2b4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a2b8:	697b      	ldr	r3, [r7, #20]
 800a2ba:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a2be:	f023 0301 	bic.w	r3, r3, #1
 800a2c2:	b2da      	uxtb	r2, r3
 800a2c4:	697b      	ldr	r3, [r7, #20]
 800a2c6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a2ca:	697b      	ldr	r3, [r7, #20]
 800a2cc:	6a1b      	ldr	r3, [r3, #32]
 800a2ce:	6978      	ldr	r0, [r7, #20]
 800a2d0:	4798      	blx	r3
}
 800a2d2:	bf00      	nop
 800a2d4:	3718      	adds	r7, #24
 800a2d6:	46bd      	mov	sp, r7
 800a2d8:	bd80      	pop	{r7, pc}
 800a2da:	bf00      	nop
 800a2dc:	200050a4 	.word	0x200050a4

0800a2e0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800a2e0:	b580      	push	{r7, lr}
 800a2e2:	b084      	sub	sp, #16
 800a2e4:	af00      	add	r7, sp, #0
 800a2e6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a2e8:	f107 0308 	add.w	r3, r7, #8
 800a2ec:	4618      	mov	r0, r3
 800a2ee:	f000 f859 	bl	800a3a4 <prvGetNextExpireTime>
 800a2f2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800a2f4:	68bb      	ldr	r3, [r7, #8]
 800a2f6:	4619      	mov	r1, r3
 800a2f8:	68f8      	ldr	r0, [r7, #12]
 800a2fa:	f000 f805 	bl	800a308 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800a2fe:	f000 f8d7 	bl	800a4b0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a302:	bf00      	nop
 800a304:	e7f0      	b.n	800a2e8 <prvTimerTask+0x8>
	...

0800a308 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800a308:	b580      	push	{r7, lr}
 800a30a:	b084      	sub	sp, #16
 800a30c:	af00      	add	r7, sp, #0
 800a30e:	6078      	str	r0, [r7, #4]
 800a310:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800a312:	f7ff fa29 	bl	8009768 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a316:	f107 0308 	add.w	r3, r7, #8
 800a31a:	4618      	mov	r0, r3
 800a31c:	f000 f866 	bl	800a3ec <prvSampleTimeNow>
 800a320:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800a322:	68bb      	ldr	r3, [r7, #8]
 800a324:	2b00      	cmp	r3, #0
 800a326:	d130      	bne.n	800a38a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800a328:	683b      	ldr	r3, [r7, #0]
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	d10a      	bne.n	800a344 <prvProcessTimerOrBlockTask+0x3c>
 800a32e:	687a      	ldr	r2, [r7, #4]
 800a330:	68fb      	ldr	r3, [r7, #12]
 800a332:	429a      	cmp	r2, r3
 800a334:	d806      	bhi.n	800a344 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800a336:	f7ff fa25 	bl	8009784 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800a33a:	68f9      	ldr	r1, [r7, #12]
 800a33c:	6878      	ldr	r0, [r7, #4]
 800a33e:	f7ff ff81 	bl	800a244 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800a342:	e024      	b.n	800a38e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800a344:	683b      	ldr	r3, [r7, #0]
 800a346:	2b00      	cmp	r3, #0
 800a348:	d008      	beq.n	800a35c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800a34a:	4b13      	ldr	r3, [pc, #76]	@ (800a398 <prvProcessTimerOrBlockTask+0x90>)
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	2b00      	cmp	r3, #0
 800a352:	d101      	bne.n	800a358 <prvProcessTimerOrBlockTask+0x50>
 800a354:	2301      	movs	r3, #1
 800a356:	e000      	b.n	800a35a <prvProcessTimerOrBlockTask+0x52>
 800a358:	2300      	movs	r3, #0
 800a35a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800a35c:	4b0f      	ldr	r3, [pc, #60]	@ (800a39c <prvProcessTimerOrBlockTask+0x94>)
 800a35e:	6818      	ldr	r0, [r3, #0]
 800a360:	687a      	ldr	r2, [r7, #4]
 800a362:	68fb      	ldr	r3, [r7, #12]
 800a364:	1ad3      	subs	r3, r2, r3
 800a366:	683a      	ldr	r2, [r7, #0]
 800a368:	4619      	mov	r1, r3
 800a36a:	f7fe ff65 	bl	8009238 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800a36e:	f7ff fa09 	bl	8009784 <xTaskResumeAll>
 800a372:	4603      	mov	r3, r0
 800a374:	2b00      	cmp	r3, #0
 800a376:	d10a      	bne.n	800a38e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800a378:	4b09      	ldr	r3, [pc, #36]	@ (800a3a0 <prvProcessTimerOrBlockTask+0x98>)
 800a37a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a37e:	601a      	str	r2, [r3, #0]
 800a380:	f3bf 8f4f 	dsb	sy
 800a384:	f3bf 8f6f 	isb	sy
}
 800a388:	e001      	b.n	800a38e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800a38a:	f7ff f9fb 	bl	8009784 <xTaskResumeAll>
}
 800a38e:	bf00      	nop
 800a390:	3710      	adds	r7, #16
 800a392:	46bd      	mov	sp, r7
 800a394:	bd80      	pop	{r7, pc}
 800a396:	bf00      	nop
 800a398:	200050a8 	.word	0x200050a8
 800a39c:	200050ac 	.word	0x200050ac
 800a3a0:	e000ed04 	.word	0xe000ed04

0800a3a4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800a3a4:	b480      	push	{r7}
 800a3a6:	b085      	sub	sp, #20
 800a3a8:	af00      	add	r7, sp, #0
 800a3aa:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800a3ac:	4b0e      	ldr	r3, [pc, #56]	@ (800a3e8 <prvGetNextExpireTime+0x44>)
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	d101      	bne.n	800a3ba <prvGetNextExpireTime+0x16>
 800a3b6:	2201      	movs	r2, #1
 800a3b8:	e000      	b.n	800a3bc <prvGetNextExpireTime+0x18>
 800a3ba:	2200      	movs	r2, #0
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	681b      	ldr	r3, [r3, #0]
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	d105      	bne.n	800a3d4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a3c8:	4b07      	ldr	r3, [pc, #28]	@ (800a3e8 <prvGetNextExpireTime+0x44>)
 800a3ca:	681b      	ldr	r3, [r3, #0]
 800a3cc:	68db      	ldr	r3, [r3, #12]
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	60fb      	str	r3, [r7, #12]
 800a3d2:	e001      	b.n	800a3d8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800a3d4:	2300      	movs	r3, #0
 800a3d6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800a3d8:	68fb      	ldr	r3, [r7, #12]
}
 800a3da:	4618      	mov	r0, r3
 800a3dc:	3714      	adds	r7, #20
 800a3de:	46bd      	mov	sp, r7
 800a3e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3e4:	4770      	bx	lr
 800a3e6:	bf00      	nop
 800a3e8:	200050a4 	.word	0x200050a4

0800a3ec <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800a3ec:	b580      	push	{r7, lr}
 800a3ee:	b084      	sub	sp, #16
 800a3f0:	af00      	add	r7, sp, #0
 800a3f2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800a3f4:	f7ff fa64 	bl	80098c0 <xTaskGetTickCount>
 800a3f8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800a3fa:	4b0b      	ldr	r3, [pc, #44]	@ (800a428 <prvSampleTimeNow+0x3c>)
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	68fa      	ldr	r2, [r7, #12]
 800a400:	429a      	cmp	r2, r3
 800a402:	d205      	bcs.n	800a410 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800a404:	f000 f93a 	bl	800a67c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	2201      	movs	r2, #1
 800a40c:	601a      	str	r2, [r3, #0]
 800a40e:	e002      	b.n	800a416 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	2200      	movs	r2, #0
 800a414:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800a416:	4a04      	ldr	r2, [pc, #16]	@ (800a428 <prvSampleTimeNow+0x3c>)
 800a418:	68fb      	ldr	r3, [r7, #12]
 800a41a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800a41c:	68fb      	ldr	r3, [r7, #12]
}
 800a41e:	4618      	mov	r0, r3
 800a420:	3710      	adds	r7, #16
 800a422:	46bd      	mov	sp, r7
 800a424:	bd80      	pop	{r7, pc}
 800a426:	bf00      	nop
 800a428:	200050b4 	.word	0x200050b4

0800a42c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800a42c:	b580      	push	{r7, lr}
 800a42e:	b086      	sub	sp, #24
 800a430:	af00      	add	r7, sp, #0
 800a432:	60f8      	str	r0, [r7, #12]
 800a434:	60b9      	str	r1, [r7, #8]
 800a436:	607a      	str	r2, [r7, #4]
 800a438:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800a43a:	2300      	movs	r3, #0
 800a43c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800a43e:	68fb      	ldr	r3, [r7, #12]
 800a440:	68ba      	ldr	r2, [r7, #8]
 800a442:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a444:	68fb      	ldr	r3, [r7, #12]
 800a446:	68fa      	ldr	r2, [r7, #12]
 800a448:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800a44a:	68ba      	ldr	r2, [r7, #8]
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	429a      	cmp	r2, r3
 800a450:	d812      	bhi.n	800a478 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a452:	687a      	ldr	r2, [r7, #4]
 800a454:	683b      	ldr	r3, [r7, #0]
 800a456:	1ad2      	subs	r2, r2, r3
 800a458:	68fb      	ldr	r3, [r7, #12]
 800a45a:	699b      	ldr	r3, [r3, #24]
 800a45c:	429a      	cmp	r2, r3
 800a45e:	d302      	bcc.n	800a466 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800a460:	2301      	movs	r3, #1
 800a462:	617b      	str	r3, [r7, #20]
 800a464:	e01b      	b.n	800a49e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800a466:	4b10      	ldr	r3, [pc, #64]	@ (800a4a8 <prvInsertTimerInActiveList+0x7c>)
 800a468:	681a      	ldr	r2, [r3, #0]
 800a46a:	68fb      	ldr	r3, [r7, #12]
 800a46c:	3304      	adds	r3, #4
 800a46e:	4619      	mov	r1, r3
 800a470:	4610      	mov	r0, r2
 800a472:	f7fd ff68 	bl	8008346 <vListInsert>
 800a476:	e012      	b.n	800a49e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800a478:	687a      	ldr	r2, [r7, #4]
 800a47a:	683b      	ldr	r3, [r7, #0]
 800a47c:	429a      	cmp	r2, r3
 800a47e:	d206      	bcs.n	800a48e <prvInsertTimerInActiveList+0x62>
 800a480:	68ba      	ldr	r2, [r7, #8]
 800a482:	683b      	ldr	r3, [r7, #0]
 800a484:	429a      	cmp	r2, r3
 800a486:	d302      	bcc.n	800a48e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800a488:	2301      	movs	r3, #1
 800a48a:	617b      	str	r3, [r7, #20]
 800a48c:	e007      	b.n	800a49e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a48e:	4b07      	ldr	r3, [pc, #28]	@ (800a4ac <prvInsertTimerInActiveList+0x80>)
 800a490:	681a      	ldr	r2, [r3, #0]
 800a492:	68fb      	ldr	r3, [r7, #12]
 800a494:	3304      	adds	r3, #4
 800a496:	4619      	mov	r1, r3
 800a498:	4610      	mov	r0, r2
 800a49a:	f7fd ff54 	bl	8008346 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800a49e:	697b      	ldr	r3, [r7, #20]
}
 800a4a0:	4618      	mov	r0, r3
 800a4a2:	3718      	adds	r7, #24
 800a4a4:	46bd      	mov	sp, r7
 800a4a6:	bd80      	pop	{r7, pc}
 800a4a8:	200050a8 	.word	0x200050a8
 800a4ac:	200050a4 	.word	0x200050a4

0800a4b0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800a4b0:	b580      	push	{r7, lr}
 800a4b2:	b08e      	sub	sp, #56	@ 0x38
 800a4b4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a4b6:	e0ce      	b.n	800a656 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	da19      	bge.n	800a4f2 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800a4be:	1d3b      	adds	r3, r7, #4
 800a4c0:	3304      	adds	r3, #4
 800a4c2:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800a4c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	d10b      	bne.n	800a4e2 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800a4ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a4ce:	f383 8811 	msr	BASEPRI, r3
 800a4d2:	f3bf 8f6f 	isb	sy
 800a4d6:	f3bf 8f4f 	dsb	sy
 800a4da:	61fb      	str	r3, [r7, #28]
}
 800a4dc:	bf00      	nop
 800a4de:	bf00      	nop
 800a4e0:	e7fd      	b.n	800a4de <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800a4e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a4e4:	681b      	ldr	r3, [r3, #0]
 800a4e6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a4e8:	6850      	ldr	r0, [r2, #4]
 800a4ea:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a4ec:	6892      	ldr	r2, [r2, #8]
 800a4ee:	4611      	mov	r1, r2
 800a4f0:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	f2c0 80ae 	blt.w	800a656 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800a4fa:	68fb      	ldr	r3, [r7, #12]
 800a4fc:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800a4fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a500:	695b      	ldr	r3, [r3, #20]
 800a502:	2b00      	cmp	r3, #0
 800a504:	d004      	beq.n	800a510 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a506:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a508:	3304      	adds	r3, #4
 800a50a:	4618      	mov	r0, r3
 800a50c:	f7fd ff54 	bl	80083b8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a510:	463b      	mov	r3, r7
 800a512:	4618      	mov	r0, r3
 800a514:	f7ff ff6a 	bl	800a3ec <prvSampleTimeNow>
 800a518:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	2b09      	cmp	r3, #9
 800a51e:	f200 8097 	bhi.w	800a650 <prvProcessReceivedCommands+0x1a0>
 800a522:	a201      	add	r2, pc, #4	@ (adr r2, 800a528 <prvProcessReceivedCommands+0x78>)
 800a524:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a528:	0800a551 	.word	0x0800a551
 800a52c:	0800a551 	.word	0x0800a551
 800a530:	0800a551 	.word	0x0800a551
 800a534:	0800a5c7 	.word	0x0800a5c7
 800a538:	0800a5db 	.word	0x0800a5db
 800a53c:	0800a627 	.word	0x0800a627
 800a540:	0800a551 	.word	0x0800a551
 800a544:	0800a551 	.word	0x0800a551
 800a548:	0800a5c7 	.word	0x0800a5c7
 800a54c:	0800a5db 	.word	0x0800a5db
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a550:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a552:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a556:	f043 0301 	orr.w	r3, r3, #1
 800a55a:	b2da      	uxtb	r2, r3
 800a55c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a55e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800a562:	68ba      	ldr	r2, [r7, #8]
 800a564:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a566:	699b      	ldr	r3, [r3, #24]
 800a568:	18d1      	adds	r1, r2, r3
 800a56a:	68bb      	ldr	r3, [r7, #8]
 800a56c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a56e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a570:	f7ff ff5c 	bl	800a42c <prvInsertTimerInActiveList>
 800a574:	4603      	mov	r3, r0
 800a576:	2b00      	cmp	r3, #0
 800a578:	d06c      	beq.n	800a654 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a57a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a57c:	6a1b      	ldr	r3, [r3, #32]
 800a57e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a580:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a582:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a584:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a588:	f003 0304 	and.w	r3, r3, #4
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	d061      	beq.n	800a654 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800a590:	68ba      	ldr	r2, [r7, #8]
 800a592:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a594:	699b      	ldr	r3, [r3, #24]
 800a596:	441a      	add	r2, r3
 800a598:	2300      	movs	r3, #0
 800a59a:	9300      	str	r3, [sp, #0]
 800a59c:	2300      	movs	r3, #0
 800a59e:	2100      	movs	r1, #0
 800a5a0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a5a2:	f7ff fe01 	bl	800a1a8 <xTimerGenericCommand>
 800a5a6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800a5a8:	6a3b      	ldr	r3, [r7, #32]
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	d152      	bne.n	800a654 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800a5ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a5b2:	f383 8811 	msr	BASEPRI, r3
 800a5b6:	f3bf 8f6f 	isb	sy
 800a5ba:	f3bf 8f4f 	dsb	sy
 800a5be:	61bb      	str	r3, [r7, #24]
}
 800a5c0:	bf00      	nop
 800a5c2:	bf00      	nop
 800a5c4:	e7fd      	b.n	800a5c2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a5c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a5c8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a5cc:	f023 0301 	bic.w	r3, r3, #1
 800a5d0:	b2da      	uxtb	r2, r3
 800a5d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a5d4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800a5d8:	e03d      	b.n	800a656 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a5da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a5dc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a5e0:	f043 0301 	orr.w	r3, r3, #1
 800a5e4:	b2da      	uxtb	r2, r3
 800a5e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a5e8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800a5ec:	68ba      	ldr	r2, [r7, #8]
 800a5ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a5f0:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800a5f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a5f4:	699b      	ldr	r3, [r3, #24]
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	d10b      	bne.n	800a612 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800a5fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a5fe:	f383 8811 	msr	BASEPRI, r3
 800a602:	f3bf 8f6f 	isb	sy
 800a606:	f3bf 8f4f 	dsb	sy
 800a60a:	617b      	str	r3, [r7, #20]
}
 800a60c:	bf00      	nop
 800a60e:	bf00      	nop
 800a610:	e7fd      	b.n	800a60e <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800a612:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a614:	699a      	ldr	r2, [r3, #24]
 800a616:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a618:	18d1      	adds	r1, r2, r3
 800a61a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a61c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a61e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a620:	f7ff ff04 	bl	800a42c <prvInsertTimerInActiveList>
					break;
 800a624:	e017      	b.n	800a656 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800a626:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a628:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a62c:	f003 0302 	and.w	r3, r3, #2
 800a630:	2b00      	cmp	r3, #0
 800a632:	d103      	bne.n	800a63c <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800a634:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a636:	f7fd fd15 	bl	8008064 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800a63a:	e00c      	b.n	800a656 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a63c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a63e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a642:	f023 0301 	bic.w	r3, r3, #1
 800a646:	b2da      	uxtb	r2, r3
 800a648:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a64a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800a64e:	e002      	b.n	800a656 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800a650:	bf00      	nop
 800a652:	e000      	b.n	800a656 <prvProcessReceivedCommands+0x1a6>
					break;
 800a654:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a656:	4b08      	ldr	r3, [pc, #32]	@ (800a678 <prvProcessReceivedCommands+0x1c8>)
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	1d39      	adds	r1, r7, #4
 800a65c:	2200      	movs	r2, #0
 800a65e:	4618      	mov	r0, r3
 800a660:	f7fe fbce 	bl	8008e00 <xQueueReceive>
 800a664:	4603      	mov	r3, r0
 800a666:	2b00      	cmp	r3, #0
 800a668:	f47f af26 	bne.w	800a4b8 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800a66c:	bf00      	nop
 800a66e:	bf00      	nop
 800a670:	3730      	adds	r7, #48	@ 0x30
 800a672:	46bd      	mov	sp, r7
 800a674:	bd80      	pop	{r7, pc}
 800a676:	bf00      	nop
 800a678:	200050ac 	.word	0x200050ac

0800a67c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800a67c:	b580      	push	{r7, lr}
 800a67e:	b088      	sub	sp, #32
 800a680:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a682:	e049      	b.n	800a718 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a684:	4b2e      	ldr	r3, [pc, #184]	@ (800a740 <prvSwitchTimerLists+0xc4>)
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	68db      	ldr	r3, [r3, #12]
 800a68a:	681b      	ldr	r3, [r3, #0]
 800a68c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a68e:	4b2c      	ldr	r3, [pc, #176]	@ (800a740 <prvSwitchTimerLists+0xc4>)
 800a690:	681b      	ldr	r3, [r3, #0]
 800a692:	68db      	ldr	r3, [r3, #12]
 800a694:	68db      	ldr	r3, [r3, #12]
 800a696:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a698:	68fb      	ldr	r3, [r7, #12]
 800a69a:	3304      	adds	r3, #4
 800a69c:	4618      	mov	r0, r3
 800a69e:	f7fd fe8b 	bl	80083b8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a6a2:	68fb      	ldr	r3, [r7, #12]
 800a6a4:	6a1b      	ldr	r3, [r3, #32]
 800a6a6:	68f8      	ldr	r0, [r7, #12]
 800a6a8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a6aa:	68fb      	ldr	r3, [r7, #12]
 800a6ac:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a6b0:	f003 0304 	and.w	r3, r3, #4
 800a6b4:	2b00      	cmp	r3, #0
 800a6b6:	d02f      	beq.n	800a718 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800a6b8:	68fb      	ldr	r3, [r7, #12]
 800a6ba:	699b      	ldr	r3, [r3, #24]
 800a6bc:	693a      	ldr	r2, [r7, #16]
 800a6be:	4413      	add	r3, r2
 800a6c0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800a6c2:	68ba      	ldr	r2, [r7, #8]
 800a6c4:	693b      	ldr	r3, [r7, #16]
 800a6c6:	429a      	cmp	r2, r3
 800a6c8:	d90e      	bls.n	800a6e8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800a6ca:	68fb      	ldr	r3, [r7, #12]
 800a6cc:	68ba      	ldr	r2, [r7, #8]
 800a6ce:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a6d0:	68fb      	ldr	r3, [r7, #12]
 800a6d2:	68fa      	ldr	r2, [r7, #12]
 800a6d4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a6d6:	4b1a      	ldr	r3, [pc, #104]	@ (800a740 <prvSwitchTimerLists+0xc4>)
 800a6d8:	681a      	ldr	r2, [r3, #0]
 800a6da:	68fb      	ldr	r3, [r7, #12]
 800a6dc:	3304      	adds	r3, #4
 800a6de:	4619      	mov	r1, r3
 800a6e0:	4610      	mov	r0, r2
 800a6e2:	f7fd fe30 	bl	8008346 <vListInsert>
 800a6e6:	e017      	b.n	800a718 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a6e8:	2300      	movs	r3, #0
 800a6ea:	9300      	str	r3, [sp, #0]
 800a6ec:	2300      	movs	r3, #0
 800a6ee:	693a      	ldr	r2, [r7, #16]
 800a6f0:	2100      	movs	r1, #0
 800a6f2:	68f8      	ldr	r0, [r7, #12]
 800a6f4:	f7ff fd58 	bl	800a1a8 <xTimerGenericCommand>
 800a6f8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	2b00      	cmp	r3, #0
 800a6fe:	d10b      	bne.n	800a718 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800a700:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a704:	f383 8811 	msr	BASEPRI, r3
 800a708:	f3bf 8f6f 	isb	sy
 800a70c:	f3bf 8f4f 	dsb	sy
 800a710:	603b      	str	r3, [r7, #0]
}
 800a712:	bf00      	nop
 800a714:	bf00      	nop
 800a716:	e7fd      	b.n	800a714 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a718:	4b09      	ldr	r3, [pc, #36]	@ (800a740 <prvSwitchTimerLists+0xc4>)
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	681b      	ldr	r3, [r3, #0]
 800a71e:	2b00      	cmp	r3, #0
 800a720:	d1b0      	bne.n	800a684 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800a722:	4b07      	ldr	r3, [pc, #28]	@ (800a740 <prvSwitchTimerLists+0xc4>)
 800a724:	681b      	ldr	r3, [r3, #0]
 800a726:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800a728:	4b06      	ldr	r3, [pc, #24]	@ (800a744 <prvSwitchTimerLists+0xc8>)
 800a72a:	681b      	ldr	r3, [r3, #0]
 800a72c:	4a04      	ldr	r2, [pc, #16]	@ (800a740 <prvSwitchTimerLists+0xc4>)
 800a72e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800a730:	4a04      	ldr	r2, [pc, #16]	@ (800a744 <prvSwitchTimerLists+0xc8>)
 800a732:	697b      	ldr	r3, [r7, #20]
 800a734:	6013      	str	r3, [r2, #0]
}
 800a736:	bf00      	nop
 800a738:	3718      	adds	r7, #24
 800a73a:	46bd      	mov	sp, r7
 800a73c:	bd80      	pop	{r7, pc}
 800a73e:	bf00      	nop
 800a740:	200050a4 	.word	0x200050a4
 800a744:	200050a8 	.word	0x200050a8

0800a748 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800a748:	b580      	push	{r7, lr}
 800a74a:	b082      	sub	sp, #8
 800a74c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800a74e:	f7fd ff8b 	bl	8008668 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800a752:	4b15      	ldr	r3, [pc, #84]	@ (800a7a8 <prvCheckForValidListAndQueue+0x60>)
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	2b00      	cmp	r3, #0
 800a758:	d120      	bne.n	800a79c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800a75a:	4814      	ldr	r0, [pc, #80]	@ (800a7ac <prvCheckForValidListAndQueue+0x64>)
 800a75c:	f7fd fda2 	bl	80082a4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800a760:	4813      	ldr	r0, [pc, #76]	@ (800a7b0 <prvCheckForValidListAndQueue+0x68>)
 800a762:	f7fd fd9f 	bl	80082a4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800a766:	4b13      	ldr	r3, [pc, #76]	@ (800a7b4 <prvCheckForValidListAndQueue+0x6c>)
 800a768:	4a10      	ldr	r2, [pc, #64]	@ (800a7ac <prvCheckForValidListAndQueue+0x64>)
 800a76a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800a76c:	4b12      	ldr	r3, [pc, #72]	@ (800a7b8 <prvCheckForValidListAndQueue+0x70>)
 800a76e:	4a10      	ldr	r2, [pc, #64]	@ (800a7b0 <prvCheckForValidListAndQueue+0x68>)
 800a770:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800a772:	2300      	movs	r3, #0
 800a774:	9300      	str	r3, [sp, #0]
 800a776:	4b11      	ldr	r3, [pc, #68]	@ (800a7bc <prvCheckForValidListAndQueue+0x74>)
 800a778:	4a11      	ldr	r2, [pc, #68]	@ (800a7c0 <prvCheckForValidListAndQueue+0x78>)
 800a77a:	2110      	movs	r1, #16
 800a77c:	200a      	movs	r0, #10
 800a77e:	f7fe f8ff 	bl	8008980 <xQueueGenericCreateStatic>
 800a782:	4603      	mov	r3, r0
 800a784:	4a08      	ldr	r2, [pc, #32]	@ (800a7a8 <prvCheckForValidListAndQueue+0x60>)
 800a786:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800a788:	4b07      	ldr	r3, [pc, #28]	@ (800a7a8 <prvCheckForValidListAndQueue+0x60>)
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	d005      	beq.n	800a79c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a790:	4b05      	ldr	r3, [pc, #20]	@ (800a7a8 <prvCheckForValidListAndQueue+0x60>)
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	490b      	ldr	r1, [pc, #44]	@ (800a7c4 <prvCheckForValidListAndQueue+0x7c>)
 800a796:	4618      	mov	r0, r3
 800a798:	f7fe fd24 	bl	80091e4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a79c:	f7fd ff96 	bl	80086cc <vPortExitCritical>
}
 800a7a0:	bf00      	nop
 800a7a2:	46bd      	mov	sp, r7
 800a7a4:	bd80      	pop	{r7, pc}
 800a7a6:	bf00      	nop
 800a7a8:	200050ac 	.word	0x200050ac
 800a7ac:	2000507c 	.word	0x2000507c
 800a7b0:	20005090 	.word	0x20005090
 800a7b4:	200050a4 	.word	0x200050a4
 800a7b8:	200050a8 	.word	0x200050a8
 800a7bc:	20005158 	.word	0x20005158
 800a7c0:	200050b8 	.word	0x200050b8
 800a7c4:	0800d624 	.word	0x0800d624

0800a7c8 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800a7c8:	b580      	push	{r7, lr}
 800a7ca:	b086      	sub	sp, #24
 800a7cc:	af00      	add	r7, sp, #0
 800a7ce:	60f8      	str	r0, [r7, #12]
 800a7d0:	60b9      	str	r1, [r7, #8]
 800a7d2:	4613      	mov	r3, r2
 800a7d4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800a7d6:	68fb      	ldr	r3, [r7, #12]
 800a7d8:	2b00      	cmp	r3, #0
 800a7da:	d101      	bne.n	800a7e0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800a7dc:	2303      	movs	r3, #3
 800a7de:	e01f      	b.n	800a820 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800a7e0:	68fb      	ldr	r3, [r7, #12]
 800a7e2:	2200      	movs	r2, #0
 800a7e4:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800a7e8:	68fb      	ldr	r3, [r7, #12]
 800a7ea:	2200      	movs	r2, #0
 800a7ec:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800a7f0:	68fb      	ldr	r3, [r7, #12]
 800a7f2:	2200      	movs	r2, #0
 800a7f4:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800a7f8:	68bb      	ldr	r3, [r7, #8]
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	d003      	beq.n	800a806 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800a7fe:	68fb      	ldr	r3, [r7, #12]
 800a800:	68ba      	ldr	r2, [r7, #8]
 800a802:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a806:	68fb      	ldr	r3, [r7, #12]
 800a808:	2201      	movs	r2, #1
 800a80a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800a80e:	68fb      	ldr	r3, [r7, #12]
 800a810:	79fa      	ldrb	r2, [r7, #7]
 800a812:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800a814:	68f8      	ldr	r0, [r7, #12]
 800a816:	f001 ff59 	bl	800c6cc <USBD_LL_Init>
 800a81a:	4603      	mov	r3, r0
 800a81c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800a81e:	7dfb      	ldrb	r3, [r7, #23]
}
 800a820:	4618      	mov	r0, r3
 800a822:	3718      	adds	r7, #24
 800a824:	46bd      	mov	sp, r7
 800a826:	bd80      	pop	{r7, pc}

0800a828 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800a828:	b580      	push	{r7, lr}
 800a82a:	b084      	sub	sp, #16
 800a82c:	af00      	add	r7, sp, #0
 800a82e:	6078      	str	r0, [r7, #4]
 800a830:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a832:	2300      	movs	r3, #0
 800a834:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800a836:	683b      	ldr	r3, [r7, #0]
 800a838:	2b00      	cmp	r3, #0
 800a83a:	d101      	bne.n	800a840 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800a83c:	2303      	movs	r3, #3
 800a83e:	e025      	b.n	800a88c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	683a      	ldr	r2, [r7, #0]
 800a844:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	32ae      	adds	r2, #174	@ 0xae
 800a852:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a856:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a858:	2b00      	cmp	r3, #0
 800a85a:	d00f      	beq.n	800a87c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	32ae      	adds	r2, #174	@ 0xae
 800a866:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a86a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a86c:	f107 020e 	add.w	r2, r7, #14
 800a870:	4610      	mov	r0, r2
 800a872:	4798      	blx	r3
 800a874:	4602      	mov	r2, r0
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800a882:	1c5a      	adds	r2, r3, #1
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800a88a:	2300      	movs	r3, #0
}
 800a88c:	4618      	mov	r0, r3
 800a88e:	3710      	adds	r7, #16
 800a890:	46bd      	mov	sp, r7
 800a892:	bd80      	pop	{r7, pc}

0800a894 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800a894:	b580      	push	{r7, lr}
 800a896:	b082      	sub	sp, #8
 800a898:	af00      	add	r7, sp, #0
 800a89a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800a89c:	6878      	ldr	r0, [r7, #4]
 800a89e:	f001 ff61 	bl	800c764 <USBD_LL_Start>
 800a8a2:	4603      	mov	r3, r0
}
 800a8a4:	4618      	mov	r0, r3
 800a8a6:	3708      	adds	r7, #8
 800a8a8:	46bd      	mov	sp, r7
 800a8aa:	bd80      	pop	{r7, pc}

0800a8ac <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800a8ac:	b480      	push	{r7}
 800a8ae:	b083      	sub	sp, #12
 800a8b0:	af00      	add	r7, sp, #0
 800a8b2:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a8b4:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800a8b6:	4618      	mov	r0, r3
 800a8b8:	370c      	adds	r7, #12
 800a8ba:	46bd      	mov	sp, r7
 800a8bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8c0:	4770      	bx	lr

0800a8c2 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a8c2:	b580      	push	{r7, lr}
 800a8c4:	b084      	sub	sp, #16
 800a8c6:	af00      	add	r7, sp, #0
 800a8c8:	6078      	str	r0, [r7, #4]
 800a8ca:	460b      	mov	r3, r1
 800a8cc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800a8ce:	2300      	movs	r3, #0
 800a8d0:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a8d8:	2b00      	cmp	r3, #0
 800a8da:	d009      	beq.n	800a8f0 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a8e2:	681b      	ldr	r3, [r3, #0]
 800a8e4:	78fa      	ldrb	r2, [r7, #3]
 800a8e6:	4611      	mov	r1, r2
 800a8e8:	6878      	ldr	r0, [r7, #4]
 800a8ea:	4798      	blx	r3
 800a8ec:	4603      	mov	r3, r0
 800a8ee:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a8f0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a8f2:	4618      	mov	r0, r3
 800a8f4:	3710      	adds	r7, #16
 800a8f6:	46bd      	mov	sp, r7
 800a8f8:	bd80      	pop	{r7, pc}

0800a8fa <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a8fa:	b580      	push	{r7, lr}
 800a8fc:	b084      	sub	sp, #16
 800a8fe:	af00      	add	r7, sp, #0
 800a900:	6078      	str	r0, [r7, #4]
 800a902:	460b      	mov	r3, r1
 800a904:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800a906:	2300      	movs	r3, #0
 800a908:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a910:	685b      	ldr	r3, [r3, #4]
 800a912:	78fa      	ldrb	r2, [r7, #3]
 800a914:	4611      	mov	r1, r2
 800a916:	6878      	ldr	r0, [r7, #4]
 800a918:	4798      	blx	r3
 800a91a:	4603      	mov	r3, r0
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	d001      	beq.n	800a924 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800a920:	2303      	movs	r3, #3
 800a922:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a924:	7bfb      	ldrb	r3, [r7, #15]
}
 800a926:	4618      	mov	r0, r3
 800a928:	3710      	adds	r7, #16
 800a92a:	46bd      	mov	sp, r7
 800a92c:	bd80      	pop	{r7, pc}

0800a92e <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800a92e:	b580      	push	{r7, lr}
 800a930:	b084      	sub	sp, #16
 800a932:	af00      	add	r7, sp, #0
 800a934:	6078      	str	r0, [r7, #4]
 800a936:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800a93e:	6839      	ldr	r1, [r7, #0]
 800a940:	4618      	mov	r0, r3
 800a942:	f001 f90c 	bl	800bb5e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	2201      	movs	r2, #1
 800a94a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800a954:	461a      	mov	r2, r3
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800a962:	f003 031f 	and.w	r3, r3, #31
 800a966:	2b02      	cmp	r3, #2
 800a968:	d01a      	beq.n	800a9a0 <USBD_LL_SetupStage+0x72>
 800a96a:	2b02      	cmp	r3, #2
 800a96c:	d822      	bhi.n	800a9b4 <USBD_LL_SetupStage+0x86>
 800a96e:	2b00      	cmp	r3, #0
 800a970:	d002      	beq.n	800a978 <USBD_LL_SetupStage+0x4a>
 800a972:	2b01      	cmp	r3, #1
 800a974:	d00a      	beq.n	800a98c <USBD_LL_SetupStage+0x5e>
 800a976:	e01d      	b.n	800a9b4 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800a97e:	4619      	mov	r1, r3
 800a980:	6878      	ldr	r0, [r7, #4]
 800a982:	f000 fb63 	bl	800b04c <USBD_StdDevReq>
 800a986:	4603      	mov	r3, r0
 800a988:	73fb      	strb	r3, [r7, #15]
      break;
 800a98a:	e020      	b.n	800a9ce <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800a992:	4619      	mov	r1, r3
 800a994:	6878      	ldr	r0, [r7, #4]
 800a996:	f000 fbcb 	bl	800b130 <USBD_StdItfReq>
 800a99a:	4603      	mov	r3, r0
 800a99c:	73fb      	strb	r3, [r7, #15]
      break;
 800a99e:	e016      	b.n	800a9ce <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800a9a6:	4619      	mov	r1, r3
 800a9a8:	6878      	ldr	r0, [r7, #4]
 800a9aa:	f000 fc2d 	bl	800b208 <USBD_StdEPReq>
 800a9ae:	4603      	mov	r3, r0
 800a9b0:	73fb      	strb	r3, [r7, #15]
      break;
 800a9b2:	e00c      	b.n	800a9ce <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800a9ba:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800a9be:	b2db      	uxtb	r3, r3
 800a9c0:	4619      	mov	r1, r3
 800a9c2:	6878      	ldr	r0, [r7, #4]
 800a9c4:	f001 ff2e 	bl	800c824 <USBD_LL_StallEP>
 800a9c8:	4603      	mov	r3, r0
 800a9ca:	73fb      	strb	r3, [r7, #15]
      break;
 800a9cc:	bf00      	nop
  }

  return ret;
 800a9ce:	7bfb      	ldrb	r3, [r7, #15]
}
 800a9d0:	4618      	mov	r0, r3
 800a9d2:	3710      	adds	r7, #16
 800a9d4:	46bd      	mov	sp, r7
 800a9d6:	bd80      	pop	{r7, pc}

0800a9d8 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800a9d8:	b580      	push	{r7, lr}
 800a9da:	b086      	sub	sp, #24
 800a9dc:	af00      	add	r7, sp, #0
 800a9de:	60f8      	str	r0, [r7, #12]
 800a9e0:	460b      	mov	r3, r1
 800a9e2:	607a      	str	r2, [r7, #4]
 800a9e4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800a9e6:	2300      	movs	r3, #0
 800a9e8:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800a9ea:	7afb      	ldrb	r3, [r7, #11]
 800a9ec:	2b00      	cmp	r3, #0
 800a9ee:	d16e      	bne.n	800aace <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800a9f0:	68fb      	ldr	r3, [r7, #12]
 800a9f2:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800a9f6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800a9f8:	68fb      	ldr	r3, [r7, #12]
 800a9fa:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800a9fe:	2b03      	cmp	r3, #3
 800aa00:	f040 8098 	bne.w	800ab34 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800aa04:	693b      	ldr	r3, [r7, #16]
 800aa06:	689a      	ldr	r2, [r3, #8]
 800aa08:	693b      	ldr	r3, [r7, #16]
 800aa0a:	68db      	ldr	r3, [r3, #12]
 800aa0c:	429a      	cmp	r2, r3
 800aa0e:	d913      	bls.n	800aa38 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800aa10:	693b      	ldr	r3, [r7, #16]
 800aa12:	689a      	ldr	r2, [r3, #8]
 800aa14:	693b      	ldr	r3, [r7, #16]
 800aa16:	68db      	ldr	r3, [r3, #12]
 800aa18:	1ad2      	subs	r2, r2, r3
 800aa1a:	693b      	ldr	r3, [r7, #16]
 800aa1c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800aa1e:	693b      	ldr	r3, [r7, #16]
 800aa20:	68da      	ldr	r2, [r3, #12]
 800aa22:	693b      	ldr	r3, [r7, #16]
 800aa24:	689b      	ldr	r3, [r3, #8]
 800aa26:	4293      	cmp	r3, r2
 800aa28:	bf28      	it	cs
 800aa2a:	4613      	movcs	r3, r2
 800aa2c:	461a      	mov	r2, r3
 800aa2e:	6879      	ldr	r1, [r7, #4]
 800aa30:	68f8      	ldr	r0, [r7, #12]
 800aa32:	f001 fba1 	bl	800c178 <USBD_CtlContinueRx>
 800aa36:	e07d      	b.n	800ab34 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800aa38:	68fb      	ldr	r3, [r7, #12]
 800aa3a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800aa3e:	f003 031f 	and.w	r3, r3, #31
 800aa42:	2b02      	cmp	r3, #2
 800aa44:	d014      	beq.n	800aa70 <USBD_LL_DataOutStage+0x98>
 800aa46:	2b02      	cmp	r3, #2
 800aa48:	d81d      	bhi.n	800aa86 <USBD_LL_DataOutStage+0xae>
 800aa4a:	2b00      	cmp	r3, #0
 800aa4c:	d002      	beq.n	800aa54 <USBD_LL_DataOutStage+0x7c>
 800aa4e:	2b01      	cmp	r3, #1
 800aa50:	d003      	beq.n	800aa5a <USBD_LL_DataOutStage+0x82>
 800aa52:	e018      	b.n	800aa86 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800aa54:	2300      	movs	r3, #0
 800aa56:	75bb      	strb	r3, [r7, #22]
            break;
 800aa58:	e018      	b.n	800aa8c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800aa5a:	68fb      	ldr	r3, [r7, #12]
 800aa5c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800aa60:	b2db      	uxtb	r3, r3
 800aa62:	4619      	mov	r1, r3
 800aa64:	68f8      	ldr	r0, [r7, #12]
 800aa66:	f000 fa64 	bl	800af32 <USBD_CoreFindIF>
 800aa6a:	4603      	mov	r3, r0
 800aa6c:	75bb      	strb	r3, [r7, #22]
            break;
 800aa6e:	e00d      	b.n	800aa8c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800aa70:	68fb      	ldr	r3, [r7, #12]
 800aa72:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800aa76:	b2db      	uxtb	r3, r3
 800aa78:	4619      	mov	r1, r3
 800aa7a:	68f8      	ldr	r0, [r7, #12]
 800aa7c:	f000 fa66 	bl	800af4c <USBD_CoreFindEP>
 800aa80:	4603      	mov	r3, r0
 800aa82:	75bb      	strb	r3, [r7, #22]
            break;
 800aa84:	e002      	b.n	800aa8c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800aa86:	2300      	movs	r3, #0
 800aa88:	75bb      	strb	r3, [r7, #22]
            break;
 800aa8a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800aa8c:	7dbb      	ldrb	r3, [r7, #22]
 800aa8e:	2b00      	cmp	r3, #0
 800aa90:	d119      	bne.n	800aac6 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aa92:	68fb      	ldr	r3, [r7, #12]
 800aa94:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800aa98:	b2db      	uxtb	r3, r3
 800aa9a:	2b03      	cmp	r3, #3
 800aa9c:	d113      	bne.n	800aac6 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800aa9e:	7dba      	ldrb	r2, [r7, #22]
 800aaa0:	68fb      	ldr	r3, [r7, #12]
 800aaa2:	32ae      	adds	r2, #174	@ 0xae
 800aaa4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aaa8:	691b      	ldr	r3, [r3, #16]
 800aaaa:	2b00      	cmp	r3, #0
 800aaac:	d00b      	beq.n	800aac6 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800aaae:	7dba      	ldrb	r2, [r7, #22]
 800aab0:	68fb      	ldr	r3, [r7, #12]
 800aab2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800aab6:	7dba      	ldrb	r2, [r7, #22]
 800aab8:	68fb      	ldr	r3, [r7, #12]
 800aaba:	32ae      	adds	r2, #174	@ 0xae
 800aabc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aac0:	691b      	ldr	r3, [r3, #16]
 800aac2:	68f8      	ldr	r0, [r7, #12]
 800aac4:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800aac6:	68f8      	ldr	r0, [r7, #12]
 800aac8:	f001 fb67 	bl	800c19a <USBD_CtlSendStatus>
 800aacc:	e032      	b.n	800ab34 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800aace:	7afb      	ldrb	r3, [r7, #11]
 800aad0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800aad4:	b2db      	uxtb	r3, r3
 800aad6:	4619      	mov	r1, r3
 800aad8:	68f8      	ldr	r0, [r7, #12]
 800aada:	f000 fa37 	bl	800af4c <USBD_CoreFindEP>
 800aade:	4603      	mov	r3, r0
 800aae0:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800aae2:	7dbb      	ldrb	r3, [r7, #22]
 800aae4:	2bff      	cmp	r3, #255	@ 0xff
 800aae6:	d025      	beq.n	800ab34 <USBD_LL_DataOutStage+0x15c>
 800aae8:	7dbb      	ldrb	r3, [r7, #22]
 800aaea:	2b00      	cmp	r3, #0
 800aaec:	d122      	bne.n	800ab34 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aaee:	68fb      	ldr	r3, [r7, #12]
 800aaf0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800aaf4:	b2db      	uxtb	r3, r3
 800aaf6:	2b03      	cmp	r3, #3
 800aaf8:	d117      	bne.n	800ab2a <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800aafa:	7dba      	ldrb	r2, [r7, #22]
 800aafc:	68fb      	ldr	r3, [r7, #12]
 800aafe:	32ae      	adds	r2, #174	@ 0xae
 800ab00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab04:	699b      	ldr	r3, [r3, #24]
 800ab06:	2b00      	cmp	r3, #0
 800ab08:	d00f      	beq.n	800ab2a <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800ab0a:	7dba      	ldrb	r2, [r7, #22]
 800ab0c:	68fb      	ldr	r3, [r7, #12]
 800ab0e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800ab12:	7dba      	ldrb	r2, [r7, #22]
 800ab14:	68fb      	ldr	r3, [r7, #12]
 800ab16:	32ae      	adds	r2, #174	@ 0xae
 800ab18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab1c:	699b      	ldr	r3, [r3, #24]
 800ab1e:	7afa      	ldrb	r2, [r7, #11]
 800ab20:	4611      	mov	r1, r2
 800ab22:	68f8      	ldr	r0, [r7, #12]
 800ab24:	4798      	blx	r3
 800ab26:	4603      	mov	r3, r0
 800ab28:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800ab2a:	7dfb      	ldrb	r3, [r7, #23]
 800ab2c:	2b00      	cmp	r3, #0
 800ab2e:	d001      	beq.n	800ab34 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800ab30:	7dfb      	ldrb	r3, [r7, #23]
 800ab32:	e000      	b.n	800ab36 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800ab34:	2300      	movs	r3, #0
}
 800ab36:	4618      	mov	r0, r3
 800ab38:	3718      	adds	r7, #24
 800ab3a:	46bd      	mov	sp, r7
 800ab3c:	bd80      	pop	{r7, pc}

0800ab3e <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800ab3e:	b580      	push	{r7, lr}
 800ab40:	b086      	sub	sp, #24
 800ab42:	af00      	add	r7, sp, #0
 800ab44:	60f8      	str	r0, [r7, #12]
 800ab46:	460b      	mov	r3, r1
 800ab48:	607a      	str	r2, [r7, #4]
 800ab4a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800ab4c:	7afb      	ldrb	r3, [r7, #11]
 800ab4e:	2b00      	cmp	r3, #0
 800ab50:	d16f      	bne.n	800ac32 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800ab52:	68fb      	ldr	r3, [r7, #12]
 800ab54:	3314      	adds	r3, #20
 800ab56:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800ab58:	68fb      	ldr	r3, [r7, #12]
 800ab5a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800ab5e:	2b02      	cmp	r3, #2
 800ab60:	d15a      	bne.n	800ac18 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800ab62:	693b      	ldr	r3, [r7, #16]
 800ab64:	689a      	ldr	r2, [r3, #8]
 800ab66:	693b      	ldr	r3, [r7, #16]
 800ab68:	68db      	ldr	r3, [r3, #12]
 800ab6a:	429a      	cmp	r2, r3
 800ab6c:	d914      	bls.n	800ab98 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800ab6e:	693b      	ldr	r3, [r7, #16]
 800ab70:	689a      	ldr	r2, [r3, #8]
 800ab72:	693b      	ldr	r3, [r7, #16]
 800ab74:	68db      	ldr	r3, [r3, #12]
 800ab76:	1ad2      	subs	r2, r2, r3
 800ab78:	693b      	ldr	r3, [r7, #16]
 800ab7a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800ab7c:	693b      	ldr	r3, [r7, #16]
 800ab7e:	689b      	ldr	r3, [r3, #8]
 800ab80:	461a      	mov	r2, r3
 800ab82:	6879      	ldr	r1, [r7, #4]
 800ab84:	68f8      	ldr	r0, [r7, #12]
 800ab86:	f001 fae6 	bl	800c156 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ab8a:	2300      	movs	r3, #0
 800ab8c:	2200      	movs	r2, #0
 800ab8e:	2100      	movs	r1, #0
 800ab90:	68f8      	ldr	r0, [r7, #12]
 800ab92:	f001 fef1 	bl	800c978 <USBD_LL_PrepareReceive>
 800ab96:	e03f      	b.n	800ac18 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800ab98:	693b      	ldr	r3, [r7, #16]
 800ab9a:	68da      	ldr	r2, [r3, #12]
 800ab9c:	693b      	ldr	r3, [r7, #16]
 800ab9e:	689b      	ldr	r3, [r3, #8]
 800aba0:	429a      	cmp	r2, r3
 800aba2:	d11c      	bne.n	800abde <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800aba4:	693b      	ldr	r3, [r7, #16]
 800aba6:	685a      	ldr	r2, [r3, #4]
 800aba8:	693b      	ldr	r3, [r7, #16]
 800abaa:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800abac:	429a      	cmp	r2, r3
 800abae:	d316      	bcc.n	800abde <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800abb0:	693b      	ldr	r3, [r7, #16]
 800abb2:	685a      	ldr	r2, [r3, #4]
 800abb4:	68fb      	ldr	r3, [r7, #12]
 800abb6:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800abba:	429a      	cmp	r2, r3
 800abbc:	d20f      	bcs.n	800abde <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800abbe:	2200      	movs	r2, #0
 800abc0:	2100      	movs	r1, #0
 800abc2:	68f8      	ldr	r0, [r7, #12]
 800abc4:	f001 fac7 	bl	800c156 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800abc8:	68fb      	ldr	r3, [r7, #12]
 800abca:	2200      	movs	r2, #0
 800abcc:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800abd0:	2300      	movs	r3, #0
 800abd2:	2200      	movs	r2, #0
 800abd4:	2100      	movs	r1, #0
 800abd6:	68f8      	ldr	r0, [r7, #12]
 800abd8:	f001 fece 	bl	800c978 <USBD_LL_PrepareReceive>
 800abdc:	e01c      	b.n	800ac18 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800abde:	68fb      	ldr	r3, [r7, #12]
 800abe0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800abe4:	b2db      	uxtb	r3, r3
 800abe6:	2b03      	cmp	r3, #3
 800abe8:	d10f      	bne.n	800ac0a <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800abea:	68fb      	ldr	r3, [r7, #12]
 800abec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800abf0:	68db      	ldr	r3, [r3, #12]
 800abf2:	2b00      	cmp	r3, #0
 800abf4:	d009      	beq.n	800ac0a <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800abf6:	68fb      	ldr	r3, [r7, #12]
 800abf8:	2200      	movs	r2, #0
 800abfa:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800abfe:	68fb      	ldr	r3, [r7, #12]
 800ac00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ac04:	68db      	ldr	r3, [r3, #12]
 800ac06:	68f8      	ldr	r0, [r7, #12]
 800ac08:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800ac0a:	2180      	movs	r1, #128	@ 0x80
 800ac0c:	68f8      	ldr	r0, [r7, #12]
 800ac0e:	f001 fe09 	bl	800c824 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800ac12:	68f8      	ldr	r0, [r7, #12]
 800ac14:	f001 fad4 	bl	800c1c0 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800ac18:	68fb      	ldr	r3, [r7, #12]
 800ac1a:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	d03a      	beq.n	800ac98 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800ac22:	68f8      	ldr	r0, [r7, #12]
 800ac24:	f7ff fe42 	bl	800a8ac <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800ac28:	68fb      	ldr	r3, [r7, #12]
 800ac2a:	2200      	movs	r2, #0
 800ac2c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800ac30:	e032      	b.n	800ac98 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800ac32:	7afb      	ldrb	r3, [r7, #11]
 800ac34:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800ac38:	b2db      	uxtb	r3, r3
 800ac3a:	4619      	mov	r1, r3
 800ac3c:	68f8      	ldr	r0, [r7, #12]
 800ac3e:	f000 f985 	bl	800af4c <USBD_CoreFindEP>
 800ac42:	4603      	mov	r3, r0
 800ac44:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ac46:	7dfb      	ldrb	r3, [r7, #23]
 800ac48:	2bff      	cmp	r3, #255	@ 0xff
 800ac4a:	d025      	beq.n	800ac98 <USBD_LL_DataInStage+0x15a>
 800ac4c:	7dfb      	ldrb	r3, [r7, #23]
 800ac4e:	2b00      	cmp	r3, #0
 800ac50:	d122      	bne.n	800ac98 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ac52:	68fb      	ldr	r3, [r7, #12]
 800ac54:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ac58:	b2db      	uxtb	r3, r3
 800ac5a:	2b03      	cmp	r3, #3
 800ac5c:	d11c      	bne.n	800ac98 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800ac5e:	7dfa      	ldrb	r2, [r7, #23]
 800ac60:	68fb      	ldr	r3, [r7, #12]
 800ac62:	32ae      	adds	r2, #174	@ 0xae
 800ac64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ac68:	695b      	ldr	r3, [r3, #20]
 800ac6a:	2b00      	cmp	r3, #0
 800ac6c:	d014      	beq.n	800ac98 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800ac6e:	7dfa      	ldrb	r2, [r7, #23]
 800ac70:	68fb      	ldr	r3, [r7, #12]
 800ac72:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800ac76:	7dfa      	ldrb	r2, [r7, #23]
 800ac78:	68fb      	ldr	r3, [r7, #12]
 800ac7a:	32ae      	adds	r2, #174	@ 0xae
 800ac7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ac80:	695b      	ldr	r3, [r3, #20]
 800ac82:	7afa      	ldrb	r2, [r7, #11]
 800ac84:	4611      	mov	r1, r2
 800ac86:	68f8      	ldr	r0, [r7, #12]
 800ac88:	4798      	blx	r3
 800ac8a:	4603      	mov	r3, r0
 800ac8c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800ac8e:	7dbb      	ldrb	r3, [r7, #22]
 800ac90:	2b00      	cmp	r3, #0
 800ac92:	d001      	beq.n	800ac98 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800ac94:	7dbb      	ldrb	r3, [r7, #22]
 800ac96:	e000      	b.n	800ac9a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800ac98:	2300      	movs	r3, #0
}
 800ac9a:	4618      	mov	r0, r3
 800ac9c:	3718      	adds	r7, #24
 800ac9e:	46bd      	mov	sp, r7
 800aca0:	bd80      	pop	{r7, pc}

0800aca2 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800aca2:	b580      	push	{r7, lr}
 800aca4:	b084      	sub	sp, #16
 800aca6:	af00      	add	r7, sp, #0
 800aca8:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800acaa:	2300      	movs	r3, #0
 800acac:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	2201      	movs	r2, #1
 800acb2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	2200      	movs	r2, #0
 800acba:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	2200      	movs	r2, #0
 800acc2:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	2200      	movs	r2, #0
 800acc8:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	2200      	movs	r2, #0
 800acd0:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800acda:	2b00      	cmp	r3, #0
 800acdc:	d014      	beq.n	800ad08 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ace4:	685b      	ldr	r3, [r3, #4]
 800ace6:	2b00      	cmp	r3, #0
 800ace8:	d00e      	beq.n	800ad08 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800acf0:	685b      	ldr	r3, [r3, #4]
 800acf2:	687a      	ldr	r2, [r7, #4]
 800acf4:	6852      	ldr	r2, [r2, #4]
 800acf6:	b2d2      	uxtb	r2, r2
 800acf8:	4611      	mov	r1, r2
 800acfa:	6878      	ldr	r0, [r7, #4]
 800acfc:	4798      	blx	r3
 800acfe:	4603      	mov	r3, r0
 800ad00:	2b00      	cmp	r3, #0
 800ad02:	d001      	beq.n	800ad08 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800ad04:	2303      	movs	r3, #3
 800ad06:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ad08:	2340      	movs	r3, #64	@ 0x40
 800ad0a:	2200      	movs	r2, #0
 800ad0c:	2100      	movs	r1, #0
 800ad0e:	6878      	ldr	r0, [r7, #4]
 800ad10:	f001 fd43 	bl	800c79a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	2201      	movs	r2, #1
 800ad18:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	2240      	movs	r2, #64	@ 0x40
 800ad20:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ad24:	2340      	movs	r3, #64	@ 0x40
 800ad26:	2200      	movs	r2, #0
 800ad28:	2180      	movs	r1, #128	@ 0x80
 800ad2a:	6878      	ldr	r0, [r7, #4]
 800ad2c:	f001 fd35 	bl	800c79a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	2201      	movs	r2, #1
 800ad34:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	2240      	movs	r2, #64	@ 0x40
 800ad3a:	621a      	str	r2, [r3, #32]

  return ret;
 800ad3c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad3e:	4618      	mov	r0, r3
 800ad40:	3710      	adds	r7, #16
 800ad42:	46bd      	mov	sp, r7
 800ad44:	bd80      	pop	{r7, pc}

0800ad46 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800ad46:	b480      	push	{r7}
 800ad48:	b083      	sub	sp, #12
 800ad4a:	af00      	add	r7, sp, #0
 800ad4c:	6078      	str	r0, [r7, #4]
 800ad4e:	460b      	mov	r3, r1
 800ad50:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	78fa      	ldrb	r2, [r7, #3]
 800ad56:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800ad58:	2300      	movs	r3, #0
}
 800ad5a:	4618      	mov	r0, r3
 800ad5c:	370c      	adds	r7, #12
 800ad5e:	46bd      	mov	sp, r7
 800ad60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad64:	4770      	bx	lr

0800ad66 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800ad66:	b480      	push	{r7}
 800ad68:	b083      	sub	sp, #12
 800ad6a:	af00      	add	r7, sp, #0
 800ad6c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ad74:	b2db      	uxtb	r3, r3
 800ad76:	2b04      	cmp	r3, #4
 800ad78:	d006      	beq.n	800ad88 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ad80:	b2da      	uxtb	r2, r3
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	2204      	movs	r2, #4
 800ad8c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800ad90:	2300      	movs	r3, #0
}
 800ad92:	4618      	mov	r0, r3
 800ad94:	370c      	adds	r7, #12
 800ad96:	46bd      	mov	sp, r7
 800ad98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad9c:	4770      	bx	lr

0800ad9e <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800ad9e:	b480      	push	{r7}
 800ada0:	b083      	sub	sp, #12
 800ada2:	af00      	add	r7, sp, #0
 800ada4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800adac:	b2db      	uxtb	r3, r3
 800adae:	2b04      	cmp	r3, #4
 800adb0:	d106      	bne.n	800adc0 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800adb8:	b2da      	uxtb	r2, r3
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800adc0:	2300      	movs	r3, #0
}
 800adc2:	4618      	mov	r0, r3
 800adc4:	370c      	adds	r7, #12
 800adc6:	46bd      	mov	sp, r7
 800adc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adcc:	4770      	bx	lr

0800adce <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800adce:	b580      	push	{r7, lr}
 800add0:	b082      	sub	sp, #8
 800add2:	af00      	add	r7, sp, #0
 800add4:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800addc:	b2db      	uxtb	r3, r3
 800adde:	2b03      	cmp	r3, #3
 800ade0:	d110      	bne.n	800ae04 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ade8:	2b00      	cmp	r3, #0
 800adea:	d00b      	beq.n	800ae04 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800adf2:	69db      	ldr	r3, [r3, #28]
 800adf4:	2b00      	cmp	r3, #0
 800adf6:	d005      	beq.n	800ae04 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800adfe:	69db      	ldr	r3, [r3, #28]
 800ae00:	6878      	ldr	r0, [r7, #4]
 800ae02:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800ae04:	2300      	movs	r3, #0
}
 800ae06:	4618      	mov	r0, r3
 800ae08:	3708      	adds	r7, #8
 800ae0a:	46bd      	mov	sp, r7
 800ae0c:	bd80      	pop	{r7, pc}

0800ae0e <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800ae0e:	b580      	push	{r7, lr}
 800ae10:	b082      	sub	sp, #8
 800ae12:	af00      	add	r7, sp, #0
 800ae14:	6078      	str	r0, [r7, #4]
 800ae16:	460b      	mov	r3, r1
 800ae18:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	32ae      	adds	r2, #174	@ 0xae
 800ae24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ae28:	2b00      	cmp	r3, #0
 800ae2a:	d101      	bne.n	800ae30 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800ae2c:	2303      	movs	r3, #3
 800ae2e:	e01c      	b.n	800ae6a <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ae36:	b2db      	uxtb	r3, r3
 800ae38:	2b03      	cmp	r3, #3
 800ae3a:	d115      	bne.n	800ae68 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	32ae      	adds	r2, #174	@ 0xae
 800ae46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ae4a:	6a1b      	ldr	r3, [r3, #32]
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	d00b      	beq.n	800ae68 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	32ae      	adds	r2, #174	@ 0xae
 800ae5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ae5e:	6a1b      	ldr	r3, [r3, #32]
 800ae60:	78fa      	ldrb	r2, [r7, #3]
 800ae62:	4611      	mov	r1, r2
 800ae64:	6878      	ldr	r0, [r7, #4]
 800ae66:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800ae68:	2300      	movs	r3, #0
}
 800ae6a:	4618      	mov	r0, r3
 800ae6c:	3708      	adds	r7, #8
 800ae6e:	46bd      	mov	sp, r7
 800ae70:	bd80      	pop	{r7, pc}

0800ae72 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800ae72:	b580      	push	{r7, lr}
 800ae74:	b082      	sub	sp, #8
 800ae76:	af00      	add	r7, sp, #0
 800ae78:	6078      	str	r0, [r7, #4]
 800ae7a:	460b      	mov	r3, r1
 800ae7c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	32ae      	adds	r2, #174	@ 0xae
 800ae88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ae8c:	2b00      	cmp	r3, #0
 800ae8e:	d101      	bne.n	800ae94 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800ae90:	2303      	movs	r3, #3
 800ae92:	e01c      	b.n	800aece <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ae9a:	b2db      	uxtb	r3, r3
 800ae9c:	2b03      	cmp	r3, #3
 800ae9e:	d115      	bne.n	800aecc <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	32ae      	adds	r2, #174	@ 0xae
 800aeaa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aeae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aeb0:	2b00      	cmp	r3, #0
 800aeb2:	d00b      	beq.n	800aecc <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	32ae      	adds	r2, #174	@ 0xae
 800aebe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aec2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aec4:	78fa      	ldrb	r2, [r7, #3]
 800aec6:	4611      	mov	r1, r2
 800aec8:	6878      	ldr	r0, [r7, #4]
 800aeca:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800aecc:	2300      	movs	r3, #0
}
 800aece:	4618      	mov	r0, r3
 800aed0:	3708      	adds	r7, #8
 800aed2:	46bd      	mov	sp, r7
 800aed4:	bd80      	pop	{r7, pc}

0800aed6 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800aed6:	b480      	push	{r7}
 800aed8:	b083      	sub	sp, #12
 800aeda:	af00      	add	r7, sp, #0
 800aedc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800aede:	2300      	movs	r3, #0
}
 800aee0:	4618      	mov	r0, r3
 800aee2:	370c      	adds	r7, #12
 800aee4:	46bd      	mov	sp, r7
 800aee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeea:	4770      	bx	lr

0800aeec <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800aeec:	b580      	push	{r7, lr}
 800aeee:	b084      	sub	sp, #16
 800aef0:	af00      	add	r7, sp, #0
 800aef2:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800aef4:	2300      	movs	r3, #0
 800aef6:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	2201      	movs	r2, #1
 800aefc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800af06:	2b00      	cmp	r3, #0
 800af08:	d00e      	beq.n	800af28 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800af10:	685b      	ldr	r3, [r3, #4]
 800af12:	687a      	ldr	r2, [r7, #4]
 800af14:	6852      	ldr	r2, [r2, #4]
 800af16:	b2d2      	uxtb	r2, r2
 800af18:	4611      	mov	r1, r2
 800af1a:	6878      	ldr	r0, [r7, #4]
 800af1c:	4798      	blx	r3
 800af1e:	4603      	mov	r3, r0
 800af20:	2b00      	cmp	r3, #0
 800af22:	d001      	beq.n	800af28 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800af24:	2303      	movs	r3, #3
 800af26:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800af28:	7bfb      	ldrb	r3, [r7, #15]
}
 800af2a:	4618      	mov	r0, r3
 800af2c:	3710      	adds	r7, #16
 800af2e:	46bd      	mov	sp, r7
 800af30:	bd80      	pop	{r7, pc}

0800af32 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800af32:	b480      	push	{r7}
 800af34:	b083      	sub	sp, #12
 800af36:	af00      	add	r7, sp, #0
 800af38:	6078      	str	r0, [r7, #4]
 800af3a:	460b      	mov	r3, r1
 800af3c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800af3e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800af40:	4618      	mov	r0, r3
 800af42:	370c      	adds	r7, #12
 800af44:	46bd      	mov	sp, r7
 800af46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af4a:	4770      	bx	lr

0800af4c <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800af4c:	b480      	push	{r7}
 800af4e:	b083      	sub	sp, #12
 800af50:	af00      	add	r7, sp, #0
 800af52:	6078      	str	r0, [r7, #4]
 800af54:	460b      	mov	r3, r1
 800af56:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800af58:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800af5a:	4618      	mov	r0, r3
 800af5c:	370c      	adds	r7, #12
 800af5e:	46bd      	mov	sp, r7
 800af60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af64:	4770      	bx	lr

0800af66 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800af66:	b580      	push	{r7, lr}
 800af68:	b086      	sub	sp, #24
 800af6a:	af00      	add	r7, sp, #0
 800af6c:	6078      	str	r0, [r7, #4]
 800af6e:	460b      	mov	r3, r1
 800af70:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800af7a:	2300      	movs	r3, #0
 800af7c:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800af7e:	68fb      	ldr	r3, [r7, #12]
 800af80:	885b      	ldrh	r3, [r3, #2]
 800af82:	b29b      	uxth	r3, r3
 800af84:	68fa      	ldr	r2, [r7, #12]
 800af86:	7812      	ldrb	r2, [r2, #0]
 800af88:	4293      	cmp	r3, r2
 800af8a:	d91f      	bls.n	800afcc <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800af8c:	68fb      	ldr	r3, [r7, #12]
 800af8e:	781b      	ldrb	r3, [r3, #0]
 800af90:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800af92:	e013      	b.n	800afbc <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800af94:	f107 030a 	add.w	r3, r7, #10
 800af98:	4619      	mov	r1, r3
 800af9a:	6978      	ldr	r0, [r7, #20]
 800af9c:	f000 f81b 	bl	800afd6 <USBD_GetNextDesc>
 800afa0:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800afa2:	697b      	ldr	r3, [r7, #20]
 800afa4:	785b      	ldrb	r3, [r3, #1]
 800afa6:	2b05      	cmp	r3, #5
 800afa8:	d108      	bne.n	800afbc <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800afaa:	697b      	ldr	r3, [r7, #20]
 800afac:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800afae:	693b      	ldr	r3, [r7, #16]
 800afb0:	789b      	ldrb	r3, [r3, #2]
 800afb2:	78fa      	ldrb	r2, [r7, #3]
 800afb4:	429a      	cmp	r2, r3
 800afb6:	d008      	beq.n	800afca <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800afb8:	2300      	movs	r3, #0
 800afba:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800afbc:	68fb      	ldr	r3, [r7, #12]
 800afbe:	885b      	ldrh	r3, [r3, #2]
 800afc0:	b29a      	uxth	r2, r3
 800afc2:	897b      	ldrh	r3, [r7, #10]
 800afc4:	429a      	cmp	r2, r3
 800afc6:	d8e5      	bhi.n	800af94 <USBD_GetEpDesc+0x2e>
 800afc8:	e000      	b.n	800afcc <USBD_GetEpDesc+0x66>
          break;
 800afca:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800afcc:	693b      	ldr	r3, [r7, #16]
}
 800afce:	4618      	mov	r0, r3
 800afd0:	3718      	adds	r7, #24
 800afd2:	46bd      	mov	sp, r7
 800afd4:	bd80      	pop	{r7, pc}

0800afd6 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800afd6:	b480      	push	{r7}
 800afd8:	b085      	sub	sp, #20
 800afda:	af00      	add	r7, sp, #0
 800afdc:	6078      	str	r0, [r7, #4]
 800afde:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800afe4:	683b      	ldr	r3, [r7, #0]
 800afe6:	881b      	ldrh	r3, [r3, #0]
 800afe8:	68fa      	ldr	r2, [r7, #12]
 800afea:	7812      	ldrb	r2, [r2, #0]
 800afec:	4413      	add	r3, r2
 800afee:	b29a      	uxth	r2, r3
 800aff0:	683b      	ldr	r3, [r7, #0]
 800aff2:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800aff4:	68fb      	ldr	r3, [r7, #12]
 800aff6:	781b      	ldrb	r3, [r3, #0]
 800aff8:	461a      	mov	r2, r3
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	4413      	add	r3, r2
 800affe:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800b000:	68fb      	ldr	r3, [r7, #12]
}
 800b002:	4618      	mov	r0, r3
 800b004:	3714      	adds	r7, #20
 800b006:	46bd      	mov	sp, r7
 800b008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b00c:	4770      	bx	lr

0800b00e <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800b00e:	b480      	push	{r7}
 800b010:	b087      	sub	sp, #28
 800b012:	af00      	add	r7, sp, #0
 800b014:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800b01a:	697b      	ldr	r3, [r7, #20]
 800b01c:	781b      	ldrb	r3, [r3, #0]
 800b01e:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800b020:	697b      	ldr	r3, [r7, #20]
 800b022:	3301      	adds	r3, #1
 800b024:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800b026:	697b      	ldr	r3, [r7, #20]
 800b028:	781b      	ldrb	r3, [r3, #0]
 800b02a:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800b02c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800b030:	021b      	lsls	r3, r3, #8
 800b032:	b21a      	sxth	r2, r3
 800b034:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800b038:	4313      	orrs	r3, r2
 800b03a:	b21b      	sxth	r3, r3
 800b03c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800b03e:	89fb      	ldrh	r3, [r7, #14]
}
 800b040:	4618      	mov	r0, r3
 800b042:	371c      	adds	r7, #28
 800b044:	46bd      	mov	sp, r7
 800b046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b04a:	4770      	bx	lr

0800b04c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b04c:	b580      	push	{r7, lr}
 800b04e:	b084      	sub	sp, #16
 800b050:	af00      	add	r7, sp, #0
 800b052:	6078      	str	r0, [r7, #4]
 800b054:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b056:	2300      	movs	r3, #0
 800b058:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b05a:	683b      	ldr	r3, [r7, #0]
 800b05c:	781b      	ldrb	r3, [r3, #0]
 800b05e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800b062:	2b40      	cmp	r3, #64	@ 0x40
 800b064:	d005      	beq.n	800b072 <USBD_StdDevReq+0x26>
 800b066:	2b40      	cmp	r3, #64	@ 0x40
 800b068:	d857      	bhi.n	800b11a <USBD_StdDevReq+0xce>
 800b06a:	2b00      	cmp	r3, #0
 800b06c:	d00f      	beq.n	800b08e <USBD_StdDevReq+0x42>
 800b06e:	2b20      	cmp	r3, #32
 800b070:	d153      	bne.n	800b11a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	32ae      	adds	r2, #174	@ 0xae
 800b07c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b080:	689b      	ldr	r3, [r3, #8]
 800b082:	6839      	ldr	r1, [r7, #0]
 800b084:	6878      	ldr	r0, [r7, #4]
 800b086:	4798      	blx	r3
 800b088:	4603      	mov	r3, r0
 800b08a:	73fb      	strb	r3, [r7, #15]
      break;
 800b08c:	e04a      	b.n	800b124 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b08e:	683b      	ldr	r3, [r7, #0]
 800b090:	785b      	ldrb	r3, [r3, #1]
 800b092:	2b09      	cmp	r3, #9
 800b094:	d83b      	bhi.n	800b10e <USBD_StdDevReq+0xc2>
 800b096:	a201      	add	r2, pc, #4	@ (adr r2, 800b09c <USBD_StdDevReq+0x50>)
 800b098:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b09c:	0800b0f1 	.word	0x0800b0f1
 800b0a0:	0800b105 	.word	0x0800b105
 800b0a4:	0800b10f 	.word	0x0800b10f
 800b0a8:	0800b0fb 	.word	0x0800b0fb
 800b0ac:	0800b10f 	.word	0x0800b10f
 800b0b0:	0800b0cf 	.word	0x0800b0cf
 800b0b4:	0800b0c5 	.word	0x0800b0c5
 800b0b8:	0800b10f 	.word	0x0800b10f
 800b0bc:	0800b0e7 	.word	0x0800b0e7
 800b0c0:	0800b0d9 	.word	0x0800b0d9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800b0c4:	6839      	ldr	r1, [r7, #0]
 800b0c6:	6878      	ldr	r0, [r7, #4]
 800b0c8:	f000 fa3c 	bl	800b544 <USBD_GetDescriptor>
          break;
 800b0cc:	e024      	b.n	800b118 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800b0ce:	6839      	ldr	r1, [r7, #0]
 800b0d0:	6878      	ldr	r0, [r7, #4]
 800b0d2:	f000 fba1 	bl	800b818 <USBD_SetAddress>
          break;
 800b0d6:	e01f      	b.n	800b118 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800b0d8:	6839      	ldr	r1, [r7, #0]
 800b0da:	6878      	ldr	r0, [r7, #4]
 800b0dc:	f000 fbe0 	bl	800b8a0 <USBD_SetConfig>
 800b0e0:	4603      	mov	r3, r0
 800b0e2:	73fb      	strb	r3, [r7, #15]
          break;
 800b0e4:	e018      	b.n	800b118 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800b0e6:	6839      	ldr	r1, [r7, #0]
 800b0e8:	6878      	ldr	r0, [r7, #4]
 800b0ea:	f000 fc83 	bl	800b9f4 <USBD_GetConfig>
          break;
 800b0ee:	e013      	b.n	800b118 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800b0f0:	6839      	ldr	r1, [r7, #0]
 800b0f2:	6878      	ldr	r0, [r7, #4]
 800b0f4:	f000 fcb4 	bl	800ba60 <USBD_GetStatus>
          break;
 800b0f8:	e00e      	b.n	800b118 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800b0fa:	6839      	ldr	r1, [r7, #0]
 800b0fc:	6878      	ldr	r0, [r7, #4]
 800b0fe:	f000 fce3 	bl	800bac8 <USBD_SetFeature>
          break;
 800b102:	e009      	b.n	800b118 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800b104:	6839      	ldr	r1, [r7, #0]
 800b106:	6878      	ldr	r0, [r7, #4]
 800b108:	f000 fd07 	bl	800bb1a <USBD_ClrFeature>
          break;
 800b10c:	e004      	b.n	800b118 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800b10e:	6839      	ldr	r1, [r7, #0]
 800b110:	6878      	ldr	r0, [r7, #4]
 800b112:	f000 fd5e 	bl	800bbd2 <USBD_CtlError>
          break;
 800b116:	bf00      	nop
      }
      break;
 800b118:	e004      	b.n	800b124 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800b11a:	6839      	ldr	r1, [r7, #0]
 800b11c:	6878      	ldr	r0, [r7, #4]
 800b11e:	f000 fd58 	bl	800bbd2 <USBD_CtlError>
      break;
 800b122:	bf00      	nop
  }

  return ret;
 800b124:	7bfb      	ldrb	r3, [r7, #15]
}
 800b126:	4618      	mov	r0, r3
 800b128:	3710      	adds	r7, #16
 800b12a:	46bd      	mov	sp, r7
 800b12c:	bd80      	pop	{r7, pc}
 800b12e:	bf00      	nop

0800b130 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b130:	b580      	push	{r7, lr}
 800b132:	b084      	sub	sp, #16
 800b134:	af00      	add	r7, sp, #0
 800b136:	6078      	str	r0, [r7, #4]
 800b138:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b13a:	2300      	movs	r3, #0
 800b13c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b13e:	683b      	ldr	r3, [r7, #0]
 800b140:	781b      	ldrb	r3, [r3, #0]
 800b142:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800b146:	2b40      	cmp	r3, #64	@ 0x40
 800b148:	d005      	beq.n	800b156 <USBD_StdItfReq+0x26>
 800b14a:	2b40      	cmp	r3, #64	@ 0x40
 800b14c:	d852      	bhi.n	800b1f4 <USBD_StdItfReq+0xc4>
 800b14e:	2b00      	cmp	r3, #0
 800b150:	d001      	beq.n	800b156 <USBD_StdItfReq+0x26>
 800b152:	2b20      	cmp	r3, #32
 800b154:	d14e      	bne.n	800b1f4 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b15c:	b2db      	uxtb	r3, r3
 800b15e:	3b01      	subs	r3, #1
 800b160:	2b02      	cmp	r3, #2
 800b162:	d840      	bhi.n	800b1e6 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800b164:	683b      	ldr	r3, [r7, #0]
 800b166:	889b      	ldrh	r3, [r3, #4]
 800b168:	b2db      	uxtb	r3, r3
 800b16a:	2b01      	cmp	r3, #1
 800b16c:	d836      	bhi.n	800b1dc <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800b16e:	683b      	ldr	r3, [r7, #0]
 800b170:	889b      	ldrh	r3, [r3, #4]
 800b172:	b2db      	uxtb	r3, r3
 800b174:	4619      	mov	r1, r3
 800b176:	6878      	ldr	r0, [r7, #4]
 800b178:	f7ff fedb 	bl	800af32 <USBD_CoreFindIF>
 800b17c:	4603      	mov	r3, r0
 800b17e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b180:	7bbb      	ldrb	r3, [r7, #14]
 800b182:	2bff      	cmp	r3, #255	@ 0xff
 800b184:	d01d      	beq.n	800b1c2 <USBD_StdItfReq+0x92>
 800b186:	7bbb      	ldrb	r3, [r7, #14]
 800b188:	2b00      	cmp	r3, #0
 800b18a:	d11a      	bne.n	800b1c2 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800b18c:	7bba      	ldrb	r2, [r7, #14]
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	32ae      	adds	r2, #174	@ 0xae
 800b192:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b196:	689b      	ldr	r3, [r3, #8]
 800b198:	2b00      	cmp	r3, #0
 800b19a:	d00f      	beq.n	800b1bc <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800b19c:	7bba      	ldrb	r2, [r7, #14]
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800b1a4:	7bba      	ldrb	r2, [r7, #14]
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	32ae      	adds	r2, #174	@ 0xae
 800b1aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b1ae:	689b      	ldr	r3, [r3, #8]
 800b1b0:	6839      	ldr	r1, [r7, #0]
 800b1b2:	6878      	ldr	r0, [r7, #4]
 800b1b4:	4798      	blx	r3
 800b1b6:	4603      	mov	r3, r0
 800b1b8:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800b1ba:	e004      	b.n	800b1c6 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800b1bc:	2303      	movs	r3, #3
 800b1be:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800b1c0:	e001      	b.n	800b1c6 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800b1c2:	2303      	movs	r3, #3
 800b1c4:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800b1c6:	683b      	ldr	r3, [r7, #0]
 800b1c8:	88db      	ldrh	r3, [r3, #6]
 800b1ca:	2b00      	cmp	r3, #0
 800b1cc:	d110      	bne.n	800b1f0 <USBD_StdItfReq+0xc0>
 800b1ce:	7bfb      	ldrb	r3, [r7, #15]
 800b1d0:	2b00      	cmp	r3, #0
 800b1d2:	d10d      	bne.n	800b1f0 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800b1d4:	6878      	ldr	r0, [r7, #4]
 800b1d6:	f000 ffe0 	bl	800c19a <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800b1da:	e009      	b.n	800b1f0 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800b1dc:	6839      	ldr	r1, [r7, #0]
 800b1de:	6878      	ldr	r0, [r7, #4]
 800b1e0:	f000 fcf7 	bl	800bbd2 <USBD_CtlError>
          break;
 800b1e4:	e004      	b.n	800b1f0 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800b1e6:	6839      	ldr	r1, [r7, #0]
 800b1e8:	6878      	ldr	r0, [r7, #4]
 800b1ea:	f000 fcf2 	bl	800bbd2 <USBD_CtlError>
          break;
 800b1ee:	e000      	b.n	800b1f2 <USBD_StdItfReq+0xc2>
          break;
 800b1f0:	bf00      	nop
      }
      break;
 800b1f2:	e004      	b.n	800b1fe <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800b1f4:	6839      	ldr	r1, [r7, #0]
 800b1f6:	6878      	ldr	r0, [r7, #4]
 800b1f8:	f000 fceb 	bl	800bbd2 <USBD_CtlError>
      break;
 800b1fc:	bf00      	nop
  }

  return ret;
 800b1fe:	7bfb      	ldrb	r3, [r7, #15]
}
 800b200:	4618      	mov	r0, r3
 800b202:	3710      	adds	r7, #16
 800b204:	46bd      	mov	sp, r7
 800b206:	bd80      	pop	{r7, pc}

0800b208 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b208:	b580      	push	{r7, lr}
 800b20a:	b084      	sub	sp, #16
 800b20c:	af00      	add	r7, sp, #0
 800b20e:	6078      	str	r0, [r7, #4]
 800b210:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800b212:	2300      	movs	r3, #0
 800b214:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800b216:	683b      	ldr	r3, [r7, #0]
 800b218:	889b      	ldrh	r3, [r3, #4]
 800b21a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b21c:	683b      	ldr	r3, [r7, #0]
 800b21e:	781b      	ldrb	r3, [r3, #0]
 800b220:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800b224:	2b40      	cmp	r3, #64	@ 0x40
 800b226:	d007      	beq.n	800b238 <USBD_StdEPReq+0x30>
 800b228:	2b40      	cmp	r3, #64	@ 0x40
 800b22a:	f200 817f 	bhi.w	800b52c <USBD_StdEPReq+0x324>
 800b22e:	2b00      	cmp	r3, #0
 800b230:	d02a      	beq.n	800b288 <USBD_StdEPReq+0x80>
 800b232:	2b20      	cmp	r3, #32
 800b234:	f040 817a 	bne.w	800b52c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800b238:	7bbb      	ldrb	r3, [r7, #14]
 800b23a:	4619      	mov	r1, r3
 800b23c:	6878      	ldr	r0, [r7, #4]
 800b23e:	f7ff fe85 	bl	800af4c <USBD_CoreFindEP>
 800b242:	4603      	mov	r3, r0
 800b244:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b246:	7b7b      	ldrb	r3, [r7, #13]
 800b248:	2bff      	cmp	r3, #255	@ 0xff
 800b24a:	f000 8174 	beq.w	800b536 <USBD_StdEPReq+0x32e>
 800b24e:	7b7b      	ldrb	r3, [r7, #13]
 800b250:	2b00      	cmp	r3, #0
 800b252:	f040 8170 	bne.w	800b536 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800b256:	7b7a      	ldrb	r2, [r7, #13]
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800b25e:	7b7a      	ldrb	r2, [r7, #13]
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	32ae      	adds	r2, #174	@ 0xae
 800b264:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b268:	689b      	ldr	r3, [r3, #8]
 800b26a:	2b00      	cmp	r3, #0
 800b26c:	f000 8163 	beq.w	800b536 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800b270:	7b7a      	ldrb	r2, [r7, #13]
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	32ae      	adds	r2, #174	@ 0xae
 800b276:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b27a:	689b      	ldr	r3, [r3, #8]
 800b27c:	6839      	ldr	r1, [r7, #0]
 800b27e:	6878      	ldr	r0, [r7, #4]
 800b280:	4798      	blx	r3
 800b282:	4603      	mov	r3, r0
 800b284:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800b286:	e156      	b.n	800b536 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b288:	683b      	ldr	r3, [r7, #0]
 800b28a:	785b      	ldrb	r3, [r3, #1]
 800b28c:	2b03      	cmp	r3, #3
 800b28e:	d008      	beq.n	800b2a2 <USBD_StdEPReq+0x9a>
 800b290:	2b03      	cmp	r3, #3
 800b292:	f300 8145 	bgt.w	800b520 <USBD_StdEPReq+0x318>
 800b296:	2b00      	cmp	r3, #0
 800b298:	f000 809b 	beq.w	800b3d2 <USBD_StdEPReq+0x1ca>
 800b29c:	2b01      	cmp	r3, #1
 800b29e:	d03c      	beq.n	800b31a <USBD_StdEPReq+0x112>
 800b2a0:	e13e      	b.n	800b520 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b2a8:	b2db      	uxtb	r3, r3
 800b2aa:	2b02      	cmp	r3, #2
 800b2ac:	d002      	beq.n	800b2b4 <USBD_StdEPReq+0xac>
 800b2ae:	2b03      	cmp	r3, #3
 800b2b0:	d016      	beq.n	800b2e0 <USBD_StdEPReq+0xd8>
 800b2b2:	e02c      	b.n	800b30e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b2b4:	7bbb      	ldrb	r3, [r7, #14]
 800b2b6:	2b00      	cmp	r3, #0
 800b2b8:	d00d      	beq.n	800b2d6 <USBD_StdEPReq+0xce>
 800b2ba:	7bbb      	ldrb	r3, [r7, #14]
 800b2bc:	2b80      	cmp	r3, #128	@ 0x80
 800b2be:	d00a      	beq.n	800b2d6 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800b2c0:	7bbb      	ldrb	r3, [r7, #14]
 800b2c2:	4619      	mov	r1, r3
 800b2c4:	6878      	ldr	r0, [r7, #4]
 800b2c6:	f001 faad 	bl	800c824 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800b2ca:	2180      	movs	r1, #128	@ 0x80
 800b2cc:	6878      	ldr	r0, [r7, #4]
 800b2ce:	f001 faa9 	bl	800c824 <USBD_LL_StallEP>
 800b2d2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b2d4:	e020      	b.n	800b318 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800b2d6:	6839      	ldr	r1, [r7, #0]
 800b2d8:	6878      	ldr	r0, [r7, #4]
 800b2da:	f000 fc7a 	bl	800bbd2 <USBD_CtlError>
              break;
 800b2de:	e01b      	b.n	800b318 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b2e0:	683b      	ldr	r3, [r7, #0]
 800b2e2:	885b      	ldrh	r3, [r3, #2]
 800b2e4:	2b00      	cmp	r3, #0
 800b2e6:	d10e      	bne.n	800b306 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800b2e8:	7bbb      	ldrb	r3, [r7, #14]
 800b2ea:	2b00      	cmp	r3, #0
 800b2ec:	d00b      	beq.n	800b306 <USBD_StdEPReq+0xfe>
 800b2ee:	7bbb      	ldrb	r3, [r7, #14]
 800b2f0:	2b80      	cmp	r3, #128	@ 0x80
 800b2f2:	d008      	beq.n	800b306 <USBD_StdEPReq+0xfe>
 800b2f4:	683b      	ldr	r3, [r7, #0]
 800b2f6:	88db      	ldrh	r3, [r3, #6]
 800b2f8:	2b00      	cmp	r3, #0
 800b2fa:	d104      	bne.n	800b306 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800b2fc:	7bbb      	ldrb	r3, [r7, #14]
 800b2fe:	4619      	mov	r1, r3
 800b300:	6878      	ldr	r0, [r7, #4]
 800b302:	f001 fa8f 	bl	800c824 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800b306:	6878      	ldr	r0, [r7, #4]
 800b308:	f000 ff47 	bl	800c19a <USBD_CtlSendStatus>

              break;
 800b30c:	e004      	b.n	800b318 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800b30e:	6839      	ldr	r1, [r7, #0]
 800b310:	6878      	ldr	r0, [r7, #4]
 800b312:	f000 fc5e 	bl	800bbd2 <USBD_CtlError>
              break;
 800b316:	bf00      	nop
          }
          break;
 800b318:	e107      	b.n	800b52a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b320:	b2db      	uxtb	r3, r3
 800b322:	2b02      	cmp	r3, #2
 800b324:	d002      	beq.n	800b32c <USBD_StdEPReq+0x124>
 800b326:	2b03      	cmp	r3, #3
 800b328:	d016      	beq.n	800b358 <USBD_StdEPReq+0x150>
 800b32a:	e04b      	b.n	800b3c4 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b32c:	7bbb      	ldrb	r3, [r7, #14]
 800b32e:	2b00      	cmp	r3, #0
 800b330:	d00d      	beq.n	800b34e <USBD_StdEPReq+0x146>
 800b332:	7bbb      	ldrb	r3, [r7, #14]
 800b334:	2b80      	cmp	r3, #128	@ 0x80
 800b336:	d00a      	beq.n	800b34e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800b338:	7bbb      	ldrb	r3, [r7, #14]
 800b33a:	4619      	mov	r1, r3
 800b33c:	6878      	ldr	r0, [r7, #4]
 800b33e:	f001 fa71 	bl	800c824 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800b342:	2180      	movs	r1, #128	@ 0x80
 800b344:	6878      	ldr	r0, [r7, #4]
 800b346:	f001 fa6d 	bl	800c824 <USBD_LL_StallEP>
 800b34a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b34c:	e040      	b.n	800b3d0 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800b34e:	6839      	ldr	r1, [r7, #0]
 800b350:	6878      	ldr	r0, [r7, #4]
 800b352:	f000 fc3e 	bl	800bbd2 <USBD_CtlError>
              break;
 800b356:	e03b      	b.n	800b3d0 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b358:	683b      	ldr	r3, [r7, #0]
 800b35a:	885b      	ldrh	r3, [r3, #2]
 800b35c:	2b00      	cmp	r3, #0
 800b35e:	d136      	bne.n	800b3ce <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800b360:	7bbb      	ldrb	r3, [r7, #14]
 800b362:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b366:	2b00      	cmp	r3, #0
 800b368:	d004      	beq.n	800b374 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800b36a:	7bbb      	ldrb	r3, [r7, #14]
 800b36c:	4619      	mov	r1, r3
 800b36e:	6878      	ldr	r0, [r7, #4]
 800b370:	f001 fa77 	bl	800c862 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800b374:	6878      	ldr	r0, [r7, #4]
 800b376:	f000 ff10 	bl	800c19a <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800b37a:	7bbb      	ldrb	r3, [r7, #14]
 800b37c:	4619      	mov	r1, r3
 800b37e:	6878      	ldr	r0, [r7, #4]
 800b380:	f7ff fde4 	bl	800af4c <USBD_CoreFindEP>
 800b384:	4603      	mov	r3, r0
 800b386:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b388:	7b7b      	ldrb	r3, [r7, #13]
 800b38a:	2bff      	cmp	r3, #255	@ 0xff
 800b38c:	d01f      	beq.n	800b3ce <USBD_StdEPReq+0x1c6>
 800b38e:	7b7b      	ldrb	r3, [r7, #13]
 800b390:	2b00      	cmp	r3, #0
 800b392:	d11c      	bne.n	800b3ce <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800b394:	7b7a      	ldrb	r2, [r7, #13]
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800b39c:	7b7a      	ldrb	r2, [r7, #13]
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	32ae      	adds	r2, #174	@ 0xae
 800b3a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b3a6:	689b      	ldr	r3, [r3, #8]
 800b3a8:	2b00      	cmp	r3, #0
 800b3aa:	d010      	beq.n	800b3ce <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800b3ac:	7b7a      	ldrb	r2, [r7, #13]
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	32ae      	adds	r2, #174	@ 0xae
 800b3b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b3b6:	689b      	ldr	r3, [r3, #8]
 800b3b8:	6839      	ldr	r1, [r7, #0]
 800b3ba:	6878      	ldr	r0, [r7, #4]
 800b3bc:	4798      	blx	r3
 800b3be:	4603      	mov	r3, r0
 800b3c0:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800b3c2:	e004      	b.n	800b3ce <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800b3c4:	6839      	ldr	r1, [r7, #0]
 800b3c6:	6878      	ldr	r0, [r7, #4]
 800b3c8:	f000 fc03 	bl	800bbd2 <USBD_CtlError>
              break;
 800b3cc:	e000      	b.n	800b3d0 <USBD_StdEPReq+0x1c8>
              break;
 800b3ce:	bf00      	nop
          }
          break;
 800b3d0:	e0ab      	b.n	800b52a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b3d8:	b2db      	uxtb	r3, r3
 800b3da:	2b02      	cmp	r3, #2
 800b3dc:	d002      	beq.n	800b3e4 <USBD_StdEPReq+0x1dc>
 800b3de:	2b03      	cmp	r3, #3
 800b3e0:	d032      	beq.n	800b448 <USBD_StdEPReq+0x240>
 800b3e2:	e097      	b.n	800b514 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b3e4:	7bbb      	ldrb	r3, [r7, #14]
 800b3e6:	2b00      	cmp	r3, #0
 800b3e8:	d007      	beq.n	800b3fa <USBD_StdEPReq+0x1f2>
 800b3ea:	7bbb      	ldrb	r3, [r7, #14]
 800b3ec:	2b80      	cmp	r3, #128	@ 0x80
 800b3ee:	d004      	beq.n	800b3fa <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800b3f0:	6839      	ldr	r1, [r7, #0]
 800b3f2:	6878      	ldr	r0, [r7, #4]
 800b3f4:	f000 fbed 	bl	800bbd2 <USBD_CtlError>
                break;
 800b3f8:	e091      	b.n	800b51e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b3fa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b3fe:	2b00      	cmp	r3, #0
 800b400:	da0b      	bge.n	800b41a <USBD_StdEPReq+0x212>
 800b402:	7bbb      	ldrb	r3, [r7, #14]
 800b404:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b408:	4613      	mov	r3, r2
 800b40a:	009b      	lsls	r3, r3, #2
 800b40c:	4413      	add	r3, r2
 800b40e:	009b      	lsls	r3, r3, #2
 800b410:	3310      	adds	r3, #16
 800b412:	687a      	ldr	r2, [r7, #4]
 800b414:	4413      	add	r3, r2
 800b416:	3304      	adds	r3, #4
 800b418:	e00b      	b.n	800b432 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b41a:	7bbb      	ldrb	r3, [r7, #14]
 800b41c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b420:	4613      	mov	r3, r2
 800b422:	009b      	lsls	r3, r3, #2
 800b424:	4413      	add	r3, r2
 800b426:	009b      	lsls	r3, r3, #2
 800b428:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800b42c:	687a      	ldr	r2, [r7, #4]
 800b42e:	4413      	add	r3, r2
 800b430:	3304      	adds	r3, #4
 800b432:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800b434:	68bb      	ldr	r3, [r7, #8]
 800b436:	2200      	movs	r2, #0
 800b438:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b43a:	68bb      	ldr	r3, [r7, #8]
 800b43c:	2202      	movs	r2, #2
 800b43e:	4619      	mov	r1, r3
 800b440:	6878      	ldr	r0, [r7, #4]
 800b442:	f000 fe6d 	bl	800c120 <USBD_CtlSendData>
              break;
 800b446:	e06a      	b.n	800b51e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800b448:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b44c:	2b00      	cmp	r3, #0
 800b44e:	da11      	bge.n	800b474 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800b450:	7bbb      	ldrb	r3, [r7, #14]
 800b452:	f003 020f 	and.w	r2, r3, #15
 800b456:	6879      	ldr	r1, [r7, #4]
 800b458:	4613      	mov	r3, r2
 800b45a:	009b      	lsls	r3, r3, #2
 800b45c:	4413      	add	r3, r2
 800b45e:	009b      	lsls	r3, r3, #2
 800b460:	440b      	add	r3, r1
 800b462:	3324      	adds	r3, #36	@ 0x24
 800b464:	881b      	ldrh	r3, [r3, #0]
 800b466:	2b00      	cmp	r3, #0
 800b468:	d117      	bne.n	800b49a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800b46a:	6839      	ldr	r1, [r7, #0]
 800b46c:	6878      	ldr	r0, [r7, #4]
 800b46e:	f000 fbb0 	bl	800bbd2 <USBD_CtlError>
                  break;
 800b472:	e054      	b.n	800b51e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800b474:	7bbb      	ldrb	r3, [r7, #14]
 800b476:	f003 020f 	and.w	r2, r3, #15
 800b47a:	6879      	ldr	r1, [r7, #4]
 800b47c:	4613      	mov	r3, r2
 800b47e:	009b      	lsls	r3, r3, #2
 800b480:	4413      	add	r3, r2
 800b482:	009b      	lsls	r3, r3, #2
 800b484:	440b      	add	r3, r1
 800b486:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800b48a:	881b      	ldrh	r3, [r3, #0]
 800b48c:	2b00      	cmp	r3, #0
 800b48e:	d104      	bne.n	800b49a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800b490:	6839      	ldr	r1, [r7, #0]
 800b492:	6878      	ldr	r0, [r7, #4]
 800b494:	f000 fb9d 	bl	800bbd2 <USBD_CtlError>
                  break;
 800b498:	e041      	b.n	800b51e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b49a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b49e:	2b00      	cmp	r3, #0
 800b4a0:	da0b      	bge.n	800b4ba <USBD_StdEPReq+0x2b2>
 800b4a2:	7bbb      	ldrb	r3, [r7, #14]
 800b4a4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b4a8:	4613      	mov	r3, r2
 800b4aa:	009b      	lsls	r3, r3, #2
 800b4ac:	4413      	add	r3, r2
 800b4ae:	009b      	lsls	r3, r3, #2
 800b4b0:	3310      	adds	r3, #16
 800b4b2:	687a      	ldr	r2, [r7, #4]
 800b4b4:	4413      	add	r3, r2
 800b4b6:	3304      	adds	r3, #4
 800b4b8:	e00b      	b.n	800b4d2 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b4ba:	7bbb      	ldrb	r3, [r7, #14]
 800b4bc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b4c0:	4613      	mov	r3, r2
 800b4c2:	009b      	lsls	r3, r3, #2
 800b4c4:	4413      	add	r3, r2
 800b4c6:	009b      	lsls	r3, r3, #2
 800b4c8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800b4cc:	687a      	ldr	r2, [r7, #4]
 800b4ce:	4413      	add	r3, r2
 800b4d0:	3304      	adds	r3, #4
 800b4d2:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800b4d4:	7bbb      	ldrb	r3, [r7, #14]
 800b4d6:	2b00      	cmp	r3, #0
 800b4d8:	d002      	beq.n	800b4e0 <USBD_StdEPReq+0x2d8>
 800b4da:	7bbb      	ldrb	r3, [r7, #14]
 800b4dc:	2b80      	cmp	r3, #128	@ 0x80
 800b4de:	d103      	bne.n	800b4e8 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800b4e0:	68bb      	ldr	r3, [r7, #8]
 800b4e2:	2200      	movs	r2, #0
 800b4e4:	601a      	str	r2, [r3, #0]
 800b4e6:	e00e      	b.n	800b506 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800b4e8:	7bbb      	ldrb	r3, [r7, #14]
 800b4ea:	4619      	mov	r1, r3
 800b4ec:	6878      	ldr	r0, [r7, #4]
 800b4ee:	f001 f9d7 	bl	800c8a0 <USBD_LL_IsStallEP>
 800b4f2:	4603      	mov	r3, r0
 800b4f4:	2b00      	cmp	r3, #0
 800b4f6:	d003      	beq.n	800b500 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800b4f8:	68bb      	ldr	r3, [r7, #8]
 800b4fa:	2201      	movs	r2, #1
 800b4fc:	601a      	str	r2, [r3, #0]
 800b4fe:	e002      	b.n	800b506 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800b500:	68bb      	ldr	r3, [r7, #8]
 800b502:	2200      	movs	r2, #0
 800b504:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b506:	68bb      	ldr	r3, [r7, #8]
 800b508:	2202      	movs	r2, #2
 800b50a:	4619      	mov	r1, r3
 800b50c:	6878      	ldr	r0, [r7, #4]
 800b50e:	f000 fe07 	bl	800c120 <USBD_CtlSendData>
              break;
 800b512:	e004      	b.n	800b51e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800b514:	6839      	ldr	r1, [r7, #0]
 800b516:	6878      	ldr	r0, [r7, #4]
 800b518:	f000 fb5b 	bl	800bbd2 <USBD_CtlError>
              break;
 800b51c:	bf00      	nop
          }
          break;
 800b51e:	e004      	b.n	800b52a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800b520:	6839      	ldr	r1, [r7, #0]
 800b522:	6878      	ldr	r0, [r7, #4]
 800b524:	f000 fb55 	bl	800bbd2 <USBD_CtlError>
          break;
 800b528:	bf00      	nop
      }
      break;
 800b52a:	e005      	b.n	800b538 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800b52c:	6839      	ldr	r1, [r7, #0]
 800b52e:	6878      	ldr	r0, [r7, #4]
 800b530:	f000 fb4f 	bl	800bbd2 <USBD_CtlError>
      break;
 800b534:	e000      	b.n	800b538 <USBD_StdEPReq+0x330>
      break;
 800b536:	bf00      	nop
  }

  return ret;
 800b538:	7bfb      	ldrb	r3, [r7, #15]
}
 800b53a:	4618      	mov	r0, r3
 800b53c:	3710      	adds	r7, #16
 800b53e:	46bd      	mov	sp, r7
 800b540:	bd80      	pop	{r7, pc}
	...

0800b544 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b544:	b580      	push	{r7, lr}
 800b546:	b084      	sub	sp, #16
 800b548:	af00      	add	r7, sp, #0
 800b54a:	6078      	str	r0, [r7, #4]
 800b54c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b54e:	2300      	movs	r3, #0
 800b550:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800b552:	2300      	movs	r3, #0
 800b554:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800b556:	2300      	movs	r3, #0
 800b558:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800b55a:	683b      	ldr	r3, [r7, #0]
 800b55c:	885b      	ldrh	r3, [r3, #2]
 800b55e:	0a1b      	lsrs	r3, r3, #8
 800b560:	b29b      	uxth	r3, r3
 800b562:	3b01      	subs	r3, #1
 800b564:	2b06      	cmp	r3, #6
 800b566:	f200 8128 	bhi.w	800b7ba <USBD_GetDescriptor+0x276>
 800b56a:	a201      	add	r2, pc, #4	@ (adr r2, 800b570 <USBD_GetDescriptor+0x2c>)
 800b56c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b570:	0800b58d 	.word	0x0800b58d
 800b574:	0800b5a5 	.word	0x0800b5a5
 800b578:	0800b5e5 	.word	0x0800b5e5
 800b57c:	0800b7bb 	.word	0x0800b7bb
 800b580:	0800b7bb 	.word	0x0800b7bb
 800b584:	0800b75b 	.word	0x0800b75b
 800b588:	0800b787 	.word	0x0800b787
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b592:	681b      	ldr	r3, [r3, #0]
 800b594:	687a      	ldr	r2, [r7, #4]
 800b596:	7c12      	ldrb	r2, [r2, #16]
 800b598:	f107 0108 	add.w	r1, r7, #8
 800b59c:	4610      	mov	r0, r2
 800b59e:	4798      	blx	r3
 800b5a0:	60f8      	str	r0, [r7, #12]
      break;
 800b5a2:	e112      	b.n	800b7ca <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	7c1b      	ldrb	r3, [r3, #16]
 800b5a8:	2b00      	cmp	r3, #0
 800b5aa:	d10d      	bne.n	800b5c8 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b5b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b5b4:	f107 0208 	add.w	r2, r7, #8
 800b5b8:	4610      	mov	r0, r2
 800b5ba:	4798      	blx	r3
 800b5bc:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b5be:	68fb      	ldr	r3, [r7, #12]
 800b5c0:	3301      	adds	r3, #1
 800b5c2:	2202      	movs	r2, #2
 800b5c4:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800b5c6:	e100      	b.n	800b7ca <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b5ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b5d0:	f107 0208 	add.w	r2, r7, #8
 800b5d4:	4610      	mov	r0, r2
 800b5d6:	4798      	blx	r3
 800b5d8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b5da:	68fb      	ldr	r3, [r7, #12]
 800b5dc:	3301      	adds	r3, #1
 800b5de:	2202      	movs	r2, #2
 800b5e0:	701a      	strb	r2, [r3, #0]
      break;
 800b5e2:	e0f2      	b.n	800b7ca <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800b5e4:	683b      	ldr	r3, [r7, #0]
 800b5e6:	885b      	ldrh	r3, [r3, #2]
 800b5e8:	b2db      	uxtb	r3, r3
 800b5ea:	2b05      	cmp	r3, #5
 800b5ec:	f200 80ac 	bhi.w	800b748 <USBD_GetDescriptor+0x204>
 800b5f0:	a201      	add	r2, pc, #4	@ (adr r2, 800b5f8 <USBD_GetDescriptor+0xb4>)
 800b5f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b5f6:	bf00      	nop
 800b5f8:	0800b611 	.word	0x0800b611
 800b5fc:	0800b645 	.word	0x0800b645
 800b600:	0800b679 	.word	0x0800b679
 800b604:	0800b6ad 	.word	0x0800b6ad
 800b608:	0800b6e1 	.word	0x0800b6e1
 800b60c:	0800b715 	.word	0x0800b715
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b616:	685b      	ldr	r3, [r3, #4]
 800b618:	2b00      	cmp	r3, #0
 800b61a:	d00b      	beq.n	800b634 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b622:	685b      	ldr	r3, [r3, #4]
 800b624:	687a      	ldr	r2, [r7, #4]
 800b626:	7c12      	ldrb	r2, [r2, #16]
 800b628:	f107 0108 	add.w	r1, r7, #8
 800b62c:	4610      	mov	r0, r2
 800b62e:	4798      	blx	r3
 800b630:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b632:	e091      	b.n	800b758 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b634:	6839      	ldr	r1, [r7, #0]
 800b636:	6878      	ldr	r0, [r7, #4]
 800b638:	f000 facb 	bl	800bbd2 <USBD_CtlError>
            err++;
 800b63c:	7afb      	ldrb	r3, [r7, #11]
 800b63e:	3301      	adds	r3, #1
 800b640:	72fb      	strb	r3, [r7, #11]
          break;
 800b642:	e089      	b.n	800b758 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b64a:	689b      	ldr	r3, [r3, #8]
 800b64c:	2b00      	cmp	r3, #0
 800b64e:	d00b      	beq.n	800b668 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b656:	689b      	ldr	r3, [r3, #8]
 800b658:	687a      	ldr	r2, [r7, #4]
 800b65a:	7c12      	ldrb	r2, [r2, #16]
 800b65c:	f107 0108 	add.w	r1, r7, #8
 800b660:	4610      	mov	r0, r2
 800b662:	4798      	blx	r3
 800b664:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b666:	e077      	b.n	800b758 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b668:	6839      	ldr	r1, [r7, #0]
 800b66a:	6878      	ldr	r0, [r7, #4]
 800b66c:	f000 fab1 	bl	800bbd2 <USBD_CtlError>
            err++;
 800b670:	7afb      	ldrb	r3, [r7, #11]
 800b672:	3301      	adds	r3, #1
 800b674:	72fb      	strb	r3, [r7, #11]
          break;
 800b676:	e06f      	b.n	800b758 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b67e:	68db      	ldr	r3, [r3, #12]
 800b680:	2b00      	cmp	r3, #0
 800b682:	d00b      	beq.n	800b69c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b68a:	68db      	ldr	r3, [r3, #12]
 800b68c:	687a      	ldr	r2, [r7, #4]
 800b68e:	7c12      	ldrb	r2, [r2, #16]
 800b690:	f107 0108 	add.w	r1, r7, #8
 800b694:	4610      	mov	r0, r2
 800b696:	4798      	blx	r3
 800b698:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b69a:	e05d      	b.n	800b758 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b69c:	6839      	ldr	r1, [r7, #0]
 800b69e:	6878      	ldr	r0, [r7, #4]
 800b6a0:	f000 fa97 	bl	800bbd2 <USBD_CtlError>
            err++;
 800b6a4:	7afb      	ldrb	r3, [r7, #11]
 800b6a6:	3301      	adds	r3, #1
 800b6a8:	72fb      	strb	r3, [r7, #11]
          break;
 800b6aa:	e055      	b.n	800b758 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b6b2:	691b      	ldr	r3, [r3, #16]
 800b6b4:	2b00      	cmp	r3, #0
 800b6b6:	d00b      	beq.n	800b6d0 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b6be:	691b      	ldr	r3, [r3, #16]
 800b6c0:	687a      	ldr	r2, [r7, #4]
 800b6c2:	7c12      	ldrb	r2, [r2, #16]
 800b6c4:	f107 0108 	add.w	r1, r7, #8
 800b6c8:	4610      	mov	r0, r2
 800b6ca:	4798      	blx	r3
 800b6cc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b6ce:	e043      	b.n	800b758 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b6d0:	6839      	ldr	r1, [r7, #0]
 800b6d2:	6878      	ldr	r0, [r7, #4]
 800b6d4:	f000 fa7d 	bl	800bbd2 <USBD_CtlError>
            err++;
 800b6d8:	7afb      	ldrb	r3, [r7, #11]
 800b6da:	3301      	adds	r3, #1
 800b6dc:	72fb      	strb	r3, [r7, #11]
          break;
 800b6de:	e03b      	b.n	800b758 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b6e6:	695b      	ldr	r3, [r3, #20]
 800b6e8:	2b00      	cmp	r3, #0
 800b6ea:	d00b      	beq.n	800b704 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b6f2:	695b      	ldr	r3, [r3, #20]
 800b6f4:	687a      	ldr	r2, [r7, #4]
 800b6f6:	7c12      	ldrb	r2, [r2, #16]
 800b6f8:	f107 0108 	add.w	r1, r7, #8
 800b6fc:	4610      	mov	r0, r2
 800b6fe:	4798      	blx	r3
 800b700:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b702:	e029      	b.n	800b758 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b704:	6839      	ldr	r1, [r7, #0]
 800b706:	6878      	ldr	r0, [r7, #4]
 800b708:	f000 fa63 	bl	800bbd2 <USBD_CtlError>
            err++;
 800b70c:	7afb      	ldrb	r3, [r7, #11]
 800b70e:	3301      	adds	r3, #1
 800b710:	72fb      	strb	r3, [r7, #11]
          break;
 800b712:	e021      	b.n	800b758 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b71a:	699b      	ldr	r3, [r3, #24]
 800b71c:	2b00      	cmp	r3, #0
 800b71e:	d00b      	beq.n	800b738 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b726:	699b      	ldr	r3, [r3, #24]
 800b728:	687a      	ldr	r2, [r7, #4]
 800b72a:	7c12      	ldrb	r2, [r2, #16]
 800b72c:	f107 0108 	add.w	r1, r7, #8
 800b730:	4610      	mov	r0, r2
 800b732:	4798      	blx	r3
 800b734:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b736:	e00f      	b.n	800b758 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b738:	6839      	ldr	r1, [r7, #0]
 800b73a:	6878      	ldr	r0, [r7, #4]
 800b73c:	f000 fa49 	bl	800bbd2 <USBD_CtlError>
            err++;
 800b740:	7afb      	ldrb	r3, [r7, #11]
 800b742:	3301      	adds	r3, #1
 800b744:	72fb      	strb	r3, [r7, #11]
          break;
 800b746:	e007      	b.n	800b758 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800b748:	6839      	ldr	r1, [r7, #0]
 800b74a:	6878      	ldr	r0, [r7, #4]
 800b74c:	f000 fa41 	bl	800bbd2 <USBD_CtlError>
          err++;
 800b750:	7afb      	ldrb	r3, [r7, #11]
 800b752:	3301      	adds	r3, #1
 800b754:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800b756:	bf00      	nop
      }
      break;
 800b758:	e037      	b.n	800b7ca <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	7c1b      	ldrb	r3, [r3, #16]
 800b75e:	2b00      	cmp	r3, #0
 800b760:	d109      	bne.n	800b776 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b768:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b76a:	f107 0208 	add.w	r2, r7, #8
 800b76e:	4610      	mov	r0, r2
 800b770:	4798      	blx	r3
 800b772:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b774:	e029      	b.n	800b7ca <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800b776:	6839      	ldr	r1, [r7, #0]
 800b778:	6878      	ldr	r0, [r7, #4]
 800b77a:	f000 fa2a 	bl	800bbd2 <USBD_CtlError>
        err++;
 800b77e:	7afb      	ldrb	r3, [r7, #11]
 800b780:	3301      	adds	r3, #1
 800b782:	72fb      	strb	r3, [r7, #11]
      break;
 800b784:	e021      	b.n	800b7ca <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	7c1b      	ldrb	r3, [r3, #16]
 800b78a:	2b00      	cmp	r3, #0
 800b78c:	d10d      	bne.n	800b7aa <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b794:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b796:	f107 0208 	add.w	r2, r7, #8
 800b79a:	4610      	mov	r0, r2
 800b79c:	4798      	blx	r3
 800b79e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800b7a0:	68fb      	ldr	r3, [r7, #12]
 800b7a2:	3301      	adds	r3, #1
 800b7a4:	2207      	movs	r2, #7
 800b7a6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b7a8:	e00f      	b.n	800b7ca <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800b7aa:	6839      	ldr	r1, [r7, #0]
 800b7ac:	6878      	ldr	r0, [r7, #4]
 800b7ae:	f000 fa10 	bl	800bbd2 <USBD_CtlError>
        err++;
 800b7b2:	7afb      	ldrb	r3, [r7, #11]
 800b7b4:	3301      	adds	r3, #1
 800b7b6:	72fb      	strb	r3, [r7, #11]
      break;
 800b7b8:	e007      	b.n	800b7ca <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800b7ba:	6839      	ldr	r1, [r7, #0]
 800b7bc:	6878      	ldr	r0, [r7, #4]
 800b7be:	f000 fa08 	bl	800bbd2 <USBD_CtlError>
      err++;
 800b7c2:	7afb      	ldrb	r3, [r7, #11]
 800b7c4:	3301      	adds	r3, #1
 800b7c6:	72fb      	strb	r3, [r7, #11]
      break;
 800b7c8:	bf00      	nop
  }

  if (err != 0U)
 800b7ca:	7afb      	ldrb	r3, [r7, #11]
 800b7cc:	2b00      	cmp	r3, #0
 800b7ce:	d11e      	bne.n	800b80e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800b7d0:	683b      	ldr	r3, [r7, #0]
 800b7d2:	88db      	ldrh	r3, [r3, #6]
 800b7d4:	2b00      	cmp	r3, #0
 800b7d6:	d016      	beq.n	800b806 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800b7d8:	893b      	ldrh	r3, [r7, #8]
 800b7da:	2b00      	cmp	r3, #0
 800b7dc:	d00e      	beq.n	800b7fc <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800b7de:	683b      	ldr	r3, [r7, #0]
 800b7e0:	88da      	ldrh	r2, [r3, #6]
 800b7e2:	893b      	ldrh	r3, [r7, #8]
 800b7e4:	4293      	cmp	r3, r2
 800b7e6:	bf28      	it	cs
 800b7e8:	4613      	movcs	r3, r2
 800b7ea:	b29b      	uxth	r3, r3
 800b7ec:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800b7ee:	893b      	ldrh	r3, [r7, #8]
 800b7f0:	461a      	mov	r2, r3
 800b7f2:	68f9      	ldr	r1, [r7, #12]
 800b7f4:	6878      	ldr	r0, [r7, #4]
 800b7f6:	f000 fc93 	bl	800c120 <USBD_CtlSendData>
 800b7fa:	e009      	b.n	800b810 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800b7fc:	6839      	ldr	r1, [r7, #0]
 800b7fe:	6878      	ldr	r0, [r7, #4]
 800b800:	f000 f9e7 	bl	800bbd2 <USBD_CtlError>
 800b804:	e004      	b.n	800b810 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800b806:	6878      	ldr	r0, [r7, #4]
 800b808:	f000 fcc7 	bl	800c19a <USBD_CtlSendStatus>
 800b80c:	e000      	b.n	800b810 <USBD_GetDescriptor+0x2cc>
    return;
 800b80e:	bf00      	nop
  }
}
 800b810:	3710      	adds	r7, #16
 800b812:	46bd      	mov	sp, r7
 800b814:	bd80      	pop	{r7, pc}
 800b816:	bf00      	nop

0800b818 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b818:	b580      	push	{r7, lr}
 800b81a:	b084      	sub	sp, #16
 800b81c:	af00      	add	r7, sp, #0
 800b81e:	6078      	str	r0, [r7, #4]
 800b820:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800b822:	683b      	ldr	r3, [r7, #0]
 800b824:	889b      	ldrh	r3, [r3, #4]
 800b826:	2b00      	cmp	r3, #0
 800b828:	d131      	bne.n	800b88e <USBD_SetAddress+0x76>
 800b82a:	683b      	ldr	r3, [r7, #0]
 800b82c:	88db      	ldrh	r3, [r3, #6]
 800b82e:	2b00      	cmp	r3, #0
 800b830:	d12d      	bne.n	800b88e <USBD_SetAddress+0x76>
 800b832:	683b      	ldr	r3, [r7, #0]
 800b834:	885b      	ldrh	r3, [r3, #2]
 800b836:	2b7f      	cmp	r3, #127	@ 0x7f
 800b838:	d829      	bhi.n	800b88e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800b83a:	683b      	ldr	r3, [r7, #0]
 800b83c:	885b      	ldrh	r3, [r3, #2]
 800b83e:	b2db      	uxtb	r3, r3
 800b840:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b844:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b84c:	b2db      	uxtb	r3, r3
 800b84e:	2b03      	cmp	r3, #3
 800b850:	d104      	bne.n	800b85c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800b852:	6839      	ldr	r1, [r7, #0]
 800b854:	6878      	ldr	r0, [r7, #4]
 800b856:	f000 f9bc 	bl	800bbd2 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b85a:	e01d      	b.n	800b898 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	7bfa      	ldrb	r2, [r7, #15]
 800b860:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800b864:	7bfb      	ldrb	r3, [r7, #15]
 800b866:	4619      	mov	r1, r3
 800b868:	6878      	ldr	r0, [r7, #4]
 800b86a:	f001 f845 	bl	800c8f8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800b86e:	6878      	ldr	r0, [r7, #4]
 800b870:	f000 fc93 	bl	800c19a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800b874:	7bfb      	ldrb	r3, [r7, #15]
 800b876:	2b00      	cmp	r3, #0
 800b878:	d004      	beq.n	800b884 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	2202      	movs	r2, #2
 800b87e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b882:	e009      	b.n	800b898 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	2201      	movs	r2, #1
 800b888:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b88c:	e004      	b.n	800b898 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800b88e:	6839      	ldr	r1, [r7, #0]
 800b890:	6878      	ldr	r0, [r7, #4]
 800b892:	f000 f99e 	bl	800bbd2 <USBD_CtlError>
  }
}
 800b896:	bf00      	nop
 800b898:	bf00      	nop
 800b89a:	3710      	adds	r7, #16
 800b89c:	46bd      	mov	sp, r7
 800b89e:	bd80      	pop	{r7, pc}

0800b8a0 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b8a0:	b580      	push	{r7, lr}
 800b8a2:	b084      	sub	sp, #16
 800b8a4:	af00      	add	r7, sp, #0
 800b8a6:	6078      	str	r0, [r7, #4]
 800b8a8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b8aa:	2300      	movs	r3, #0
 800b8ac:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800b8ae:	683b      	ldr	r3, [r7, #0]
 800b8b0:	885b      	ldrh	r3, [r3, #2]
 800b8b2:	b2da      	uxtb	r2, r3
 800b8b4:	4b4e      	ldr	r3, [pc, #312]	@ (800b9f0 <USBD_SetConfig+0x150>)
 800b8b6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800b8b8:	4b4d      	ldr	r3, [pc, #308]	@ (800b9f0 <USBD_SetConfig+0x150>)
 800b8ba:	781b      	ldrb	r3, [r3, #0]
 800b8bc:	2b01      	cmp	r3, #1
 800b8be:	d905      	bls.n	800b8cc <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800b8c0:	6839      	ldr	r1, [r7, #0]
 800b8c2:	6878      	ldr	r0, [r7, #4]
 800b8c4:	f000 f985 	bl	800bbd2 <USBD_CtlError>
    return USBD_FAIL;
 800b8c8:	2303      	movs	r3, #3
 800b8ca:	e08c      	b.n	800b9e6 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b8d2:	b2db      	uxtb	r3, r3
 800b8d4:	2b02      	cmp	r3, #2
 800b8d6:	d002      	beq.n	800b8de <USBD_SetConfig+0x3e>
 800b8d8:	2b03      	cmp	r3, #3
 800b8da:	d029      	beq.n	800b930 <USBD_SetConfig+0x90>
 800b8dc:	e075      	b.n	800b9ca <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800b8de:	4b44      	ldr	r3, [pc, #272]	@ (800b9f0 <USBD_SetConfig+0x150>)
 800b8e0:	781b      	ldrb	r3, [r3, #0]
 800b8e2:	2b00      	cmp	r3, #0
 800b8e4:	d020      	beq.n	800b928 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800b8e6:	4b42      	ldr	r3, [pc, #264]	@ (800b9f0 <USBD_SetConfig+0x150>)
 800b8e8:	781b      	ldrb	r3, [r3, #0]
 800b8ea:	461a      	mov	r2, r3
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b8f0:	4b3f      	ldr	r3, [pc, #252]	@ (800b9f0 <USBD_SetConfig+0x150>)
 800b8f2:	781b      	ldrb	r3, [r3, #0]
 800b8f4:	4619      	mov	r1, r3
 800b8f6:	6878      	ldr	r0, [r7, #4]
 800b8f8:	f7fe ffe3 	bl	800a8c2 <USBD_SetClassConfig>
 800b8fc:	4603      	mov	r3, r0
 800b8fe:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800b900:	7bfb      	ldrb	r3, [r7, #15]
 800b902:	2b00      	cmp	r3, #0
 800b904:	d008      	beq.n	800b918 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800b906:	6839      	ldr	r1, [r7, #0]
 800b908:	6878      	ldr	r0, [r7, #4]
 800b90a:	f000 f962 	bl	800bbd2 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	2202      	movs	r2, #2
 800b912:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b916:	e065      	b.n	800b9e4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800b918:	6878      	ldr	r0, [r7, #4]
 800b91a:	f000 fc3e 	bl	800c19a <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	2203      	movs	r2, #3
 800b922:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800b926:	e05d      	b.n	800b9e4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800b928:	6878      	ldr	r0, [r7, #4]
 800b92a:	f000 fc36 	bl	800c19a <USBD_CtlSendStatus>
      break;
 800b92e:	e059      	b.n	800b9e4 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800b930:	4b2f      	ldr	r3, [pc, #188]	@ (800b9f0 <USBD_SetConfig+0x150>)
 800b932:	781b      	ldrb	r3, [r3, #0]
 800b934:	2b00      	cmp	r3, #0
 800b936:	d112      	bne.n	800b95e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	2202      	movs	r2, #2
 800b93c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800b940:	4b2b      	ldr	r3, [pc, #172]	@ (800b9f0 <USBD_SetConfig+0x150>)
 800b942:	781b      	ldrb	r3, [r3, #0]
 800b944:	461a      	mov	r2, r3
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b94a:	4b29      	ldr	r3, [pc, #164]	@ (800b9f0 <USBD_SetConfig+0x150>)
 800b94c:	781b      	ldrb	r3, [r3, #0]
 800b94e:	4619      	mov	r1, r3
 800b950:	6878      	ldr	r0, [r7, #4]
 800b952:	f7fe ffd2 	bl	800a8fa <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800b956:	6878      	ldr	r0, [r7, #4]
 800b958:	f000 fc1f 	bl	800c19a <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b95c:	e042      	b.n	800b9e4 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800b95e:	4b24      	ldr	r3, [pc, #144]	@ (800b9f0 <USBD_SetConfig+0x150>)
 800b960:	781b      	ldrb	r3, [r3, #0]
 800b962:	461a      	mov	r2, r3
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	685b      	ldr	r3, [r3, #4]
 800b968:	429a      	cmp	r2, r3
 800b96a:	d02a      	beq.n	800b9c2 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	685b      	ldr	r3, [r3, #4]
 800b970:	b2db      	uxtb	r3, r3
 800b972:	4619      	mov	r1, r3
 800b974:	6878      	ldr	r0, [r7, #4]
 800b976:	f7fe ffc0 	bl	800a8fa <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800b97a:	4b1d      	ldr	r3, [pc, #116]	@ (800b9f0 <USBD_SetConfig+0x150>)
 800b97c:	781b      	ldrb	r3, [r3, #0]
 800b97e:	461a      	mov	r2, r3
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b984:	4b1a      	ldr	r3, [pc, #104]	@ (800b9f0 <USBD_SetConfig+0x150>)
 800b986:	781b      	ldrb	r3, [r3, #0]
 800b988:	4619      	mov	r1, r3
 800b98a:	6878      	ldr	r0, [r7, #4]
 800b98c:	f7fe ff99 	bl	800a8c2 <USBD_SetClassConfig>
 800b990:	4603      	mov	r3, r0
 800b992:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800b994:	7bfb      	ldrb	r3, [r7, #15]
 800b996:	2b00      	cmp	r3, #0
 800b998:	d00f      	beq.n	800b9ba <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800b99a:	6839      	ldr	r1, [r7, #0]
 800b99c:	6878      	ldr	r0, [r7, #4]
 800b99e:	f000 f918 	bl	800bbd2 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	685b      	ldr	r3, [r3, #4]
 800b9a6:	b2db      	uxtb	r3, r3
 800b9a8:	4619      	mov	r1, r3
 800b9aa:	6878      	ldr	r0, [r7, #4]
 800b9ac:	f7fe ffa5 	bl	800a8fa <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	2202      	movs	r2, #2
 800b9b4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800b9b8:	e014      	b.n	800b9e4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800b9ba:	6878      	ldr	r0, [r7, #4]
 800b9bc:	f000 fbed 	bl	800c19a <USBD_CtlSendStatus>
      break;
 800b9c0:	e010      	b.n	800b9e4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800b9c2:	6878      	ldr	r0, [r7, #4]
 800b9c4:	f000 fbe9 	bl	800c19a <USBD_CtlSendStatus>
      break;
 800b9c8:	e00c      	b.n	800b9e4 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800b9ca:	6839      	ldr	r1, [r7, #0]
 800b9cc:	6878      	ldr	r0, [r7, #4]
 800b9ce:	f000 f900 	bl	800bbd2 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b9d2:	4b07      	ldr	r3, [pc, #28]	@ (800b9f0 <USBD_SetConfig+0x150>)
 800b9d4:	781b      	ldrb	r3, [r3, #0]
 800b9d6:	4619      	mov	r1, r3
 800b9d8:	6878      	ldr	r0, [r7, #4]
 800b9da:	f7fe ff8e 	bl	800a8fa <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800b9de:	2303      	movs	r3, #3
 800b9e0:	73fb      	strb	r3, [r7, #15]
      break;
 800b9e2:	bf00      	nop
  }

  return ret;
 800b9e4:	7bfb      	ldrb	r3, [r7, #15]
}
 800b9e6:	4618      	mov	r0, r3
 800b9e8:	3710      	adds	r7, #16
 800b9ea:	46bd      	mov	sp, r7
 800b9ec:	bd80      	pop	{r7, pc}
 800b9ee:	bf00      	nop
 800b9f0:	200051a8 	.word	0x200051a8

0800b9f4 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b9f4:	b580      	push	{r7, lr}
 800b9f6:	b082      	sub	sp, #8
 800b9f8:	af00      	add	r7, sp, #0
 800b9fa:	6078      	str	r0, [r7, #4]
 800b9fc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800b9fe:	683b      	ldr	r3, [r7, #0]
 800ba00:	88db      	ldrh	r3, [r3, #6]
 800ba02:	2b01      	cmp	r3, #1
 800ba04:	d004      	beq.n	800ba10 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800ba06:	6839      	ldr	r1, [r7, #0]
 800ba08:	6878      	ldr	r0, [r7, #4]
 800ba0a:	f000 f8e2 	bl	800bbd2 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800ba0e:	e023      	b.n	800ba58 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ba16:	b2db      	uxtb	r3, r3
 800ba18:	2b02      	cmp	r3, #2
 800ba1a:	dc02      	bgt.n	800ba22 <USBD_GetConfig+0x2e>
 800ba1c:	2b00      	cmp	r3, #0
 800ba1e:	dc03      	bgt.n	800ba28 <USBD_GetConfig+0x34>
 800ba20:	e015      	b.n	800ba4e <USBD_GetConfig+0x5a>
 800ba22:	2b03      	cmp	r3, #3
 800ba24:	d00b      	beq.n	800ba3e <USBD_GetConfig+0x4a>
 800ba26:	e012      	b.n	800ba4e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	2200      	movs	r2, #0
 800ba2c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	3308      	adds	r3, #8
 800ba32:	2201      	movs	r2, #1
 800ba34:	4619      	mov	r1, r3
 800ba36:	6878      	ldr	r0, [r7, #4]
 800ba38:	f000 fb72 	bl	800c120 <USBD_CtlSendData>
        break;
 800ba3c:	e00c      	b.n	800ba58 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	3304      	adds	r3, #4
 800ba42:	2201      	movs	r2, #1
 800ba44:	4619      	mov	r1, r3
 800ba46:	6878      	ldr	r0, [r7, #4]
 800ba48:	f000 fb6a 	bl	800c120 <USBD_CtlSendData>
        break;
 800ba4c:	e004      	b.n	800ba58 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800ba4e:	6839      	ldr	r1, [r7, #0]
 800ba50:	6878      	ldr	r0, [r7, #4]
 800ba52:	f000 f8be 	bl	800bbd2 <USBD_CtlError>
        break;
 800ba56:	bf00      	nop
}
 800ba58:	bf00      	nop
 800ba5a:	3708      	adds	r7, #8
 800ba5c:	46bd      	mov	sp, r7
 800ba5e:	bd80      	pop	{r7, pc}

0800ba60 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ba60:	b580      	push	{r7, lr}
 800ba62:	b082      	sub	sp, #8
 800ba64:	af00      	add	r7, sp, #0
 800ba66:	6078      	str	r0, [r7, #4]
 800ba68:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ba70:	b2db      	uxtb	r3, r3
 800ba72:	3b01      	subs	r3, #1
 800ba74:	2b02      	cmp	r3, #2
 800ba76:	d81e      	bhi.n	800bab6 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800ba78:	683b      	ldr	r3, [r7, #0]
 800ba7a:	88db      	ldrh	r3, [r3, #6]
 800ba7c:	2b02      	cmp	r3, #2
 800ba7e:	d004      	beq.n	800ba8a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800ba80:	6839      	ldr	r1, [r7, #0]
 800ba82:	6878      	ldr	r0, [r7, #4]
 800ba84:	f000 f8a5 	bl	800bbd2 <USBD_CtlError>
        break;
 800ba88:	e01a      	b.n	800bac0 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	2201      	movs	r2, #1
 800ba8e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800ba96:	2b00      	cmp	r3, #0
 800ba98:	d005      	beq.n	800baa6 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	68db      	ldr	r3, [r3, #12]
 800ba9e:	f043 0202 	orr.w	r2, r3, #2
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	330c      	adds	r3, #12
 800baaa:	2202      	movs	r2, #2
 800baac:	4619      	mov	r1, r3
 800baae:	6878      	ldr	r0, [r7, #4]
 800bab0:	f000 fb36 	bl	800c120 <USBD_CtlSendData>
      break;
 800bab4:	e004      	b.n	800bac0 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800bab6:	6839      	ldr	r1, [r7, #0]
 800bab8:	6878      	ldr	r0, [r7, #4]
 800baba:	f000 f88a 	bl	800bbd2 <USBD_CtlError>
      break;
 800babe:	bf00      	nop
  }
}
 800bac0:	bf00      	nop
 800bac2:	3708      	adds	r7, #8
 800bac4:	46bd      	mov	sp, r7
 800bac6:	bd80      	pop	{r7, pc}

0800bac8 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bac8:	b580      	push	{r7, lr}
 800baca:	b082      	sub	sp, #8
 800bacc:	af00      	add	r7, sp, #0
 800bace:	6078      	str	r0, [r7, #4]
 800bad0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800bad2:	683b      	ldr	r3, [r7, #0]
 800bad4:	885b      	ldrh	r3, [r3, #2]
 800bad6:	2b01      	cmp	r3, #1
 800bad8:	d107      	bne.n	800baea <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	2201      	movs	r2, #1
 800bade:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800bae2:	6878      	ldr	r0, [r7, #4]
 800bae4:	f000 fb59 	bl	800c19a <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800bae8:	e013      	b.n	800bb12 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800baea:	683b      	ldr	r3, [r7, #0]
 800baec:	885b      	ldrh	r3, [r3, #2]
 800baee:	2b02      	cmp	r3, #2
 800baf0:	d10b      	bne.n	800bb0a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800baf2:	683b      	ldr	r3, [r7, #0]
 800baf4:	889b      	ldrh	r3, [r3, #4]
 800baf6:	0a1b      	lsrs	r3, r3, #8
 800baf8:	b29b      	uxth	r3, r3
 800bafa:	b2da      	uxtb	r2, r3
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800bb02:	6878      	ldr	r0, [r7, #4]
 800bb04:	f000 fb49 	bl	800c19a <USBD_CtlSendStatus>
}
 800bb08:	e003      	b.n	800bb12 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800bb0a:	6839      	ldr	r1, [r7, #0]
 800bb0c:	6878      	ldr	r0, [r7, #4]
 800bb0e:	f000 f860 	bl	800bbd2 <USBD_CtlError>
}
 800bb12:	bf00      	nop
 800bb14:	3708      	adds	r7, #8
 800bb16:	46bd      	mov	sp, r7
 800bb18:	bd80      	pop	{r7, pc}

0800bb1a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bb1a:	b580      	push	{r7, lr}
 800bb1c:	b082      	sub	sp, #8
 800bb1e:	af00      	add	r7, sp, #0
 800bb20:	6078      	str	r0, [r7, #4]
 800bb22:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bb2a:	b2db      	uxtb	r3, r3
 800bb2c:	3b01      	subs	r3, #1
 800bb2e:	2b02      	cmp	r3, #2
 800bb30:	d80b      	bhi.n	800bb4a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800bb32:	683b      	ldr	r3, [r7, #0]
 800bb34:	885b      	ldrh	r3, [r3, #2]
 800bb36:	2b01      	cmp	r3, #1
 800bb38:	d10c      	bne.n	800bb54 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	2200      	movs	r2, #0
 800bb3e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800bb42:	6878      	ldr	r0, [r7, #4]
 800bb44:	f000 fb29 	bl	800c19a <USBD_CtlSendStatus>
      }
      break;
 800bb48:	e004      	b.n	800bb54 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800bb4a:	6839      	ldr	r1, [r7, #0]
 800bb4c:	6878      	ldr	r0, [r7, #4]
 800bb4e:	f000 f840 	bl	800bbd2 <USBD_CtlError>
      break;
 800bb52:	e000      	b.n	800bb56 <USBD_ClrFeature+0x3c>
      break;
 800bb54:	bf00      	nop
  }
}
 800bb56:	bf00      	nop
 800bb58:	3708      	adds	r7, #8
 800bb5a:	46bd      	mov	sp, r7
 800bb5c:	bd80      	pop	{r7, pc}

0800bb5e <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800bb5e:	b580      	push	{r7, lr}
 800bb60:	b084      	sub	sp, #16
 800bb62:	af00      	add	r7, sp, #0
 800bb64:	6078      	str	r0, [r7, #4]
 800bb66:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800bb68:	683b      	ldr	r3, [r7, #0]
 800bb6a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800bb6c:	68fb      	ldr	r3, [r7, #12]
 800bb6e:	781a      	ldrb	r2, [r3, #0]
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800bb74:	68fb      	ldr	r3, [r7, #12]
 800bb76:	3301      	adds	r3, #1
 800bb78:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800bb7a:	68fb      	ldr	r3, [r7, #12]
 800bb7c:	781a      	ldrb	r2, [r3, #0]
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800bb82:	68fb      	ldr	r3, [r7, #12]
 800bb84:	3301      	adds	r3, #1
 800bb86:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800bb88:	68f8      	ldr	r0, [r7, #12]
 800bb8a:	f7ff fa40 	bl	800b00e <SWAPBYTE>
 800bb8e:	4603      	mov	r3, r0
 800bb90:	461a      	mov	r2, r3
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800bb96:	68fb      	ldr	r3, [r7, #12]
 800bb98:	3301      	adds	r3, #1
 800bb9a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800bb9c:	68fb      	ldr	r3, [r7, #12]
 800bb9e:	3301      	adds	r3, #1
 800bba0:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800bba2:	68f8      	ldr	r0, [r7, #12]
 800bba4:	f7ff fa33 	bl	800b00e <SWAPBYTE>
 800bba8:	4603      	mov	r3, r0
 800bbaa:	461a      	mov	r2, r3
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800bbb0:	68fb      	ldr	r3, [r7, #12]
 800bbb2:	3301      	adds	r3, #1
 800bbb4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800bbb6:	68fb      	ldr	r3, [r7, #12]
 800bbb8:	3301      	adds	r3, #1
 800bbba:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800bbbc:	68f8      	ldr	r0, [r7, #12]
 800bbbe:	f7ff fa26 	bl	800b00e <SWAPBYTE>
 800bbc2:	4603      	mov	r3, r0
 800bbc4:	461a      	mov	r2, r3
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	80da      	strh	r2, [r3, #6]
}
 800bbca:	bf00      	nop
 800bbcc:	3710      	adds	r7, #16
 800bbce:	46bd      	mov	sp, r7
 800bbd0:	bd80      	pop	{r7, pc}

0800bbd2 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bbd2:	b580      	push	{r7, lr}
 800bbd4:	b082      	sub	sp, #8
 800bbd6:	af00      	add	r7, sp, #0
 800bbd8:	6078      	str	r0, [r7, #4]
 800bbda:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800bbdc:	2180      	movs	r1, #128	@ 0x80
 800bbde:	6878      	ldr	r0, [r7, #4]
 800bbe0:	f000 fe20 	bl	800c824 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800bbe4:	2100      	movs	r1, #0
 800bbe6:	6878      	ldr	r0, [r7, #4]
 800bbe8:	f000 fe1c 	bl	800c824 <USBD_LL_StallEP>
}
 800bbec:	bf00      	nop
 800bbee:	3708      	adds	r7, #8
 800bbf0:	46bd      	mov	sp, r7
 800bbf2:	bd80      	pop	{r7, pc}

0800bbf4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800bbf4:	b580      	push	{r7, lr}
 800bbf6:	b086      	sub	sp, #24
 800bbf8:	af00      	add	r7, sp, #0
 800bbfa:	60f8      	str	r0, [r7, #12]
 800bbfc:	60b9      	str	r1, [r7, #8]
 800bbfe:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800bc00:	2300      	movs	r3, #0
 800bc02:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800bc04:	68fb      	ldr	r3, [r7, #12]
 800bc06:	2b00      	cmp	r3, #0
 800bc08:	d042      	beq.n	800bc90 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800bc0a:	68fb      	ldr	r3, [r7, #12]
 800bc0c:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800bc0e:	6938      	ldr	r0, [r7, #16]
 800bc10:	f000 f842 	bl	800bc98 <USBD_GetLen>
 800bc14:	4603      	mov	r3, r0
 800bc16:	3301      	adds	r3, #1
 800bc18:	005b      	lsls	r3, r3, #1
 800bc1a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800bc1e:	d808      	bhi.n	800bc32 <USBD_GetString+0x3e>
 800bc20:	6938      	ldr	r0, [r7, #16]
 800bc22:	f000 f839 	bl	800bc98 <USBD_GetLen>
 800bc26:	4603      	mov	r3, r0
 800bc28:	3301      	adds	r3, #1
 800bc2a:	b29b      	uxth	r3, r3
 800bc2c:	005b      	lsls	r3, r3, #1
 800bc2e:	b29a      	uxth	r2, r3
 800bc30:	e001      	b.n	800bc36 <USBD_GetString+0x42>
 800bc32:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800bc3a:	7dfb      	ldrb	r3, [r7, #23]
 800bc3c:	68ba      	ldr	r2, [r7, #8]
 800bc3e:	4413      	add	r3, r2
 800bc40:	687a      	ldr	r2, [r7, #4]
 800bc42:	7812      	ldrb	r2, [r2, #0]
 800bc44:	701a      	strb	r2, [r3, #0]
  idx++;
 800bc46:	7dfb      	ldrb	r3, [r7, #23]
 800bc48:	3301      	adds	r3, #1
 800bc4a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800bc4c:	7dfb      	ldrb	r3, [r7, #23]
 800bc4e:	68ba      	ldr	r2, [r7, #8]
 800bc50:	4413      	add	r3, r2
 800bc52:	2203      	movs	r2, #3
 800bc54:	701a      	strb	r2, [r3, #0]
  idx++;
 800bc56:	7dfb      	ldrb	r3, [r7, #23]
 800bc58:	3301      	adds	r3, #1
 800bc5a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800bc5c:	e013      	b.n	800bc86 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800bc5e:	7dfb      	ldrb	r3, [r7, #23]
 800bc60:	68ba      	ldr	r2, [r7, #8]
 800bc62:	4413      	add	r3, r2
 800bc64:	693a      	ldr	r2, [r7, #16]
 800bc66:	7812      	ldrb	r2, [r2, #0]
 800bc68:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800bc6a:	693b      	ldr	r3, [r7, #16]
 800bc6c:	3301      	adds	r3, #1
 800bc6e:	613b      	str	r3, [r7, #16]
    idx++;
 800bc70:	7dfb      	ldrb	r3, [r7, #23]
 800bc72:	3301      	adds	r3, #1
 800bc74:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800bc76:	7dfb      	ldrb	r3, [r7, #23]
 800bc78:	68ba      	ldr	r2, [r7, #8]
 800bc7a:	4413      	add	r3, r2
 800bc7c:	2200      	movs	r2, #0
 800bc7e:	701a      	strb	r2, [r3, #0]
    idx++;
 800bc80:	7dfb      	ldrb	r3, [r7, #23]
 800bc82:	3301      	adds	r3, #1
 800bc84:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800bc86:	693b      	ldr	r3, [r7, #16]
 800bc88:	781b      	ldrb	r3, [r3, #0]
 800bc8a:	2b00      	cmp	r3, #0
 800bc8c:	d1e7      	bne.n	800bc5e <USBD_GetString+0x6a>
 800bc8e:	e000      	b.n	800bc92 <USBD_GetString+0x9e>
    return;
 800bc90:	bf00      	nop
  }
}
 800bc92:	3718      	adds	r7, #24
 800bc94:	46bd      	mov	sp, r7
 800bc96:	bd80      	pop	{r7, pc}

0800bc98 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800bc98:	b480      	push	{r7}
 800bc9a:	b085      	sub	sp, #20
 800bc9c:	af00      	add	r7, sp, #0
 800bc9e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800bca0:	2300      	movs	r3, #0
 800bca2:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800bca8:	e005      	b.n	800bcb6 <USBD_GetLen+0x1e>
  {
    len++;
 800bcaa:	7bfb      	ldrb	r3, [r7, #15]
 800bcac:	3301      	adds	r3, #1
 800bcae:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800bcb0:	68bb      	ldr	r3, [r7, #8]
 800bcb2:	3301      	adds	r3, #1
 800bcb4:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800bcb6:	68bb      	ldr	r3, [r7, #8]
 800bcb8:	781b      	ldrb	r3, [r3, #0]
 800bcba:	2b00      	cmp	r3, #0
 800bcbc:	d1f5      	bne.n	800bcaa <USBD_GetLen+0x12>
  }

  return len;
 800bcbe:	7bfb      	ldrb	r3, [r7, #15]
}
 800bcc0:	4618      	mov	r0, r3
 800bcc2:	3714      	adds	r7, #20
 800bcc4:	46bd      	mov	sp, r7
 800bcc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcca:	4770      	bx	lr

0800bccc <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800bccc:	b580      	push	{r7, lr}
 800bcce:	b084      	sub	sp, #16
 800bcd0:	af00      	add	r7, sp, #0
 800bcd2:	6078      	str	r0, [r7, #4]
 800bcd4:	460b      	mov	r3, r1
 800bcd6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_HID_HandleTypeDef *hhid;

  hhid = (USBD_HID_HandleTypeDef *)USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 800bcd8:	2010      	movs	r0, #16
 800bcda:	f000 fe6f 	bl	800c9bc <USBD_static_malloc>
 800bcde:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 800bce0:	68fb      	ldr	r3, [r7, #12]
 800bce2:	2b00      	cmp	r3, #0
 800bce4:	d109      	bne.n	800bcfa <USBD_HID_Init+0x2e>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	32b0      	adds	r2, #176	@ 0xb0
 800bcf0:	2100      	movs	r1, #0
 800bcf2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800bcf6:	2302      	movs	r3, #2
 800bcf8:	e048      	b.n	800bd8c <USBD_HID_Init+0xc0>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hhid;
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	32b0      	adds	r2, #176	@ 0xb0
 800bd04:	68f9      	ldr	r1, [r7, #12]
 800bd06:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	32b0      	adds	r2, #176	@ 0xb0
 800bd14:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	7c1b      	ldrb	r3, [r3, #16]
 800bd22:	2b00      	cmp	r3, #0
 800bd24:	d10d      	bne.n	800bd42 <USBD_HID_Init+0x76>
  {
    pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = HID_HS_BINTERVAL;
 800bd26:	4b1b      	ldr	r3, [pc, #108]	@ (800bd94 <USBD_HID_Init+0xc8>)
 800bd28:	781b      	ldrb	r3, [r3, #0]
 800bd2a:	f003 020f 	and.w	r2, r3, #15
 800bd2e:	6879      	ldr	r1, [r7, #4]
 800bd30:	4613      	mov	r3, r2
 800bd32:	009b      	lsls	r3, r3, #2
 800bd34:	4413      	add	r3, r2
 800bd36:	009b      	lsls	r3, r3, #2
 800bd38:	440b      	add	r3, r1
 800bd3a:	3326      	adds	r3, #38	@ 0x26
 800bd3c:	2207      	movs	r2, #7
 800bd3e:	801a      	strh	r2, [r3, #0]
 800bd40:	e00c      	b.n	800bd5c <USBD_HID_Init+0x90>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = HID_FS_BINTERVAL;
 800bd42:	4b14      	ldr	r3, [pc, #80]	@ (800bd94 <USBD_HID_Init+0xc8>)
 800bd44:	781b      	ldrb	r3, [r3, #0]
 800bd46:	f003 020f 	and.w	r2, r3, #15
 800bd4a:	6879      	ldr	r1, [r7, #4]
 800bd4c:	4613      	mov	r3, r2
 800bd4e:	009b      	lsls	r3, r3, #2
 800bd50:	4413      	add	r3, r2
 800bd52:	009b      	lsls	r3, r3, #2
 800bd54:	440b      	add	r3, r1
 800bd56:	3326      	adds	r3, #38	@ 0x26
 800bd58:	220a      	movs	r2, #10
 800bd5a:	801a      	strh	r2, [r3, #0]
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, HIDInEpAdd, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 800bd5c:	4b0d      	ldr	r3, [pc, #52]	@ (800bd94 <USBD_HID_Init+0xc8>)
 800bd5e:	7819      	ldrb	r1, [r3, #0]
 800bd60:	2304      	movs	r3, #4
 800bd62:	2203      	movs	r2, #3
 800bd64:	6878      	ldr	r0, [r7, #4]
 800bd66:	f000 fd18 	bl	800c79a <USBD_LL_OpenEP>
  pdev->ep_in[HIDInEpAdd & 0xFU].is_used = 1U;
 800bd6a:	4b0a      	ldr	r3, [pc, #40]	@ (800bd94 <USBD_HID_Init+0xc8>)
 800bd6c:	781b      	ldrb	r3, [r3, #0]
 800bd6e:	f003 020f 	and.w	r2, r3, #15
 800bd72:	6879      	ldr	r1, [r7, #4]
 800bd74:	4613      	mov	r3, r2
 800bd76:	009b      	lsls	r3, r3, #2
 800bd78:	4413      	add	r3, r2
 800bd7a:	009b      	lsls	r3, r3, #2
 800bd7c:	440b      	add	r3, r1
 800bd7e:	3324      	adds	r3, #36	@ 0x24
 800bd80:	2201      	movs	r2, #1
 800bd82:	801a      	strh	r2, [r3, #0]

  hhid->state = USBD_HID_IDLE;
 800bd84:	68fb      	ldr	r3, [r7, #12]
 800bd86:	2200      	movs	r2, #0
 800bd88:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 800bd8a:	2300      	movs	r3, #0
}
 800bd8c:	4618      	mov	r0, r3
 800bd8e:	3710      	adds	r7, #16
 800bd90:	46bd      	mov	sp, r7
 800bd92:	bd80      	pop	{r7, pc}
 800bd94:	200000e2 	.word	0x200000e2

0800bd98 <USBD_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800bd98:	b580      	push	{r7, lr}
 800bd9a:	b082      	sub	sp, #8
 800bd9c:	af00      	add	r7, sp, #0
 800bd9e:	6078      	str	r0, [r7, #4]
 800bda0:	460b      	mov	r3, r1
 800bda2:	70fb      	strb	r3, [r7, #3]
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close HID EPs */
  (void)USBD_LL_CloseEP(pdev, HIDInEpAdd);
 800bda4:	4b1f      	ldr	r3, [pc, #124]	@ (800be24 <USBD_HID_DeInit+0x8c>)
 800bda6:	781b      	ldrb	r3, [r3, #0]
 800bda8:	4619      	mov	r1, r3
 800bdaa:	6878      	ldr	r0, [r7, #4]
 800bdac:	f000 fd1b 	bl	800c7e6 <USBD_LL_CloseEP>
  pdev->ep_in[HIDInEpAdd & 0xFU].is_used = 0U;
 800bdb0:	4b1c      	ldr	r3, [pc, #112]	@ (800be24 <USBD_HID_DeInit+0x8c>)
 800bdb2:	781b      	ldrb	r3, [r3, #0]
 800bdb4:	f003 020f 	and.w	r2, r3, #15
 800bdb8:	6879      	ldr	r1, [r7, #4]
 800bdba:	4613      	mov	r3, r2
 800bdbc:	009b      	lsls	r3, r3, #2
 800bdbe:	4413      	add	r3, r2
 800bdc0:	009b      	lsls	r3, r3, #2
 800bdc2:	440b      	add	r3, r1
 800bdc4:	3324      	adds	r3, #36	@ 0x24
 800bdc6:	2200      	movs	r2, #0
 800bdc8:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = 0U;
 800bdca:	4b16      	ldr	r3, [pc, #88]	@ (800be24 <USBD_HID_DeInit+0x8c>)
 800bdcc:	781b      	ldrb	r3, [r3, #0]
 800bdce:	f003 020f 	and.w	r2, r3, #15
 800bdd2:	6879      	ldr	r1, [r7, #4]
 800bdd4:	4613      	mov	r3, r2
 800bdd6:	009b      	lsls	r3, r3, #2
 800bdd8:	4413      	add	r3, r2
 800bdda:	009b      	lsls	r3, r3, #2
 800bddc:	440b      	add	r3, r1
 800bdde:	3326      	adds	r3, #38	@ 0x26
 800bde0:	2200      	movs	r2, #0
 800bde2:	801a      	strh	r2, [r3, #0]

  /* Free allocated memory */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	32b0      	adds	r2, #176	@ 0xb0
 800bdee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bdf2:	2b00      	cmp	r3, #0
 800bdf4:	d011      	beq.n	800be1a <USBD_HID_DeInit+0x82>
  {
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	32b0      	adds	r2, #176	@ 0xb0
 800be00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800be04:	4618      	mov	r0, r3
 800be06:	f000 fde7 	bl	800c9d8 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	32b0      	adds	r2, #176	@ 0xb0
 800be14:	2100      	movs	r1, #0
 800be16:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return (uint8_t)USBD_OK;
 800be1a:	2300      	movs	r3, #0
}
 800be1c:	4618      	mov	r0, r3
 800be1e:	3708      	adds	r7, #8
 800be20:	46bd      	mov	sp, r7
 800be22:	bd80      	pop	{r7, pc}
 800be24:	200000e2 	.word	0x200000e2

0800be28 <USBD_HID_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_HID_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800be28:	b580      	push	{r7, lr}
 800be2a:	b086      	sub	sp, #24
 800be2c:	af00      	add	r7, sp, #0
 800be2e:	6078      	str	r0, [r7, #4]
 800be30:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	32b0      	adds	r2, #176	@ 0xb0
 800be3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800be40:	60fb      	str	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 800be42:	2300      	movs	r3, #0
 800be44:	75fb      	strb	r3, [r7, #23]
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 800be46:	2300      	movs	r3, #0
 800be48:	817b      	strh	r3, [r7, #10]

  if (hhid == NULL)
 800be4a:	68fb      	ldr	r3, [r7, #12]
 800be4c:	2b00      	cmp	r3, #0
 800be4e:	d101      	bne.n	800be54 <USBD_HID_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 800be50:	2303      	movs	r3, #3
 800be52:	e0e8      	b.n	800c026 <USBD_HID_Setup+0x1fe>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800be54:	683b      	ldr	r3, [r7, #0]
 800be56:	781b      	ldrb	r3, [r3, #0]
 800be58:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800be5c:	2b00      	cmp	r3, #0
 800be5e:	d046      	beq.n	800beee <USBD_HID_Setup+0xc6>
 800be60:	2b20      	cmp	r3, #32
 800be62:	f040 80d8 	bne.w	800c016 <USBD_HID_Setup+0x1ee>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 800be66:	683b      	ldr	r3, [r7, #0]
 800be68:	785b      	ldrb	r3, [r3, #1]
 800be6a:	3b02      	subs	r3, #2
 800be6c:	2b09      	cmp	r3, #9
 800be6e:	d836      	bhi.n	800bede <USBD_HID_Setup+0xb6>
 800be70:	a201      	add	r2, pc, #4	@ (adr r2, 800be78 <USBD_HID_Setup+0x50>)
 800be72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be76:	bf00      	nop
 800be78:	0800becf 	.word	0x0800becf
 800be7c:	0800beaf 	.word	0x0800beaf
 800be80:	0800bedf 	.word	0x0800bedf
 800be84:	0800bedf 	.word	0x0800bedf
 800be88:	0800bedf 	.word	0x0800bedf
 800be8c:	0800bedf 	.word	0x0800bedf
 800be90:	0800bedf 	.word	0x0800bedf
 800be94:	0800bedf 	.word	0x0800bedf
 800be98:	0800bebd 	.word	0x0800bebd
 800be9c:	0800bea1 	.word	0x0800bea1
      {
        case USBD_HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 800bea0:	683b      	ldr	r3, [r7, #0]
 800bea2:	885b      	ldrh	r3, [r3, #2]
 800bea4:	b2db      	uxtb	r3, r3
 800bea6:	461a      	mov	r2, r3
 800bea8:	68fb      	ldr	r3, [r7, #12]
 800beaa:	601a      	str	r2, [r3, #0]
          break;
 800beac:	e01e      	b.n	800beec <USBD_HID_Setup+0xc4>

        case USBD_HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 800beae:	68fb      	ldr	r3, [r7, #12]
 800beb0:	2201      	movs	r2, #1
 800beb2:	4619      	mov	r1, r3
 800beb4:	6878      	ldr	r0, [r7, #4]
 800beb6:	f000 f933 	bl	800c120 <USBD_CtlSendData>
          break;
 800beba:	e017      	b.n	800beec <USBD_HID_Setup+0xc4>

        case USBD_HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 800bebc:	683b      	ldr	r3, [r7, #0]
 800bebe:	885b      	ldrh	r3, [r3, #2]
 800bec0:	0a1b      	lsrs	r3, r3, #8
 800bec2:	b29b      	uxth	r3, r3
 800bec4:	b2db      	uxtb	r3, r3
 800bec6:	461a      	mov	r2, r3
 800bec8:	68fb      	ldr	r3, [r7, #12]
 800beca:	605a      	str	r2, [r3, #4]
          break;
 800becc:	e00e      	b.n	800beec <USBD_HID_Setup+0xc4>

        case USBD_HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 800bece:	68fb      	ldr	r3, [r7, #12]
 800bed0:	3304      	adds	r3, #4
 800bed2:	2201      	movs	r2, #1
 800bed4:	4619      	mov	r1, r3
 800bed6:	6878      	ldr	r0, [r7, #4]
 800bed8:	f000 f922 	bl	800c120 <USBD_CtlSendData>
          break;
 800bedc:	e006      	b.n	800beec <USBD_HID_Setup+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800bede:	6839      	ldr	r1, [r7, #0]
 800bee0:	6878      	ldr	r0, [r7, #4]
 800bee2:	f7ff fe76 	bl	800bbd2 <USBD_CtlError>
          ret = USBD_FAIL;
 800bee6:	2303      	movs	r3, #3
 800bee8:	75fb      	strb	r3, [r7, #23]
          break;
 800beea:	bf00      	nop
      }
      break;
 800beec:	e09a      	b.n	800c024 <USBD_HID_Setup+0x1fc>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800beee:	683b      	ldr	r3, [r7, #0]
 800bef0:	785b      	ldrb	r3, [r3, #1]
 800bef2:	2b0b      	cmp	r3, #11
 800bef4:	f200 8086 	bhi.w	800c004 <USBD_HID_Setup+0x1dc>
 800bef8:	a201      	add	r2, pc, #4	@ (adr r2, 800bf00 <USBD_HID_Setup+0xd8>)
 800befa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800befe:	bf00      	nop
 800bf00:	0800bf31 	.word	0x0800bf31
 800bf04:	0800c013 	.word	0x0800c013
 800bf08:	0800c005 	.word	0x0800c005
 800bf0c:	0800c005 	.word	0x0800c005
 800bf10:	0800c005 	.word	0x0800c005
 800bf14:	0800c005 	.word	0x0800c005
 800bf18:	0800bf5b 	.word	0x0800bf5b
 800bf1c:	0800c005 	.word	0x0800c005
 800bf20:	0800c005 	.word	0x0800c005
 800bf24:	0800c005 	.word	0x0800c005
 800bf28:	0800bfb3 	.word	0x0800bfb3
 800bf2c:	0800bfdd 	.word	0x0800bfdd
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bf36:	b2db      	uxtb	r3, r3
 800bf38:	2b03      	cmp	r3, #3
 800bf3a:	d107      	bne.n	800bf4c <USBD_HID_Setup+0x124>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800bf3c:	f107 030a 	add.w	r3, r7, #10
 800bf40:	2202      	movs	r2, #2
 800bf42:	4619      	mov	r1, r3
 800bf44:	6878      	ldr	r0, [r7, #4]
 800bf46:	f000 f8eb 	bl	800c120 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800bf4a:	e063      	b.n	800c014 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 800bf4c:	6839      	ldr	r1, [r7, #0]
 800bf4e:	6878      	ldr	r0, [r7, #4]
 800bf50:	f7ff fe3f 	bl	800bbd2 <USBD_CtlError>
            ret = USBD_FAIL;
 800bf54:	2303      	movs	r3, #3
 800bf56:	75fb      	strb	r3, [r7, #23]
          break;
 800bf58:	e05c      	b.n	800c014 <USBD_HID_Setup+0x1ec>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == HID_REPORT_DESC)
 800bf5a:	683b      	ldr	r3, [r7, #0]
 800bf5c:	885b      	ldrh	r3, [r3, #2]
 800bf5e:	0a1b      	lsrs	r3, r3, #8
 800bf60:	b29b      	uxth	r3, r3
 800bf62:	2b22      	cmp	r3, #34	@ 0x22
 800bf64:	d108      	bne.n	800bf78 <USBD_HID_Setup+0x150>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 800bf66:	683b      	ldr	r3, [r7, #0]
 800bf68:	88db      	ldrh	r3, [r3, #6]
 800bf6a:	2b4a      	cmp	r3, #74	@ 0x4a
 800bf6c:	bf28      	it	cs
 800bf6e:	234a      	movcs	r3, #74	@ 0x4a
 800bf70:	82bb      	strh	r3, [r7, #20]
            pbuf = HID_MOUSE_ReportDesc;
 800bf72:	4b2f      	ldr	r3, [pc, #188]	@ (800c030 <USBD_HID_Setup+0x208>)
 800bf74:	613b      	str	r3, [r7, #16]
 800bf76:	e015      	b.n	800bfa4 <USBD_HID_Setup+0x17c>
          }
          else if ((req->wValue >> 8) == HID_DESCRIPTOR_TYPE)
 800bf78:	683b      	ldr	r3, [r7, #0]
 800bf7a:	885b      	ldrh	r3, [r3, #2]
 800bf7c:	0a1b      	lsrs	r3, r3, #8
 800bf7e:	b29b      	uxth	r3, r3
 800bf80:	2b21      	cmp	r3, #33	@ 0x21
 800bf82:	d108      	bne.n	800bf96 <USBD_HID_Setup+0x16e>
          {
            pbuf = USBD_HID_Desc;
 800bf84:	4b2b      	ldr	r3, [pc, #172]	@ (800c034 <USBD_HID_Setup+0x20c>)
 800bf86:	613b      	str	r3, [r7, #16]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 800bf88:	683b      	ldr	r3, [r7, #0]
 800bf8a:	88db      	ldrh	r3, [r3, #6]
 800bf8c:	2b09      	cmp	r3, #9
 800bf8e:	bf28      	it	cs
 800bf90:	2309      	movcs	r3, #9
 800bf92:	82bb      	strh	r3, [r7, #20]
 800bf94:	e006      	b.n	800bfa4 <USBD_HID_Setup+0x17c>
          }
          else
          {
            USBD_CtlError(pdev, req);
 800bf96:	6839      	ldr	r1, [r7, #0]
 800bf98:	6878      	ldr	r0, [r7, #4]
 800bf9a:	f7ff fe1a 	bl	800bbd2 <USBD_CtlError>
            ret = USBD_FAIL;
 800bf9e:	2303      	movs	r3, #3
 800bfa0:	75fb      	strb	r3, [r7, #23]
            break;
 800bfa2:	e037      	b.n	800c014 <USBD_HID_Setup+0x1ec>
          }
          (void)USBD_CtlSendData(pdev, pbuf, len);
 800bfa4:	8abb      	ldrh	r3, [r7, #20]
 800bfa6:	461a      	mov	r2, r3
 800bfa8:	6939      	ldr	r1, [r7, #16]
 800bfaa:	6878      	ldr	r0, [r7, #4]
 800bfac:	f000 f8b8 	bl	800c120 <USBD_CtlSendData>
          break;
 800bfb0:	e030      	b.n	800c014 <USBD_HID_Setup+0x1ec>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bfb8:	b2db      	uxtb	r3, r3
 800bfba:	2b03      	cmp	r3, #3
 800bfbc:	d107      	bne.n	800bfce <USBD_HID_Setup+0x1a6>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 800bfbe:	68fb      	ldr	r3, [r7, #12]
 800bfc0:	3308      	adds	r3, #8
 800bfc2:	2201      	movs	r2, #1
 800bfc4:	4619      	mov	r1, r3
 800bfc6:	6878      	ldr	r0, [r7, #4]
 800bfc8:	f000 f8aa 	bl	800c120 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800bfcc:	e022      	b.n	800c014 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 800bfce:	6839      	ldr	r1, [r7, #0]
 800bfd0:	6878      	ldr	r0, [r7, #4]
 800bfd2:	f7ff fdfe 	bl	800bbd2 <USBD_CtlError>
            ret = USBD_FAIL;
 800bfd6:	2303      	movs	r3, #3
 800bfd8:	75fb      	strb	r3, [r7, #23]
          break;
 800bfda:	e01b      	b.n	800c014 <USBD_HID_Setup+0x1ec>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bfe2:	b2db      	uxtb	r3, r3
 800bfe4:	2b03      	cmp	r3, #3
 800bfe6:	d106      	bne.n	800bff6 <USBD_HID_Setup+0x1ce>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 800bfe8:	683b      	ldr	r3, [r7, #0]
 800bfea:	885b      	ldrh	r3, [r3, #2]
 800bfec:	b2db      	uxtb	r3, r3
 800bfee:	461a      	mov	r2, r3
 800bff0:	68fb      	ldr	r3, [r7, #12]
 800bff2:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800bff4:	e00e      	b.n	800c014 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 800bff6:	6839      	ldr	r1, [r7, #0]
 800bff8:	6878      	ldr	r0, [r7, #4]
 800bffa:	f7ff fdea 	bl	800bbd2 <USBD_CtlError>
            ret = USBD_FAIL;
 800bffe:	2303      	movs	r3, #3
 800c000:	75fb      	strb	r3, [r7, #23]
          break;
 800c002:	e007      	b.n	800c014 <USBD_HID_Setup+0x1ec>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800c004:	6839      	ldr	r1, [r7, #0]
 800c006:	6878      	ldr	r0, [r7, #4]
 800c008:	f7ff fde3 	bl	800bbd2 <USBD_CtlError>
          ret = USBD_FAIL;
 800c00c:	2303      	movs	r3, #3
 800c00e:	75fb      	strb	r3, [r7, #23]
          break;
 800c010:	e000      	b.n	800c014 <USBD_HID_Setup+0x1ec>
          break;
 800c012:	bf00      	nop
      }
      break;
 800c014:	e006      	b.n	800c024 <USBD_HID_Setup+0x1fc>

    default:
      USBD_CtlError(pdev, req);
 800c016:	6839      	ldr	r1, [r7, #0]
 800c018:	6878      	ldr	r0, [r7, #4]
 800c01a:	f7ff fdda 	bl	800bbd2 <USBD_CtlError>
      ret = USBD_FAIL;
 800c01e:	2303      	movs	r3, #3
 800c020:	75fb      	strb	r3, [r7, #23]
      break;
 800c022:	bf00      	nop
  }

  return (uint8_t)ret;
 800c024:	7dfb      	ldrb	r3, [r7, #23]
}
 800c026:	4618      	mov	r0, r3
 800c028:	3718      	adds	r7, #24
 800c02a:	46bd      	mov	sp, r7
 800c02c:	bd80      	pop	{r7, pc}
 800c02e:	bf00      	nop
 800c030:	20000098 	.word	0x20000098
 800c034:	20000080 	.word	0x20000080

0800c038 <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 800c038:	b580      	push	{r7, lr}
 800c03a:	b084      	sub	sp, #16
 800c03c:	af00      	add	r7, sp, #0
 800c03e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 800c040:	2181      	movs	r1, #129	@ 0x81
 800c042:	4809      	ldr	r0, [pc, #36]	@ (800c068 <USBD_HID_GetFSCfgDesc+0x30>)
 800c044:	f7fe ff8f 	bl	800af66 <USBD_GetEpDesc>
 800c048:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 800c04a:	68fb      	ldr	r3, [r7, #12]
 800c04c:	2b00      	cmp	r3, #0
 800c04e:	d002      	beq.n	800c056 <USBD_HID_GetFSCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_FS_BINTERVAL;
 800c050:	68fb      	ldr	r3, [r7, #12]
 800c052:	220a      	movs	r2, #10
 800c054:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	2222      	movs	r2, #34	@ 0x22
 800c05a:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 800c05c:	4b02      	ldr	r3, [pc, #8]	@ (800c068 <USBD_HID_GetFSCfgDesc+0x30>)
}
 800c05e:	4618      	mov	r0, r3
 800c060:	3710      	adds	r7, #16
 800c062:	46bd      	mov	sp, r7
 800c064:	bd80      	pop	{r7, pc}
 800c066:	bf00      	nop
 800c068:	2000005c 	.word	0x2000005c

0800c06c <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 800c06c:	b580      	push	{r7, lr}
 800c06e:	b084      	sub	sp, #16
 800c070:	af00      	add	r7, sp, #0
 800c072:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 800c074:	2181      	movs	r1, #129	@ 0x81
 800c076:	4809      	ldr	r0, [pc, #36]	@ (800c09c <USBD_HID_GetHSCfgDesc+0x30>)
 800c078:	f7fe ff75 	bl	800af66 <USBD_GetEpDesc>
 800c07c:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 800c07e:	68fb      	ldr	r3, [r7, #12]
 800c080:	2b00      	cmp	r3, #0
 800c082:	d002      	beq.n	800c08a <USBD_HID_GetHSCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_HS_BINTERVAL;
 800c084:	68fb      	ldr	r3, [r7, #12]
 800c086:	2207      	movs	r2, #7
 800c088:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	2222      	movs	r2, #34	@ 0x22
 800c08e:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 800c090:	4b02      	ldr	r3, [pc, #8]	@ (800c09c <USBD_HID_GetHSCfgDesc+0x30>)
}
 800c092:	4618      	mov	r0, r3
 800c094:	3710      	adds	r7, #16
 800c096:	46bd      	mov	sp, r7
 800c098:	bd80      	pop	{r7, pc}
 800c09a:	bf00      	nop
 800c09c:	2000005c 	.word	0x2000005c

0800c0a0 <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800c0a0:	b580      	push	{r7, lr}
 800c0a2:	b084      	sub	sp, #16
 800c0a4:	af00      	add	r7, sp, #0
 800c0a6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 800c0a8:	2181      	movs	r1, #129	@ 0x81
 800c0aa:	4809      	ldr	r0, [pc, #36]	@ (800c0d0 <USBD_HID_GetOtherSpeedCfgDesc+0x30>)
 800c0ac:	f7fe ff5b 	bl	800af66 <USBD_GetEpDesc>
 800c0b0:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 800c0b2:	68fb      	ldr	r3, [r7, #12]
 800c0b4:	2b00      	cmp	r3, #0
 800c0b6:	d002      	beq.n	800c0be <USBD_HID_GetOtherSpeedCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_FS_BINTERVAL;
 800c0b8:	68fb      	ldr	r3, [r7, #12]
 800c0ba:	220a      	movs	r2, #10
 800c0bc:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	2222      	movs	r2, #34	@ 0x22
 800c0c2:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 800c0c4:	4b02      	ldr	r3, [pc, #8]	@ (800c0d0 <USBD_HID_GetOtherSpeedCfgDesc+0x30>)
}
 800c0c6:	4618      	mov	r0, r3
 800c0c8:	3710      	adds	r7, #16
 800c0ca:	46bd      	mov	sp, r7
 800c0cc:	bd80      	pop	{r7, pc}
 800c0ce:	bf00      	nop
 800c0d0:	2000005c 	.word	0x2000005c

0800c0d4 <USBD_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800c0d4:	b480      	push	{r7}
 800c0d6:	b083      	sub	sp, #12
 800c0d8:	af00      	add	r7, sp, #0
 800c0da:	6078      	str	r0, [r7, #4]
 800c0dc:	460b      	mov	r3, r1
 800c0de:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId])->state = USBD_HID_IDLE;
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	32b0      	adds	r2, #176	@ 0xb0
 800c0ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c0ee:	2200      	movs	r2, #0
 800c0f0:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 800c0f2:	2300      	movs	r3, #0
}
 800c0f4:	4618      	mov	r0, r3
 800c0f6:	370c      	adds	r7, #12
 800c0f8:	46bd      	mov	sp, r7
 800c0fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0fe:	4770      	bx	lr

0800c100 <USBD_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 800c100:	b480      	push	{r7}
 800c102:	b083      	sub	sp, #12
 800c104:	af00      	add	r7, sp, #0
 800c106:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_DeviceQualifierDesc);
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	220a      	movs	r2, #10
 800c10c:	801a      	strh	r2, [r3, #0]

  return USBD_HID_DeviceQualifierDesc;
 800c10e:	4b03      	ldr	r3, [pc, #12]	@ (800c11c <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 800c110:	4618      	mov	r0, r3
 800c112:	370c      	adds	r7, #12
 800c114:	46bd      	mov	sp, r7
 800c116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c11a:	4770      	bx	lr
 800c11c:	2000008c 	.word	0x2000008c

0800c120 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800c120:	b580      	push	{r7, lr}
 800c122:	b084      	sub	sp, #16
 800c124:	af00      	add	r7, sp, #0
 800c126:	60f8      	str	r0, [r7, #12]
 800c128:	60b9      	str	r1, [r7, #8]
 800c12a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800c12c:	68fb      	ldr	r3, [r7, #12]
 800c12e:	2202      	movs	r2, #2
 800c130:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800c134:	68fb      	ldr	r3, [r7, #12]
 800c136:	687a      	ldr	r2, [r7, #4]
 800c138:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800c13a:	68fb      	ldr	r3, [r7, #12]
 800c13c:	687a      	ldr	r2, [r7, #4]
 800c13e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	68ba      	ldr	r2, [r7, #8]
 800c144:	2100      	movs	r1, #0
 800c146:	68f8      	ldr	r0, [r7, #12]
 800c148:	f000 fbf5 	bl	800c936 <USBD_LL_Transmit>

  return USBD_OK;
 800c14c:	2300      	movs	r3, #0
}
 800c14e:	4618      	mov	r0, r3
 800c150:	3710      	adds	r7, #16
 800c152:	46bd      	mov	sp, r7
 800c154:	bd80      	pop	{r7, pc}

0800c156 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800c156:	b580      	push	{r7, lr}
 800c158:	b084      	sub	sp, #16
 800c15a:	af00      	add	r7, sp, #0
 800c15c:	60f8      	str	r0, [r7, #12]
 800c15e:	60b9      	str	r1, [r7, #8]
 800c160:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	68ba      	ldr	r2, [r7, #8]
 800c166:	2100      	movs	r1, #0
 800c168:	68f8      	ldr	r0, [r7, #12]
 800c16a:	f000 fbe4 	bl	800c936 <USBD_LL_Transmit>

  return USBD_OK;
 800c16e:	2300      	movs	r3, #0
}
 800c170:	4618      	mov	r0, r3
 800c172:	3710      	adds	r7, #16
 800c174:	46bd      	mov	sp, r7
 800c176:	bd80      	pop	{r7, pc}

0800c178 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800c178:	b580      	push	{r7, lr}
 800c17a:	b084      	sub	sp, #16
 800c17c:	af00      	add	r7, sp, #0
 800c17e:	60f8      	str	r0, [r7, #12]
 800c180:	60b9      	str	r1, [r7, #8]
 800c182:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	68ba      	ldr	r2, [r7, #8]
 800c188:	2100      	movs	r1, #0
 800c18a:	68f8      	ldr	r0, [r7, #12]
 800c18c:	f000 fbf4 	bl	800c978 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c190:	2300      	movs	r3, #0
}
 800c192:	4618      	mov	r0, r3
 800c194:	3710      	adds	r7, #16
 800c196:	46bd      	mov	sp, r7
 800c198:	bd80      	pop	{r7, pc}

0800c19a <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800c19a:	b580      	push	{r7, lr}
 800c19c:	b082      	sub	sp, #8
 800c19e:	af00      	add	r7, sp, #0
 800c1a0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	2204      	movs	r2, #4
 800c1a6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800c1aa:	2300      	movs	r3, #0
 800c1ac:	2200      	movs	r2, #0
 800c1ae:	2100      	movs	r1, #0
 800c1b0:	6878      	ldr	r0, [r7, #4]
 800c1b2:	f000 fbc0 	bl	800c936 <USBD_LL_Transmit>

  return USBD_OK;
 800c1b6:	2300      	movs	r3, #0
}
 800c1b8:	4618      	mov	r0, r3
 800c1ba:	3708      	adds	r7, #8
 800c1bc:	46bd      	mov	sp, r7
 800c1be:	bd80      	pop	{r7, pc}

0800c1c0 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800c1c0:	b580      	push	{r7, lr}
 800c1c2:	b082      	sub	sp, #8
 800c1c4:	af00      	add	r7, sp, #0
 800c1c6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	2205      	movs	r2, #5
 800c1cc:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c1d0:	2300      	movs	r3, #0
 800c1d2:	2200      	movs	r2, #0
 800c1d4:	2100      	movs	r1, #0
 800c1d6:	6878      	ldr	r0, [r7, #4]
 800c1d8:	f000 fbce 	bl	800c978 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c1dc:	2300      	movs	r3, #0
}
 800c1de:	4618      	mov	r0, r3
 800c1e0:	3708      	adds	r7, #8
 800c1e2:	46bd      	mov	sp, r7
 800c1e4:	bd80      	pop	{r7, pc}
	...

0800c1e8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800c1e8:	b580      	push	{r7, lr}
 800c1ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800c1ec:	2200      	movs	r2, #0
 800c1ee:	490e      	ldr	r1, [pc, #56]	@ (800c228 <MX_USB_DEVICE_Init+0x40>)
 800c1f0:	480e      	ldr	r0, [pc, #56]	@ (800c22c <MX_USB_DEVICE_Init+0x44>)
 800c1f2:	f7fe fae9 	bl	800a7c8 <USBD_Init>
 800c1f6:	4603      	mov	r3, r0
 800c1f8:	2b00      	cmp	r3, #0
 800c1fa:	d001      	beq.n	800c200 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800c1fc:	f7f4 fd7c 	bl	8000cf8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 800c200:	490b      	ldr	r1, [pc, #44]	@ (800c230 <MX_USB_DEVICE_Init+0x48>)
 800c202:	480a      	ldr	r0, [pc, #40]	@ (800c22c <MX_USB_DEVICE_Init+0x44>)
 800c204:	f7fe fb10 	bl	800a828 <USBD_RegisterClass>
 800c208:	4603      	mov	r3, r0
 800c20a:	2b00      	cmp	r3, #0
 800c20c:	d001      	beq.n	800c212 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800c20e:	f7f4 fd73 	bl	8000cf8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800c212:	4806      	ldr	r0, [pc, #24]	@ (800c22c <MX_USB_DEVICE_Init+0x44>)
 800c214:	f7fe fb3e 	bl	800a894 <USBD_Start>
 800c218:	4603      	mov	r3, r0
 800c21a:	2b00      	cmp	r3, #0
 800c21c:	d001      	beq.n	800c222 <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 800c21e:	f7f4 fd6b 	bl	8000cf8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800c222:	bf00      	nop
 800c224:	bd80      	pop	{r7, pc}
 800c226:	bf00      	nop
 800c228:	200000e4 	.word	0x200000e4
 800c22c:	200051ac 	.word	0x200051ac
 800c230:	20000024 	.word	0x20000024

0800c234 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c234:	b480      	push	{r7}
 800c236:	b083      	sub	sp, #12
 800c238:	af00      	add	r7, sp, #0
 800c23a:	4603      	mov	r3, r0
 800c23c:	6039      	str	r1, [r7, #0]
 800c23e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800c240:	683b      	ldr	r3, [r7, #0]
 800c242:	2212      	movs	r2, #18
 800c244:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800c246:	4b03      	ldr	r3, [pc, #12]	@ (800c254 <USBD_FS_DeviceDescriptor+0x20>)
}
 800c248:	4618      	mov	r0, r3
 800c24a:	370c      	adds	r7, #12
 800c24c:	46bd      	mov	sp, r7
 800c24e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c252:	4770      	bx	lr
 800c254:	20000100 	.word	0x20000100

0800c258 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c258:	b480      	push	{r7}
 800c25a:	b083      	sub	sp, #12
 800c25c:	af00      	add	r7, sp, #0
 800c25e:	4603      	mov	r3, r0
 800c260:	6039      	str	r1, [r7, #0]
 800c262:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800c264:	683b      	ldr	r3, [r7, #0]
 800c266:	2204      	movs	r2, #4
 800c268:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800c26a:	4b03      	ldr	r3, [pc, #12]	@ (800c278 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800c26c:	4618      	mov	r0, r3
 800c26e:	370c      	adds	r7, #12
 800c270:	46bd      	mov	sp, r7
 800c272:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c276:	4770      	bx	lr
 800c278:	20000114 	.word	0x20000114

0800c27c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c27c:	b580      	push	{r7, lr}
 800c27e:	b082      	sub	sp, #8
 800c280:	af00      	add	r7, sp, #0
 800c282:	4603      	mov	r3, r0
 800c284:	6039      	str	r1, [r7, #0]
 800c286:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c288:	79fb      	ldrb	r3, [r7, #7]
 800c28a:	2b00      	cmp	r3, #0
 800c28c:	d105      	bne.n	800c29a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c28e:	683a      	ldr	r2, [r7, #0]
 800c290:	4907      	ldr	r1, [pc, #28]	@ (800c2b0 <USBD_FS_ProductStrDescriptor+0x34>)
 800c292:	4808      	ldr	r0, [pc, #32]	@ (800c2b4 <USBD_FS_ProductStrDescriptor+0x38>)
 800c294:	f7ff fcae 	bl	800bbf4 <USBD_GetString>
 800c298:	e004      	b.n	800c2a4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c29a:	683a      	ldr	r2, [r7, #0]
 800c29c:	4904      	ldr	r1, [pc, #16]	@ (800c2b0 <USBD_FS_ProductStrDescriptor+0x34>)
 800c29e:	4805      	ldr	r0, [pc, #20]	@ (800c2b4 <USBD_FS_ProductStrDescriptor+0x38>)
 800c2a0:	f7ff fca8 	bl	800bbf4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c2a4:	4b02      	ldr	r3, [pc, #8]	@ (800c2b0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800c2a6:	4618      	mov	r0, r3
 800c2a8:	3708      	adds	r7, #8
 800c2aa:	46bd      	mov	sp, r7
 800c2ac:	bd80      	pop	{r7, pc}
 800c2ae:	bf00      	nop
 800c2b0:	20005488 	.word	0x20005488
 800c2b4:	0800d62c 	.word	0x0800d62c

0800c2b8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c2b8:	b580      	push	{r7, lr}
 800c2ba:	b082      	sub	sp, #8
 800c2bc:	af00      	add	r7, sp, #0
 800c2be:	4603      	mov	r3, r0
 800c2c0:	6039      	str	r1, [r7, #0]
 800c2c2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800c2c4:	683a      	ldr	r2, [r7, #0]
 800c2c6:	4904      	ldr	r1, [pc, #16]	@ (800c2d8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800c2c8:	4804      	ldr	r0, [pc, #16]	@ (800c2dc <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800c2ca:	f7ff fc93 	bl	800bbf4 <USBD_GetString>
  return USBD_StrDesc;
 800c2ce:	4b02      	ldr	r3, [pc, #8]	@ (800c2d8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800c2d0:	4618      	mov	r0, r3
 800c2d2:	3708      	adds	r7, #8
 800c2d4:	46bd      	mov	sp, r7
 800c2d6:	bd80      	pop	{r7, pc}
 800c2d8:	20005488 	.word	0x20005488
 800c2dc:	0800d644 	.word	0x0800d644

0800c2e0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c2e0:	b580      	push	{r7, lr}
 800c2e2:	b082      	sub	sp, #8
 800c2e4:	af00      	add	r7, sp, #0
 800c2e6:	4603      	mov	r3, r0
 800c2e8:	6039      	str	r1, [r7, #0]
 800c2ea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800c2ec:	683b      	ldr	r3, [r7, #0]
 800c2ee:	221a      	movs	r2, #26
 800c2f0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800c2f2:	f000 f843 	bl	800c37c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800c2f6:	4b02      	ldr	r3, [pc, #8]	@ (800c300 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800c2f8:	4618      	mov	r0, r3
 800c2fa:	3708      	adds	r7, #8
 800c2fc:	46bd      	mov	sp, r7
 800c2fe:	bd80      	pop	{r7, pc}
 800c300:	20000118 	.word	0x20000118

0800c304 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c304:	b580      	push	{r7, lr}
 800c306:	b082      	sub	sp, #8
 800c308:	af00      	add	r7, sp, #0
 800c30a:	4603      	mov	r3, r0
 800c30c:	6039      	str	r1, [r7, #0]
 800c30e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800c310:	79fb      	ldrb	r3, [r7, #7]
 800c312:	2b00      	cmp	r3, #0
 800c314:	d105      	bne.n	800c322 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c316:	683a      	ldr	r2, [r7, #0]
 800c318:	4907      	ldr	r1, [pc, #28]	@ (800c338 <USBD_FS_ConfigStrDescriptor+0x34>)
 800c31a:	4808      	ldr	r0, [pc, #32]	@ (800c33c <USBD_FS_ConfigStrDescriptor+0x38>)
 800c31c:	f7ff fc6a 	bl	800bbf4 <USBD_GetString>
 800c320:	e004      	b.n	800c32c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c322:	683a      	ldr	r2, [r7, #0]
 800c324:	4904      	ldr	r1, [pc, #16]	@ (800c338 <USBD_FS_ConfigStrDescriptor+0x34>)
 800c326:	4805      	ldr	r0, [pc, #20]	@ (800c33c <USBD_FS_ConfigStrDescriptor+0x38>)
 800c328:	f7ff fc64 	bl	800bbf4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c32c:	4b02      	ldr	r3, [pc, #8]	@ (800c338 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800c32e:	4618      	mov	r0, r3
 800c330:	3708      	adds	r7, #8
 800c332:	46bd      	mov	sp, r7
 800c334:	bd80      	pop	{r7, pc}
 800c336:	bf00      	nop
 800c338:	20005488 	.word	0x20005488
 800c33c:	0800d658 	.word	0x0800d658

0800c340 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c340:	b580      	push	{r7, lr}
 800c342:	b082      	sub	sp, #8
 800c344:	af00      	add	r7, sp, #0
 800c346:	4603      	mov	r3, r0
 800c348:	6039      	str	r1, [r7, #0]
 800c34a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c34c:	79fb      	ldrb	r3, [r7, #7]
 800c34e:	2b00      	cmp	r3, #0
 800c350:	d105      	bne.n	800c35e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c352:	683a      	ldr	r2, [r7, #0]
 800c354:	4907      	ldr	r1, [pc, #28]	@ (800c374 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800c356:	4808      	ldr	r0, [pc, #32]	@ (800c378 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800c358:	f7ff fc4c 	bl	800bbf4 <USBD_GetString>
 800c35c:	e004      	b.n	800c368 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c35e:	683a      	ldr	r2, [r7, #0]
 800c360:	4904      	ldr	r1, [pc, #16]	@ (800c374 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800c362:	4805      	ldr	r0, [pc, #20]	@ (800c378 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800c364:	f7ff fc46 	bl	800bbf4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c368:	4b02      	ldr	r3, [pc, #8]	@ (800c374 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800c36a:	4618      	mov	r0, r3
 800c36c:	3708      	adds	r7, #8
 800c36e:	46bd      	mov	sp, r7
 800c370:	bd80      	pop	{r7, pc}
 800c372:	bf00      	nop
 800c374:	20005488 	.word	0x20005488
 800c378:	0800d664 	.word	0x0800d664

0800c37c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800c37c:	b580      	push	{r7, lr}
 800c37e:	b084      	sub	sp, #16
 800c380:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800c382:	4b0f      	ldr	r3, [pc, #60]	@ (800c3c0 <Get_SerialNum+0x44>)
 800c384:	681b      	ldr	r3, [r3, #0]
 800c386:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800c388:	4b0e      	ldr	r3, [pc, #56]	@ (800c3c4 <Get_SerialNum+0x48>)
 800c38a:	681b      	ldr	r3, [r3, #0]
 800c38c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800c38e:	4b0e      	ldr	r3, [pc, #56]	@ (800c3c8 <Get_SerialNum+0x4c>)
 800c390:	681b      	ldr	r3, [r3, #0]
 800c392:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800c394:	68fa      	ldr	r2, [r7, #12]
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	4413      	add	r3, r2
 800c39a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800c39c:	68fb      	ldr	r3, [r7, #12]
 800c39e:	2b00      	cmp	r3, #0
 800c3a0:	d009      	beq.n	800c3b6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800c3a2:	2208      	movs	r2, #8
 800c3a4:	4909      	ldr	r1, [pc, #36]	@ (800c3cc <Get_SerialNum+0x50>)
 800c3a6:	68f8      	ldr	r0, [r7, #12]
 800c3a8:	f000 f814 	bl	800c3d4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800c3ac:	2204      	movs	r2, #4
 800c3ae:	4908      	ldr	r1, [pc, #32]	@ (800c3d0 <Get_SerialNum+0x54>)
 800c3b0:	68b8      	ldr	r0, [r7, #8]
 800c3b2:	f000 f80f 	bl	800c3d4 <IntToUnicode>
  }
}
 800c3b6:	bf00      	nop
 800c3b8:	3710      	adds	r7, #16
 800c3ba:	46bd      	mov	sp, r7
 800c3bc:	bd80      	pop	{r7, pc}
 800c3be:	bf00      	nop
 800c3c0:	1fff7a10 	.word	0x1fff7a10
 800c3c4:	1fff7a14 	.word	0x1fff7a14
 800c3c8:	1fff7a18 	.word	0x1fff7a18
 800c3cc:	2000011a 	.word	0x2000011a
 800c3d0:	2000012a 	.word	0x2000012a

0800c3d4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800c3d4:	b480      	push	{r7}
 800c3d6:	b087      	sub	sp, #28
 800c3d8:	af00      	add	r7, sp, #0
 800c3da:	60f8      	str	r0, [r7, #12]
 800c3dc:	60b9      	str	r1, [r7, #8]
 800c3de:	4613      	mov	r3, r2
 800c3e0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800c3e2:	2300      	movs	r3, #0
 800c3e4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800c3e6:	2300      	movs	r3, #0
 800c3e8:	75fb      	strb	r3, [r7, #23]
 800c3ea:	e027      	b.n	800c43c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800c3ec:	68fb      	ldr	r3, [r7, #12]
 800c3ee:	0f1b      	lsrs	r3, r3, #28
 800c3f0:	2b09      	cmp	r3, #9
 800c3f2:	d80b      	bhi.n	800c40c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800c3f4:	68fb      	ldr	r3, [r7, #12]
 800c3f6:	0f1b      	lsrs	r3, r3, #28
 800c3f8:	b2da      	uxtb	r2, r3
 800c3fa:	7dfb      	ldrb	r3, [r7, #23]
 800c3fc:	005b      	lsls	r3, r3, #1
 800c3fe:	4619      	mov	r1, r3
 800c400:	68bb      	ldr	r3, [r7, #8]
 800c402:	440b      	add	r3, r1
 800c404:	3230      	adds	r2, #48	@ 0x30
 800c406:	b2d2      	uxtb	r2, r2
 800c408:	701a      	strb	r2, [r3, #0]
 800c40a:	e00a      	b.n	800c422 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800c40c:	68fb      	ldr	r3, [r7, #12]
 800c40e:	0f1b      	lsrs	r3, r3, #28
 800c410:	b2da      	uxtb	r2, r3
 800c412:	7dfb      	ldrb	r3, [r7, #23]
 800c414:	005b      	lsls	r3, r3, #1
 800c416:	4619      	mov	r1, r3
 800c418:	68bb      	ldr	r3, [r7, #8]
 800c41a:	440b      	add	r3, r1
 800c41c:	3237      	adds	r2, #55	@ 0x37
 800c41e:	b2d2      	uxtb	r2, r2
 800c420:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800c422:	68fb      	ldr	r3, [r7, #12]
 800c424:	011b      	lsls	r3, r3, #4
 800c426:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800c428:	7dfb      	ldrb	r3, [r7, #23]
 800c42a:	005b      	lsls	r3, r3, #1
 800c42c:	3301      	adds	r3, #1
 800c42e:	68ba      	ldr	r2, [r7, #8]
 800c430:	4413      	add	r3, r2
 800c432:	2200      	movs	r2, #0
 800c434:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800c436:	7dfb      	ldrb	r3, [r7, #23]
 800c438:	3301      	adds	r3, #1
 800c43a:	75fb      	strb	r3, [r7, #23]
 800c43c:	7dfa      	ldrb	r2, [r7, #23]
 800c43e:	79fb      	ldrb	r3, [r7, #7]
 800c440:	429a      	cmp	r2, r3
 800c442:	d3d3      	bcc.n	800c3ec <IntToUnicode+0x18>
  }
}
 800c444:	bf00      	nop
 800c446:	bf00      	nop
 800c448:	371c      	adds	r7, #28
 800c44a:	46bd      	mov	sp, r7
 800c44c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c450:	4770      	bx	lr
	...

0800c454 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800c454:	b580      	push	{r7, lr}
 800c456:	b08a      	sub	sp, #40	@ 0x28
 800c458:	af00      	add	r7, sp, #0
 800c45a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c45c:	f107 0314 	add.w	r3, r7, #20
 800c460:	2200      	movs	r2, #0
 800c462:	601a      	str	r2, [r3, #0]
 800c464:	605a      	str	r2, [r3, #4]
 800c466:	609a      	str	r2, [r3, #8]
 800c468:	60da      	str	r2, [r3, #12]
 800c46a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	681b      	ldr	r3, [r3, #0]
 800c470:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800c474:	d13a      	bne.n	800c4ec <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c476:	2300      	movs	r3, #0
 800c478:	613b      	str	r3, [r7, #16]
 800c47a:	4b1e      	ldr	r3, [pc, #120]	@ (800c4f4 <HAL_PCD_MspInit+0xa0>)
 800c47c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c47e:	4a1d      	ldr	r2, [pc, #116]	@ (800c4f4 <HAL_PCD_MspInit+0xa0>)
 800c480:	f043 0301 	orr.w	r3, r3, #1
 800c484:	6313      	str	r3, [r2, #48]	@ 0x30
 800c486:	4b1b      	ldr	r3, [pc, #108]	@ (800c4f4 <HAL_PCD_MspInit+0xa0>)
 800c488:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c48a:	f003 0301 	and.w	r3, r3, #1
 800c48e:	613b      	str	r3, [r7, #16]
 800c490:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800c492:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800c496:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c498:	2302      	movs	r3, #2
 800c49a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c49c:	2300      	movs	r3, #0
 800c49e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c4a0:	2303      	movs	r3, #3
 800c4a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800c4a4:	230a      	movs	r3, #10
 800c4a6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c4a8:	f107 0314 	add.w	r3, r7, #20
 800c4ac:	4619      	mov	r1, r3
 800c4ae:	4812      	ldr	r0, [pc, #72]	@ (800c4f8 <HAL_PCD_MspInit+0xa4>)
 800c4b0:	f7f5 fd2c 	bl	8001f0c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800c4b4:	4b0f      	ldr	r3, [pc, #60]	@ (800c4f4 <HAL_PCD_MspInit+0xa0>)
 800c4b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c4b8:	4a0e      	ldr	r2, [pc, #56]	@ (800c4f4 <HAL_PCD_MspInit+0xa0>)
 800c4ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c4be:	6353      	str	r3, [r2, #52]	@ 0x34
 800c4c0:	2300      	movs	r3, #0
 800c4c2:	60fb      	str	r3, [r7, #12]
 800c4c4:	4b0b      	ldr	r3, [pc, #44]	@ (800c4f4 <HAL_PCD_MspInit+0xa0>)
 800c4c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c4c8:	4a0a      	ldr	r2, [pc, #40]	@ (800c4f4 <HAL_PCD_MspInit+0xa0>)
 800c4ca:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800c4ce:	6453      	str	r3, [r2, #68]	@ 0x44
 800c4d0:	4b08      	ldr	r3, [pc, #32]	@ (800c4f4 <HAL_PCD_MspInit+0xa0>)
 800c4d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c4d4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c4d8:	60fb      	str	r3, [r7, #12]
 800c4da:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800c4dc:	2200      	movs	r2, #0
 800c4de:	2105      	movs	r1, #5
 800c4e0:	2043      	movs	r0, #67	@ 0x43
 800c4e2:	f7f5 fc57 	bl	8001d94 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800c4e6:	2043      	movs	r0, #67	@ 0x43
 800c4e8:	f7f5 fc70 	bl	8001dcc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800c4ec:	bf00      	nop
 800c4ee:	3728      	adds	r7, #40	@ 0x28
 800c4f0:	46bd      	mov	sp, r7
 800c4f2:	bd80      	pop	{r7, pc}
 800c4f4:	40023800 	.word	0x40023800
 800c4f8:	40020000 	.word	0x40020000

0800c4fc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c4fc:	b580      	push	{r7, lr}
 800c4fe:	b082      	sub	sp, #8
 800c500:	af00      	add	r7, sp, #0
 800c502:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800c510:	4619      	mov	r1, r3
 800c512:	4610      	mov	r0, r2
 800c514:	f7fe fa0b 	bl	800a92e <USBD_LL_SetupStage>
}
 800c518:	bf00      	nop
 800c51a:	3708      	adds	r7, #8
 800c51c:	46bd      	mov	sp, r7
 800c51e:	bd80      	pop	{r7, pc}

0800c520 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c520:	b580      	push	{r7, lr}
 800c522:	b082      	sub	sp, #8
 800c524:	af00      	add	r7, sp, #0
 800c526:	6078      	str	r0, [r7, #4]
 800c528:	460b      	mov	r3, r1
 800c52a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800c532:	78fa      	ldrb	r2, [r7, #3]
 800c534:	6879      	ldr	r1, [r7, #4]
 800c536:	4613      	mov	r3, r2
 800c538:	00db      	lsls	r3, r3, #3
 800c53a:	4413      	add	r3, r2
 800c53c:	009b      	lsls	r3, r3, #2
 800c53e:	440b      	add	r3, r1
 800c540:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800c544:	681a      	ldr	r2, [r3, #0]
 800c546:	78fb      	ldrb	r3, [r7, #3]
 800c548:	4619      	mov	r1, r3
 800c54a:	f7fe fa45 	bl	800a9d8 <USBD_LL_DataOutStage>
}
 800c54e:	bf00      	nop
 800c550:	3708      	adds	r7, #8
 800c552:	46bd      	mov	sp, r7
 800c554:	bd80      	pop	{r7, pc}

0800c556 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c556:	b580      	push	{r7, lr}
 800c558:	b082      	sub	sp, #8
 800c55a:	af00      	add	r7, sp, #0
 800c55c:	6078      	str	r0, [r7, #4]
 800c55e:	460b      	mov	r3, r1
 800c560:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800c568:	78fa      	ldrb	r2, [r7, #3]
 800c56a:	6879      	ldr	r1, [r7, #4]
 800c56c:	4613      	mov	r3, r2
 800c56e:	00db      	lsls	r3, r3, #3
 800c570:	4413      	add	r3, r2
 800c572:	009b      	lsls	r3, r3, #2
 800c574:	440b      	add	r3, r1
 800c576:	3320      	adds	r3, #32
 800c578:	681a      	ldr	r2, [r3, #0]
 800c57a:	78fb      	ldrb	r3, [r7, #3]
 800c57c:	4619      	mov	r1, r3
 800c57e:	f7fe fade 	bl	800ab3e <USBD_LL_DataInStage>
}
 800c582:	bf00      	nop
 800c584:	3708      	adds	r7, #8
 800c586:	46bd      	mov	sp, r7
 800c588:	bd80      	pop	{r7, pc}

0800c58a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c58a:	b580      	push	{r7, lr}
 800c58c:	b082      	sub	sp, #8
 800c58e:	af00      	add	r7, sp, #0
 800c590:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c598:	4618      	mov	r0, r3
 800c59a:	f7fe fc18 	bl	800adce <USBD_LL_SOF>
}
 800c59e:	bf00      	nop
 800c5a0:	3708      	adds	r7, #8
 800c5a2:	46bd      	mov	sp, r7
 800c5a4:	bd80      	pop	{r7, pc}

0800c5a6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c5a6:	b580      	push	{r7, lr}
 800c5a8:	b084      	sub	sp, #16
 800c5aa:	af00      	add	r7, sp, #0
 800c5ac:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800c5ae:	2301      	movs	r3, #1
 800c5b0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	79db      	ldrb	r3, [r3, #7]
 800c5b6:	2b02      	cmp	r3, #2
 800c5b8:	d001      	beq.n	800c5be <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800c5ba:	f7f4 fb9d 	bl	8000cf8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c5c4:	7bfa      	ldrb	r2, [r7, #15]
 800c5c6:	4611      	mov	r1, r2
 800c5c8:	4618      	mov	r0, r3
 800c5ca:	f7fe fbbc 	bl	800ad46 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c5d4:	4618      	mov	r0, r3
 800c5d6:	f7fe fb64 	bl	800aca2 <USBD_LL_Reset>
}
 800c5da:	bf00      	nop
 800c5dc:	3710      	adds	r7, #16
 800c5de:	46bd      	mov	sp, r7
 800c5e0:	bd80      	pop	{r7, pc}
	...

0800c5e4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c5e4:	b580      	push	{r7, lr}
 800c5e6:	b082      	sub	sp, #8
 800c5e8:	af00      	add	r7, sp, #0
 800c5ea:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c5f2:	4618      	mov	r0, r3
 800c5f4:	f7fe fbb7 	bl	800ad66 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	681b      	ldr	r3, [r3, #0]
 800c5fc:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800c600:	681b      	ldr	r3, [r3, #0]
 800c602:	687a      	ldr	r2, [r7, #4]
 800c604:	6812      	ldr	r2, [r2, #0]
 800c606:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800c60a:	f043 0301 	orr.w	r3, r3, #1
 800c60e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	7adb      	ldrb	r3, [r3, #11]
 800c614:	2b00      	cmp	r3, #0
 800c616:	d005      	beq.n	800c624 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c618:	4b04      	ldr	r3, [pc, #16]	@ (800c62c <HAL_PCD_SuspendCallback+0x48>)
 800c61a:	691b      	ldr	r3, [r3, #16]
 800c61c:	4a03      	ldr	r2, [pc, #12]	@ (800c62c <HAL_PCD_SuspendCallback+0x48>)
 800c61e:	f043 0306 	orr.w	r3, r3, #6
 800c622:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800c624:	bf00      	nop
 800c626:	3708      	adds	r7, #8
 800c628:	46bd      	mov	sp, r7
 800c62a:	bd80      	pop	{r7, pc}
 800c62c:	e000ed00 	.word	0xe000ed00

0800c630 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c630:	b580      	push	{r7, lr}
 800c632:	b082      	sub	sp, #8
 800c634:	af00      	add	r7, sp, #0
 800c636:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c63e:	4618      	mov	r0, r3
 800c640:	f7fe fbad 	bl	800ad9e <USBD_LL_Resume>
}
 800c644:	bf00      	nop
 800c646:	3708      	adds	r7, #8
 800c648:	46bd      	mov	sp, r7
 800c64a:	bd80      	pop	{r7, pc}

0800c64c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c64c:	b580      	push	{r7, lr}
 800c64e:	b082      	sub	sp, #8
 800c650:	af00      	add	r7, sp, #0
 800c652:	6078      	str	r0, [r7, #4]
 800c654:	460b      	mov	r3, r1
 800c656:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c65e:	78fa      	ldrb	r2, [r7, #3]
 800c660:	4611      	mov	r1, r2
 800c662:	4618      	mov	r0, r3
 800c664:	f7fe fc05 	bl	800ae72 <USBD_LL_IsoOUTIncomplete>
}
 800c668:	bf00      	nop
 800c66a:	3708      	adds	r7, #8
 800c66c:	46bd      	mov	sp, r7
 800c66e:	bd80      	pop	{r7, pc}

0800c670 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c670:	b580      	push	{r7, lr}
 800c672:	b082      	sub	sp, #8
 800c674:	af00      	add	r7, sp, #0
 800c676:	6078      	str	r0, [r7, #4]
 800c678:	460b      	mov	r3, r1
 800c67a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c682:	78fa      	ldrb	r2, [r7, #3]
 800c684:	4611      	mov	r1, r2
 800c686:	4618      	mov	r0, r3
 800c688:	f7fe fbc1 	bl	800ae0e <USBD_LL_IsoINIncomplete>
}
 800c68c:	bf00      	nop
 800c68e:	3708      	adds	r7, #8
 800c690:	46bd      	mov	sp, r7
 800c692:	bd80      	pop	{r7, pc}

0800c694 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c694:	b580      	push	{r7, lr}
 800c696:	b082      	sub	sp, #8
 800c698:	af00      	add	r7, sp, #0
 800c69a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c6a2:	4618      	mov	r0, r3
 800c6a4:	f7fe fc17 	bl	800aed6 <USBD_LL_DevConnected>
}
 800c6a8:	bf00      	nop
 800c6aa:	3708      	adds	r7, #8
 800c6ac:	46bd      	mov	sp, r7
 800c6ae:	bd80      	pop	{r7, pc}

0800c6b0 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c6b0:	b580      	push	{r7, lr}
 800c6b2:	b082      	sub	sp, #8
 800c6b4:	af00      	add	r7, sp, #0
 800c6b6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c6be:	4618      	mov	r0, r3
 800c6c0:	f7fe fc14 	bl	800aeec <USBD_LL_DevDisconnected>
}
 800c6c4:	bf00      	nop
 800c6c6:	3708      	adds	r7, #8
 800c6c8:	46bd      	mov	sp, r7
 800c6ca:	bd80      	pop	{r7, pc}

0800c6cc <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800c6cc:	b580      	push	{r7, lr}
 800c6ce:	b082      	sub	sp, #8
 800c6d0:	af00      	add	r7, sp, #0
 800c6d2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	781b      	ldrb	r3, [r3, #0]
 800c6d8:	2b00      	cmp	r3, #0
 800c6da:	d13c      	bne.n	800c756 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800c6dc:	4a20      	ldr	r2, [pc, #128]	@ (800c760 <USBD_LL_Init+0x94>)
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	4a1e      	ldr	r2, [pc, #120]	@ (800c760 <USBD_LL_Init+0x94>)
 800c6e8:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800c6ec:	4b1c      	ldr	r3, [pc, #112]	@ (800c760 <USBD_LL_Init+0x94>)
 800c6ee:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800c6f2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800c6f4:	4b1a      	ldr	r3, [pc, #104]	@ (800c760 <USBD_LL_Init+0x94>)
 800c6f6:	2204      	movs	r2, #4
 800c6f8:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800c6fa:	4b19      	ldr	r3, [pc, #100]	@ (800c760 <USBD_LL_Init+0x94>)
 800c6fc:	2202      	movs	r2, #2
 800c6fe:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800c700:	4b17      	ldr	r3, [pc, #92]	@ (800c760 <USBD_LL_Init+0x94>)
 800c702:	2200      	movs	r2, #0
 800c704:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800c706:	4b16      	ldr	r3, [pc, #88]	@ (800c760 <USBD_LL_Init+0x94>)
 800c708:	2202      	movs	r2, #2
 800c70a:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800c70c:	4b14      	ldr	r3, [pc, #80]	@ (800c760 <USBD_LL_Init+0x94>)
 800c70e:	2200      	movs	r2, #0
 800c710:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800c712:	4b13      	ldr	r3, [pc, #76]	@ (800c760 <USBD_LL_Init+0x94>)
 800c714:	2200      	movs	r2, #0
 800c716:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800c718:	4b11      	ldr	r3, [pc, #68]	@ (800c760 <USBD_LL_Init+0x94>)
 800c71a:	2200      	movs	r2, #0
 800c71c:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800c71e:	4b10      	ldr	r3, [pc, #64]	@ (800c760 <USBD_LL_Init+0x94>)
 800c720:	2200      	movs	r2, #0
 800c722:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800c724:	4b0e      	ldr	r3, [pc, #56]	@ (800c760 <USBD_LL_Init+0x94>)
 800c726:	2200      	movs	r2, #0
 800c728:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800c72a:	480d      	ldr	r0, [pc, #52]	@ (800c760 <USBD_LL_Init+0x94>)
 800c72c:	f7f6 fa37 	bl	8002b9e <HAL_PCD_Init>
 800c730:	4603      	mov	r3, r0
 800c732:	2b00      	cmp	r3, #0
 800c734:	d001      	beq.n	800c73a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800c736:	f7f4 fadf 	bl	8000cf8 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800c73a:	2180      	movs	r1, #128	@ 0x80
 800c73c:	4808      	ldr	r0, [pc, #32]	@ (800c760 <USBD_LL_Init+0x94>)
 800c73e:	f7f7 fc4c 	bl	8003fda <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800c742:	2240      	movs	r2, #64	@ 0x40
 800c744:	2100      	movs	r1, #0
 800c746:	4806      	ldr	r0, [pc, #24]	@ (800c760 <USBD_LL_Init+0x94>)
 800c748:	f7f7 fc00 	bl	8003f4c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800c74c:	2280      	movs	r2, #128	@ 0x80
 800c74e:	2101      	movs	r1, #1
 800c750:	4803      	ldr	r0, [pc, #12]	@ (800c760 <USBD_LL_Init+0x94>)
 800c752:	f7f7 fbfb 	bl	8003f4c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800c756:	2300      	movs	r3, #0
}
 800c758:	4618      	mov	r0, r3
 800c75a:	3708      	adds	r7, #8
 800c75c:	46bd      	mov	sp, r7
 800c75e:	bd80      	pop	{r7, pc}
 800c760:	20005688 	.word	0x20005688

0800c764 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800c764:	b580      	push	{r7, lr}
 800c766:	b084      	sub	sp, #16
 800c768:	af00      	add	r7, sp, #0
 800c76a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c76c:	2300      	movs	r3, #0
 800c76e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c770:	2300      	movs	r3, #0
 800c772:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c77a:	4618      	mov	r0, r3
 800c77c:	f7f6 fb1e 	bl	8002dbc <HAL_PCD_Start>
 800c780:	4603      	mov	r3, r0
 800c782:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c784:	7bfb      	ldrb	r3, [r7, #15]
 800c786:	4618      	mov	r0, r3
 800c788:	f000 f930 	bl	800c9ec <USBD_Get_USB_Status>
 800c78c:	4603      	mov	r3, r0
 800c78e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c790:	7bbb      	ldrb	r3, [r7, #14]
}
 800c792:	4618      	mov	r0, r3
 800c794:	3710      	adds	r7, #16
 800c796:	46bd      	mov	sp, r7
 800c798:	bd80      	pop	{r7, pc}

0800c79a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800c79a:	b580      	push	{r7, lr}
 800c79c:	b084      	sub	sp, #16
 800c79e:	af00      	add	r7, sp, #0
 800c7a0:	6078      	str	r0, [r7, #4]
 800c7a2:	4608      	mov	r0, r1
 800c7a4:	4611      	mov	r1, r2
 800c7a6:	461a      	mov	r2, r3
 800c7a8:	4603      	mov	r3, r0
 800c7aa:	70fb      	strb	r3, [r7, #3]
 800c7ac:	460b      	mov	r3, r1
 800c7ae:	70bb      	strb	r3, [r7, #2]
 800c7b0:	4613      	mov	r3, r2
 800c7b2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c7b4:	2300      	movs	r3, #0
 800c7b6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c7b8:	2300      	movs	r3, #0
 800c7ba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800c7c2:	78bb      	ldrb	r3, [r7, #2]
 800c7c4:	883a      	ldrh	r2, [r7, #0]
 800c7c6:	78f9      	ldrb	r1, [r7, #3]
 800c7c8:	f7f6 fff2 	bl	80037b0 <HAL_PCD_EP_Open>
 800c7cc:	4603      	mov	r3, r0
 800c7ce:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c7d0:	7bfb      	ldrb	r3, [r7, #15]
 800c7d2:	4618      	mov	r0, r3
 800c7d4:	f000 f90a 	bl	800c9ec <USBD_Get_USB_Status>
 800c7d8:	4603      	mov	r3, r0
 800c7da:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c7dc:	7bbb      	ldrb	r3, [r7, #14]
}
 800c7de:	4618      	mov	r0, r3
 800c7e0:	3710      	adds	r7, #16
 800c7e2:	46bd      	mov	sp, r7
 800c7e4:	bd80      	pop	{r7, pc}

0800c7e6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c7e6:	b580      	push	{r7, lr}
 800c7e8:	b084      	sub	sp, #16
 800c7ea:	af00      	add	r7, sp, #0
 800c7ec:	6078      	str	r0, [r7, #4]
 800c7ee:	460b      	mov	r3, r1
 800c7f0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c7f2:	2300      	movs	r3, #0
 800c7f4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c7f6:	2300      	movs	r3, #0
 800c7f8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c800:	78fa      	ldrb	r2, [r7, #3]
 800c802:	4611      	mov	r1, r2
 800c804:	4618      	mov	r0, r3
 800c806:	f7f7 f83d 	bl	8003884 <HAL_PCD_EP_Close>
 800c80a:	4603      	mov	r3, r0
 800c80c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c80e:	7bfb      	ldrb	r3, [r7, #15]
 800c810:	4618      	mov	r0, r3
 800c812:	f000 f8eb 	bl	800c9ec <USBD_Get_USB_Status>
 800c816:	4603      	mov	r3, r0
 800c818:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c81a:	7bbb      	ldrb	r3, [r7, #14]
}
 800c81c:	4618      	mov	r0, r3
 800c81e:	3710      	adds	r7, #16
 800c820:	46bd      	mov	sp, r7
 800c822:	bd80      	pop	{r7, pc}

0800c824 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c824:	b580      	push	{r7, lr}
 800c826:	b084      	sub	sp, #16
 800c828:	af00      	add	r7, sp, #0
 800c82a:	6078      	str	r0, [r7, #4]
 800c82c:	460b      	mov	r3, r1
 800c82e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c830:	2300      	movs	r3, #0
 800c832:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c834:	2300      	movs	r3, #0
 800c836:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c83e:	78fa      	ldrb	r2, [r7, #3]
 800c840:	4611      	mov	r1, r2
 800c842:	4618      	mov	r0, r3
 800c844:	f7f7 f8dd 	bl	8003a02 <HAL_PCD_EP_SetStall>
 800c848:	4603      	mov	r3, r0
 800c84a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c84c:	7bfb      	ldrb	r3, [r7, #15]
 800c84e:	4618      	mov	r0, r3
 800c850:	f000 f8cc 	bl	800c9ec <USBD_Get_USB_Status>
 800c854:	4603      	mov	r3, r0
 800c856:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c858:	7bbb      	ldrb	r3, [r7, #14]
}
 800c85a:	4618      	mov	r0, r3
 800c85c:	3710      	adds	r7, #16
 800c85e:	46bd      	mov	sp, r7
 800c860:	bd80      	pop	{r7, pc}

0800c862 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c862:	b580      	push	{r7, lr}
 800c864:	b084      	sub	sp, #16
 800c866:	af00      	add	r7, sp, #0
 800c868:	6078      	str	r0, [r7, #4]
 800c86a:	460b      	mov	r3, r1
 800c86c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c86e:	2300      	movs	r3, #0
 800c870:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c872:	2300      	movs	r3, #0
 800c874:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c87c:	78fa      	ldrb	r2, [r7, #3]
 800c87e:	4611      	mov	r1, r2
 800c880:	4618      	mov	r0, r3
 800c882:	f7f7 f921 	bl	8003ac8 <HAL_PCD_EP_ClrStall>
 800c886:	4603      	mov	r3, r0
 800c888:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c88a:	7bfb      	ldrb	r3, [r7, #15]
 800c88c:	4618      	mov	r0, r3
 800c88e:	f000 f8ad 	bl	800c9ec <USBD_Get_USB_Status>
 800c892:	4603      	mov	r3, r0
 800c894:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c896:	7bbb      	ldrb	r3, [r7, #14]
}
 800c898:	4618      	mov	r0, r3
 800c89a:	3710      	adds	r7, #16
 800c89c:	46bd      	mov	sp, r7
 800c89e:	bd80      	pop	{r7, pc}

0800c8a0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c8a0:	b480      	push	{r7}
 800c8a2:	b085      	sub	sp, #20
 800c8a4:	af00      	add	r7, sp, #0
 800c8a6:	6078      	str	r0, [r7, #4]
 800c8a8:	460b      	mov	r3, r1
 800c8aa:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c8b2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800c8b4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c8b8:	2b00      	cmp	r3, #0
 800c8ba:	da0b      	bge.n	800c8d4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800c8bc:	78fb      	ldrb	r3, [r7, #3]
 800c8be:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c8c2:	68f9      	ldr	r1, [r7, #12]
 800c8c4:	4613      	mov	r3, r2
 800c8c6:	00db      	lsls	r3, r3, #3
 800c8c8:	4413      	add	r3, r2
 800c8ca:	009b      	lsls	r3, r3, #2
 800c8cc:	440b      	add	r3, r1
 800c8ce:	3316      	adds	r3, #22
 800c8d0:	781b      	ldrb	r3, [r3, #0]
 800c8d2:	e00b      	b.n	800c8ec <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800c8d4:	78fb      	ldrb	r3, [r7, #3]
 800c8d6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c8da:	68f9      	ldr	r1, [r7, #12]
 800c8dc:	4613      	mov	r3, r2
 800c8de:	00db      	lsls	r3, r3, #3
 800c8e0:	4413      	add	r3, r2
 800c8e2:	009b      	lsls	r3, r3, #2
 800c8e4:	440b      	add	r3, r1
 800c8e6:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800c8ea:	781b      	ldrb	r3, [r3, #0]
  }
}
 800c8ec:	4618      	mov	r0, r3
 800c8ee:	3714      	adds	r7, #20
 800c8f0:	46bd      	mov	sp, r7
 800c8f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8f6:	4770      	bx	lr

0800c8f8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800c8f8:	b580      	push	{r7, lr}
 800c8fa:	b084      	sub	sp, #16
 800c8fc:	af00      	add	r7, sp, #0
 800c8fe:	6078      	str	r0, [r7, #4]
 800c900:	460b      	mov	r3, r1
 800c902:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c904:	2300      	movs	r3, #0
 800c906:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c908:	2300      	movs	r3, #0
 800c90a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c912:	78fa      	ldrb	r2, [r7, #3]
 800c914:	4611      	mov	r1, r2
 800c916:	4618      	mov	r0, r3
 800c918:	f7f6 ff26 	bl	8003768 <HAL_PCD_SetAddress>
 800c91c:	4603      	mov	r3, r0
 800c91e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c920:	7bfb      	ldrb	r3, [r7, #15]
 800c922:	4618      	mov	r0, r3
 800c924:	f000 f862 	bl	800c9ec <USBD_Get_USB_Status>
 800c928:	4603      	mov	r3, r0
 800c92a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c92c:	7bbb      	ldrb	r3, [r7, #14]
}
 800c92e:	4618      	mov	r0, r3
 800c930:	3710      	adds	r7, #16
 800c932:	46bd      	mov	sp, r7
 800c934:	bd80      	pop	{r7, pc}

0800c936 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c936:	b580      	push	{r7, lr}
 800c938:	b086      	sub	sp, #24
 800c93a:	af00      	add	r7, sp, #0
 800c93c:	60f8      	str	r0, [r7, #12]
 800c93e:	607a      	str	r2, [r7, #4]
 800c940:	603b      	str	r3, [r7, #0]
 800c942:	460b      	mov	r3, r1
 800c944:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c946:	2300      	movs	r3, #0
 800c948:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c94a:	2300      	movs	r3, #0
 800c94c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800c94e:	68fb      	ldr	r3, [r7, #12]
 800c950:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800c954:	7af9      	ldrb	r1, [r7, #11]
 800c956:	683b      	ldr	r3, [r7, #0]
 800c958:	687a      	ldr	r2, [r7, #4]
 800c95a:	f7f7 f818 	bl	800398e <HAL_PCD_EP_Transmit>
 800c95e:	4603      	mov	r3, r0
 800c960:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c962:	7dfb      	ldrb	r3, [r7, #23]
 800c964:	4618      	mov	r0, r3
 800c966:	f000 f841 	bl	800c9ec <USBD_Get_USB_Status>
 800c96a:	4603      	mov	r3, r0
 800c96c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c96e:	7dbb      	ldrb	r3, [r7, #22]
}
 800c970:	4618      	mov	r0, r3
 800c972:	3718      	adds	r7, #24
 800c974:	46bd      	mov	sp, r7
 800c976:	bd80      	pop	{r7, pc}

0800c978 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c978:	b580      	push	{r7, lr}
 800c97a:	b086      	sub	sp, #24
 800c97c:	af00      	add	r7, sp, #0
 800c97e:	60f8      	str	r0, [r7, #12]
 800c980:	607a      	str	r2, [r7, #4]
 800c982:	603b      	str	r3, [r7, #0]
 800c984:	460b      	mov	r3, r1
 800c986:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c988:	2300      	movs	r3, #0
 800c98a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c98c:	2300      	movs	r3, #0
 800c98e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800c990:	68fb      	ldr	r3, [r7, #12]
 800c992:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800c996:	7af9      	ldrb	r1, [r7, #11]
 800c998:	683b      	ldr	r3, [r7, #0]
 800c99a:	687a      	ldr	r2, [r7, #4]
 800c99c:	f7f6 ffbc 	bl	8003918 <HAL_PCD_EP_Receive>
 800c9a0:	4603      	mov	r3, r0
 800c9a2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c9a4:	7dfb      	ldrb	r3, [r7, #23]
 800c9a6:	4618      	mov	r0, r3
 800c9a8:	f000 f820 	bl	800c9ec <USBD_Get_USB_Status>
 800c9ac:	4603      	mov	r3, r0
 800c9ae:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c9b0:	7dbb      	ldrb	r3, [r7, #22]
}
 800c9b2:	4618      	mov	r0, r3
 800c9b4:	3718      	adds	r7, #24
 800c9b6:	46bd      	mov	sp, r7
 800c9b8:	bd80      	pop	{r7, pc}
	...

0800c9bc <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800c9bc:	b480      	push	{r7}
 800c9be:	b083      	sub	sp, #12
 800c9c0:	af00      	add	r7, sp, #0
 800c9c2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800c9c4:	4b03      	ldr	r3, [pc, #12]	@ (800c9d4 <USBD_static_malloc+0x18>)
}
 800c9c6:	4618      	mov	r0, r3
 800c9c8:	370c      	adds	r7, #12
 800c9ca:	46bd      	mov	sp, r7
 800c9cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9d0:	4770      	bx	lr
 800c9d2:	bf00      	nop
 800c9d4:	20005b6c 	.word	0x20005b6c

0800c9d8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800c9d8:	b480      	push	{r7}
 800c9da:	b083      	sub	sp, #12
 800c9dc:	af00      	add	r7, sp, #0
 800c9de:	6078      	str	r0, [r7, #4]

}
 800c9e0:	bf00      	nop
 800c9e2:	370c      	adds	r7, #12
 800c9e4:	46bd      	mov	sp, r7
 800c9e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9ea:	4770      	bx	lr

0800c9ec <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800c9ec:	b480      	push	{r7}
 800c9ee:	b085      	sub	sp, #20
 800c9f0:	af00      	add	r7, sp, #0
 800c9f2:	4603      	mov	r3, r0
 800c9f4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c9f6:	2300      	movs	r3, #0
 800c9f8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800c9fa:	79fb      	ldrb	r3, [r7, #7]
 800c9fc:	2b03      	cmp	r3, #3
 800c9fe:	d817      	bhi.n	800ca30 <USBD_Get_USB_Status+0x44>
 800ca00:	a201      	add	r2, pc, #4	@ (adr r2, 800ca08 <USBD_Get_USB_Status+0x1c>)
 800ca02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ca06:	bf00      	nop
 800ca08:	0800ca19 	.word	0x0800ca19
 800ca0c:	0800ca1f 	.word	0x0800ca1f
 800ca10:	0800ca25 	.word	0x0800ca25
 800ca14:	0800ca2b 	.word	0x0800ca2b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800ca18:	2300      	movs	r3, #0
 800ca1a:	73fb      	strb	r3, [r7, #15]
    break;
 800ca1c:	e00b      	b.n	800ca36 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ca1e:	2303      	movs	r3, #3
 800ca20:	73fb      	strb	r3, [r7, #15]
    break;
 800ca22:	e008      	b.n	800ca36 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ca24:	2301      	movs	r3, #1
 800ca26:	73fb      	strb	r3, [r7, #15]
    break;
 800ca28:	e005      	b.n	800ca36 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ca2a:	2303      	movs	r3, #3
 800ca2c:	73fb      	strb	r3, [r7, #15]
    break;
 800ca2e:	e002      	b.n	800ca36 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800ca30:	2303      	movs	r3, #3
 800ca32:	73fb      	strb	r3, [r7, #15]
    break;
 800ca34:	bf00      	nop
  }
  return usb_status;
 800ca36:	7bfb      	ldrb	r3, [r7, #15]
}
 800ca38:	4618      	mov	r0, r3
 800ca3a:	3714      	adds	r7, #20
 800ca3c:	46bd      	mov	sp, r7
 800ca3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca42:	4770      	bx	lr

0800ca44 <__itoa>:
 800ca44:	1e93      	subs	r3, r2, #2
 800ca46:	2b22      	cmp	r3, #34	@ 0x22
 800ca48:	b510      	push	{r4, lr}
 800ca4a:	460c      	mov	r4, r1
 800ca4c:	d904      	bls.n	800ca58 <__itoa+0x14>
 800ca4e:	2300      	movs	r3, #0
 800ca50:	700b      	strb	r3, [r1, #0]
 800ca52:	461c      	mov	r4, r3
 800ca54:	4620      	mov	r0, r4
 800ca56:	bd10      	pop	{r4, pc}
 800ca58:	2a0a      	cmp	r2, #10
 800ca5a:	d109      	bne.n	800ca70 <__itoa+0x2c>
 800ca5c:	2800      	cmp	r0, #0
 800ca5e:	da07      	bge.n	800ca70 <__itoa+0x2c>
 800ca60:	232d      	movs	r3, #45	@ 0x2d
 800ca62:	700b      	strb	r3, [r1, #0]
 800ca64:	4240      	negs	r0, r0
 800ca66:	2101      	movs	r1, #1
 800ca68:	4421      	add	r1, r4
 800ca6a:	f000 f805 	bl	800ca78 <__utoa>
 800ca6e:	e7f1      	b.n	800ca54 <__itoa+0x10>
 800ca70:	2100      	movs	r1, #0
 800ca72:	e7f9      	b.n	800ca68 <__itoa+0x24>

0800ca74 <itoa>:
 800ca74:	f7ff bfe6 	b.w	800ca44 <__itoa>

0800ca78 <__utoa>:
 800ca78:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ca7a:	4c1f      	ldr	r4, [pc, #124]	@ (800caf8 <__utoa+0x80>)
 800ca7c:	b08b      	sub	sp, #44	@ 0x2c
 800ca7e:	4605      	mov	r5, r0
 800ca80:	460b      	mov	r3, r1
 800ca82:	466e      	mov	r6, sp
 800ca84:	f104 0c20 	add.w	ip, r4, #32
 800ca88:	6820      	ldr	r0, [r4, #0]
 800ca8a:	6861      	ldr	r1, [r4, #4]
 800ca8c:	4637      	mov	r7, r6
 800ca8e:	c703      	stmia	r7!, {r0, r1}
 800ca90:	3408      	adds	r4, #8
 800ca92:	4564      	cmp	r4, ip
 800ca94:	463e      	mov	r6, r7
 800ca96:	d1f7      	bne.n	800ca88 <__utoa+0x10>
 800ca98:	7921      	ldrb	r1, [r4, #4]
 800ca9a:	7139      	strb	r1, [r7, #4]
 800ca9c:	1e91      	subs	r1, r2, #2
 800ca9e:	6820      	ldr	r0, [r4, #0]
 800caa0:	6038      	str	r0, [r7, #0]
 800caa2:	2922      	cmp	r1, #34	@ 0x22
 800caa4:	f04f 0100 	mov.w	r1, #0
 800caa8:	d904      	bls.n	800cab4 <__utoa+0x3c>
 800caaa:	7019      	strb	r1, [r3, #0]
 800caac:	460b      	mov	r3, r1
 800caae:	4618      	mov	r0, r3
 800cab0:	b00b      	add	sp, #44	@ 0x2c
 800cab2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cab4:	1e58      	subs	r0, r3, #1
 800cab6:	4684      	mov	ip, r0
 800cab8:	fbb5 f7f2 	udiv	r7, r5, r2
 800cabc:	fb02 5617 	mls	r6, r2, r7, r5
 800cac0:	3628      	adds	r6, #40	@ 0x28
 800cac2:	446e      	add	r6, sp
 800cac4:	460c      	mov	r4, r1
 800cac6:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800caca:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800cace:	462e      	mov	r6, r5
 800cad0:	42b2      	cmp	r2, r6
 800cad2:	f101 0101 	add.w	r1, r1, #1
 800cad6:	463d      	mov	r5, r7
 800cad8:	d9ee      	bls.n	800cab8 <__utoa+0x40>
 800cada:	2200      	movs	r2, #0
 800cadc:	545a      	strb	r2, [r3, r1]
 800cade:	1919      	adds	r1, r3, r4
 800cae0:	1aa5      	subs	r5, r4, r2
 800cae2:	42aa      	cmp	r2, r5
 800cae4:	dae3      	bge.n	800caae <__utoa+0x36>
 800cae6:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800caea:	780e      	ldrb	r6, [r1, #0]
 800caec:	7006      	strb	r6, [r0, #0]
 800caee:	3201      	adds	r2, #1
 800caf0:	f801 5901 	strb.w	r5, [r1], #-1
 800caf4:	e7f4      	b.n	800cae0 <__utoa+0x68>
 800caf6:	bf00      	nop
 800caf8:	0800eeac 	.word	0x0800eeac

0800cafc <sniprintf>:
 800cafc:	b40c      	push	{r2, r3}
 800cafe:	b530      	push	{r4, r5, lr}
 800cb00:	4b18      	ldr	r3, [pc, #96]	@ (800cb64 <sniprintf+0x68>)
 800cb02:	1e0c      	subs	r4, r1, #0
 800cb04:	681d      	ldr	r5, [r3, #0]
 800cb06:	b09d      	sub	sp, #116	@ 0x74
 800cb08:	da08      	bge.n	800cb1c <sniprintf+0x20>
 800cb0a:	238b      	movs	r3, #139	@ 0x8b
 800cb0c:	602b      	str	r3, [r5, #0]
 800cb0e:	f04f 30ff 	mov.w	r0, #4294967295
 800cb12:	b01d      	add	sp, #116	@ 0x74
 800cb14:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800cb18:	b002      	add	sp, #8
 800cb1a:	4770      	bx	lr
 800cb1c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800cb20:	f8ad 3014 	strh.w	r3, [sp, #20]
 800cb24:	f04f 0300 	mov.w	r3, #0
 800cb28:	931b      	str	r3, [sp, #108]	@ 0x6c
 800cb2a:	bf14      	ite	ne
 800cb2c:	f104 33ff 	addne.w	r3, r4, #4294967295
 800cb30:	4623      	moveq	r3, r4
 800cb32:	9304      	str	r3, [sp, #16]
 800cb34:	9307      	str	r3, [sp, #28]
 800cb36:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800cb3a:	9002      	str	r0, [sp, #8]
 800cb3c:	9006      	str	r0, [sp, #24]
 800cb3e:	f8ad 3016 	strh.w	r3, [sp, #22]
 800cb42:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800cb44:	ab21      	add	r3, sp, #132	@ 0x84
 800cb46:	a902      	add	r1, sp, #8
 800cb48:	4628      	mov	r0, r5
 800cb4a:	9301      	str	r3, [sp, #4]
 800cb4c:	f000 fa22 	bl	800cf94 <_svfiprintf_r>
 800cb50:	1c43      	adds	r3, r0, #1
 800cb52:	bfbc      	itt	lt
 800cb54:	238b      	movlt	r3, #139	@ 0x8b
 800cb56:	602b      	strlt	r3, [r5, #0]
 800cb58:	2c00      	cmp	r4, #0
 800cb5a:	d0da      	beq.n	800cb12 <sniprintf+0x16>
 800cb5c:	9b02      	ldr	r3, [sp, #8]
 800cb5e:	2200      	movs	r2, #0
 800cb60:	701a      	strb	r2, [r3, #0]
 800cb62:	e7d6      	b.n	800cb12 <sniprintf+0x16>
 800cb64:	20000134 	.word	0x20000134

0800cb68 <siprintf>:
 800cb68:	b40e      	push	{r1, r2, r3}
 800cb6a:	b510      	push	{r4, lr}
 800cb6c:	b09d      	sub	sp, #116	@ 0x74
 800cb6e:	ab1f      	add	r3, sp, #124	@ 0x7c
 800cb70:	9002      	str	r0, [sp, #8]
 800cb72:	9006      	str	r0, [sp, #24]
 800cb74:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800cb78:	480a      	ldr	r0, [pc, #40]	@ (800cba4 <siprintf+0x3c>)
 800cb7a:	9107      	str	r1, [sp, #28]
 800cb7c:	9104      	str	r1, [sp, #16]
 800cb7e:	490a      	ldr	r1, [pc, #40]	@ (800cba8 <siprintf+0x40>)
 800cb80:	f853 2b04 	ldr.w	r2, [r3], #4
 800cb84:	9105      	str	r1, [sp, #20]
 800cb86:	2400      	movs	r4, #0
 800cb88:	a902      	add	r1, sp, #8
 800cb8a:	6800      	ldr	r0, [r0, #0]
 800cb8c:	9301      	str	r3, [sp, #4]
 800cb8e:	941b      	str	r4, [sp, #108]	@ 0x6c
 800cb90:	f000 fa00 	bl	800cf94 <_svfiprintf_r>
 800cb94:	9b02      	ldr	r3, [sp, #8]
 800cb96:	701c      	strb	r4, [r3, #0]
 800cb98:	b01d      	add	sp, #116	@ 0x74
 800cb9a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cb9e:	b003      	add	sp, #12
 800cba0:	4770      	bx	lr
 800cba2:	bf00      	nop
 800cba4:	20000134 	.word	0x20000134
 800cba8:	ffff0208 	.word	0xffff0208

0800cbac <memset>:
 800cbac:	4402      	add	r2, r0
 800cbae:	4603      	mov	r3, r0
 800cbb0:	4293      	cmp	r3, r2
 800cbb2:	d100      	bne.n	800cbb6 <memset+0xa>
 800cbb4:	4770      	bx	lr
 800cbb6:	f803 1b01 	strb.w	r1, [r3], #1
 800cbba:	e7f9      	b.n	800cbb0 <memset+0x4>

0800cbbc <_reclaim_reent>:
 800cbbc:	4b2d      	ldr	r3, [pc, #180]	@ (800cc74 <_reclaim_reent+0xb8>)
 800cbbe:	681b      	ldr	r3, [r3, #0]
 800cbc0:	4283      	cmp	r3, r0
 800cbc2:	b570      	push	{r4, r5, r6, lr}
 800cbc4:	4604      	mov	r4, r0
 800cbc6:	d053      	beq.n	800cc70 <_reclaim_reent+0xb4>
 800cbc8:	69c3      	ldr	r3, [r0, #28]
 800cbca:	b31b      	cbz	r3, 800cc14 <_reclaim_reent+0x58>
 800cbcc:	68db      	ldr	r3, [r3, #12]
 800cbce:	b163      	cbz	r3, 800cbea <_reclaim_reent+0x2e>
 800cbd0:	2500      	movs	r5, #0
 800cbd2:	69e3      	ldr	r3, [r4, #28]
 800cbd4:	68db      	ldr	r3, [r3, #12]
 800cbd6:	5959      	ldr	r1, [r3, r5]
 800cbd8:	b9b1      	cbnz	r1, 800cc08 <_reclaim_reent+0x4c>
 800cbda:	3504      	adds	r5, #4
 800cbdc:	2d80      	cmp	r5, #128	@ 0x80
 800cbde:	d1f8      	bne.n	800cbd2 <_reclaim_reent+0x16>
 800cbe0:	69e3      	ldr	r3, [r4, #28]
 800cbe2:	4620      	mov	r0, r4
 800cbe4:	68d9      	ldr	r1, [r3, #12]
 800cbe6:	f000 f881 	bl	800ccec <_free_r>
 800cbea:	69e3      	ldr	r3, [r4, #28]
 800cbec:	6819      	ldr	r1, [r3, #0]
 800cbee:	b111      	cbz	r1, 800cbf6 <_reclaim_reent+0x3a>
 800cbf0:	4620      	mov	r0, r4
 800cbf2:	f000 f87b 	bl	800ccec <_free_r>
 800cbf6:	69e3      	ldr	r3, [r4, #28]
 800cbf8:	689d      	ldr	r5, [r3, #8]
 800cbfa:	b15d      	cbz	r5, 800cc14 <_reclaim_reent+0x58>
 800cbfc:	4629      	mov	r1, r5
 800cbfe:	4620      	mov	r0, r4
 800cc00:	682d      	ldr	r5, [r5, #0]
 800cc02:	f000 f873 	bl	800ccec <_free_r>
 800cc06:	e7f8      	b.n	800cbfa <_reclaim_reent+0x3e>
 800cc08:	680e      	ldr	r6, [r1, #0]
 800cc0a:	4620      	mov	r0, r4
 800cc0c:	f000 f86e 	bl	800ccec <_free_r>
 800cc10:	4631      	mov	r1, r6
 800cc12:	e7e1      	b.n	800cbd8 <_reclaim_reent+0x1c>
 800cc14:	6961      	ldr	r1, [r4, #20]
 800cc16:	b111      	cbz	r1, 800cc1e <_reclaim_reent+0x62>
 800cc18:	4620      	mov	r0, r4
 800cc1a:	f000 f867 	bl	800ccec <_free_r>
 800cc1e:	69e1      	ldr	r1, [r4, #28]
 800cc20:	b111      	cbz	r1, 800cc28 <_reclaim_reent+0x6c>
 800cc22:	4620      	mov	r0, r4
 800cc24:	f000 f862 	bl	800ccec <_free_r>
 800cc28:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800cc2a:	b111      	cbz	r1, 800cc32 <_reclaim_reent+0x76>
 800cc2c:	4620      	mov	r0, r4
 800cc2e:	f000 f85d 	bl	800ccec <_free_r>
 800cc32:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800cc34:	b111      	cbz	r1, 800cc3c <_reclaim_reent+0x80>
 800cc36:	4620      	mov	r0, r4
 800cc38:	f000 f858 	bl	800ccec <_free_r>
 800cc3c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800cc3e:	b111      	cbz	r1, 800cc46 <_reclaim_reent+0x8a>
 800cc40:	4620      	mov	r0, r4
 800cc42:	f000 f853 	bl	800ccec <_free_r>
 800cc46:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800cc48:	b111      	cbz	r1, 800cc50 <_reclaim_reent+0x94>
 800cc4a:	4620      	mov	r0, r4
 800cc4c:	f000 f84e 	bl	800ccec <_free_r>
 800cc50:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800cc52:	b111      	cbz	r1, 800cc5a <_reclaim_reent+0x9e>
 800cc54:	4620      	mov	r0, r4
 800cc56:	f000 f849 	bl	800ccec <_free_r>
 800cc5a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800cc5c:	b111      	cbz	r1, 800cc64 <_reclaim_reent+0xa8>
 800cc5e:	4620      	mov	r0, r4
 800cc60:	f000 f844 	bl	800ccec <_free_r>
 800cc64:	6a23      	ldr	r3, [r4, #32]
 800cc66:	b11b      	cbz	r3, 800cc70 <_reclaim_reent+0xb4>
 800cc68:	4620      	mov	r0, r4
 800cc6a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800cc6e:	4718      	bx	r3
 800cc70:	bd70      	pop	{r4, r5, r6, pc}
 800cc72:	bf00      	nop
 800cc74:	20000134 	.word	0x20000134

0800cc78 <__errno>:
 800cc78:	4b01      	ldr	r3, [pc, #4]	@ (800cc80 <__errno+0x8>)
 800cc7a:	6818      	ldr	r0, [r3, #0]
 800cc7c:	4770      	bx	lr
 800cc7e:	bf00      	nop
 800cc80:	20000134 	.word	0x20000134

0800cc84 <__libc_init_array>:
 800cc84:	b570      	push	{r4, r5, r6, lr}
 800cc86:	4d0d      	ldr	r5, [pc, #52]	@ (800ccbc <__libc_init_array+0x38>)
 800cc88:	4c0d      	ldr	r4, [pc, #52]	@ (800ccc0 <__libc_init_array+0x3c>)
 800cc8a:	1b64      	subs	r4, r4, r5
 800cc8c:	10a4      	asrs	r4, r4, #2
 800cc8e:	2600      	movs	r6, #0
 800cc90:	42a6      	cmp	r6, r4
 800cc92:	d109      	bne.n	800cca8 <__libc_init_array+0x24>
 800cc94:	4d0b      	ldr	r5, [pc, #44]	@ (800ccc4 <__libc_init_array+0x40>)
 800cc96:	4c0c      	ldr	r4, [pc, #48]	@ (800ccc8 <__libc_init_array+0x44>)
 800cc98:	f000 fc64 	bl	800d564 <_init>
 800cc9c:	1b64      	subs	r4, r4, r5
 800cc9e:	10a4      	asrs	r4, r4, #2
 800cca0:	2600      	movs	r6, #0
 800cca2:	42a6      	cmp	r6, r4
 800cca4:	d105      	bne.n	800ccb2 <__libc_init_array+0x2e>
 800cca6:	bd70      	pop	{r4, r5, r6, pc}
 800cca8:	f855 3b04 	ldr.w	r3, [r5], #4
 800ccac:	4798      	blx	r3
 800ccae:	3601      	adds	r6, #1
 800ccb0:	e7ee      	b.n	800cc90 <__libc_init_array+0xc>
 800ccb2:	f855 3b04 	ldr.w	r3, [r5], #4
 800ccb6:	4798      	blx	r3
 800ccb8:	3601      	adds	r6, #1
 800ccba:	e7f2      	b.n	800cca2 <__libc_init_array+0x1e>
 800ccbc:	0800ef0c 	.word	0x0800ef0c
 800ccc0:	0800ef0c 	.word	0x0800ef0c
 800ccc4:	0800ef0c 	.word	0x0800ef0c
 800ccc8:	0800ef10 	.word	0x0800ef10

0800cccc <__retarget_lock_acquire_recursive>:
 800cccc:	4770      	bx	lr

0800ccce <__retarget_lock_release_recursive>:
 800ccce:	4770      	bx	lr

0800ccd0 <memcpy>:
 800ccd0:	440a      	add	r2, r1
 800ccd2:	4291      	cmp	r1, r2
 800ccd4:	f100 33ff 	add.w	r3, r0, #4294967295
 800ccd8:	d100      	bne.n	800ccdc <memcpy+0xc>
 800ccda:	4770      	bx	lr
 800ccdc:	b510      	push	{r4, lr}
 800ccde:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cce2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cce6:	4291      	cmp	r1, r2
 800cce8:	d1f9      	bne.n	800ccde <memcpy+0xe>
 800ccea:	bd10      	pop	{r4, pc}

0800ccec <_free_r>:
 800ccec:	b538      	push	{r3, r4, r5, lr}
 800ccee:	4605      	mov	r5, r0
 800ccf0:	2900      	cmp	r1, #0
 800ccf2:	d041      	beq.n	800cd78 <_free_r+0x8c>
 800ccf4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ccf8:	1f0c      	subs	r4, r1, #4
 800ccfa:	2b00      	cmp	r3, #0
 800ccfc:	bfb8      	it	lt
 800ccfe:	18e4      	addlt	r4, r4, r3
 800cd00:	f000 f8e0 	bl	800cec4 <__malloc_lock>
 800cd04:	4a1d      	ldr	r2, [pc, #116]	@ (800cd7c <_free_r+0x90>)
 800cd06:	6813      	ldr	r3, [r2, #0]
 800cd08:	b933      	cbnz	r3, 800cd18 <_free_r+0x2c>
 800cd0a:	6063      	str	r3, [r4, #4]
 800cd0c:	6014      	str	r4, [r2, #0]
 800cd0e:	4628      	mov	r0, r5
 800cd10:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cd14:	f000 b8dc 	b.w	800ced0 <__malloc_unlock>
 800cd18:	42a3      	cmp	r3, r4
 800cd1a:	d908      	bls.n	800cd2e <_free_r+0x42>
 800cd1c:	6820      	ldr	r0, [r4, #0]
 800cd1e:	1821      	adds	r1, r4, r0
 800cd20:	428b      	cmp	r3, r1
 800cd22:	bf01      	itttt	eq
 800cd24:	6819      	ldreq	r1, [r3, #0]
 800cd26:	685b      	ldreq	r3, [r3, #4]
 800cd28:	1809      	addeq	r1, r1, r0
 800cd2a:	6021      	streq	r1, [r4, #0]
 800cd2c:	e7ed      	b.n	800cd0a <_free_r+0x1e>
 800cd2e:	461a      	mov	r2, r3
 800cd30:	685b      	ldr	r3, [r3, #4]
 800cd32:	b10b      	cbz	r3, 800cd38 <_free_r+0x4c>
 800cd34:	42a3      	cmp	r3, r4
 800cd36:	d9fa      	bls.n	800cd2e <_free_r+0x42>
 800cd38:	6811      	ldr	r1, [r2, #0]
 800cd3a:	1850      	adds	r0, r2, r1
 800cd3c:	42a0      	cmp	r0, r4
 800cd3e:	d10b      	bne.n	800cd58 <_free_r+0x6c>
 800cd40:	6820      	ldr	r0, [r4, #0]
 800cd42:	4401      	add	r1, r0
 800cd44:	1850      	adds	r0, r2, r1
 800cd46:	4283      	cmp	r3, r0
 800cd48:	6011      	str	r1, [r2, #0]
 800cd4a:	d1e0      	bne.n	800cd0e <_free_r+0x22>
 800cd4c:	6818      	ldr	r0, [r3, #0]
 800cd4e:	685b      	ldr	r3, [r3, #4]
 800cd50:	6053      	str	r3, [r2, #4]
 800cd52:	4408      	add	r0, r1
 800cd54:	6010      	str	r0, [r2, #0]
 800cd56:	e7da      	b.n	800cd0e <_free_r+0x22>
 800cd58:	d902      	bls.n	800cd60 <_free_r+0x74>
 800cd5a:	230c      	movs	r3, #12
 800cd5c:	602b      	str	r3, [r5, #0]
 800cd5e:	e7d6      	b.n	800cd0e <_free_r+0x22>
 800cd60:	6820      	ldr	r0, [r4, #0]
 800cd62:	1821      	adds	r1, r4, r0
 800cd64:	428b      	cmp	r3, r1
 800cd66:	bf04      	itt	eq
 800cd68:	6819      	ldreq	r1, [r3, #0]
 800cd6a:	685b      	ldreq	r3, [r3, #4]
 800cd6c:	6063      	str	r3, [r4, #4]
 800cd6e:	bf04      	itt	eq
 800cd70:	1809      	addeq	r1, r1, r0
 800cd72:	6021      	streq	r1, [r4, #0]
 800cd74:	6054      	str	r4, [r2, #4]
 800cd76:	e7ca      	b.n	800cd0e <_free_r+0x22>
 800cd78:	bd38      	pop	{r3, r4, r5, pc}
 800cd7a:	bf00      	nop
 800cd7c:	20005cc4 	.word	0x20005cc4

0800cd80 <sbrk_aligned>:
 800cd80:	b570      	push	{r4, r5, r6, lr}
 800cd82:	4e0f      	ldr	r6, [pc, #60]	@ (800cdc0 <sbrk_aligned+0x40>)
 800cd84:	460c      	mov	r4, r1
 800cd86:	6831      	ldr	r1, [r6, #0]
 800cd88:	4605      	mov	r5, r0
 800cd8a:	b911      	cbnz	r1, 800cd92 <sbrk_aligned+0x12>
 800cd8c:	f000 fba4 	bl	800d4d8 <_sbrk_r>
 800cd90:	6030      	str	r0, [r6, #0]
 800cd92:	4621      	mov	r1, r4
 800cd94:	4628      	mov	r0, r5
 800cd96:	f000 fb9f 	bl	800d4d8 <_sbrk_r>
 800cd9a:	1c43      	adds	r3, r0, #1
 800cd9c:	d103      	bne.n	800cda6 <sbrk_aligned+0x26>
 800cd9e:	f04f 34ff 	mov.w	r4, #4294967295
 800cda2:	4620      	mov	r0, r4
 800cda4:	bd70      	pop	{r4, r5, r6, pc}
 800cda6:	1cc4      	adds	r4, r0, #3
 800cda8:	f024 0403 	bic.w	r4, r4, #3
 800cdac:	42a0      	cmp	r0, r4
 800cdae:	d0f8      	beq.n	800cda2 <sbrk_aligned+0x22>
 800cdb0:	1a21      	subs	r1, r4, r0
 800cdb2:	4628      	mov	r0, r5
 800cdb4:	f000 fb90 	bl	800d4d8 <_sbrk_r>
 800cdb8:	3001      	adds	r0, #1
 800cdba:	d1f2      	bne.n	800cda2 <sbrk_aligned+0x22>
 800cdbc:	e7ef      	b.n	800cd9e <sbrk_aligned+0x1e>
 800cdbe:	bf00      	nop
 800cdc0:	20005cc0 	.word	0x20005cc0

0800cdc4 <_malloc_r>:
 800cdc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cdc8:	1ccd      	adds	r5, r1, #3
 800cdca:	f025 0503 	bic.w	r5, r5, #3
 800cdce:	3508      	adds	r5, #8
 800cdd0:	2d0c      	cmp	r5, #12
 800cdd2:	bf38      	it	cc
 800cdd4:	250c      	movcc	r5, #12
 800cdd6:	2d00      	cmp	r5, #0
 800cdd8:	4606      	mov	r6, r0
 800cdda:	db01      	blt.n	800cde0 <_malloc_r+0x1c>
 800cddc:	42a9      	cmp	r1, r5
 800cdde:	d904      	bls.n	800cdea <_malloc_r+0x26>
 800cde0:	230c      	movs	r3, #12
 800cde2:	6033      	str	r3, [r6, #0]
 800cde4:	2000      	movs	r0, #0
 800cde6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cdea:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800cec0 <_malloc_r+0xfc>
 800cdee:	f000 f869 	bl	800cec4 <__malloc_lock>
 800cdf2:	f8d8 3000 	ldr.w	r3, [r8]
 800cdf6:	461c      	mov	r4, r3
 800cdf8:	bb44      	cbnz	r4, 800ce4c <_malloc_r+0x88>
 800cdfa:	4629      	mov	r1, r5
 800cdfc:	4630      	mov	r0, r6
 800cdfe:	f7ff ffbf 	bl	800cd80 <sbrk_aligned>
 800ce02:	1c43      	adds	r3, r0, #1
 800ce04:	4604      	mov	r4, r0
 800ce06:	d158      	bne.n	800ceba <_malloc_r+0xf6>
 800ce08:	f8d8 4000 	ldr.w	r4, [r8]
 800ce0c:	4627      	mov	r7, r4
 800ce0e:	2f00      	cmp	r7, #0
 800ce10:	d143      	bne.n	800ce9a <_malloc_r+0xd6>
 800ce12:	2c00      	cmp	r4, #0
 800ce14:	d04b      	beq.n	800ceae <_malloc_r+0xea>
 800ce16:	6823      	ldr	r3, [r4, #0]
 800ce18:	4639      	mov	r1, r7
 800ce1a:	4630      	mov	r0, r6
 800ce1c:	eb04 0903 	add.w	r9, r4, r3
 800ce20:	f000 fb5a 	bl	800d4d8 <_sbrk_r>
 800ce24:	4581      	cmp	r9, r0
 800ce26:	d142      	bne.n	800ceae <_malloc_r+0xea>
 800ce28:	6821      	ldr	r1, [r4, #0]
 800ce2a:	1a6d      	subs	r5, r5, r1
 800ce2c:	4629      	mov	r1, r5
 800ce2e:	4630      	mov	r0, r6
 800ce30:	f7ff ffa6 	bl	800cd80 <sbrk_aligned>
 800ce34:	3001      	adds	r0, #1
 800ce36:	d03a      	beq.n	800ceae <_malloc_r+0xea>
 800ce38:	6823      	ldr	r3, [r4, #0]
 800ce3a:	442b      	add	r3, r5
 800ce3c:	6023      	str	r3, [r4, #0]
 800ce3e:	f8d8 3000 	ldr.w	r3, [r8]
 800ce42:	685a      	ldr	r2, [r3, #4]
 800ce44:	bb62      	cbnz	r2, 800cea0 <_malloc_r+0xdc>
 800ce46:	f8c8 7000 	str.w	r7, [r8]
 800ce4a:	e00f      	b.n	800ce6c <_malloc_r+0xa8>
 800ce4c:	6822      	ldr	r2, [r4, #0]
 800ce4e:	1b52      	subs	r2, r2, r5
 800ce50:	d420      	bmi.n	800ce94 <_malloc_r+0xd0>
 800ce52:	2a0b      	cmp	r2, #11
 800ce54:	d917      	bls.n	800ce86 <_malloc_r+0xc2>
 800ce56:	1961      	adds	r1, r4, r5
 800ce58:	42a3      	cmp	r3, r4
 800ce5a:	6025      	str	r5, [r4, #0]
 800ce5c:	bf18      	it	ne
 800ce5e:	6059      	strne	r1, [r3, #4]
 800ce60:	6863      	ldr	r3, [r4, #4]
 800ce62:	bf08      	it	eq
 800ce64:	f8c8 1000 	streq.w	r1, [r8]
 800ce68:	5162      	str	r2, [r4, r5]
 800ce6a:	604b      	str	r3, [r1, #4]
 800ce6c:	4630      	mov	r0, r6
 800ce6e:	f000 f82f 	bl	800ced0 <__malloc_unlock>
 800ce72:	f104 000b 	add.w	r0, r4, #11
 800ce76:	1d23      	adds	r3, r4, #4
 800ce78:	f020 0007 	bic.w	r0, r0, #7
 800ce7c:	1ac2      	subs	r2, r0, r3
 800ce7e:	bf1c      	itt	ne
 800ce80:	1a1b      	subne	r3, r3, r0
 800ce82:	50a3      	strne	r3, [r4, r2]
 800ce84:	e7af      	b.n	800cde6 <_malloc_r+0x22>
 800ce86:	6862      	ldr	r2, [r4, #4]
 800ce88:	42a3      	cmp	r3, r4
 800ce8a:	bf0c      	ite	eq
 800ce8c:	f8c8 2000 	streq.w	r2, [r8]
 800ce90:	605a      	strne	r2, [r3, #4]
 800ce92:	e7eb      	b.n	800ce6c <_malloc_r+0xa8>
 800ce94:	4623      	mov	r3, r4
 800ce96:	6864      	ldr	r4, [r4, #4]
 800ce98:	e7ae      	b.n	800cdf8 <_malloc_r+0x34>
 800ce9a:	463c      	mov	r4, r7
 800ce9c:	687f      	ldr	r7, [r7, #4]
 800ce9e:	e7b6      	b.n	800ce0e <_malloc_r+0x4a>
 800cea0:	461a      	mov	r2, r3
 800cea2:	685b      	ldr	r3, [r3, #4]
 800cea4:	42a3      	cmp	r3, r4
 800cea6:	d1fb      	bne.n	800cea0 <_malloc_r+0xdc>
 800cea8:	2300      	movs	r3, #0
 800ceaa:	6053      	str	r3, [r2, #4]
 800ceac:	e7de      	b.n	800ce6c <_malloc_r+0xa8>
 800ceae:	230c      	movs	r3, #12
 800ceb0:	6033      	str	r3, [r6, #0]
 800ceb2:	4630      	mov	r0, r6
 800ceb4:	f000 f80c 	bl	800ced0 <__malloc_unlock>
 800ceb8:	e794      	b.n	800cde4 <_malloc_r+0x20>
 800ceba:	6005      	str	r5, [r0, #0]
 800cebc:	e7d6      	b.n	800ce6c <_malloc_r+0xa8>
 800cebe:	bf00      	nop
 800cec0:	20005cc4 	.word	0x20005cc4

0800cec4 <__malloc_lock>:
 800cec4:	4801      	ldr	r0, [pc, #4]	@ (800cecc <__malloc_lock+0x8>)
 800cec6:	f7ff bf01 	b.w	800cccc <__retarget_lock_acquire_recursive>
 800ceca:	bf00      	nop
 800cecc:	20005cbc 	.word	0x20005cbc

0800ced0 <__malloc_unlock>:
 800ced0:	4801      	ldr	r0, [pc, #4]	@ (800ced8 <__malloc_unlock+0x8>)
 800ced2:	f7ff befc 	b.w	800ccce <__retarget_lock_release_recursive>
 800ced6:	bf00      	nop
 800ced8:	20005cbc 	.word	0x20005cbc

0800cedc <__ssputs_r>:
 800cedc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cee0:	688e      	ldr	r6, [r1, #8]
 800cee2:	461f      	mov	r7, r3
 800cee4:	42be      	cmp	r6, r7
 800cee6:	680b      	ldr	r3, [r1, #0]
 800cee8:	4682      	mov	sl, r0
 800ceea:	460c      	mov	r4, r1
 800ceec:	4690      	mov	r8, r2
 800ceee:	d82d      	bhi.n	800cf4c <__ssputs_r+0x70>
 800cef0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800cef4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800cef8:	d026      	beq.n	800cf48 <__ssputs_r+0x6c>
 800cefa:	6965      	ldr	r5, [r4, #20]
 800cefc:	6909      	ldr	r1, [r1, #16]
 800cefe:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800cf02:	eba3 0901 	sub.w	r9, r3, r1
 800cf06:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800cf0a:	1c7b      	adds	r3, r7, #1
 800cf0c:	444b      	add	r3, r9
 800cf0e:	106d      	asrs	r5, r5, #1
 800cf10:	429d      	cmp	r5, r3
 800cf12:	bf38      	it	cc
 800cf14:	461d      	movcc	r5, r3
 800cf16:	0553      	lsls	r3, r2, #21
 800cf18:	d527      	bpl.n	800cf6a <__ssputs_r+0x8e>
 800cf1a:	4629      	mov	r1, r5
 800cf1c:	f7ff ff52 	bl	800cdc4 <_malloc_r>
 800cf20:	4606      	mov	r6, r0
 800cf22:	b360      	cbz	r0, 800cf7e <__ssputs_r+0xa2>
 800cf24:	6921      	ldr	r1, [r4, #16]
 800cf26:	464a      	mov	r2, r9
 800cf28:	f7ff fed2 	bl	800ccd0 <memcpy>
 800cf2c:	89a3      	ldrh	r3, [r4, #12]
 800cf2e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800cf32:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cf36:	81a3      	strh	r3, [r4, #12]
 800cf38:	6126      	str	r6, [r4, #16]
 800cf3a:	6165      	str	r5, [r4, #20]
 800cf3c:	444e      	add	r6, r9
 800cf3e:	eba5 0509 	sub.w	r5, r5, r9
 800cf42:	6026      	str	r6, [r4, #0]
 800cf44:	60a5      	str	r5, [r4, #8]
 800cf46:	463e      	mov	r6, r7
 800cf48:	42be      	cmp	r6, r7
 800cf4a:	d900      	bls.n	800cf4e <__ssputs_r+0x72>
 800cf4c:	463e      	mov	r6, r7
 800cf4e:	6820      	ldr	r0, [r4, #0]
 800cf50:	4632      	mov	r2, r6
 800cf52:	4641      	mov	r1, r8
 800cf54:	f000 faa6 	bl	800d4a4 <memmove>
 800cf58:	68a3      	ldr	r3, [r4, #8]
 800cf5a:	1b9b      	subs	r3, r3, r6
 800cf5c:	60a3      	str	r3, [r4, #8]
 800cf5e:	6823      	ldr	r3, [r4, #0]
 800cf60:	4433      	add	r3, r6
 800cf62:	6023      	str	r3, [r4, #0]
 800cf64:	2000      	movs	r0, #0
 800cf66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cf6a:	462a      	mov	r2, r5
 800cf6c:	f000 fac4 	bl	800d4f8 <_realloc_r>
 800cf70:	4606      	mov	r6, r0
 800cf72:	2800      	cmp	r0, #0
 800cf74:	d1e0      	bne.n	800cf38 <__ssputs_r+0x5c>
 800cf76:	6921      	ldr	r1, [r4, #16]
 800cf78:	4650      	mov	r0, sl
 800cf7a:	f7ff feb7 	bl	800ccec <_free_r>
 800cf7e:	230c      	movs	r3, #12
 800cf80:	f8ca 3000 	str.w	r3, [sl]
 800cf84:	89a3      	ldrh	r3, [r4, #12]
 800cf86:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cf8a:	81a3      	strh	r3, [r4, #12]
 800cf8c:	f04f 30ff 	mov.w	r0, #4294967295
 800cf90:	e7e9      	b.n	800cf66 <__ssputs_r+0x8a>
	...

0800cf94 <_svfiprintf_r>:
 800cf94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf98:	4698      	mov	r8, r3
 800cf9a:	898b      	ldrh	r3, [r1, #12]
 800cf9c:	061b      	lsls	r3, r3, #24
 800cf9e:	b09d      	sub	sp, #116	@ 0x74
 800cfa0:	4607      	mov	r7, r0
 800cfa2:	460d      	mov	r5, r1
 800cfa4:	4614      	mov	r4, r2
 800cfa6:	d510      	bpl.n	800cfca <_svfiprintf_r+0x36>
 800cfa8:	690b      	ldr	r3, [r1, #16]
 800cfaa:	b973      	cbnz	r3, 800cfca <_svfiprintf_r+0x36>
 800cfac:	2140      	movs	r1, #64	@ 0x40
 800cfae:	f7ff ff09 	bl	800cdc4 <_malloc_r>
 800cfb2:	6028      	str	r0, [r5, #0]
 800cfb4:	6128      	str	r0, [r5, #16]
 800cfb6:	b930      	cbnz	r0, 800cfc6 <_svfiprintf_r+0x32>
 800cfb8:	230c      	movs	r3, #12
 800cfba:	603b      	str	r3, [r7, #0]
 800cfbc:	f04f 30ff 	mov.w	r0, #4294967295
 800cfc0:	b01d      	add	sp, #116	@ 0x74
 800cfc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cfc6:	2340      	movs	r3, #64	@ 0x40
 800cfc8:	616b      	str	r3, [r5, #20]
 800cfca:	2300      	movs	r3, #0
 800cfcc:	9309      	str	r3, [sp, #36]	@ 0x24
 800cfce:	2320      	movs	r3, #32
 800cfd0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800cfd4:	f8cd 800c 	str.w	r8, [sp, #12]
 800cfd8:	2330      	movs	r3, #48	@ 0x30
 800cfda:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800d178 <_svfiprintf_r+0x1e4>
 800cfde:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800cfe2:	f04f 0901 	mov.w	r9, #1
 800cfe6:	4623      	mov	r3, r4
 800cfe8:	469a      	mov	sl, r3
 800cfea:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cfee:	b10a      	cbz	r2, 800cff4 <_svfiprintf_r+0x60>
 800cff0:	2a25      	cmp	r2, #37	@ 0x25
 800cff2:	d1f9      	bne.n	800cfe8 <_svfiprintf_r+0x54>
 800cff4:	ebba 0b04 	subs.w	fp, sl, r4
 800cff8:	d00b      	beq.n	800d012 <_svfiprintf_r+0x7e>
 800cffa:	465b      	mov	r3, fp
 800cffc:	4622      	mov	r2, r4
 800cffe:	4629      	mov	r1, r5
 800d000:	4638      	mov	r0, r7
 800d002:	f7ff ff6b 	bl	800cedc <__ssputs_r>
 800d006:	3001      	adds	r0, #1
 800d008:	f000 80a7 	beq.w	800d15a <_svfiprintf_r+0x1c6>
 800d00c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d00e:	445a      	add	r2, fp
 800d010:	9209      	str	r2, [sp, #36]	@ 0x24
 800d012:	f89a 3000 	ldrb.w	r3, [sl]
 800d016:	2b00      	cmp	r3, #0
 800d018:	f000 809f 	beq.w	800d15a <_svfiprintf_r+0x1c6>
 800d01c:	2300      	movs	r3, #0
 800d01e:	f04f 32ff 	mov.w	r2, #4294967295
 800d022:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d026:	f10a 0a01 	add.w	sl, sl, #1
 800d02a:	9304      	str	r3, [sp, #16]
 800d02c:	9307      	str	r3, [sp, #28]
 800d02e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d032:	931a      	str	r3, [sp, #104]	@ 0x68
 800d034:	4654      	mov	r4, sl
 800d036:	2205      	movs	r2, #5
 800d038:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d03c:	484e      	ldr	r0, [pc, #312]	@ (800d178 <_svfiprintf_r+0x1e4>)
 800d03e:	f7f3 f8cf 	bl	80001e0 <memchr>
 800d042:	9a04      	ldr	r2, [sp, #16]
 800d044:	b9d8      	cbnz	r0, 800d07e <_svfiprintf_r+0xea>
 800d046:	06d0      	lsls	r0, r2, #27
 800d048:	bf44      	itt	mi
 800d04a:	2320      	movmi	r3, #32
 800d04c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d050:	0711      	lsls	r1, r2, #28
 800d052:	bf44      	itt	mi
 800d054:	232b      	movmi	r3, #43	@ 0x2b
 800d056:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d05a:	f89a 3000 	ldrb.w	r3, [sl]
 800d05e:	2b2a      	cmp	r3, #42	@ 0x2a
 800d060:	d015      	beq.n	800d08e <_svfiprintf_r+0xfa>
 800d062:	9a07      	ldr	r2, [sp, #28]
 800d064:	4654      	mov	r4, sl
 800d066:	2000      	movs	r0, #0
 800d068:	f04f 0c0a 	mov.w	ip, #10
 800d06c:	4621      	mov	r1, r4
 800d06e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d072:	3b30      	subs	r3, #48	@ 0x30
 800d074:	2b09      	cmp	r3, #9
 800d076:	d94b      	bls.n	800d110 <_svfiprintf_r+0x17c>
 800d078:	b1b0      	cbz	r0, 800d0a8 <_svfiprintf_r+0x114>
 800d07a:	9207      	str	r2, [sp, #28]
 800d07c:	e014      	b.n	800d0a8 <_svfiprintf_r+0x114>
 800d07e:	eba0 0308 	sub.w	r3, r0, r8
 800d082:	fa09 f303 	lsl.w	r3, r9, r3
 800d086:	4313      	orrs	r3, r2
 800d088:	9304      	str	r3, [sp, #16]
 800d08a:	46a2      	mov	sl, r4
 800d08c:	e7d2      	b.n	800d034 <_svfiprintf_r+0xa0>
 800d08e:	9b03      	ldr	r3, [sp, #12]
 800d090:	1d19      	adds	r1, r3, #4
 800d092:	681b      	ldr	r3, [r3, #0]
 800d094:	9103      	str	r1, [sp, #12]
 800d096:	2b00      	cmp	r3, #0
 800d098:	bfbb      	ittet	lt
 800d09a:	425b      	neglt	r3, r3
 800d09c:	f042 0202 	orrlt.w	r2, r2, #2
 800d0a0:	9307      	strge	r3, [sp, #28]
 800d0a2:	9307      	strlt	r3, [sp, #28]
 800d0a4:	bfb8      	it	lt
 800d0a6:	9204      	strlt	r2, [sp, #16]
 800d0a8:	7823      	ldrb	r3, [r4, #0]
 800d0aa:	2b2e      	cmp	r3, #46	@ 0x2e
 800d0ac:	d10a      	bne.n	800d0c4 <_svfiprintf_r+0x130>
 800d0ae:	7863      	ldrb	r3, [r4, #1]
 800d0b0:	2b2a      	cmp	r3, #42	@ 0x2a
 800d0b2:	d132      	bne.n	800d11a <_svfiprintf_r+0x186>
 800d0b4:	9b03      	ldr	r3, [sp, #12]
 800d0b6:	1d1a      	adds	r2, r3, #4
 800d0b8:	681b      	ldr	r3, [r3, #0]
 800d0ba:	9203      	str	r2, [sp, #12]
 800d0bc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d0c0:	3402      	adds	r4, #2
 800d0c2:	9305      	str	r3, [sp, #20]
 800d0c4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800d188 <_svfiprintf_r+0x1f4>
 800d0c8:	7821      	ldrb	r1, [r4, #0]
 800d0ca:	2203      	movs	r2, #3
 800d0cc:	4650      	mov	r0, sl
 800d0ce:	f7f3 f887 	bl	80001e0 <memchr>
 800d0d2:	b138      	cbz	r0, 800d0e4 <_svfiprintf_r+0x150>
 800d0d4:	9b04      	ldr	r3, [sp, #16]
 800d0d6:	eba0 000a 	sub.w	r0, r0, sl
 800d0da:	2240      	movs	r2, #64	@ 0x40
 800d0dc:	4082      	lsls	r2, r0
 800d0de:	4313      	orrs	r3, r2
 800d0e0:	3401      	adds	r4, #1
 800d0e2:	9304      	str	r3, [sp, #16]
 800d0e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d0e8:	4824      	ldr	r0, [pc, #144]	@ (800d17c <_svfiprintf_r+0x1e8>)
 800d0ea:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d0ee:	2206      	movs	r2, #6
 800d0f0:	f7f3 f876 	bl	80001e0 <memchr>
 800d0f4:	2800      	cmp	r0, #0
 800d0f6:	d036      	beq.n	800d166 <_svfiprintf_r+0x1d2>
 800d0f8:	4b21      	ldr	r3, [pc, #132]	@ (800d180 <_svfiprintf_r+0x1ec>)
 800d0fa:	bb1b      	cbnz	r3, 800d144 <_svfiprintf_r+0x1b0>
 800d0fc:	9b03      	ldr	r3, [sp, #12]
 800d0fe:	3307      	adds	r3, #7
 800d100:	f023 0307 	bic.w	r3, r3, #7
 800d104:	3308      	adds	r3, #8
 800d106:	9303      	str	r3, [sp, #12]
 800d108:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d10a:	4433      	add	r3, r6
 800d10c:	9309      	str	r3, [sp, #36]	@ 0x24
 800d10e:	e76a      	b.n	800cfe6 <_svfiprintf_r+0x52>
 800d110:	fb0c 3202 	mla	r2, ip, r2, r3
 800d114:	460c      	mov	r4, r1
 800d116:	2001      	movs	r0, #1
 800d118:	e7a8      	b.n	800d06c <_svfiprintf_r+0xd8>
 800d11a:	2300      	movs	r3, #0
 800d11c:	3401      	adds	r4, #1
 800d11e:	9305      	str	r3, [sp, #20]
 800d120:	4619      	mov	r1, r3
 800d122:	f04f 0c0a 	mov.w	ip, #10
 800d126:	4620      	mov	r0, r4
 800d128:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d12c:	3a30      	subs	r2, #48	@ 0x30
 800d12e:	2a09      	cmp	r2, #9
 800d130:	d903      	bls.n	800d13a <_svfiprintf_r+0x1a6>
 800d132:	2b00      	cmp	r3, #0
 800d134:	d0c6      	beq.n	800d0c4 <_svfiprintf_r+0x130>
 800d136:	9105      	str	r1, [sp, #20]
 800d138:	e7c4      	b.n	800d0c4 <_svfiprintf_r+0x130>
 800d13a:	fb0c 2101 	mla	r1, ip, r1, r2
 800d13e:	4604      	mov	r4, r0
 800d140:	2301      	movs	r3, #1
 800d142:	e7f0      	b.n	800d126 <_svfiprintf_r+0x192>
 800d144:	ab03      	add	r3, sp, #12
 800d146:	9300      	str	r3, [sp, #0]
 800d148:	462a      	mov	r2, r5
 800d14a:	4b0e      	ldr	r3, [pc, #56]	@ (800d184 <_svfiprintf_r+0x1f0>)
 800d14c:	a904      	add	r1, sp, #16
 800d14e:	4638      	mov	r0, r7
 800d150:	f3af 8000 	nop.w
 800d154:	1c42      	adds	r2, r0, #1
 800d156:	4606      	mov	r6, r0
 800d158:	d1d6      	bne.n	800d108 <_svfiprintf_r+0x174>
 800d15a:	89ab      	ldrh	r3, [r5, #12]
 800d15c:	065b      	lsls	r3, r3, #25
 800d15e:	f53f af2d 	bmi.w	800cfbc <_svfiprintf_r+0x28>
 800d162:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d164:	e72c      	b.n	800cfc0 <_svfiprintf_r+0x2c>
 800d166:	ab03      	add	r3, sp, #12
 800d168:	9300      	str	r3, [sp, #0]
 800d16a:	462a      	mov	r2, r5
 800d16c:	4b05      	ldr	r3, [pc, #20]	@ (800d184 <_svfiprintf_r+0x1f0>)
 800d16e:	a904      	add	r1, sp, #16
 800d170:	4638      	mov	r0, r7
 800d172:	f000 f879 	bl	800d268 <_printf_i>
 800d176:	e7ed      	b.n	800d154 <_svfiprintf_r+0x1c0>
 800d178:	0800eed1 	.word	0x0800eed1
 800d17c:	0800eedb 	.word	0x0800eedb
 800d180:	00000000 	.word	0x00000000
 800d184:	0800cedd 	.word	0x0800cedd
 800d188:	0800eed7 	.word	0x0800eed7

0800d18c <_printf_common>:
 800d18c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d190:	4616      	mov	r6, r2
 800d192:	4698      	mov	r8, r3
 800d194:	688a      	ldr	r2, [r1, #8]
 800d196:	690b      	ldr	r3, [r1, #16]
 800d198:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800d19c:	4293      	cmp	r3, r2
 800d19e:	bfb8      	it	lt
 800d1a0:	4613      	movlt	r3, r2
 800d1a2:	6033      	str	r3, [r6, #0]
 800d1a4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800d1a8:	4607      	mov	r7, r0
 800d1aa:	460c      	mov	r4, r1
 800d1ac:	b10a      	cbz	r2, 800d1b2 <_printf_common+0x26>
 800d1ae:	3301      	adds	r3, #1
 800d1b0:	6033      	str	r3, [r6, #0]
 800d1b2:	6823      	ldr	r3, [r4, #0]
 800d1b4:	0699      	lsls	r1, r3, #26
 800d1b6:	bf42      	ittt	mi
 800d1b8:	6833      	ldrmi	r3, [r6, #0]
 800d1ba:	3302      	addmi	r3, #2
 800d1bc:	6033      	strmi	r3, [r6, #0]
 800d1be:	6825      	ldr	r5, [r4, #0]
 800d1c0:	f015 0506 	ands.w	r5, r5, #6
 800d1c4:	d106      	bne.n	800d1d4 <_printf_common+0x48>
 800d1c6:	f104 0a19 	add.w	sl, r4, #25
 800d1ca:	68e3      	ldr	r3, [r4, #12]
 800d1cc:	6832      	ldr	r2, [r6, #0]
 800d1ce:	1a9b      	subs	r3, r3, r2
 800d1d0:	42ab      	cmp	r3, r5
 800d1d2:	dc26      	bgt.n	800d222 <_printf_common+0x96>
 800d1d4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800d1d8:	6822      	ldr	r2, [r4, #0]
 800d1da:	3b00      	subs	r3, #0
 800d1dc:	bf18      	it	ne
 800d1de:	2301      	movne	r3, #1
 800d1e0:	0692      	lsls	r2, r2, #26
 800d1e2:	d42b      	bmi.n	800d23c <_printf_common+0xb0>
 800d1e4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800d1e8:	4641      	mov	r1, r8
 800d1ea:	4638      	mov	r0, r7
 800d1ec:	47c8      	blx	r9
 800d1ee:	3001      	adds	r0, #1
 800d1f0:	d01e      	beq.n	800d230 <_printf_common+0xa4>
 800d1f2:	6823      	ldr	r3, [r4, #0]
 800d1f4:	6922      	ldr	r2, [r4, #16]
 800d1f6:	f003 0306 	and.w	r3, r3, #6
 800d1fa:	2b04      	cmp	r3, #4
 800d1fc:	bf02      	ittt	eq
 800d1fe:	68e5      	ldreq	r5, [r4, #12]
 800d200:	6833      	ldreq	r3, [r6, #0]
 800d202:	1aed      	subeq	r5, r5, r3
 800d204:	68a3      	ldr	r3, [r4, #8]
 800d206:	bf0c      	ite	eq
 800d208:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d20c:	2500      	movne	r5, #0
 800d20e:	4293      	cmp	r3, r2
 800d210:	bfc4      	itt	gt
 800d212:	1a9b      	subgt	r3, r3, r2
 800d214:	18ed      	addgt	r5, r5, r3
 800d216:	2600      	movs	r6, #0
 800d218:	341a      	adds	r4, #26
 800d21a:	42b5      	cmp	r5, r6
 800d21c:	d11a      	bne.n	800d254 <_printf_common+0xc8>
 800d21e:	2000      	movs	r0, #0
 800d220:	e008      	b.n	800d234 <_printf_common+0xa8>
 800d222:	2301      	movs	r3, #1
 800d224:	4652      	mov	r2, sl
 800d226:	4641      	mov	r1, r8
 800d228:	4638      	mov	r0, r7
 800d22a:	47c8      	blx	r9
 800d22c:	3001      	adds	r0, #1
 800d22e:	d103      	bne.n	800d238 <_printf_common+0xac>
 800d230:	f04f 30ff 	mov.w	r0, #4294967295
 800d234:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d238:	3501      	adds	r5, #1
 800d23a:	e7c6      	b.n	800d1ca <_printf_common+0x3e>
 800d23c:	18e1      	adds	r1, r4, r3
 800d23e:	1c5a      	adds	r2, r3, #1
 800d240:	2030      	movs	r0, #48	@ 0x30
 800d242:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800d246:	4422      	add	r2, r4
 800d248:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800d24c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800d250:	3302      	adds	r3, #2
 800d252:	e7c7      	b.n	800d1e4 <_printf_common+0x58>
 800d254:	2301      	movs	r3, #1
 800d256:	4622      	mov	r2, r4
 800d258:	4641      	mov	r1, r8
 800d25a:	4638      	mov	r0, r7
 800d25c:	47c8      	blx	r9
 800d25e:	3001      	adds	r0, #1
 800d260:	d0e6      	beq.n	800d230 <_printf_common+0xa4>
 800d262:	3601      	adds	r6, #1
 800d264:	e7d9      	b.n	800d21a <_printf_common+0x8e>
	...

0800d268 <_printf_i>:
 800d268:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d26c:	7e0f      	ldrb	r7, [r1, #24]
 800d26e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800d270:	2f78      	cmp	r7, #120	@ 0x78
 800d272:	4691      	mov	r9, r2
 800d274:	4680      	mov	r8, r0
 800d276:	460c      	mov	r4, r1
 800d278:	469a      	mov	sl, r3
 800d27a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800d27e:	d807      	bhi.n	800d290 <_printf_i+0x28>
 800d280:	2f62      	cmp	r7, #98	@ 0x62
 800d282:	d80a      	bhi.n	800d29a <_printf_i+0x32>
 800d284:	2f00      	cmp	r7, #0
 800d286:	f000 80d1 	beq.w	800d42c <_printf_i+0x1c4>
 800d28a:	2f58      	cmp	r7, #88	@ 0x58
 800d28c:	f000 80b8 	beq.w	800d400 <_printf_i+0x198>
 800d290:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d294:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800d298:	e03a      	b.n	800d310 <_printf_i+0xa8>
 800d29a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800d29e:	2b15      	cmp	r3, #21
 800d2a0:	d8f6      	bhi.n	800d290 <_printf_i+0x28>
 800d2a2:	a101      	add	r1, pc, #4	@ (adr r1, 800d2a8 <_printf_i+0x40>)
 800d2a4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d2a8:	0800d301 	.word	0x0800d301
 800d2ac:	0800d315 	.word	0x0800d315
 800d2b0:	0800d291 	.word	0x0800d291
 800d2b4:	0800d291 	.word	0x0800d291
 800d2b8:	0800d291 	.word	0x0800d291
 800d2bc:	0800d291 	.word	0x0800d291
 800d2c0:	0800d315 	.word	0x0800d315
 800d2c4:	0800d291 	.word	0x0800d291
 800d2c8:	0800d291 	.word	0x0800d291
 800d2cc:	0800d291 	.word	0x0800d291
 800d2d0:	0800d291 	.word	0x0800d291
 800d2d4:	0800d413 	.word	0x0800d413
 800d2d8:	0800d33f 	.word	0x0800d33f
 800d2dc:	0800d3cd 	.word	0x0800d3cd
 800d2e0:	0800d291 	.word	0x0800d291
 800d2e4:	0800d291 	.word	0x0800d291
 800d2e8:	0800d435 	.word	0x0800d435
 800d2ec:	0800d291 	.word	0x0800d291
 800d2f0:	0800d33f 	.word	0x0800d33f
 800d2f4:	0800d291 	.word	0x0800d291
 800d2f8:	0800d291 	.word	0x0800d291
 800d2fc:	0800d3d5 	.word	0x0800d3d5
 800d300:	6833      	ldr	r3, [r6, #0]
 800d302:	1d1a      	adds	r2, r3, #4
 800d304:	681b      	ldr	r3, [r3, #0]
 800d306:	6032      	str	r2, [r6, #0]
 800d308:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d30c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800d310:	2301      	movs	r3, #1
 800d312:	e09c      	b.n	800d44e <_printf_i+0x1e6>
 800d314:	6833      	ldr	r3, [r6, #0]
 800d316:	6820      	ldr	r0, [r4, #0]
 800d318:	1d19      	adds	r1, r3, #4
 800d31a:	6031      	str	r1, [r6, #0]
 800d31c:	0606      	lsls	r6, r0, #24
 800d31e:	d501      	bpl.n	800d324 <_printf_i+0xbc>
 800d320:	681d      	ldr	r5, [r3, #0]
 800d322:	e003      	b.n	800d32c <_printf_i+0xc4>
 800d324:	0645      	lsls	r5, r0, #25
 800d326:	d5fb      	bpl.n	800d320 <_printf_i+0xb8>
 800d328:	f9b3 5000 	ldrsh.w	r5, [r3]
 800d32c:	2d00      	cmp	r5, #0
 800d32e:	da03      	bge.n	800d338 <_printf_i+0xd0>
 800d330:	232d      	movs	r3, #45	@ 0x2d
 800d332:	426d      	negs	r5, r5
 800d334:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d338:	4858      	ldr	r0, [pc, #352]	@ (800d49c <_printf_i+0x234>)
 800d33a:	230a      	movs	r3, #10
 800d33c:	e011      	b.n	800d362 <_printf_i+0xfa>
 800d33e:	6821      	ldr	r1, [r4, #0]
 800d340:	6833      	ldr	r3, [r6, #0]
 800d342:	0608      	lsls	r0, r1, #24
 800d344:	f853 5b04 	ldr.w	r5, [r3], #4
 800d348:	d402      	bmi.n	800d350 <_printf_i+0xe8>
 800d34a:	0649      	lsls	r1, r1, #25
 800d34c:	bf48      	it	mi
 800d34e:	b2ad      	uxthmi	r5, r5
 800d350:	2f6f      	cmp	r7, #111	@ 0x6f
 800d352:	4852      	ldr	r0, [pc, #328]	@ (800d49c <_printf_i+0x234>)
 800d354:	6033      	str	r3, [r6, #0]
 800d356:	bf14      	ite	ne
 800d358:	230a      	movne	r3, #10
 800d35a:	2308      	moveq	r3, #8
 800d35c:	2100      	movs	r1, #0
 800d35e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800d362:	6866      	ldr	r6, [r4, #4]
 800d364:	60a6      	str	r6, [r4, #8]
 800d366:	2e00      	cmp	r6, #0
 800d368:	db05      	blt.n	800d376 <_printf_i+0x10e>
 800d36a:	6821      	ldr	r1, [r4, #0]
 800d36c:	432e      	orrs	r6, r5
 800d36e:	f021 0104 	bic.w	r1, r1, #4
 800d372:	6021      	str	r1, [r4, #0]
 800d374:	d04b      	beq.n	800d40e <_printf_i+0x1a6>
 800d376:	4616      	mov	r6, r2
 800d378:	fbb5 f1f3 	udiv	r1, r5, r3
 800d37c:	fb03 5711 	mls	r7, r3, r1, r5
 800d380:	5dc7      	ldrb	r7, [r0, r7]
 800d382:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800d386:	462f      	mov	r7, r5
 800d388:	42bb      	cmp	r3, r7
 800d38a:	460d      	mov	r5, r1
 800d38c:	d9f4      	bls.n	800d378 <_printf_i+0x110>
 800d38e:	2b08      	cmp	r3, #8
 800d390:	d10b      	bne.n	800d3aa <_printf_i+0x142>
 800d392:	6823      	ldr	r3, [r4, #0]
 800d394:	07df      	lsls	r7, r3, #31
 800d396:	d508      	bpl.n	800d3aa <_printf_i+0x142>
 800d398:	6923      	ldr	r3, [r4, #16]
 800d39a:	6861      	ldr	r1, [r4, #4]
 800d39c:	4299      	cmp	r1, r3
 800d39e:	bfde      	ittt	le
 800d3a0:	2330      	movle	r3, #48	@ 0x30
 800d3a2:	f806 3c01 	strble.w	r3, [r6, #-1]
 800d3a6:	f106 36ff 	addle.w	r6, r6, #4294967295
 800d3aa:	1b92      	subs	r2, r2, r6
 800d3ac:	6122      	str	r2, [r4, #16]
 800d3ae:	f8cd a000 	str.w	sl, [sp]
 800d3b2:	464b      	mov	r3, r9
 800d3b4:	aa03      	add	r2, sp, #12
 800d3b6:	4621      	mov	r1, r4
 800d3b8:	4640      	mov	r0, r8
 800d3ba:	f7ff fee7 	bl	800d18c <_printf_common>
 800d3be:	3001      	adds	r0, #1
 800d3c0:	d14a      	bne.n	800d458 <_printf_i+0x1f0>
 800d3c2:	f04f 30ff 	mov.w	r0, #4294967295
 800d3c6:	b004      	add	sp, #16
 800d3c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d3cc:	6823      	ldr	r3, [r4, #0]
 800d3ce:	f043 0320 	orr.w	r3, r3, #32
 800d3d2:	6023      	str	r3, [r4, #0]
 800d3d4:	4832      	ldr	r0, [pc, #200]	@ (800d4a0 <_printf_i+0x238>)
 800d3d6:	2778      	movs	r7, #120	@ 0x78
 800d3d8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800d3dc:	6823      	ldr	r3, [r4, #0]
 800d3de:	6831      	ldr	r1, [r6, #0]
 800d3e0:	061f      	lsls	r7, r3, #24
 800d3e2:	f851 5b04 	ldr.w	r5, [r1], #4
 800d3e6:	d402      	bmi.n	800d3ee <_printf_i+0x186>
 800d3e8:	065f      	lsls	r7, r3, #25
 800d3ea:	bf48      	it	mi
 800d3ec:	b2ad      	uxthmi	r5, r5
 800d3ee:	6031      	str	r1, [r6, #0]
 800d3f0:	07d9      	lsls	r1, r3, #31
 800d3f2:	bf44      	itt	mi
 800d3f4:	f043 0320 	orrmi.w	r3, r3, #32
 800d3f8:	6023      	strmi	r3, [r4, #0]
 800d3fa:	b11d      	cbz	r5, 800d404 <_printf_i+0x19c>
 800d3fc:	2310      	movs	r3, #16
 800d3fe:	e7ad      	b.n	800d35c <_printf_i+0xf4>
 800d400:	4826      	ldr	r0, [pc, #152]	@ (800d49c <_printf_i+0x234>)
 800d402:	e7e9      	b.n	800d3d8 <_printf_i+0x170>
 800d404:	6823      	ldr	r3, [r4, #0]
 800d406:	f023 0320 	bic.w	r3, r3, #32
 800d40a:	6023      	str	r3, [r4, #0]
 800d40c:	e7f6      	b.n	800d3fc <_printf_i+0x194>
 800d40e:	4616      	mov	r6, r2
 800d410:	e7bd      	b.n	800d38e <_printf_i+0x126>
 800d412:	6833      	ldr	r3, [r6, #0]
 800d414:	6825      	ldr	r5, [r4, #0]
 800d416:	6961      	ldr	r1, [r4, #20]
 800d418:	1d18      	adds	r0, r3, #4
 800d41a:	6030      	str	r0, [r6, #0]
 800d41c:	062e      	lsls	r6, r5, #24
 800d41e:	681b      	ldr	r3, [r3, #0]
 800d420:	d501      	bpl.n	800d426 <_printf_i+0x1be>
 800d422:	6019      	str	r1, [r3, #0]
 800d424:	e002      	b.n	800d42c <_printf_i+0x1c4>
 800d426:	0668      	lsls	r0, r5, #25
 800d428:	d5fb      	bpl.n	800d422 <_printf_i+0x1ba>
 800d42a:	8019      	strh	r1, [r3, #0]
 800d42c:	2300      	movs	r3, #0
 800d42e:	6123      	str	r3, [r4, #16]
 800d430:	4616      	mov	r6, r2
 800d432:	e7bc      	b.n	800d3ae <_printf_i+0x146>
 800d434:	6833      	ldr	r3, [r6, #0]
 800d436:	1d1a      	adds	r2, r3, #4
 800d438:	6032      	str	r2, [r6, #0]
 800d43a:	681e      	ldr	r6, [r3, #0]
 800d43c:	6862      	ldr	r2, [r4, #4]
 800d43e:	2100      	movs	r1, #0
 800d440:	4630      	mov	r0, r6
 800d442:	f7f2 fecd 	bl	80001e0 <memchr>
 800d446:	b108      	cbz	r0, 800d44c <_printf_i+0x1e4>
 800d448:	1b80      	subs	r0, r0, r6
 800d44a:	6060      	str	r0, [r4, #4]
 800d44c:	6863      	ldr	r3, [r4, #4]
 800d44e:	6123      	str	r3, [r4, #16]
 800d450:	2300      	movs	r3, #0
 800d452:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d456:	e7aa      	b.n	800d3ae <_printf_i+0x146>
 800d458:	6923      	ldr	r3, [r4, #16]
 800d45a:	4632      	mov	r2, r6
 800d45c:	4649      	mov	r1, r9
 800d45e:	4640      	mov	r0, r8
 800d460:	47d0      	blx	sl
 800d462:	3001      	adds	r0, #1
 800d464:	d0ad      	beq.n	800d3c2 <_printf_i+0x15a>
 800d466:	6823      	ldr	r3, [r4, #0]
 800d468:	079b      	lsls	r3, r3, #30
 800d46a:	d413      	bmi.n	800d494 <_printf_i+0x22c>
 800d46c:	68e0      	ldr	r0, [r4, #12]
 800d46e:	9b03      	ldr	r3, [sp, #12]
 800d470:	4298      	cmp	r0, r3
 800d472:	bfb8      	it	lt
 800d474:	4618      	movlt	r0, r3
 800d476:	e7a6      	b.n	800d3c6 <_printf_i+0x15e>
 800d478:	2301      	movs	r3, #1
 800d47a:	4632      	mov	r2, r6
 800d47c:	4649      	mov	r1, r9
 800d47e:	4640      	mov	r0, r8
 800d480:	47d0      	blx	sl
 800d482:	3001      	adds	r0, #1
 800d484:	d09d      	beq.n	800d3c2 <_printf_i+0x15a>
 800d486:	3501      	adds	r5, #1
 800d488:	68e3      	ldr	r3, [r4, #12]
 800d48a:	9903      	ldr	r1, [sp, #12]
 800d48c:	1a5b      	subs	r3, r3, r1
 800d48e:	42ab      	cmp	r3, r5
 800d490:	dcf2      	bgt.n	800d478 <_printf_i+0x210>
 800d492:	e7eb      	b.n	800d46c <_printf_i+0x204>
 800d494:	2500      	movs	r5, #0
 800d496:	f104 0619 	add.w	r6, r4, #25
 800d49a:	e7f5      	b.n	800d488 <_printf_i+0x220>
 800d49c:	0800eee2 	.word	0x0800eee2
 800d4a0:	0800eef3 	.word	0x0800eef3

0800d4a4 <memmove>:
 800d4a4:	4288      	cmp	r0, r1
 800d4a6:	b510      	push	{r4, lr}
 800d4a8:	eb01 0402 	add.w	r4, r1, r2
 800d4ac:	d902      	bls.n	800d4b4 <memmove+0x10>
 800d4ae:	4284      	cmp	r4, r0
 800d4b0:	4623      	mov	r3, r4
 800d4b2:	d807      	bhi.n	800d4c4 <memmove+0x20>
 800d4b4:	1e43      	subs	r3, r0, #1
 800d4b6:	42a1      	cmp	r1, r4
 800d4b8:	d008      	beq.n	800d4cc <memmove+0x28>
 800d4ba:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d4be:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d4c2:	e7f8      	b.n	800d4b6 <memmove+0x12>
 800d4c4:	4402      	add	r2, r0
 800d4c6:	4601      	mov	r1, r0
 800d4c8:	428a      	cmp	r2, r1
 800d4ca:	d100      	bne.n	800d4ce <memmove+0x2a>
 800d4cc:	bd10      	pop	{r4, pc}
 800d4ce:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d4d2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d4d6:	e7f7      	b.n	800d4c8 <memmove+0x24>

0800d4d8 <_sbrk_r>:
 800d4d8:	b538      	push	{r3, r4, r5, lr}
 800d4da:	4d06      	ldr	r5, [pc, #24]	@ (800d4f4 <_sbrk_r+0x1c>)
 800d4dc:	2300      	movs	r3, #0
 800d4de:	4604      	mov	r4, r0
 800d4e0:	4608      	mov	r0, r1
 800d4e2:	602b      	str	r3, [r5, #0]
 800d4e4:	f7f4 fac6 	bl	8001a74 <_sbrk>
 800d4e8:	1c43      	adds	r3, r0, #1
 800d4ea:	d102      	bne.n	800d4f2 <_sbrk_r+0x1a>
 800d4ec:	682b      	ldr	r3, [r5, #0]
 800d4ee:	b103      	cbz	r3, 800d4f2 <_sbrk_r+0x1a>
 800d4f0:	6023      	str	r3, [r4, #0]
 800d4f2:	bd38      	pop	{r3, r4, r5, pc}
 800d4f4:	20005cb8 	.word	0x20005cb8

0800d4f8 <_realloc_r>:
 800d4f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d4fc:	4607      	mov	r7, r0
 800d4fe:	4614      	mov	r4, r2
 800d500:	460d      	mov	r5, r1
 800d502:	b921      	cbnz	r1, 800d50e <_realloc_r+0x16>
 800d504:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d508:	4611      	mov	r1, r2
 800d50a:	f7ff bc5b 	b.w	800cdc4 <_malloc_r>
 800d50e:	b92a      	cbnz	r2, 800d51c <_realloc_r+0x24>
 800d510:	f7ff fbec 	bl	800ccec <_free_r>
 800d514:	4625      	mov	r5, r4
 800d516:	4628      	mov	r0, r5
 800d518:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d51c:	f000 f81a 	bl	800d554 <_malloc_usable_size_r>
 800d520:	4284      	cmp	r4, r0
 800d522:	4606      	mov	r6, r0
 800d524:	d802      	bhi.n	800d52c <_realloc_r+0x34>
 800d526:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d52a:	d8f4      	bhi.n	800d516 <_realloc_r+0x1e>
 800d52c:	4621      	mov	r1, r4
 800d52e:	4638      	mov	r0, r7
 800d530:	f7ff fc48 	bl	800cdc4 <_malloc_r>
 800d534:	4680      	mov	r8, r0
 800d536:	b908      	cbnz	r0, 800d53c <_realloc_r+0x44>
 800d538:	4645      	mov	r5, r8
 800d53a:	e7ec      	b.n	800d516 <_realloc_r+0x1e>
 800d53c:	42b4      	cmp	r4, r6
 800d53e:	4622      	mov	r2, r4
 800d540:	4629      	mov	r1, r5
 800d542:	bf28      	it	cs
 800d544:	4632      	movcs	r2, r6
 800d546:	f7ff fbc3 	bl	800ccd0 <memcpy>
 800d54a:	4629      	mov	r1, r5
 800d54c:	4638      	mov	r0, r7
 800d54e:	f7ff fbcd 	bl	800ccec <_free_r>
 800d552:	e7f1      	b.n	800d538 <_realloc_r+0x40>

0800d554 <_malloc_usable_size_r>:
 800d554:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d558:	1f18      	subs	r0, r3, #4
 800d55a:	2b00      	cmp	r3, #0
 800d55c:	bfbc      	itt	lt
 800d55e:	580b      	ldrlt	r3, [r1, r0]
 800d560:	18c0      	addlt	r0, r0, r3
 800d562:	4770      	bx	lr

0800d564 <_init>:
 800d564:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d566:	bf00      	nop
 800d568:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d56a:	bc08      	pop	{r3}
 800d56c:	469e      	mov	lr, r3
 800d56e:	4770      	bx	lr

0800d570 <_fini>:
 800d570:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d572:	bf00      	nop
 800d574:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d576:	bc08      	pop	{r3}
 800d578:	469e      	mov	lr, r3
 800d57a:	4770      	bx	lr
