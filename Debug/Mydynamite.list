
Mydynamite.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d6dc  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001988  0800d87c  0800d87c  0000e87c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f204  0800f204  00011184  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800f204  0800f204  00010204  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f20c  0800f20c  00011184  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f20c  0800f20c  0001020c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800f210  0800f210  00010210  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000184  20000000  0800f214  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005f90  20000184  0800f398  00011184  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20006114  0800f398  00012114  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00011184  2**0
                  CONTENTS, READONLY
 12 .debug_info   00027405  00000000  00000000  000111b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005a3d  00000000  00000000  000385b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002018  00000000  00000000  0003dff8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000018a8  00000000  00000000  00040010  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00007ac9  00000000  00000000  000418b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002a2bf  00000000  00000000  00049381  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ac2fb  00000000  00000000  00073640  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0011f93b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008ca8  00000000  00000000  0011f980  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000055  00000000  00000000  00128628  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000184 	.word	0x20000184
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800d864 	.word	0x0800d864

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000188 	.word	0x20000188
 80001dc:	0800d864 	.word	0x0800d864

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b988 	b.w	80005a8 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	468e      	mov	lr, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	4688      	mov	r8, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d962      	bls.n	800038c <__udivmoddi4+0xdc>
 80002c6:	fab2 f682 	clz	r6, r2
 80002ca:	b14e      	cbz	r6, 80002e0 <__udivmoddi4+0x30>
 80002cc:	f1c6 0320 	rsb	r3, r6, #32
 80002d0:	fa01 f806 	lsl.w	r8, r1, r6
 80002d4:	fa20 f303 	lsr.w	r3, r0, r3
 80002d8:	40b7      	lsls	r7, r6
 80002da:	ea43 0808 	orr.w	r8, r3, r8
 80002de:	40b4      	lsls	r4, r6
 80002e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002e4:	fa1f fc87 	uxth.w	ip, r7
 80002e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002ec:	0c23      	lsrs	r3, r4, #16
 80002ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80002f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f6:	fb01 f20c 	mul.w	r2, r1, ip
 80002fa:	429a      	cmp	r2, r3
 80002fc:	d909      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fe:	18fb      	adds	r3, r7, r3
 8000300:	f101 30ff 	add.w	r0, r1, #4294967295
 8000304:	f080 80ea 	bcs.w	80004dc <__udivmoddi4+0x22c>
 8000308:	429a      	cmp	r2, r3
 800030a:	f240 80e7 	bls.w	80004dc <__udivmoddi4+0x22c>
 800030e:	3902      	subs	r1, #2
 8000310:	443b      	add	r3, r7
 8000312:	1a9a      	subs	r2, r3, r2
 8000314:	b2a3      	uxth	r3, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000322:	fb00 fc0c 	mul.w	ip, r0, ip
 8000326:	459c      	cmp	ip, r3
 8000328:	d909      	bls.n	800033e <__udivmoddi4+0x8e>
 800032a:	18fb      	adds	r3, r7, r3
 800032c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000330:	f080 80d6 	bcs.w	80004e0 <__udivmoddi4+0x230>
 8000334:	459c      	cmp	ip, r3
 8000336:	f240 80d3 	bls.w	80004e0 <__udivmoddi4+0x230>
 800033a:	443b      	add	r3, r7
 800033c:	3802      	subs	r0, #2
 800033e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000342:	eba3 030c 	sub.w	r3, r3, ip
 8000346:	2100      	movs	r1, #0
 8000348:	b11d      	cbz	r5, 8000352 <__udivmoddi4+0xa2>
 800034a:	40f3      	lsrs	r3, r6
 800034c:	2200      	movs	r2, #0
 800034e:	e9c5 3200 	strd	r3, r2, [r5]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d905      	bls.n	8000366 <__udivmoddi4+0xb6>
 800035a:	b10d      	cbz	r5, 8000360 <__udivmoddi4+0xb0>
 800035c:	e9c5 0100 	strd	r0, r1, [r5]
 8000360:	2100      	movs	r1, #0
 8000362:	4608      	mov	r0, r1
 8000364:	e7f5      	b.n	8000352 <__udivmoddi4+0xa2>
 8000366:	fab3 f183 	clz	r1, r3
 800036a:	2900      	cmp	r1, #0
 800036c:	d146      	bne.n	80003fc <__udivmoddi4+0x14c>
 800036e:	4573      	cmp	r3, lr
 8000370:	d302      	bcc.n	8000378 <__udivmoddi4+0xc8>
 8000372:	4282      	cmp	r2, r0
 8000374:	f200 8105 	bhi.w	8000582 <__udivmoddi4+0x2d2>
 8000378:	1a84      	subs	r4, r0, r2
 800037a:	eb6e 0203 	sbc.w	r2, lr, r3
 800037e:	2001      	movs	r0, #1
 8000380:	4690      	mov	r8, r2
 8000382:	2d00      	cmp	r5, #0
 8000384:	d0e5      	beq.n	8000352 <__udivmoddi4+0xa2>
 8000386:	e9c5 4800 	strd	r4, r8, [r5]
 800038a:	e7e2      	b.n	8000352 <__udivmoddi4+0xa2>
 800038c:	2a00      	cmp	r2, #0
 800038e:	f000 8090 	beq.w	80004b2 <__udivmoddi4+0x202>
 8000392:	fab2 f682 	clz	r6, r2
 8000396:	2e00      	cmp	r6, #0
 8000398:	f040 80a4 	bne.w	80004e4 <__udivmoddi4+0x234>
 800039c:	1a8a      	subs	r2, r1, r2
 800039e:	0c03      	lsrs	r3, r0, #16
 80003a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a4:	b280      	uxth	r0, r0
 80003a6:	b2bc      	uxth	r4, r7
 80003a8:	2101      	movs	r1, #1
 80003aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80003b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003b6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ba:	429a      	cmp	r2, r3
 80003bc:	d907      	bls.n	80003ce <__udivmoddi4+0x11e>
 80003be:	18fb      	adds	r3, r7, r3
 80003c0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003c4:	d202      	bcs.n	80003cc <__udivmoddi4+0x11c>
 80003c6:	429a      	cmp	r2, r3
 80003c8:	f200 80e0 	bhi.w	800058c <__udivmoddi4+0x2dc>
 80003cc:	46c4      	mov	ip, r8
 80003ce:	1a9b      	subs	r3, r3, r2
 80003d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003dc:	fb02 f404 	mul.w	r4, r2, r4
 80003e0:	429c      	cmp	r4, r3
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x144>
 80003e4:	18fb      	adds	r3, r7, r3
 80003e6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x142>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f200 80ca 	bhi.w	8000586 <__udivmoddi4+0x2d6>
 80003f2:	4602      	mov	r2, r0
 80003f4:	1b1b      	subs	r3, r3, r4
 80003f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003fa:	e7a5      	b.n	8000348 <__udivmoddi4+0x98>
 80003fc:	f1c1 0620 	rsb	r6, r1, #32
 8000400:	408b      	lsls	r3, r1
 8000402:	fa22 f706 	lsr.w	r7, r2, r6
 8000406:	431f      	orrs	r7, r3
 8000408:	fa0e f401 	lsl.w	r4, lr, r1
 800040c:	fa20 f306 	lsr.w	r3, r0, r6
 8000410:	fa2e fe06 	lsr.w	lr, lr, r6
 8000414:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000418:	4323      	orrs	r3, r4
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	fa1f fc87 	uxth.w	ip, r7
 8000422:	fbbe f0f9 	udiv	r0, lr, r9
 8000426:	0c1c      	lsrs	r4, r3, #16
 8000428:	fb09 ee10 	mls	lr, r9, r0, lr
 800042c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000430:	fb00 fe0c 	mul.w	lr, r0, ip
 8000434:	45a6      	cmp	lr, r4
 8000436:	fa02 f201 	lsl.w	r2, r2, r1
 800043a:	d909      	bls.n	8000450 <__udivmoddi4+0x1a0>
 800043c:	193c      	adds	r4, r7, r4
 800043e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000442:	f080 809c 	bcs.w	800057e <__udivmoddi4+0x2ce>
 8000446:	45a6      	cmp	lr, r4
 8000448:	f240 8099 	bls.w	800057e <__udivmoddi4+0x2ce>
 800044c:	3802      	subs	r0, #2
 800044e:	443c      	add	r4, r7
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	fa1f fe83 	uxth.w	lr, r3
 8000458:	fbb4 f3f9 	udiv	r3, r4, r9
 800045c:	fb09 4413 	mls	r4, r9, r3, r4
 8000460:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000464:	fb03 fc0c 	mul.w	ip, r3, ip
 8000468:	45a4      	cmp	ip, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x1ce>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000472:	f080 8082 	bcs.w	800057a <__udivmoddi4+0x2ca>
 8000476:	45a4      	cmp	ip, r4
 8000478:	d97f      	bls.n	800057a <__udivmoddi4+0x2ca>
 800047a:	3b02      	subs	r3, #2
 800047c:	443c      	add	r4, r7
 800047e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000482:	eba4 040c 	sub.w	r4, r4, ip
 8000486:	fba0 ec02 	umull	lr, ip, r0, r2
 800048a:	4564      	cmp	r4, ip
 800048c:	4673      	mov	r3, lr
 800048e:	46e1      	mov	r9, ip
 8000490:	d362      	bcc.n	8000558 <__udivmoddi4+0x2a8>
 8000492:	d05f      	beq.n	8000554 <__udivmoddi4+0x2a4>
 8000494:	b15d      	cbz	r5, 80004ae <__udivmoddi4+0x1fe>
 8000496:	ebb8 0203 	subs.w	r2, r8, r3
 800049a:	eb64 0409 	sbc.w	r4, r4, r9
 800049e:	fa04 f606 	lsl.w	r6, r4, r6
 80004a2:	fa22 f301 	lsr.w	r3, r2, r1
 80004a6:	431e      	orrs	r6, r3
 80004a8:	40cc      	lsrs	r4, r1
 80004aa:	e9c5 6400 	strd	r6, r4, [r5]
 80004ae:	2100      	movs	r1, #0
 80004b0:	e74f      	b.n	8000352 <__udivmoddi4+0xa2>
 80004b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004b6:	0c01      	lsrs	r1, r0, #16
 80004b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004bc:	b280      	uxth	r0, r0
 80004be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004c2:	463b      	mov	r3, r7
 80004c4:	4638      	mov	r0, r7
 80004c6:	463c      	mov	r4, r7
 80004c8:	46b8      	mov	r8, r7
 80004ca:	46be      	mov	lr, r7
 80004cc:	2620      	movs	r6, #32
 80004ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80004d2:	eba2 0208 	sub.w	r2, r2, r8
 80004d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004da:	e766      	b.n	80003aa <__udivmoddi4+0xfa>
 80004dc:	4601      	mov	r1, r0
 80004de:	e718      	b.n	8000312 <__udivmoddi4+0x62>
 80004e0:	4610      	mov	r0, r2
 80004e2:	e72c      	b.n	800033e <__udivmoddi4+0x8e>
 80004e4:	f1c6 0220 	rsb	r2, r6, #32
 80004e8:	fa2e f302 	lsr.w	r3, lr, r2
 80004ec:	40b7      	lsls	r7, r6
 80004ee:	40b1      	lsls	r1, r6
 80004f0:	fa20 f202 	lsr.w	r2, r0, r2
 80004f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004f8:	430a      	orrs	r2, r1
 80004fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80004fe:	b2bc      	uxth	r4, r7
 8000500:	fb0e 3318 	mls	r3, lr, r8, r3
 8000504:	0c11      	lsrs	r1, r2, #16
 8000506:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800050a:	fb08 f904 	mul.w	r9, r8, r4
 800050e:	40b0      	lsls	r0, r6
 8000510:	4589      	cmp	r9, r1
 8000512:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000516:	b280      	uxth	r0, r0
 8000518:	d93e      	bls.n	8000598 <__udivmoddi4+0x2e8>
 800051a:	1879      	adds	r1, r7, r1
 800051c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000520:	d201      	bcs.n	8000526 <__udivmoddi4+0x276>
 8000522:	4589      	cmp	r9, r1
 8000524:	d81f      	bhi.n	8000566 <__udivmoddi4+0x2b6>
 8000526:	eba1 0109 	sub.w	r1, r1, r9
 800052a:	fbb1 f9fe 	udiv	r9, r1, lr
 800052e:	fb09 f804 	mul.w	r8, r9, r4
 8000532:	fb0e 1119 	mls	r1, lr, r9, r1
 8000536:	b292      	uxth	r2, r2
 8000538:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800053c:	4542      	cmp	r2, r8
 800053e:	d229      	bcs.n	8000594 <__udivmoddi4+0x2e4>
 8000540:	18ba      	adds	r2, r7, r2
 8000542:	f109 31ff 	add.w	r1, r9, #4294967295
 8000546:	d2c4      	bcs.n	80004d2 <__udivmoddi4+0x222>
 8000548:	4542      	cmp	r2, r8
 800054a:	d2c2      	bcs.n	80004d2 <__udivmoddi4+0x222>
 800054c:	f1a9 0102 	sub.w	r1, r9, #2
 8000550:	443a      	add	r2, r7
 8000552:	e7be      	b.n	80004d2 <__udivmoddi4+0x222>
 8000554:	45f0      	cmp	r8, lr
 8000556:	d29d      	bcs.n	8000494 <__udivmoddi4+0x1e4>
 8000558:	ebbe 0302 	subs.w	r3, lr, r2
 800055c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000560:	3801      	subs	r0, #1
 8000562:	46e1      	mov	r9, ip
 8000564:	e796      	b.n	8000494 <__udivmoddi4+0x1e4>
 8000566:	eba7 0909 	sub.w	r9, r7, r9
 800056a:	4449      	add	r1, r9
 800056c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000570:	fbb1 f9fe 	udiv	r9, r1, lr
 8000574:	fb09 f804 	mul.w	r8, r9, r4
 8000578:	e7db      	b.n	8000532 <__udivmoddi4+0x282>
 800057a:	4673      	mov	r3, lr
 800057c:	e77f      	b.n	800047e <__udivmoddi4+0x1ce>
 800057e:	4650      	mov	r0, sl
 8000580:	e766      	b.n	8000450 <__udivmoddi4+0x1a0>
 8000582:	4608      	mov	r0, r1
 8000584:	e6fd      	b.n	8000382 <__udivmoddi4+0xd2>
 8000586:	443b      	add	r3, r7
 8000588:	3a02      	subs	r2, #2
 800058a:	e733      	b.n	80003f4 <__udivmoddi4+0x144>
 800058c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000590:	443b      	add	r3, r7
 8000592:	e71c      	b.n	80003ce <__udivmoddi4+0x11e>
 8000594:	4649      	mov	r1, r9
 8000596:	e79c      	b.n	80004d2 <__udivmoddi4+0x222>
 8000598:	eba1 0109 	sub.w	r1, r1, r9
 800059c:	46c4      	mov	ip, r8
 800059e:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a2:	fb09 f804 	mul.w	r8, r9, r4
 80005a6:	e7c4      	b.n	8000532 <__udivmoddi4+0x282>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005b0:	f001 fbca 	bl	8001d48 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005b4:	f000 f854 	bl	8000660 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005b8:	f000 fa90 	bl	8000adc <MX_GPIO_Init>
  MX_SPI1_Init();
 80005bc:	f000 f90a 	bl	80007d4 <MX_SPI1_Init>
  MX_TIM3_Init();
 80005c0:	f000 f98c 	bl	80008dc <MX_TIM3_Init>
  MX_TIM4_Init();
 80005c4:	f000 f9e0 	bl	8000988 <MX_TIM4_Init>
  MX_USART2_UART_Init();
 80005c8:	f000 fa5e 	bl	8000a88 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 80005cc:	f000 f938 	bl	8000840 <MX_TIM2_Init>
  MX_ADC1_Init();
 80005d0:	f000 f8ae 	bl	8000730 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 80005d4:	f000 fa2e 	bl	8000a34 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  //Romagnetics code
  screen_driver_Init();
 80005d8:	f000 fe0a 	bl	80011f0 <screen_driver_Init>

  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 80005dc:	213c      	movs	r1, #60	@ 0x3c
 80005de:	4815      	ldr	r0, [pc, #84]	@ (8000634 <main+0x88>)
 80005e0:	f004 fca9 	bl	8004f36 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 80005e4:	213c      	movs	r1, #60	@ 0x3c
 80005e6:	4814      	ldr	r0, [pc, #80]	@ (8000638 <main+0x8c>)
 80005e8:	f004 fca5 	bl	8004f36 <HAL_TIM_Encoder_Start>

  __HAL_TIM_SET_COUNTER(&htim4, current_menu*4);
 80005ec:	4b13      	ldr	r3, [pc, #76]	@ (800063c <main+0x90>)
 80005ee:	781b      	ldrb	r3, [r3, #0]
 80005f0:	009a      	lsls	r2, r3, #2
 80005f2:	4b11      	ldr	r3, [pc, #68]	@ (8000638 <main+0x8c>)
 80005f4:	681b      	ldr	r3, [r3, #0]
 80005f6:	625a      	str	r2, [r3, #36]	@ 0x24

  HAL_UART_Receive_IT(&huart2, midi_rx_buff_ptr, 3);
 80005f8:	4b11      	ldr	r3, [pc, #68]	@ (8000640 <main+0x94>)
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	2203      	movs	r2, #3
 80005fe:	4619      	mov	r1, r3
 8000600:	4810      	ldr	r0, [pc, #64]	@ (8000644 <main+0x98>)
 8000602:	f005 f9ae 	bl	8005962 <HAL_UART_Receive_IT>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000606:	f007 fcb3 	bl	8007f70 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of midi_send */
  midi_sendHandle = osThreadNew(StartDefaultTask, NULL, &midi_send_attributes);
 800060a:	4a0f      	ldr	r2, [pc, #60]	@ (8000648 <main+0x9c>)
 800060c:	2100      	movs	r1, #0
 800060e:	480f      	ldr	r0, [pc, #60]	@ (800064c <main+0xa0>)
 8000610:	f007 fcf8 	bl	8008004 <osThreadNew>
 8000614:	4603      	mov	r3, r0
 8000616:	4a0e      	ldr	r2, [pc, #56]	@ (8000650 <main+0xa4>)
 8000618:	6013      	str	r3, [r2, #0]

  /* creation of other_tasks */
  other_tasksHandle = osThreadNew(StartTask02, NULL, &other_tasks_attributes);
 800061a:	4a0e      	ldr	r2, [pc, #56]	@ (8000654 <main+0xa8>)
 800061c:	2100      	movs	r1, #0
 800061e:	480e      	ldr	r0, [pc, #56]	@ (8000658 <main+0xac>)
 8000620:	f007 fcf0 	bl	8008004 <osThreadNew>
 8000624:	4603      	mov	r3, r0
 8000626:	4a0d      	ldr	r2, [pc, #52]	@ (800065c <main+0xb0>)
 8000628:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800062a:	f007 fcc5 	bl	8007fb8 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
 800062e:	bf00      	nop
 8000630:	e7fd      	b.n	800062e <main+0x82>
 8000632:	bf00      	nop
 8000634:	20000288 	.word	0x20000288
 8000638:	200002d0 	.word	0x200002d0
 800063c:	20000008 	.word	0x20000008
 8000640:	2000000c 	.word	0x2000000c
 8000644:	20000360 	.word	0x20000360
 8000648:	0800d974 	.word	0x0800d974
 800064c:	08000c9d 	.word	0x08000c9d
 8000650:	200003a8 	.word	0x200003a8
 8000654:	0800d998 	.word	0x0800d998
 8000658:	08000cb1 	.word	0x08000cb1
 800065c:	200003ac 	.word	0x200003ac

08000660 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b094      	sub	sp, #80	@ 0x50
 8000664:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000666:	f107 0320 	add.w	r3, r7, #32
 800066a:	2230      	movs	r2, #48	@ 0x30
 800066c:	2100      	movs	r1, #0
 800066e:	4618      	mov	r0, r3
 8000670:	f00c fc1c 	bl	800ceac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000674:	f107 030c 	add.w	r3, r7, #12
 8000678:	2200      	movs	r2, #0
 800067a:	601a      	str	r2, [r3, #0]
 800067c:	605a      	str	r2, [r3, #4]
 800067e:	609a      	str	r2, [r3, #8]
 8000680:	60da      	str	r2, [r3, #12]
 8000682:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000684:	2300      	movs	r3, #0
 8000686:	60bb      	str	r3, [r7, #8]
 8000688:	4b27      	ldr	r3, [pc, #156]	@ (8000728 <SystemClock_Config+0xc8>)
 800068a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800068c:	4a26      	ldr	r2, [pc, #152]	@ (8000728 <SystemClock_Config+0xc8>)
 800068e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000692:	6413      	str	r3, [r2, #64]	@ 0x40
 8000694:	4b24      	ldr	r3, [pc, #144]	@ (8000728 <SystemClock_Config+0xc8>)
 8000696:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000698:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800069c:	60bb      	str	r3, [r7, #8]
 800069e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006a0:	2300      	movs	r3, #0
 80006a2:	607b      	str	r3, [r7, #4]
 80006a4:	4b21      	ldr	r3, [pc, #132]	@ (800072c <SystemClock_Config+0xcc>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	4a20      	ldr	r2, [pc, #128]	@ (800072c <SystemClock_Config+0xcc>)
 80006aa:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80006ae:	6013      	str	r3, [r2, #0]
 80006b0:	4b1e      	ldr	r3, [pc, #120]	@ (800072c <SystemClock_Config+0xcc>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80006b8:	607b      	str	r3, [r7, #4]
 80006ba:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006bc:	2301      	movs	r3, #1
 80006be:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006c0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80006c4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006c6:	2302      	movs	r3, #2
 80006c8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006ca:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80006ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 15;
 80006d0:	230f      	movs	r3, #15
 80006d2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 80006d4:	2390      	movs	r3, #144	@ 0x90
 80006d6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80006d8:	2304      	movs	r3, #4
 80006da:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 5;
 80006dc:	2305      	movs	r3, #5
 80006de:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006e0:	f107 0320 	add.w	r3, r7, #32
 80006e4:	4618      	mov	r0, r3
 80006e6:	f003 fb6b 	bl	8003dc0 <HAL_RCC_OscConfig>
 80006ea:	4603      	mov	r3, r0
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d001      	beq.n	80006f4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006f0:	f000 fb88 	bl	8000e04 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006f4:	230f      	movs	r3, #15
 80006f6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006f8:	2302      	movs	r3, #2
 80006fa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006fc:	2300      	movs	r3, #0
 80006fe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000700:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000704:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000706:	2300      	movs	r3, #0
 8000708:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800070a:	f107 030c 	add.w	r3, r7, #12
 800070e:	2101      	movs	r1, #1
 8000710:	4618      	mov	r0, r3
 8000712:	f003 fdcd 	bl	80042b0 <HAL_RCC_ClockConfig>
 8000716:	4603      	mov	r3, r0
 8000718:	2b00      	cmp	r3, #0
 800071a:	d001      	beq.n	8000720 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800071c:	f000 fb72 	bl	8000e04 <Error_Handler>
  }
}
 8000720:	bf00      	nop
 8000722:	3750      	adds	r7, #80	@ 0x50
 8000724:	46bd      	mov	sp, r7
 8000726:	bd80      	pop	{r7, pc}
 8000728:	40023800 	.word	0x40023800
 800072c:	40007000 	.word	0x40007000

08000730 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b084      	sub	sp, #16
 8000734:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000736:	463b      	mov	r3, r7
 8000738:	2200      	movs	r2, #0
 800073a:	601a      	str	r2, [r3, #0]
 800073c:	605a      	str	r2, [r3, #4]
 800073e:	609a      	str	r2, [r3, #8]
 8000740:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000742:	4b21      	ldr	r3, [pc, #132]	@ (80007c8 <MX_ADC1_Init+0x98>)
 8000744:	4a21      	ldr	r2, [pc, #132]	@ (80007cc <MX_ADC1_Init+0x9c>)
 8000746:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000748:	4b1f      	ldr	r3, [pc, #124]	@ (80007c8 <MX_ADC1_Init+0x98>)
 800074a:	2200      	movs	r2, #0
 800074c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800074e:	4b1e      	ldr	r3, [pc, #120]	@ (80007c8 <MX_ADC1_Init+0x98>)
 8000750:	2200      	movs	r2, #0
 8000752:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000754:	4b1c      	ldr	r3, [pc, #112]	@ (80007c8 <MX_ADC1_Init+0x98>)
 8000756:	2200      	movs	r2, #0
 8000758:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800075a:	4b1b      	ldr	r3, [pc, #108]	@ (80007c8 <MX_ADC1_Init+0x98>)
 800075c:	2200      	movs	r2, #0
 800075e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000760:	4b19      	ldr	r3, [pc, #100]	@ (80007c8 <MX_ADC1_Init+0x98>)
 8000762:	2200      	movs	r2, #0
 8000764:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000768:	4b17      	ldr	r3, [pc, #92]	@ (80007c8 <MX_ADC1_Init+0x98>)
 800076a:	2200      	movs	r2, #0
 800076c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800076e:	4b16      	ldr	r3, [pc, #88]	@ (80007c8 <MX_ADC1_Init+0x98>)
 8000770:	4a17      	ldr	r2, [pc, #92]	@ (80007d0 <MX_ADC1_Init+0xa0>)
 8000772:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000774:	4b14      	ldr	r3, [pc, #80]	@ (80007c8 <MX_ADC1_Init+0x98>)
 8000776:	2200      	movs	r2, #0
 8000778:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800077a:	4b13      	ldr	r3, [pc, #76]	@ (80007c8 <MX_ADC1_Init+0x98>)
 800077c:	2201      	movs	r2, #1
 800077e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000780:	4b11      	ldr	r3, [pc, #68]	@ (80007c8 <MX_ADC1_Init+0x98>)
 8000782:	2200      	movs	r2, #0
 8000784:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000788:	4b0f      	ldr	r3, [pc, #60]	@ (80007c8 <MX_ADC1_Init+0x98>)
 800078a:	2201      	movs	r2, #1
 800078c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800078e:	480e      	ldr	r0, [pc, #56]	@ (80007c8 <MX_ADC1_Init+0x98>)
 8000790:	f001 fb40 	bl	8001e14 <HAL_ADC_Init>
 8000794:	4603      	mov	r3, r0
 8000796:	2b00      	cmp	r3, #0
 8000798:	d001      	beq.n	800079e <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800079a:	f000 fb33 	bl	8000e04 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800079e:	2300      	movs	r3, #0
 80007a0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80007a2:	2301      	movs	r3, #1
 80007a4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80007a6:	2300      	movs	r3, #0
 80007a8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007aa:	463b      	mov	r3, r7
 80007ac:	4619      	mov	r1, r3
 80007ae:	4806      	ldr	r0, [pc, #24]	@ (80007c8 <MX_ADC1_Init+0x98>)
 80007b0:	f001 fb74 	bl	8001e9c <HAL_ADC_ConfigChannel>
 80007b4:	4603      	mov	r3, r0
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d001      	beq.n	80007be <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80007ba:	f000 fb23 	bl	8000e04 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80007be:	bf00      	nop
 80007c0:	3710      	adds	r7, #16
 80007c2:	46bd      	mov	sp, r7
 80007c4:	bd80      	pop	{r7, pc}
 80007c6:	bf00      	nop
 80007c8:	200001a0 	.word	0x200001a0
 80007cc:	40012000 	.word	0x40012000
 80007d0:	0f000001 	.word	0x0f000001

080007d4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80007d8:	4b17      	ldr	r3, [pc, #92]	@ (8000838 <MX_SPI1_Init+0x64>)
 80007da:	4a18      	ldr	r2, [pc, #96]	@ (800083c <MX_SPI1_Init+0x68>)
 80007dc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80007de:	4b16      	ldr	r3, [pc, #88]	@ (8000838 <MX_SPI1_Init+0x64>)
 80007e0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80007e4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80007e6:	4b14      	ldr	r3, [pc, #80]	@ (8000838 <MX_SPI1_Init+0x64>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80007ec:	4b12      	ldr	r3, [pc, #72]	@ (8000838 <MX_SPI1_Init+0x64>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80007f2:	4b11      	ldr	r3, [pc, #68]	@ (8000838 <MX_SPI1_Init+0x64>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80007f8:	4b0f      	ldr	r3, [pc, #60]	@ (8000838 <MX_SPI1_Init+0x64>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80007fe:	4b0e      	ldr	r3, [pc, #56]	@ (8000838 <MX_SPI1_Init+0x64>)
 8000800:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000804:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000806:	4b0c      	ldr	r3, [pc, #48]	@ (8000838 <MX_SPI1_Init+0x64>)
 8000808:	2200      	movs	r2, #0
 800080a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800080c:	4b0a      	ldr	r3, [pc, #40]	@ (8000838 <MX_SPI1_Init+0x64>)
 800080e:	2200      	movs	r2, #0
 8000810:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000812:	4b09      	ldr	r3, [pc, #36]	@ (8000838 <MX_SPI1_Init+0x64>)
 8000814:	2200      	movs	r2, #0
 8000816:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000818:	4b07      	ldr	r3, [pc, #28]	@ (8000838 <MX_SPI1_Init+0x64>)
 800081a:	2200      	movs	r2, #0
 800081c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800081e:	4b06      	ldr	r3, [pc, #24]	@ (8000838 <MX_SPI1_Init+0x64>)
 8000820:	220a      	movs	r2, #10
 8000822:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000824:	4804      	ldr	r0, [pc, #16]	@ (8000838 <MX_SPI1_Init+0x64>)
 8000826:	f003 ff55 	bl	80046d4 <HAL_SPI_Init>
 800082a:	4603      	mov	r3, r0
 800082c:	2b00      	cmp	r3, #0
 800082e:	d001      	beq.n	8000834 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000830:	f000 fae8 	bl	8000e04 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000834:	bf00      	nop
 8000836:	bd80      	pop	{r7, pc}
 8000838:	200001e8 	.word	0x200001e8
 800083c:	40013000 	.word	0x40013000

08000840 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b086      	sub	sp, #24
 8000844:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000846:	f107 0308 	add.w	r3, r7, #8
 800084a:	2200      	movs	r2, #0
 800084c:	601a      	str	r2, [r3, #0]
 800084e:	605a      	str	r2, [r3, #4]
 8000850:	609a      	str	r2, [r3, #8]
 8000852:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000854:	463b      	mov	r3, r7
 8000856:	2200      	movs	r2, #0
 8000858:	601a      	str	r2, [r3, #0]
 800085a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800085c:	4b1e      	ldr	r3, [pc, #120]	@ (80008d8 <MX_TIM2_Init+0x98>)
 800085e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000862:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 6000-1;
 8000864:	4b1c      	ldr	r3, [pc, #112]	@ (80008d8 <MX_TIM2_Init+0x98>)
 8000866:	f241 726f 	movw	r2, #5999	@ 0x176f
 800086a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800086c:	4b1a      	ldr	r3, [pc, #104]	@ (80008d8 <MX_TIM2_Init+0x98>)
 800086e:	2200      	movs	r2, #0
 8000870:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 416;
 8000872:	4b19      	ldr	r3, [pc, #100]	@ (80008d8 <MX_TIM2_Init+0x98>)
 8000874:	f44f 72d0 	mov.w	r2, #416	@ 0x1a0
 8000878:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800087a:	4b17      	ldr	r3, [pc, #92]	@ (80008d8 <MX_TIM2_Init+0x98>)
 800087c:	2200      	movs	r2, #0
 800087e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000880:	4b15      	ldr	r3, [pc, #84]	@ (80008d8 <MX_TIM2_Init+0x98>)
 8000882:	2200      	movs	r2, #0
 8000884:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000886:	4814      	ldr	r0, [pc, #80]	@ (80008d8 <MX_TIM2_Init+0x98>)
 8000888:	f004 f9ce 	bl	8004c28 <HAL_TIM_Base_Init>
 800088c:	4603      	mov	r3, r0
 800088e:	2b00      	cmp	r3, #0
 8000890:	d001      	beq.n	8000896 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000892:	f000 fab7 	bl	8000e04 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000896:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800089a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800089c:	f107 0308 	add.w	r3, r7, #8
 80008a0:	4619      	mov	r1, r3
 80008a2:	480d      	ldr	r0, [pc, #52]	@ (80008d8 <MX_TIM2_Init+0x98>)
 80008a4:	f004 fcc5 	bl	8005232 <HAL_TIM_ConfigClockSource>
 80008a8:	4603      	mov	r3, r0
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d001      	beq.n	80008b2 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80008ae:	f000 faa9 	bl	8000e04 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008b2:	2300      	movs	r3, #0
 80008b4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008b6:	2300      	movs	r3, #0
 80008b8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80008ba:	463b      	mov	r3, r7
 80008bc:	4619      	mov	r1, r3
 80008be:	4806      	ldr	r0, [pc, #24]	@ (80008d8 <MX_TIM2_Init+0x98>)
 80008c0:	f004 fef2 	bl	80056a8 <HAL_TIMEx_MasterConfigSynchronization>
 80008c4:	4603      	mov	r3, r0
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d001      	beq.n	80008ce <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80008ca:	f000 fa9b 	bl	8000e04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80008ce:	bf00      	nop
 80008d0:	3718      	adds	r7, #24
 80008d2:	46bd      	mov	sp, r7
 80008d4:	bd80      	pop	{r7, pc}
 80008d6:	bf00      	nop
 80008d8:	20000240 	.word	0x20000240

080008dc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b08c      	sub	sp, #48	@ 0x30
 80008e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80008e2:	f107 030c 	add.w	r3, r7, #12
 80008e6:	2224      	movs	r2, #36	@ 0x24
 80008e8:	2100      	movs	r1, #0
 80008ea:	4618      	mov	r0, r3
 80008ec:	f00c fade 	bl	800ceac <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008f0:	1d3b      	adds	r3, r7, #4
 80008f2:	2200      	movs	r2, #0
 80008f4:	601a      	str	r2, [r3, #0]
 80008f6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80008f8:	4b21      	ldr	r3, [pc, #132]	@ (8000980 <MX_TIM3_Init+0xa4>)
 80008fa:	4a22      	ldr	r2, [pc, #136]	@ (8000984 <MX_TIM3_Init+0xa8>)
 80008fc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80008fe:	4b20      	ldr	r3, [pc, #128]	@ (8000980 <MX_TIM3_Init+0xa4>)
 8000900:	2200      	movs	r2, #0
 8000902:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000904:	4b1e      	ldr	r3, [pc, #120]	@ (8000980 <MX_TIM3_Init+0xa4>)
 8000906:	2200      	movs	r2, #0
 8000908:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800090a:	4b1d      	ldr	r3, [pc, #116]	@ (8000980 <MX_TIM3_Init+0xa4>)
 800090c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000910:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8000912:	4b1b      	ldr	r3, [pc, #108]	@ (8000980 <MX_TIM3_Init+0xa4>)
 8000914:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000918:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800091a:	4b19      	ldr	r3, [pc, #100]	@ (8000980 <MX_TIM3_Init+0xa4>)
 800091c:	2200      	movs	r2, #0
 800091e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000920:	2303      	movs	r3, #3
 8000922:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000924:	2300      	movs	r3, #0
 8000926:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000928:	2301      	movs	r3, #1
 800092a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800092c:	2300      	movs	r3, #0
 800092e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000930:	2300      	movs	r3, #0
 8000932:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000934:	2300      	movs	r3, #0
 8000936:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000938:	2301      	movs	r3, #1
 800093a:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800093c:	2300      	movs	r3, #0
 800093e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8000940:	2300      	movs	r3, #0
 8000942:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8000944:	f107 030c 	add.w	r3, r7, #12
 8000948:	4619      	mov	r1, r3
 800094a:	480d      	ldr	r0, [pc, #52]	@ (8000980 <MX_TIM3_Init+0xa4>)
 800094c:	f004 fa4d 	bl	8004dea <HAL_TIM_Encoder_Init>
 8000950:	4603      	mov	r3, r0
 8000952:	2b00      	cmp	r3, #0
 8000954:	d001      	beq.n	800095a <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8000956:	f000 fa55 	bl	8000e04 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800095a:	2300      	movs	r3, #0
 800095c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800095e:	2300      	movs	r3, #0
 8000960:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000962:	1d3b      	adds	r3, r7, #4
 8000964:	4619      	mov	r1, r3
 8000966:	4806      	ldr	r0, [pc, #24]	@ (8000980 <MX_TIM3_Init+0xa4>)
 8000968:	f004 fe9e 	bl	80056a8 <HAL_TIMEx_MasterConfigSynchronization>
 800096c:	4603      	mov	r3, r0
 800096e:	2b00      	cmp	r3, #0
 8000970:	d001      	beq.n	8000976 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8000972:	f000 fa47 	bl	8000e04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000976:	bf00      	nop
 8000978:	3730      	adds	r7, #48	@ 0x30
 800097a:	46bd      	mov	sp, r7
 800097c:	bd80      	pop	{r7, pc}
 800097e:	bf00      	nop
 8000980:	20000288 	.word	0x20000288
 8000984:	40000400 	.word	0x40000400

08000988 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b08c      	sub	sp, #48	@ 0x30
 800098c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800098e:	f107 030c 	add.w	r3, r7, #12
 8000992:	2224      	movs	r2, #36	@ 0x24
 8000994:	2100      	movs	r1, #0
 8000996:	4618      	mov	r0, r3
 8000998:	f00c fa88 	bl	800ceac <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800099c:	1d3b      	adds	r3, r7, #4
 800099e:	2200      	movs	r2, #0
 80009a0:	601a      	str	r2, [r3, #0]
 80009a2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80009a4:	4b21      	ldr	r3, [pc, #132]	@ (8000a2c <MX_TIM4_Init+0xa4>)
 80009a6:	4a22      	ldr	r2, [pc, #136]	@ (8000a30 <MX_TIM4_Init+0xa8>)
 80009a8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80009aa:	4b20      	ldr	r3, [pc, #128]	@ (8000a2c <MX_TIM4_Init+0xa4>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009b0:	4b1e      	ldr	r3, [pc, #120]	@ (8000a2c <MX_TIM4_Init+0xa4>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80009b6:	4b1d      	ldr	r3, [pc, #116]	@ (8000a2c <MX_TIM4_Init+0xa4>)
 80009b8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80009bc:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 80009be:	4b1b      	ldr	r3, [pc, #108]	@ (8000a2c <MX_TIM4_Init+0xa4>)
 80009c0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80009c4:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009c6:	4b19      	ldr	r3, [pc, #100]	@ (8000a2c <MX_TIM4_Init+0xa4>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80009cc:	2303      	movs	r3, #3
 80009ce:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 80009d0:	2302      	movs	r3, #2
 80009d2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80009d4:	2301      	movs	r3, #1
 80009d6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80009d8:	2300      	movs	r3, #0
 80009da:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80009dc:	2300      	movs	r3, #0
 80009de:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80009e0:	2300      	movs	r3, #0
 80009e2:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80009e4:	2301      	movs	r3, #1
 80009e6:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80009e8:	2300      	movs	r3, #0
 80009ea:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80009ec:	2300      	movs	r3, #0
 80009ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80009f0:	f107 030c 	add.w	r3, r7, #12
 80009f4:	4619      	mov	r1, r3
 80009f6:	480d      	ldr	r0, [pc, #52]	@ (8000a2c <MX_TIM4_Init+0xa4>)
 80009f8:	f004 f9f7 	bl	8004dea <HAL_TIM_Encoder_Init>
 80009fc:	4603      	mov	r3, r0
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d001      	beq.n	8000a06 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8000a02:	f000 f9ff 	bl	8000e04 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a06:	2300      	movs	r3, #0
 8000a08:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000a0e:	1d3b      	adds	r3, r7, #4
 8000a10:	4619      	mov	r1, r3
 8000a12:	4806      	ldr	r0, [pc, #24]	@ (8000a2c <MX_TIM4_Init+0xa4>)
 8000a14:	f004 fe48 	bl	80056a8 <HAL_TIMEx_MasterConfigSynchronization>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d001      	beq.n	8000a22 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8000a1e:	f000 f9f1 	bl	8000e04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000a22:	bf00      	nop
 8000a24:	3730      	adds	r7, #48	@ 0x30
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	bf00      	nop
 8000a2c:	200002d0 	.word	0x200002d0
 8000a30:	40000800 	.word	0x40000800

08000a34 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000a38:	4b11      	ldr	r3, [pc, #68]	@ (8000a80 <MX_USART1_UART_Init+0x4c>)
 8000a3a:	4a12      	ldr	r2, [pc, #72]	@ (8000a84 <MX_USART1_UART_Init+0x50>)
 8000a3c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000a3e:	4b10      	ldr	r3, [pc, #64]	@ (8000a80 <MX_USART1_UART_Init+0x4c>)
 8000a40:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000a44:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000a46:	4b0e      	ldr	r3, [pc, #56]	@ (8000a80 <MX_USART1_UART_Init+0x4c>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000a4c:	4b0c      	ldr	r3, [pc, #48]	@ (8000a80 <MX_USART1_UART_Init+0x4c>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000a52:	4b0b      	ldr	r3, [pc, #44]	@ (8000a80 <MX_USART1_UART_Init+0x4c>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000a58:	4b09      	ldr	r3, [pc, #36]	@ (8000a80 <MX_USART1_UART_Init+0x4c>)
 8000a5a:	220c      	movs	r2, #12
 8000a5c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a5e:	4b08      	ldr	r3, [pc, #32]	@ (8000a80 <MX_USART1_UART_Init+0x4c>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a64:	4b06      	ldr	r3, [pc, #24]	@ (8000a80 <MX_USART1_UART_Init+0x4c>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000a6a:	4805      	ldr	r0, [pc, #20]	@ (8000a80 <MX_USART1_UART_Init+0x4c>)
 8000a6c:	f004 fe9e 	bl	80057ac <HAL_UART_Init>
 8000a70:	4603      	mov	r3, r0
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d001      	beq.n	8000a7a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000a76:	f000 f9c5 	bl	8000e04 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000a7a:	bf00      	nop
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	bf00      	nop
 8000a80:	20000318 	.word	0x20000318
 8000a84:	40011000 	.word	0x40011000

08000a88 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a8c:	4b11      	ldr	r3, [pc, #68]	@ (8000ad4 <MX_USART2_UART_Init+0x4c>)
 8000a8e:	4a12      	ldr	r2, [pc, #72]	@ (8000ad8 <MX_USART2_UART_Init+0x50>)
 8000a90:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 31250;
 8000a92:	4b10      	ldr	r3, [pc, #64]	@ (8000ad4 <MX_USART2_UART_Init+0x4c>)
 8000a94:	f647 2212 	movw	r2, #31250	@ 0x7a12
 8000a98:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a9a:	4b0e      	ldr	r3, [pc, #56]	@ (8000ad4 <MX_USART2_UART_Init+0x4c>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000aa0:	4b0c      	ldr	r3, [pc, #48]	@ (8000ad4 <MX_USART2_UART_Init+0x4c>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000aa6:	4b0b      	ldr	r3, [pc, #44]	@ (8000ad4 <MX_USART2_UART_Init+0x4c>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000aac:	4b09      	ldr	r3, [pc, #36]	@ (8000ad4 <MX_USART2_UART_Init+0x4c>)
 8000aae:	220c      	movs	r2, #12
 8000ab0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ab2:	4b08      	ldr	r3, [pc, #32]	@ (8000ad4 <MX_USART2_UART_Init+0x4c>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ab8:	4b06      	ldr	r3, [pc, #24]	@ (8000ad4 <MX_USART2_UART_Init+0x4c>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000abe:	4805      	ldr	r0, [pc, #20]	@ (8000ad4 <MX_USART2_UART_Init+0x4c>)
 8000ac0:	f004 fe74 	bl	80057ac <HAL_UART_Init>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d001      	beq.n	8000ace <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000aca:	f000 f99b 	bl	8000e04 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000ace:	bf00      	nop
 8000ad0:	bd80      	pop	{r7, pc}
 8000ad2:	bf00      	nop
 8000ad4:	20000360 	.word	0x20000360
 8000ad8:	40004400 	.word	0x40004400

08000adc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b088      	sub	sp, #32
 8000ae0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ae2:	f107 030c 	add.w	r3, r7, #12
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	601a      	str	r2, [r3, #0]
 8000aea:	605a      	str	r2, [r3, #4]
 8000aec:	609a      	str	r2, [r3, #8]
 8000aee:	60da      	str	r2, [r3, #12]
 8000af0:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000af2:	2300      	movs	r3, #0
 8000af4:	60bb      	str	r3, [r7, #8]
 8000af6:	4b3c      	ldr	r3, [pc, #240]	@ (8000be8 <MX_GPIO_Init+0x10c>)
 8000af8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000afa:	4a3b      	ldr	r2, [pc, #236]	@ (8000be8 <MX_GPIO_Init+0x10c>)
 8000afc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000b00:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b02:	4b39      	ldr	r3, [pc, #228]	@ (8000be8 <MX_GPIO_Init+0x10c>)
 8000b04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b06:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000b0a:	60bb      	str	r3, [r7, #8]
 8000b0c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b0e:	2300      	movs	r3, #0
 8000b10:	607b      	str	r3, [r7, #4]
 8000b12:	4b35      	ldr	r3, [pc, #212]	@ (8000be8 <MX_GPIO_Init+0x10c>)
 8000b14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b16:	4a34      	ldr	r2, [pc, #208]	@ (8000be8 <MX_GPIO_Init+0x10c>)
 8000b18:	f043 0301 	orr.w	r3, r3, #1
 8000b1c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b1e:	4b32      	ldr	r3, [pc, #200]	@ (8000be8 <MX_GPIO_Init+0x10c>)
 8000b20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b22:	f003 0301 	and.w	r3, r3, #1
 8000b26:	607b      	str	r3, [r7, #4]
 8000b28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	603b      	str	r3, [r7, #0]
 8000b2e:	4b2e      	ldr	r3, [pc, #184]	@ (8000be8 <MX_GPIO_Init+0x10c>)
 8000b30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b32:	4a2d      	ldr	r2, [pc, #180]	@ (8000be8 <MX_GPIO_Init+0x10c>)
 8000b34:	f043 0302 	orr.w	r3, r3, #2
 8000b38:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b3a:	4b2b      	ldr	r3, [pc, #172]	@ (8000be8 <MX_GPIO_Init+0x10c>)
 8000b3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b3e:	f003 0302 	and.w	r3, r3, #2
 8000b42:	603b      	str	r3, [r7, #0]
 8000b44:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OLED_DC_GPIO_Port, OLED_DC_Pin, GPIO_PIN_RESET);
 8000b46:	2200      	movs	r2, #0
 8000b48:	2102      	movs	r1, #2
 8000b4a:	4828      	ldr	r0, [pc, #160]	@ (8000bec <MX_GPIO_Init+0x110>)
 8000b4c:	f001 fecc 	bl	80028e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, OLED_Res_Pin|OLED_CS_Pin, GPIO_PIN_RESET);
 8000b50:	2200      	movs	r2, #0
 8000b52:	2103      	movs	r1, #3
 8000b54:	4826      	ldr	r0, [pc, #152]	@ (8000bf0 <MX_GPIO_Init+0x114>)
 8000b56:	f001 fec7 	bl	80028e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : OLED_DC_Pin */
  GPIO_InitStruct.Pin = OLED_DC_Pin;
 8000b5a:	2302      	movs	r3, #2
 8000b5c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b5e:	2301      	movs	r3, #1
 8000b60:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b62:	2300      	movs	r3, #0
 8000b64:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b66:	2303      	movs	r3, #3
 8000b68:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(OLED_DC_GPIO_Port, &GPIO_InitStruct);
 8000b6a:	f107 030c 	add.w	r3, r7, #12
 8000b6e:	4619      	mov	r1, r3
 8000b70:	481e      	ldr	r0, [pc, #120]	@ (8000bec <MX_GPIO_Init+0x110>)
 8000b72:	f001 fd35 	bl	80025e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : OLED_Res_Pin OLED_CS_Pin */
  GPIO_InitStruct.Pin = OLED_Res_Pin|OLED_CS_Pin;
 8000b76:	2303      	movs	r3, #3
 8000b78:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b7a:	2301      	movs	r3, #1
 8000b7c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b82:	2303      	movs	r3, #3
 8000b84:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b86:	f107 030c 	add.w	r3, r7, #12
 8000b8a:	4619      	mov	r1, r3
 8000b8c:	4818      	ldr	r0, [pc, #96]	@ (8000bf0 <MX_GPIO_Init+0x114>)
 8000b8e:	f001 fd27 	bl	80025e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : Btn1_Pin Btn4_Pin Btn3_Pin Btn2_Pin */
  GPIO_InitStruct.Pin = Btn1_Pin|Btn4_Pin|Btn3_Pin|Btn2_Pin;
 8000b92:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8000b96:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000b98:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000b9c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b9e:	2301      	movs	r3, #1
 8000ba0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ba2:	f107 030c 	add.w	r3, r7, #12
 8000ba6:	4619      	mov	r1, r3
 8000ba8:	4811      	ldr	r0, [pc, #68]	@ (8000bf0 <MX_GPIO_Init+0x114>)
 8000baa:	f001 fd19 	bl	80025e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000bae:	2308      	movs	r3, #8
 8000bb0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000bb2:	2312      	movs	r3, #18
 8000bb4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bba:	2303      	movs	r3, #3
 8000bbc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 8000bbe:	2309      	movs	r3, #9
 8000bc0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bc2:	f107 030c 	add.w	r3, r7, #12
 8000bc6:	4619      	mov	r1, r3
 8000bc8:	4809      	ldr	r0, [pc, #36]	@ (8000bf0 <MX_GPIO_Init+0x114>)
 8000bca:	f001 fd09 	bl	80025e0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8000bce:	2200      	movs	r2, #0
 8000bd0:	2105      	movs	r1, #5
 8000bd2:	2028      	movs	r0, #40	@ 0x28
 8000bd4:	f001 fc48 	bl	8002468 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000bd8:	2028      	movs	r0, #40	@ 0x28
 8000bda:	f001 fc61 	bl	80024a0 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 8000bde:	bf00      	nop
 8000be0:	3720      	adds	r7, #32
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	bf00      	nop
 8000be8:	40023800 	.word	0x40023800
 8000bec:	40020000 	.word	0x40020000
 8000bf0:	40020400 	.word	0x40020400

08000bf4 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b082      	sub	sp, #8
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  //Romagnetics code
    switch(GPIO_Pin)
 8000bfe:	88fb      	ldrh	r3, [r7, #6]
 8000c00:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8000c04:	d01c      	beq.n	8000c40 <HAL_GPIO_EXTI_Callback+0x4c>
 8000c06:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8000c0a:	dc1b      	bgt.n	8000c44 <HAL_GPIO_EXTI_Callback+0x50>
 8000c0c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000c10:	d00c      	beq.n	8000c2c <HAL_GPIO_EXTI_Callback+0x38>
 8000c12:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8000c16:	d115      	bne.n	8000c44 <HAL_GPIO_EXTI_Callback+0x50>
  {
    case Btn3_Pin :
    	if(current_menu == MIDI_TEMPO){
 8000c18:	4b0f      	ldr	r3, [pc, #60]	@ (8000c58 <HAL_GPIO_EXTI_Callback+0x64>)
 8000c1a:	781b      	ldrb	r3, [r3, #0]
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d113      	bne.n	8000c48 <HAL_GPIO_EXTI_Callback+0x54>
    	//tempo_on
    	mt_press_btn3(&huart2, &htim2, &Font_6x8);
 8000c20:	4a0e      	ldr	r2, [pc, #56]	@ (8000c5c <HAL_GPIO_EXTI_Callback+0x68>)
 8000c22:	490f      	ldr	r1, [pc, #60]	@ (8000c60 <HAL_GPIO_EXTI_Callback+0x6c>)
 8000c24:	480f      	ldr	r0, [pc, #60]	@ (8000c64 <HAL_GPIO_EXTI_Callback+0x70>)
 8000c26:	f000 f9ad 	bl	8000f84 <mt_press_btn3>
    	}
		break;
 8000c2a:	e00d      	b.n	8000c48 <HAL_GPIO_EXTI_Callback+0x54>

    case Btn4_Pin :
    	if(current_menu == MIDI_TEMPO){
 8000c2c:	4b0a      	ldr	r3, [pc, #40]	@ (8000c58 <HAL_GPIO_EXTI_Callback+0x64>)
 8000c2e:	781b      	ldrb	r3, [r3, #0]
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d10b      	bne.n	8000c4c <HAL_GPIO_EXTI_Callback+0x58>
    	//tempo off
    	mt_press_btn4(&huart2, &htim2, &Font_6x8);
 8000c34:	4a09      	ldr	r2, [pc, #36]	@ (8000c5c <HAL_GPIO_EXTI_Callback+0x68>)
 8000c36:	490a      	ldr	r1, [pc, #40]	@ (8000c60 <HAL_GPIO_EXTI_Callback+0x6c>)
 8000c38:	480a      	ldr	r0, [pc, #40]	@ (8000c64 <HAL_GPIO_EXTI_Callback+0x70>)
 8000c3a:	f000 f9d3 	bl	8000fe4 <mt_press_btn4>
    	}
		break;
 8000c3e:	e005      	b.n	8000c4c <HAL_GPIO_EXTI_Callback+0x58>
	//Screen Reset
	case Btn2_Pin :
		break;
 8000c40:	bf00      	nop
 8000c42:	e004      	b.n	8000c4e <HAL_GPIO_EXTI_Callback+0x5a>


    default :
		break;
 8000c44:	bf00      	nop
 8000c46:	e002      	b.n	8000c4e <HAL_GPIO_EXTI_Callback+0x5a>
		break;
 8000c48:	bf00      	nop
 8000c4a:	e000      	b.n	8000c4e <HAL_GPIO_EXTI_Callback+0x5a>
		break;
 8000c4c:	bf00      	nop
  }

}
 8000c4e:	bf00      	nop
 8000c50:	3708      	adds	r7, #8
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bd80      	pop	{r7, pc}
 8000c56:	bf00      	nop
 8000c58:	20000008 	.word	0x20000008
 8000c5c:	0800f17c 	.word	0x0800f17c
 8000c60:	20000240 	.word	0x20000240
 8000c64:	20000360 	.word	0x20000360

08000c68 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b082      	sub	sp, #8
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]

  	if(current_menu == MIDI_MODIFY){
 8000c70:	4b07      	ldr	r3, [pc, #28]	@ (8000c90 <HAL_UART_RxCpltCallback+0x28>)
 8000c72:	781b      	ldrb	r3, [r3, #0]
 8000c74:	2b01      	cmp	r3, #1
 8000c76:	d106      	bne.n	8000c86 <HAL_UART_RxCpltCallback+0x1e>
  		HAL_UART_Receive_IT(&huart2, midi_rx_buff_ptr, 3);
 8000c78:	4b06      	ldr	r3, [pc, #24]	@ (8000c94 <HAL_UART_RxCpltCallback+0x2c>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	2203      	movs	r2, #3
 8000c7e:	4619      	mov	r1, r3
 8000c80:	4805      	ldr	r0, [pc, #20]	@ (8000c98 <HAL_UART_RxCpltCallback+0x30>)
 8000c82:	f004 fe6e 	bl	8005962 <HAL_UART_Receive_IT>
  	}

}
 8000c86:	bf00      	nop
 8000c88:	3708      	adds	r7, #8
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bd80      	pop	{r7, pc}
 8000c8e:	bf00      	nop
 8000c90:	20000008 	.word	0x20000008
 8000c94:	2000000c 	.word	0x2000000c
 8000c98:	20000360 	.word	0x20000360

08000c9c <StartDefaultTask>:
  * @retval None
  */

/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b082      	sub	sp, #8
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8000ca4:	f00b fc20 	bl	800c4e8 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  osDelay(100);
 8000ca8:	2064      	movs	r0, #100	@ 0x64
 8000caa:	f007 fa3d 	bl	8008128 <osDelay>
 8000cae:	e7fb      	b.n	8000ca8 <StartDefaultTask+0xc>

08000cb0 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 8000cb0:	b5b0      	push	{r4, r5, r7, lr}
 8000cb2:	b092      	sub	sp, #72	@ 0x48
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
	__HAL_TIM_SET_COUNTER(&htim3,tempo_counter);
 8000cb8:	4b31      	ldr	r3, [pc, #196]	@ (8000d80 <StartTask02+0xd0>)
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	4a31      	ldr	r2, [pc, #196]	@ (8000d84 <StartTask02+0xd4>)
 8000cbe:	6812      	ldr	r2, [r2, #0]
 8000cc0:	625a      	str	r2, [r3, #36]	@ 0x24
	__HAL_TIM_SET_COUNTER(&htim4,current_menu*4);
 8000cc2:	4b31      	ldr	r3, [pc, #196]	@ (8000d88 <StartTask02+0xd8>)
 8000cc4:	781b      	ldrb	r3, [r3, #0]
 8000cc6:	009a      	lsls	r2, r3, #2
 8000cc8:	4b30      	ldr	r3, [pc, #192]	@ (8000d8c <StartTask02+0xdc>)
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	625a      	str	r2, [r3, #36]	@ 0x24
  /* Infinite loop */
  for(;;)
  {
     //Romagnetics code
     //Menu
	menu_change(&htim4, &current_menu);
 8000cce:	492e      	ldr	r1, [pc, #184]	@ (8000d88 <StartTask02+0xd8>)
 8000cd0:	482e      	ldr	r0, [pc, #184]	@ (8000d8c <StartTask02+0xdc>)
 8000cd2:	f000 f8bb 	bl	8000e4c <menu_change>
  	if(current_menu == MIDI_TEMPO){
 8000cd6:	4b2c      	ldr	r3, [pc, #176]	@ (8000d88 <StartTask02+0xd8>)
 8000cd8:	781b      	ldrb	r3, [r3, #0]
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d115      	bne.n	8000d0a <StartTask02+0x5a>
  	  screen_driver_Fill(Black);
 8000cde:	2000      	movs	r0, #0
 8000ce0:	f000 faf4 	bl	80012cc <screen_driver_Fill>
  	  char message_midi_tempo[20] = "Send Midi Tempo    ";
 8000ce4:	4b2a      	ldr	r3, [pc, #168]	@ (8000d90 <StartTask02+0xe0>)
 8000ce6:	f107 0434 	add.w	r4, r7, #52	@ 0x34
 8000cea:	461d      	mov	r5, r3
 8000cec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000cee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000cf0:	682b      	ldr	r3, [r5, #0]
 8000cf2:	6023      	str	r3, [r4, #0]
  	  menu_display(&Font_6x8, &message_midi_tempo);
 8000cf4:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8000cf8:	4619      	mov	r1, r3
 8000cfa:	4826      	ldr	r0, [pc, #152]	@ (8000d94 <StartTask02+0xe4>)
 8000cfc:	f000 f888 	bl	8000e10 <menu_display>
	  midi_tempo_counter(&htim3,  &Font_16x24);
 8000d00:	4925      	ldr	r1, [pc, #148]	@ (8000d98 <StartTask02+0xe8>)
 8000d02:	481f      	ldr	r0, [pc, #124]	@ (8000d80 <StartTask02+0xd0>)
 8000d04:	f000 f99e 	bl	8001044 <midi_tempo_counter>
 8000d08:	e034      	b.n	8000d74 <StartTask02+0xc4>
    }
  	else if(current_menu == MIDI_MODIFY){
 8000d0a:	4b1f      	ldr	r3, [pc, #124]	@ (8000d88 <StartTask02+0xd8>)
 8000d0c:	781b      	ldrb	r3, [r3, #0]
 8000d0e:	2b01      	cmp	r3, #1
 8000d10:	d119      	bne.n	8000d46 <StartTask02+0x96>
  		screen_driver_Fill(Black);
 8000d12:	2000      	movs	r0, #0
 8000d14:	f000 fada 	bl	80012cc <screen_driver_Fill>
    	char message_midi_modify[20] = "Midi Modify         ";
 8000d18:	4b20      	ldr	r3, [pc, #128]	@ (8000d9c <StartTask02+0xec>)
 8000d1a:	f107 0420 	add.w	r4, r7, #32
 8000d1e:	461d      	mov	r5, r3
 8000d20:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d22:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d24:	682b      	ldr	r3, [r5, #0]
 8000d26:	6023      	str	r3, [r4, #0]
    	menu_display(&Font_6x8, &message_midi_modify);
 8000d28:	f107 0320 	add.w	r3, r7, #32
 8000d2c:	4619      	mov	r1, r3
 8000d2e:	4819      	ldr	r0, [pc, #100]	@ (8000d94 <StartTask02+0xe4>)
 8000d30:	f000 f86e 	bl	8000e10 <menu_display>
    	display_incoming_midi(midi_rx_buff_ptr, &Font_6x8);
 8000d34:	4b1a      	ldr	r3, [pc, #104]	@ (8000da0 <StartTask02+0xf0>)
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	4916      	ldr	r1, [pc, #88]	@ (8000d94 <StartTask02+0xe4>)
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	f000 f8a4 	bl	8000e88 <display_incoming_midi>
  	    screen_driver_UpdateScreen();
 8000d40:	f000 fadc 	bl	80012fc <screen_driver_UpdateScreen>
 8000d44:	e016      	b.n	8000d74 <StartTask02+0xc4>
    }
  	else if(current_menu == SETTINGS){
 8000d46:	4b10      	ldr	r3, [pc, #64]	@ (8000d88 <StartTask02+0xd8>)
 8000d48:	781b      	ldrb	r3, [r3, #0]
 8000d4a:	2b02      	cmp	r3, #2
 8000d4c:	d112      	bne.n	8000d74 <StartTask02+0xc4>
  		screen_driver_Fill(Black);
 8000d4e:	2000      	movs	r0, #0
 8000d50:	f000 fabc 	bl	80012cc <screen_driver_Fill>
    	char message_settings[20] = "Settings            ";
 8000d54:	4b13      	ldr	r3, [pc, #76]	@ (8000da4 <StartTask02+0xf4>)
 8000d56:	f107 040c 	add.w	r4, r7, #12
 8000d5a:	461d      	mov	r5, r3
 8000d5c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d5e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d60:	682b      	ldr	r3, [r5, #0]
 8000d62:	6023      	str	r3, [r4, #0]
    	menu_display(&Font_6x8, &message_settings);
 8000d64:	f107 030c 	add.w	r3, r7, #12
 8000d68:	4619      	mov	r1, r3
 8000d6a:	480a      	ldr	r0, [pc, #40]	@ (8000d94 <StartTask02+0xe4>)
 8000d6c:	f000 f850 	bl	8000e10 <menu_display>
  	    screen_driver_UpdateScreen();
 8000d70:	f000 fac4 	bl	80012fc <screen_driver_UpdateScreen>
    }

	osDelay(1000);
 8000d74:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000d78:	f007 f9d6 	bl	8008128 <osDelay>
	menu_change(&htim4, &current_menu);
 8000d7c:	e7a7      	b.n	8000cce <StartTask02+0x1e>
 8000d7e:	bf00      	nop
 8000d80:	20000288 	.word	0x20000288
 8000d84:	20000000 	.word	0x20000000
 8000d88:	20000008 	.word	0x20000008
 8000d8c:	200002d0 	.word	0x200002d0
 8000d90:	0800d894 	.word	0x0800d894
 8000d94:	0800f17c 	.word	0x0800f17c
 8000d98:	0800f188 	.word	0x0800f188
 8000d9c:	0800d8a8 	.word	0x0800d8a8
 8000da0:	2000000c 	.word	0x2000000c
 8000da4:	0800d8bc 	.word	0x0800d8bc

08000da8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000da8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000daa:	b093      	sub	sp, #76	@ 0x4c
 8000dac:	af10      	add	r7, sp, #64	@ 0x40
 8000dae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1)
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	4a10      	ldr	r2, [pc, #64]	@ (8000df8 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000db6:	4293      	cmp	r3, r2
 8000db8:	d101      	bne.n	8000dbe <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8000dba:	f000 ffe7 	bl	8001d8c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  //Romagnetics code

  if (htim->Instance == TIM2) {
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000dc6:	d113      	bne.n	8000df0 <HAL_TIM_PeriodElapsedCallback+0x48>

	send_midi_to_midi_out(huart2, &tempo_click_rate);
 8000dc8:	4e0c      	ldr	r6, [pc, #48]	@ (8000dfc <HAL_TIM_PeriodElapsedCallback+0x54>)
 8000dca:	4b0d      	ldr	r3, [pc, #52]	@ (8000e00 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8000dcc:	930e      	str	r3, [sp, #56]	@ 0x38
 8000dce:	466d      	mov	r5, sp
 8000dd0:	f106 0410 	add.w	r4, r6, #16
 8000dd4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000dd6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000dd8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000dda:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000ddc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000dde:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000de0:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000de4:	e885 0003 	stmia.w	r5, {r0, r1}
 8000de8:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000dec:	f000 f89a 	bl	8000f24 <send_midi_to_midi_out>
  }


  /* USER CODE END Callback 1 */
}
 8000df0:	bf00      	nop
 8000df2:	370c      	adds	r7, #12
 8000df4:	46bd      	mov	sp, r7
 8000df6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000df8:	40010000 	.word	0x40010000
 8000dfc:	20000360 	.word	0x20000360
 8000e00:	20000004 	.word	0x20000004

08000e04 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e04:	b480      	push	{r7}
 8000e06:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e08:	b672      	cpsid	i
}
 8000e0a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e0c:	bf00      	nop
 8000e0e:	e7fd      	b.n	8000e0c <Error_Handler+0x8>

08000e10 <menu_display>:


#include "menu.h"


void menu_display(const screen_driver_Font_t * font, char (* message)[20]){
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b084      	sub	sp, #16
 8000e14:	af02      	add	r7, sp, #8
 8000e16:	6078      	str	r0, [r7, #4]
 8000e18:	6039      	str	r1, [r7, #0]
	screen_driver_Line(0, 15, 127, 15, White);
 8000e1a:	2301      	movs	r3, #1
 8000e1c:	9300      	str	r3, [sp, #0]
 8000e1e:	230f      	movs	r3, #15
 8000e20:	227f      	movs	r2, #127	@ 0x7f
 8000e22:	210f      	movs	r1, #15
 8000e24:	2000      	movs	r0, #0
 8000e26:	f000 fbb3 	bl	8001590 <screen_driver_Line>
	screen_driver_SetCursor(1, 1);
 8000e2a:	2101      	movs	r1, #1
 8000e2c:	2001      	movs	r0, #1
 8000e2e:	f000 fb97 	bl	8001560 <screen_driver_SetCursor>
	screen_driver_WriteString(*message, *font , White);
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	2201      	movs	r2, #1
 8000e36:	9200      	str	r2, [sp, #0]
 8000e38:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000e3a:	6838      	ldr	r0, [r7, #0]
 8000e3c:	f000 fb6a 	bl	8001514 <screen_driver_WriteString>
	screen_driver_UpdateScreen();
 8000e40:	f000 fa5c 	bl	80012fc <screen_driver_UpdateScreen>
}
 8000e44:	bf00      	nop
 8000e46:	3708      	adds	r7, #8
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	bd80      	pop	{r7, pc}

08000e4c <menu_change>:



void menu_change(TIM_HandleTypeDef * timer, uint8_t * current_menu){
 8000e4c:	b480      	push	{r7}
 8000e4e:	b085      	sub	sp, #20
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
 8000e54:	6039      	str	r1, [r7, #0]
	  uint8_t current_menu_counter = __HAL_TIM_GET_COUNTER(timer);
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e5c:	73fb      	strb	r3, [r7, #15]
	  if (current_menu_counter > 9 && current_menu_counter < 60000)
 8000e5e:	7bfb      	ldrb	r3, [r7, #15]
 8000e60:	2b09      	cmp	r3, #9
 8000e62:	d905      	bls.n	8000e70 <menu_change+0x24>
	  {
	    __HAL_TIM_SET_COUNTER(timer,8);
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	2208      	movs	r2, #8
 8000e6a:	625a      	str	r2, [r3, #36]	@ 0x24
	    current_menu_counter = 8;
 8000e6c:	2308      	movs	r3, #8
 8000e6e:	73fb      	strb	r3, [r7, #15]
	  else if (current_menu_counter > 60000)
	  {
	    __HAL_TIM_SET_COUNTER(timer,0);
	    current_menu_counter = 0;
	  }
	  *current_menu = current_menu_counter/4;
 8000e70:	7bfb      	ldrb	r3, [r7, #15]
 8000e72:	089b      	lsrs	r3, r3, #2
 8000e74:	b2da      	uxtb	r2, r3
 8000e76:	683b      	ldr	r3, [r7, #0]
 8000e78:	701a      	strb	r2, [r3, #0]
}
 8000e7a:	bf00      	nop
 8000e7c:	3714      	adds	r7, #20
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e84:	4770      	bx	lr
	...

08000e88 <display_incoming_midi>:
#include <stdio.h>
#include <stdint.h>



void display_incoming_midi(uint8_t * midi_rx_buff_ptr, const screen_driver_Font_t * font){
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b08c      	sub	sp, #48	@ 0x30
 8000e8c:	af02      	add	r7, sp, #8
 8000e8e:	6078      	str	r0, [r7, #4]
 8000e90:	6039      	str	r1, [r7, #0]


			uint8_t midi_one_byte_uint = *midi_rx_buff_ptr;
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	781b      	ldrb	r3, [r3, #0]
 8000e96:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			uint8_t midi_two_byte_uint = *(midi_rx_buff_ptr + 1);
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	785b      	ldrb	r3, [r3, #1]
 8000e9e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
			uint8_t midi_three_byte_uint = *(midi_rx_buff_ptr + 2);
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	789b      	ldrb	r3, [r3, #2]
 8000ea6:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

			char midi_one_byte_hex[3];
			char midi_two_byte_hex[3];
			char midi_three_byte_hex[3];

			sprintf(midi_one_byte_hex, "%02X", midi_one_byte_uint);
 8000eaa:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8000eae:	f107 0320 	add.w	r3, r7, #32
 8000eb2:	491a      	ldr	r1, [pc, #104]	@ (8000f1c <display_incoming_midi+0x94>)
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	f00b ffd7 	bl	800ce68 <siprintf>
			sprintf(midi_two_byte_hex, "%02X", midi_two_byte_uint);
 8000eba:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8000ebe:	f107 031c 	add.w	r3, r7, #28
 8000ec2:	4916      	ldr	r1, [pc, #88]	@ (8000f1c <display_incoming_midi+0x94>)
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	f00b ffcf 	bl	800ce68 <siprintf>
			sprintf(midi_three_byte_hex, "%02X", midi_three_byte_uint);
 8000eca:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 8000ece:	f107 0318 	add.w	r3, r7, #24
 8000ed2:	4912      	ldr	r1, [pc, #72]	@ (8000f1c <display_incoming_midi+0x94>)
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	f00b ffc7 	bl	800ce68 <siprintf>

		    char byte_print_hex[11];
		    snprintf(byte_print_hex, sizeof(byte_print_hex), "%s %s %s", midi_one_byte_hex, midi_two_byte_hex, midi_three_byte_hex);
 8000eda:	f107 0220 	add.w	r2, r7, #32
 8000ede:	f107 000c 	add.w	r0, r7, #12
 8000ee2:	f107 0318 	add.w	r3, r7, #24
 8000ee6:	9301      	str	r3, [sp, #4]
 8000ee8:	f107 031c 	add.w	r3, r7, #28
 8000eec:	9300      	str	r3, [sp, #0]
 8000eee:	4613      	mov	r3, r2
 8000ef0:	4a0b      	ldr	r2, [pc, #44]	@ (8000f20 <display_incoming_midi+0x98>)
 8000ef2:	210b      	movs	r1, #11
 8000ef4:	f00b ff82 	bl	800cdfc <sniprintf>


			//screen_driver_WriteString(byte_print_hex, *font , White);
			screen_driver_SetCursor(50, 50);
 8000ef8:	2132      	movs	r1, #50	@ 0x32
 8000efa:	2032      	movs	r0, #50	@ 0x32
 8000efc:	f000 fb30 	bl	8001560 <screen_driver_SetCursor>
			screen_driver_WriteString(byte_print_hex, *font , White);
 8000f00:	683b      	ldr	r3, [r7, #0]
 8000f02:	f107 000c 	add.w	r0, r7, #12
 8000f06:	2201      	movs	r2, #1
 8000f08:	9200      	str	r2, [sp, #0]
 8000f0a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000f0c:	f000 fb02 	bl	8001514 <screen_driver_WriteString>
			screen_driver_UpdateScreen();
 8000f10:	f000 f9f4 	bl	80012fc <screen_driver_UpdateScreen>

}
 8000f14:	bf00      	nop
 8000f16:	3728      	adds	r7, #40	@ 0x28
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bd80      	pop	{r7, pc}
 8000f1c:	0800d8d0 	.word	0x0800d8d0
 8000f20:	0800d8d8 	.word	0x0800d8d8

08000f24 <send_midi_to_midi_out>:
extern uint32_t tempo_counter;
extern uint32_t tempo_click_rate;



void send_midi_to_midi_out(UART_HandleTypeDef huart_ptr, uint32_t *tempo_click_rate_ptr){
 8000f24:	b084      	sub	sp, #16
 8000f26:	b580      	push	{r7, lr}
 8000f28:	b082      	sub	sp, #8
 8000f2a:	af00      	add	r7, sp, #0
 8000f2c:	f107 0c10 	add.w	ip, r7, #16
 8000f30:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	  uint8_t clock_send_tempo[3]  = {0xf8, 0x00, 0x00};
 8000f34:	4a12      	ldr	r2, [pc, #72]	@ (8000f80 <send_midi_to_midi_out+0x5c>)
 8000f36:	1d3b      	adds	r3, r7, #4
 8000f38:	6812      	ldr	r2, [r2, #0]
 8000f3a:	4611      	mov	r1, r2
 8000f3c:	8019      	strh	r1, [r3, #0]
 8000f3e:	3302      	adds	r3, #2
 8000f40:	0c12      	lsrs	r2, r2, #16
 8000f42:	701a      	strb	r2, [r3, #0]
	  HAL_UART_Transmit(&huart_ptr, clock_send_tempo, 3, 1000);
 8000f44:	1d39      	adds	r1, r7, #4
 8000f46:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f4a:	2203      	movs	r2, #3
 8000f4c:	f107 0010 	add.w	r0, r7, #16
 8000f50:	f004 fc7c 	bl	800584c <HAL_UART_Transmit>
	  //Adjusting the tempo if needed
	  if (TIM2->ARR != *tempo_click_rate_ptr){
 8000f54:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000f58:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000f5a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	429a      	cmp	r2, r3
 8000f60:	d004      	beq.n	8000f6c <send_midi_to_midi_out+0x48>
		  TIM2->ARR = *tempo_click_rate_ptr;
 8000f62:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000f66:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	62d3      	str	r3, [r2, #44]	@ 0x2c
	  }
	  osDelay(1);
 8000f6c:	2001      	movs	r0, #1
 8000f6e:	f007 f8db 	bl	8008128 <osDelay>
}
 8000f72:	bf00      	nop
 8000f74:	3708      	adds	r7, #8
 8000f76:	46bd      	mov	sp, r7
 8000f78:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000f7c:	b004      	add	sp, #16
 8000f7e:	4770      	bx	lr
 8000f80:	0800d8e4 	.word	0x0800d8e4

08000f84 <mt_press_btn3>:


//Interrupter method. Do not add delay
void mt_press_btn3(UART_HandleTypeDef * uart, TIM_HandleTypeDef * timer, const screen_driver_Font_t * font){
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b088      	sub	sp, #32
 8000f88:	af02      	add	r7, sp, #8
 8000f8a:	60f8      	str	r0, [r7, #12]
 8000f8c:	60b9      	str	r1, [r7, #8]
 8000f8e:	607a      	str	r2, [r7, #4]
	//Clock start and starting the timer
		uint8_t clock_start[3] = {0xfa, 0x00, 0x00};
 8000f90:	4a12      	ldr	r2, [pc, #72]	@ (8000fdc <mt_press_btn3+0x58>)
 8000f92:	f107 0314 	add.w	r3, r7, #20
 8000f96:	6812      	ldr	r2, [r2, #0]
 8000f98:	4611      	mov	r1, r2
 8000f9a:	8019      	strh	r1, [r3, #0]
 8000f9c:	3302      	adds	r3, #2
 8000f9e:	0c12      	lsrs	r2, r2, #16
 8000fa0:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit(uart, clock_start, 3, 1000);
 8000fa2:	f107 0114 	add.w	r1, r7, #20
 8000fa6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000faa:	2203      	movs	r2, #3
 8000fac:	68f8      	ldr	r0, [r7, #12]
 8000fae:	f004 fc4d 	bl	800584c <HAL_UART_Transmit>
		HAL_TIM_Base_Start_IT(timer);
 8000fb2:	68b8      	ldr	r0, [r7, #8]
 8000fb4:	f003 fe88 	bl	8004cc8 <HAL_TIM_Base_Start_IT>
	//Screen update
	screen_driver_SetCursor(30, 80);
 8000fb8:	2150      	movs	r1, #80	@ 0x50
 8000fba:	201e      	movs	r0, #30
 8000fbc:	f000 fad0 	bl	8001560 <screen_driver_SetCursor>
	screen_driver_WriteString("Tempo On   ", *font , White); // @suppress("Symbol is not resolved")
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	2201      	movs	r2, #1
 8000fc4:	9200      	str	r2, [sp, #0]
 8000fc6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000fc8:	4805      	ldr	r0, [pc, #20]	@ (8000fe0 <mt_press_btn3+0x5c>)
 8000fca:	f000 faa3 	bl	8001514 <screen_driver_WriteString>
	screen_driver_UpdateScreen();
 8000fce:	f000 f995 	bl	80012fc <screen_driver_UpdateScreen>
}
 8000fd2:	bf00      	nop
 8000fd4:	3718      	adds	r7, #24
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	bf00      	nop
 8000fdc:	0800d8f4 	.word	0x0800d8f4
 8000fe0:	0800d8e8 	.word	0x0800d8e8

08000fe4 <mt_press_btn4>:


//Interrupter method. Do not add delay
void mt_press_btn4(UART_HandleTypeDef * uart, TIM_HandleTypeDef * timer, const screen_driver_Font_t * font){
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b088      	sub	sp, #32
 8000fe8:	af02      	add	r7, sp, #8
 8000fea:	60f8      	str	r0, [r7, #12]
 8000fec:	60b9      	str	r1, [r7, #8]
 8000fee:	607a      	str	r2, [r7, #4]
	//Stopping the timer and sending stop message
		HAL_TIM_Base_Stop_IT(timer);
 8000ff0:	68b8      	ldr	r0, [r7, #8]
 8000ff2:	f003 fecb 	bl	8004d8c <HAL_TIM_Base_Stop_IT>
		uint8_t clock_stop[3]  = {0xfc, 0x00, 0x00};
 8000ff6:	4a11      	ldr	r2, [pc, #68]	@ (800103c <mt_press_btn4+0x58>)
 8000ff8:	f107 0314 	add.w	r3, r7, #20
 8000ffc:	6812      	ldr	r2, [r2, #0]
 8000ffe:	4611      	mov	r1, r2
 8001000:	8019      	strh	r1, [r3, #0]
 8001002:	3302      	adds	r3, #2
 8001004:	0c12      	lsrs	r2, r2, #16
 8001006:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit(uart, clock_stop, 3, 1000);
 8001008:	f107 0114 	add.w	r1, r7, #20
 800100c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001010:	2203      	movs	r2, #3
 8001012:	68f8      	ldr	r0, [r7, #12]
 8001014:	f004 fc1a 	bl	800584c <HAL_UART_Transmit>
	//Screen update
	screen_driver_SetCursor(30, 80);
 8001018:	2150      	movs	r1, #80	@ 0x50
 800101a:	201e      	movs	r0, #30
 800101c:	f000 faa0 	bl	8001560 <screen_driver_SetCursor>
	screen_driver_WriteString("Tempo Off   ", *font, White);
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	2201      	movs	r2, #1
 8001024:	9200      	str	r2, [sp, #0]
 8001026:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001028:	4805      	ldr	r0, [pc, #20]	@ (8001040 <mt_press_btn4+0x5c>)
 800102a:	f000 fa73 	bl	8001514 <screen_driver_WriteString>
	screen_driver_UpdateScreen();
 800102e:	f000 f965 	bl	80012fc <screen_driver_UpdateScreen>
}
 8001032:	bf00      	nop
 8001034:	3718      	adds	r7, #24
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}
 800103a:	bf00      	nop
 800103c:	0800d908 	.word	0x0800d908
 8001040:	0800d8f8 	.word	0x0800d8f8

08001044 <midi_tempo_counter>:


//Font is 16x24
void midi_tempo_counter(TIM_HandleTypeDef * timer, const screen_driver_Font_t * font){
 8001044:	b580      	push	{r7, lr}
 8001046:	b088      	sub	sp, #32
 8001048:	af02      	add	r7, sp, #8
 800104a:	6078      	str	r0, [r7, #4]
 800104c:	6039      	str	r1, [r7, #0]
	  tempo_counter = __HAL_TIM_GET_COUNTER(timer);
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001054:	4a2d      	ldr	r2, [pc, #180]	@ (800110c <midi_tempo_counter+0xc8>)
 8001056:	6013      	str	r3, [r2, #0]
	  tempo = tempo_counter / 4;
 8001058:	4b2c      	ldr	r3, [pc, #176]	@ (800110c <midi_tempo_counter+0xc8>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	089b      	lsrs	r3, r3, #2
 800105e:	4a2c      	ldr	r2, [pc, #176]	@ (8001110 <midi_tempo_counter+0xcc>)
 8001060:	6013      	str	r3, [r2, #0]
	  tempo_click_rate = 600000/(tempo*24);
 8001062:	4b2b      	ldr	r3, [pc, #172]	@ (8001110 <midi_tempo_counter+0xcc>)
 8001064:	681a      	ldr	r2, [r3, #0]
 8001066:	4613      	mov	r3, r2
 8001068:	005b      	lsls	r3, r3, #1
 800106a:	4413      	add	r3, r2
 800106c:	00db      	lsls	r3, r3, #3
 800106e:	461a      	mov	r2, r3
 8001070:	4b28      	ldr	r3, [pc, #160]	@ (8001114 <midi_tempo_counter+0xd0>)
 8001072:	fbb3 f3f2 	udiv	r3, r3, r2
 8001076:	4a28      	ldr	r2, [pc, #160]	@ (8001118 <midi_tempo_counter+0xd4>)
 8001078:	6013      	str	r3, [r2, #0]
	  if (tempo_counter > 60000  || tempo_counter < 120)
 800107a:	4b24      	ldr	r3, [pc, #144]	@ (800110c <midi_tempo_counter+0xc8>)
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	f64e 2260 	movw	r2, #60000	@ 0xea60
 8001082:	4293      	cmp	r3, r2
 8001084:	d803      	bhi.n	800108e <midi_tempo_counter+0x4a>
 8001086:	4b21      	ldr	r3, [pc, #132]	@ (800110c <midi_tempo_counter+0xc8>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	2b77      	cmp	r3, #119	@ 0x77
 800108c:	d809      	bhi.n	80010a2 <midi_tempo_counter+0x5e>
	  {
	    __HAL_TIM_SET_COUNTER(timer,120);
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	2278      	movs	r2, #120	@ 0x78
 8001094:	625a      	str	r2, [r3, #36]	@ 0x24
	    tempo =30;
 8001096:	4b1e      	ldr	r3, [pc, #120]	@ (8001110 <midi_tempo_counter+0xcc>)
 8001098:	221e      	movs	r2, #30
 800109a:	601a      	str	r2, [r3, #0]
	    tempo_click_rate = 208;
 800109c:	4b1e      	ldr	r3, [pc, #120]	@ (8001118 <midi_tempo_counter+0xd4>)
 800109e:	22d0      	movs	r2, #208	@ 0xd0
 80010a0:	601a      	str	r2, [r3, #0]
	  }
	  if (tempo_counter > 1200)
 80010a2:	4b1a      	ldr	r3, [pc, #104]	@ (800110c <midi_tempo_counter+0xc8>)
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	f5b3 6f96 	cmp.w	r3, #1200	@ 0x4b0
 80010aa:	d90c      	bls.n	80010c6 <midi_tempo_counter+0x82>
	  {
	    __HAL_TIM_SET_COUNTER(timer,1200);
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	f44f 6296 	mov.w	r2, #1200	@ 0x4b0
 80010b4:	625a      	str	r2, [r3, #36]	@ 0x24
	    tempo =300;
 80010b6:	4b16      	ldr	r3, [pc, #88]	@ (8001110 <midi_tempo_counter+0xcc>)
 80010b8:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80010bc:	601a      	str	r2, [r3, #0]
	    tempo_click_rate = 2083;
 80010be:	4b16      	ldr	r3, [pc, #88]	@ (8001118 <midi_tempo_counter+0xd4>)
 80010c0:	f640 0223 	movw	r2, #2083	@ 0x823
 80010c4:	601a      	str	r2, [r3, #0]
	  }
	  char number_print[3];
	  itoa(tempo ,number_print,10);
 80010c6:	4b12      	ldr	r3, [pc, #72]	@ (8001110 <midi_tempo_counter+0xcc>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	4618      	mov	r0, r3
 80010cc:	f107 0314 	add.w	r3, r7, #20
 80010d0:	220a      	movs	r2, #10
 80010d2:	4619      	mov	r1, r3
 80010d4:	f00b fe4e 	bl	800cd74 <itoa>
	  //blank spaces are added to delete any remaining numbers on the screen
    char fullmessage[7];
    sprintf(fullmessage, "%s   ", number_print);
 80010d8:	f107 0214 	add.w	r2, r7, #20
 80010dc:	f107 030c 	add.w	r3, r7, #12
 80010e0:	490e      	ldr	r1, [pc, #56]	@ (800111c <midi_tempo_counter+0xd8>)
 80010e2:	4618      	mov	r0, r3
 80010e4:	f00b fec0 	bl	800ce68 <siprintf>
	screen_driver_SetCursor(48, 30);
 80010e8:	211e      	movs	r1, #30
 80010ea:	2030      	movs	r0, #48	@ 0x30
 80010ec:	f000 fa38 	bl	8001560 <screen_driver_SetCursor>
	screen_driver_WriteString(fullmessage, *font, White);
 80010f0:	683b      	ldr	r3, [r7, #0]
 80010f2:	f107 000c 	add.w	r0, r7, #12
 80010f6:	2201      	movs	r2, #1
 80010f8:	9200      	str	r2, [sp, #0]
 80010fa:	cb0e      	ldmia	r3, {r1, r2, r3}
 80010fc:	f000 fa0a 	bl	8001514 <screen_driver_WriteString>
	screen_driver_UpdateScreen();
 8001100:	f000 f8fc 	bl	80012fc <screen_driver_UpdateScreen>
}
 8001104:	bf00      	nop
 8001106:	3718      	adds	r7, #24
 8001108:	46bd      	mov	sp, r7
 800110a:	bd80      	pop	{r7, pc}
 800110c:	20000000 	.word	0x20000000
 8001110:	20000010 	.word	0x20000010
 8001114:	000927c0 	.word	0x000927c0
 8001118:	20000004 	.word	0x20000004
 800111c:	0800d90c 	.word	0x0800d90c

08001120 <screen_driver_Reset>:
    HAL_I2C_Mem_Write(&screen_driver_I2C_PORT, screen_driver_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
}

#elif defined(screen_driver_USE_SPI)

void screen_driver_Reset(void) {
 8001120:	b580      	push	{r7, lr}
 8001122:	af00      	add	r7, sp, #0
    // CS = High (not selected)
    HAL_GPIO_WritePin(screen_driver_CS_Port, screen_driver_CS_Pin, GPIO_PIN_SET);
 8001124:	2201      	movs	r2, #1
 8001126:	2102      	movs	r1, #2
 8001128:	480a      	ldr	r0, [pc, #40]	@ (8001154 <screen_driver_Reset+0x34>)
 800112a:	f001 fbdd 	bl	80028e8 <HAL_GPIO_WritePin>

    // Reset the OLED
    HAL_GPIO_WritePin(screen_driver_Reset_Port, screen_driver_Reset_Pin, GPIO_PIN_RESET);
 800112e:	2200      	movs	r2, #0
 8001130:	2101      	movs	r1, #1
 8001132:	4808      	ldr	r0, [pc, #32]	@ (8001154 <screen_driver_Reset+0x34>)
 8001134:	f001 fbd8 	bl	80028e8 <HAL_GPIO_WritePin>
    HAL_Delay(10);
 8001138:	200a      	movs	r0, #10
 800113a:	f000 fe47 	bl	8001dcc <HAL_Delay>
    HAL_GPIO_WritePin(screen_driver_Reset_Port, screen_driver_Reset_Pin, GPIO_PIN_SET);
 800113e:	2201      	movs	r2, #1
 8001140:	2101      	movs	r1, #1
 8001142:	4804      	ldr	r0, [pc, #16]	@ (8001154 <screen_driver_Reset+0x34>)
 8001144:	f001 fbd0 	bl	80028e8 <HAL_GPIO_WritePin>
    HAL_Delay(10);
 8001148:	200a      	movs	r0, #10
 800114a:	f000 fe3f 	bl	8001dcc <HAL_Delay>
}
 800114e:	bf00      	nop
 8001150:	bd80      	pop	{r7, pc}
 8001152:	bf00      	nop
 8001154:	40020400 	.word	0x40020400

08001158 <screen_driver_WriteCommand>:

// Send a byte to the command register
void screen_driver_WriteCommand(uint8_t byte) {
 8001158:	b580      	push	{r7, lr}
 800115a:	b082      	sub	sp, #8
 800115c:	af00      	add	r7, sp, #0
 800115e:	4603      	mov	r3, r0
 8001160:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(screen_driver_CS_Port, screen_driver_CS_Pin, GPIO_PIN_RESET); // select OLED
 8001162:	2200      	movs	r2, #0
 8001164:	2102      	movs	r1, #2
 8001166:	480c      	ldr	r0, [pc, #48]	@ (8001198 <screen_driver_WriteCommand+0x40>)
 8001168:	f001 fbbe 	bl	80028e8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(screen_driver_DC_Port, screen_driver_DC_Pin, GPIO_PIN_RESET); // command
 800116c:	2200      	movs	r2, #0
 800116e:	2102      	movs	r1, #2
 8001170:	480a      	ldr	r0, [pc, #40]	@ (800119c <screen_driver_WriteCommand+0x44>)
 8001172:	f001 fbb9 	bl	80028e8 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&screen_driver_SPI_PORT, (uint8_t *) &byte, 1, HAL_MAX_DELAY);
 8001176:	1df9      	adds	r1, r7, #7
 8001178:	f04f 33ff 	mov.w	r3, #4294967295
 800117c:	2201      	movs	r2, #1
 800117e:	4808      	ldr	r0, [pc, #32]	@ (80011a0 <screen_driver_WriteCommand+0x48>)
 8001180:	f003 fb31 	bl	80047e6 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(screen_driver_CS_Port, screen_driver_CS_Pin, GPIO_PIN_SET); // un-select OLED
 8001184:	2201      	movs	r2, #1
 8001186:	2102      	movs	r1, #2
 8001188:	4803      	ldr	r0, [pc, #12]	@ (8001198 <screen_driver_WriteCommand+0x40>)
 800118a:	f001 fbad 	bl	80028e8 <HAL_GPIO_WritePin>
}
 800118e:	bf00      	nop
 8001190:	3708      	adds	r7, #8
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	40020400 	.word	0x40020400
 800119c:	40020000 	.word	0x40020000
 80011a0:	200001e8 	.word	0x200001e8

080011a4 <screen_driver_WriteData>:

// Send data
void screen_driver_WriteData(uint8_t* buffer, size_t buff_size) {
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b082      	sub	sp, #8
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
 80011ac:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(screen_driver_CS_Port, screen_driver_CS_Pin, GPIO_PIN_RESET); // select OLED
 80011ae:	2200      	movs	r2, #0
 80011b0:	2102      	movs	r1, #2
 80011b2:	480c      	ldr	r0, [pc, #48]	@ (80011e4 <screen_driver_WriteData+0x40>)
 80011b4:	f001 fb98 	bl	80028e8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(screen_driver_DC_Port, screen_driver_DC_Pin, GPIO_PIN_SET); // data
 80011b8:	2201      	movs	r2, #1
 80011ba:	2102      	movs	r1, #2
 80011bc:	480a      	ldr	r0, [pc, #40]	@ (80011e8 <screen_driver_WriteData+0x44>)
 80011be:	f001 fb93 	bl	80028e8 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&screen_driver_SPI_PORT, buffer, buff_size, HAL_MAX_DELAY);
 80011c2:	683b      	ldr	r3, [r7, #0]
 80011c4:	b29a      	uxth	r2, r3
 80011c6:	f04f 33ff 	mov.w	r3, #4294967295
 80011ca:	6879      	ldr	r1, [r7, #4]
 80011cc:	4807      	ldr	r0, [pc, #28]	@ (80011ec <screen_driver_WriteData+0x48>)
 80011ce:	f003 fb0a 	bl	80047e6 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(screen_driver_CS_Port, screen_driver_CS_Pin, GPIO_PIN_SET); // un-select OLED
 80011d2:	2201      	movs	r2, #1
 80011d4:	2102      	movs	r1, #2
 80011d6:	4803      	ldr	r0, [pc, #12]	@ (80011e4 <screen_driver_WriteData+0x40>)
 80011d8:	f001 fb86 	bl	80028e8 <HAL_GPIO_WritePin>
}
 80011dc:	bf00      	nop
 80011de:	3708      	adds	r7, #8
 80011e0:	46bd      	mov	sp, r7
 80011e2:	bd80      	pop	{r7, pc}
 80011e4:	40020400 	.word	0x40020400
 80011e8:	40020000 	.word	0x40020000
 80011ec:	200001e8 	.word	0x200001e8

080011f0 <screen_driver_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void screen_driver_Init(void) {
 80011f0:	b580      	push	{r7, lr}
 80011f2:	af00      	add	r7, sp, #0
    // Reset OLED
    screen_driver_Reset();
 80011f4:	f7ff ff94 	bl	8001120 <screen_driver_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 80011f8:	2064      	movs	r0, #100	@ 0x64
 80011fa:	f000 fde7 	bl	8001dcc <HAL_Delay>

    // Init OLED
    screen_driver_SetDisplayOn(0); //display off
 80011fe:	2000      	movs	r0, #0
 8001200:	f000 fa46 	bl	8001690 <screen_driver_SetDisplayOn>

    screen_driver_WriteCommand(0x20); //Set Memory Addressing Mode
 8001204:	2020      	movs	r0, #32
 8001206:	f7ff ffa7 	bl	8001158 <screen_driver_WriteCommand>
    screen_driver_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 800120a:	2000      	movs	r0, #0
 800120c:	f7ff ffa4 	bl	8001158 <screen_driver_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    screen_driver_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001210:	20b0      	movs	r0, #176	@ 0xb0
 8001212:	f7ff ffa1 	bl	8001158 <screen_driver_WriteCommand>

#ifdef screen_driver_MIRROR_VERT
    screen_driver_WriteCommand(0xC0); // Mirror vertically
#else
    screen_driver_WriteCommand(0xC8); //Set COM Output Scan Direction
 8001216:	20c8      	movs	r0, #200	@ 0xc8
 8001218:	f7ff ff9e 	bl	8001158 <screen_driver_WriteCommand>
#endif

#ifdef screen_driver_MIRROR_HORIZ
    screen_driver_WriteCommand(0xA0); // Mirror horizontally
#else
    screen_driver_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 800121c:	20a1      	movs	r0, #161	@ 0xa1
 800121e:	f7ff ff9b 	bl	8001158 <screen_driver_WriteCommand>

    //Default A1
    //Default C8
    //Default 20

    screen_driver_WriteCommand(0xA1);
 8001222:	20a1      	movs	r0, #161	@ 0xa1
 8001224:	f7ff ff98 	bl	8001158 <screen_driver_WriteCommand>
    screen_driver_WriteCommand(0xC8);
 8001228:	20c8      	movs	r0, #200	@ 0xc8
 800122a:	f7ff ff95 	bl	8001158 <screen_driver_WriteCommand>


    //Default low 00
    //Default high 10
    screen_driver_WriteCommand(0x00); //---set low column address
 800122e:	2000      	movs	r0, #0
 8001230:	f7ff ff92 	bl	8001158 <screen_driver_WriteCommand>
    screen_driver_WriteCommand(0x10); //---set high column address
 8001234:	2010      	movs	r0, #16
 8001236:	f7ff ff8f 	bl	8001158 <screen_driver_WriteCommand>

    screen_driver_WriteCommand(0x40); //--set start line address - CHECK
 800123a:	2040      	movs	r0, #64	@ 0x40
 800123c:	f7ff ff8c 	bl	8001158 <screen_driver_WriteCommand>

    screen_driver_SetContrast(0xFF);
 8001240:	20ff      	movs	r0, #255	@ 0xff
 8001242:	f000 fa11 	bl	8001668 <screen_driver_SetContrast>


#ifdef screen_driver_INVERSE_COLOR
    screen_driver_WriteCommand(0xA7); //--set inverse color
#else
    screen_driver_WriteCommand(0xA6); //--set normal color
 8001246:	20a6      	movs	r0, #166	@ 0xa6
 8001248:	f7ff ff86 	bl	8001158 <screen_driver_WriteCommand>
#endif

// Set multiplex ratio.
#if (screen_driver_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    screen_driver_WriteCommand(0xFF);
 800124c:	20ff      	movs	r0, #255	@ 0xff
 800124e:	f7ff ff83 	bl	8001158 <screen_driver_WriteCommand>
#if (screen_driver_HEIGHT == 32)
    screen_driver_WriteCommand(0x1F); //
#elif (screen_driver_HEIGHT == 64)
    screen_driver_WriteCommand(0x3F); //
#elif (screen_driver_HEIGHT == 128)
    screen_driver_WriteCommand(0x3F); // Seems to work for 128px high displays too.
 8001252:	203f      	movs	r0, #63	@ 0x3f
 8001254:	f7ff ff80 	bl	8001158 <screen_driver_WriteCommand>
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    screen_driver_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001258:	20a4      	movs	r0, #164	@ 0xa4
 800125a:	f7ff ff7d 	bl	8001158 <screen_driver_WriteCommand>

    screen_driver_WriteCommand(0xD3); //-set display offset - CHECK
 800125e:	20d3      	movs	r0, #211	@ 0xd3
 8001260:	f7ff ff7a 	bl	8001158 <screen_driver_WriteCommand>
    screen_driver_WriteCommand(0x00); //-not offset
 8001264:	2000      	movs	r0, #0
 8001266:	f7ff ff77 	bl	8001158 <screen_driver_WriteCommand>

    screen_driver_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 800126a:	20d5      	movs	r0, #213	@ 0xd5
 800126c:	f7ff ff74 	bl	8001158 <screen_driver_WriteCommand>
    screen_driver_WriteCommand(0xF0); //--set divide ratio
 8001270:	20f0      	movs	r0, #240	@ 0xf0
 8001272:	f7ff ff71 	bl	8001158 <screen_driver_WriteCommand>

    screen_driver_WriteCommand(0xD9); //--set pre-charge period
 8001276:	20d9      	movs	r0, #217	@ 0xd9
 8001278:	f7ff ff6e 	bl	8001158 <screen_driver_WriteCommand>
    screen_driver_WriteCommand(0x22); //
 800127c:	2022      	movs	r0, #34	@ 0x22
 800127e:	f7ff ff6b 	bl	8001158 <screen_driver_WriteCommand>

    screen_driver_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8001282:	20da      	movs	r0, #218	@ 0xda
 8001284:	f7ff ff68 	bl	8001158 <screen_driver_WriteCommand>
#if (screen_driver_HEIGHT == 32)
    screen_driver_WriteCommand(0x02);
#elif (screen_driver_HEIGHT == 64)
    screen_driver_WriteCommand(0x12);
#elif (screen_driver_HEIGHT == 128)
    screen_driver_WriteCommand(0x12);
 8001288:	2012      	movs	r0, #18
 800128a:	f7ff ff65 	bl	8001158 <screen_driver_WriteCommand>
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    screen_driver_WriteCommand(0xDB); //--set vcomh
 800128e:	20db      	movs	r0, #219	@ 0xdb
 8001290:	f7ff ff62 	bl	8001158 <screen_driver_WriteCommand>


    screen_driver_WriteCommand(0x8D); //--set DC-DC enable
 8001294:	208d      	movs	r0, #141	@ 0x8d
 8001296:	f7ff ff5f 	bl	8001158 <screen_driver_WriteCommand>
    screen_driver_WriteCommand(0x14); //
 800129a:	2014      	movs	r0, #20
 800129c:	f7ff ff5c 	bl	8001158 <screen_driver_WriteCommand>
    screen_driver_SetDisplayOn(1); //--turn on screen_driver panel
 80012a0:	2001      	movs	r0, #1
 80012a2:	f000 f9f5 	bl	8001690 <screen_driver_SetDisplayOn>

    // Clear screen
    screen_driver_Fill(Black);
 80012a6:	2000      	movs	r0, #0
 80012a8:	f000 f810 	bl	80012cc <screen_driver_Fill>
    
    // Flush buffer to screen
    screen_driver_UpdateScreen();
 80012ac:	f000 f826 	bl	80012fc <screen_driver_UpdateScreen>
    
    // Set default values for screen object
    screen_driver.CurrentX = 0;
 80012b0:	4b05      	ldr	r3, [pc, #20]	@ (80012c8 <screen_driver_Init+0xd8>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	801a      	strh	r2, [r3, #0]
    screen_driver.CurrentY = 0;
 80012b6:	4b04      	ldr	r3, [pc, #16]	@ (80012c8 <screen_driver_Init+0xd8>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	805a      	strh	r2, [r3, #2]
    
    screen_driver.Initialized = 1;
 80012bc:	4b02      	ldr	r3, [pc, #8]	@ (80012c8 <screen_driver_Init+0xd8>)
 80012be:	2201      	movs	r2, #1
 80012c0:	711a      	strb	r2, [r3, #4]
}
 80012c2:	bf00      	nop
 80012c4:	bd80      	pop	{r7, pc}
 80012c6:	bf00      	nop
 80012c8:	20000bb4 	.word	0x20000bb4

080012cc <screen_driver_Fill>:

/* Fill the whole screen with the given color */
void screen_driver_Fill(screen_driver_COLOR color) {
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b082      	sub	sp, #8
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	4603      	mov	r3, r0
 80012d4:	71fb      	strb	r3, [r7, #7]
    memset(screen_driver_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(screen_driver_Buffer));
 80012d6:	79fb      	ldrb	r3, [r7, #7]
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d101      	bne.n	80012e0 <screen_driver_Fill+0x14>
 80012dc:	2300      	movs	r3, #0
 80012de:	e000      	b.n	80012e2 <screen_driver_Fill+0x16>
 80012e0:	23ff      	movs	r3, #255	@ 0xff
 80012e2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80012e6:	4619      	mov	r1, r3
 80012e8:	4803      	ldr	r0, [pc, #12]	@ (80012f8 <screen_driver_Fill+0x2c>)
 80012ea:	f00b fddf 	bl	800ceac <memset>
}
 80012ee:	bf00      	nop
 80012f0:	3708      	adds	r7, #8
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	bf00      	nop
 80012f8:	200003b4 	.word	0x200003b4

080012fc <screen_driver_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void screen_driver_UpdateScreen(void) {
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b082      	sub	sp, #8
 8001300:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < screen_driver_HEIGHT/8; i++) {
 8001302:	2300      	movs	r3, #0
 8001304:	71fb      	strb	r3, [r7, #7]
 8001306:	e016      	b.n	8001336 <screen_driver_UpdateScreen+0x3a>
        screen_driver_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8001308:	79fb      	ldrb	r3, [r7, #7]
 800130a:	3b50      	subs	r3, #80	@ 0x50
 800130c:	b2db      	uxtb	r3, r3
 800130e:	4618      	mov	r0, r3
 8001310:	f7ff ff22 	bl	8001158 <screen_driver_WriteCommand>
        screen_driver_WriteCommand(0x00 + screen_driver_X_OFFSET_LOWER);
 8001314:	2000      	movs	r0, #0
 8001316:	f7ff ff1f 	bl	8001158 <screen_driver_WriteCommand>
        screen_driver_WriteCommand(0x10 + screen_driver_X_OFFSET_UPPER);
 800131a:	2010      	movs	r0, #16
 800131c:	f7ff ff1c 	bl	8001158 <screen_driver_WriteCommand>
        screen_driver_WriteData(&screen_driver_Buffer[screen_driver_WIDTH*i],screen_driver_WIDTH);
 8001320:	79fb      	ldrb	r3, [r7, #7]
 8001322:	01db      	lsls	r3, r3, #7
 8001324:	4a08      	ldr	r2, [pc, #32]	@ (8001348 <screen_driver_UpdateScreen+0x4c>)
 8001326:	4413      	add	r3, r2
 8001328:	2180      	movs	r1, #128	@ 0x80
 800132a:	4618      	mov	r0, r3
 800132c:	f7ff ff3a 	bl	80011a4 <screen_driver_WriteData>
    for(uint8_t i = 0; i < screen_driver_HEIGHT/8; i++) {
 8001330:	79fb      	ldrb	r3, [r7, #7]
 8001332:	3301      	adds	r3, #1
 8001334:	71fb      	strb	r3, [r7, #7]
 8001336:	79fb      	ldrb	r3, [r7, #7]
 8001338:	2b0f      	cmp	r3, #15
 800133a:	d9e5      	bls.n	8001308 <screen_driver_UpdateScreen+0xc>
    }
}
 800133c:	bf00      	nop
 800133e:	bf00      	nop
 8001340:	3708      	adds	r7, #8
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	200003b4 	.word	0x200003b4

0800134c <screen_driver_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void screen_driver_DrawPixel(uint8_t x, uint8_t y, screen_driver_COLOR color) {
 800134c:	b480      	push	{r7}
 800134e:	b083      	sub	sp, #12
 8001350:	af00      	add	r7, sp, #0
 8001352:	4603      	mov	r3, r0
 8001354:	71fb      	strb	r3, [r7, #7]
 8001356:	460b      	mov	r3, r1
 8001358:	71bb      	strb	r3, [r7, #6]
 800135a:	4613      	mov	r3, r2
 800135c:	717b      	strb	r3, [r7, #5]
    if(x >= screen_driver_WIDTH || y >= screen_driver_HEIGHT) {
 800135e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001362:	2b00      	cmp	r3, #0
 8001364:	db3e      	blt.n	80013e4 <screen_driver_DrawPixel+0x98>
 8001366:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800136a:	2b00      	cmp	r3, #0
 800136c:	db3a      	blt.n	80013e4 <screen_driver_DrawPixel+0x98>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 800136e:	797b      	ldrb	r3, [r7, #5]
 8001370:	2b01      	cmp	r3, #1
 8001372:	d11a      	bne.n	80013aa <screen_driver_DrawPixel+0x5e>
        screen_driver_Buffer[x + (y / 8) * screen_driver_WIDTH] |= 1 << (y % 8);
 8001374:	79fa      	ldrb	r2, [r7, #7]
 8001376:	79bb      	ldrb	r3, [r7, #6]
 8001378:	08db      	lsrs	r3, r3, #3
 800137a:	b2d8      	uxtb	r0, r3
 800137c:	4603      	mov	r3, r0
 800137e:	01db      	lsls	r3, r3, #7
 8001380:	4413      	add	r3, r2
 8001382:	4a1b      	ldr	r2, [pc, #108]	@ (80013f0 <screen_driver_DrawPixel+0xa4>)
 8001384:	5cd3      	ldrb	r3, [r2, r3]
 8001386:	b25a      	sxtb	r2, r3
 8001388:	79bb      	ldrb	r3, [r7, #6]
 800138a:	f003 0307 	and.w	r3, r3, #7
 800138e:	2101      	movs	r1, #1
 8001390:	fa01 f303 	lsl.w	r3, r1, r3
 8001394:	b25b      	sxtb	r3, r3
 8001396:	4313      	orrs	r3, r2
 8001398:	b259      	sxtb	r1, r3
 800139a:	79fa      	ldrb	r2, [r7, #7]
 800139c:	4603      	mov	r3, r0
 800139e:	01db      	lsls	r3, r3, #7
 80013a0:	4413      	add	r3, r2
 80013a2:	b2c9      	uxtb	r1, r1
 80013a4:	4a12      	ldr	r2, [pc, #72]	@ (80013f0 <screen_driver_DrawPixel+0xa4>)
 80013a6:	54d1      	strb	r1, [r2, r3]
 80013a8:	e01d      	b.n	80013e6 <screen_driver_DrawPixel+0x9a>
    } else { 
        screen_driver_Buffer[x + (y / 8) * screen_driver_WIDTH] &= ~(1 << (y % 8));
 80013aa:	79fa      	ldrb	r2, [r7, #7]
 80013ac:	79bb      	ldrb	r3, [r7, #6]
 80013ae:	08db      	lsrs	r3, r3, #3
 80013b0:	b2d8      	uxtb	r0, r3
 80013b2:	4603      	mov	r3, r0
 80013b4:	01db      	lsls	r3, r3, #7
 80013b6:	4413      	add	r3, r2
 80013b8:	4a0d      	ldr	r2, [pc, #52]	@ (80013f0 <screen_driver_DrawPixel+0xa4>)
 80013ba:	5cd3      	ldrb	r3, [r2, r3]
 80013bc:	b25a      	sxtb	r2, r3
 80013be:	79bb      	ldrb	r3, [r7, #6]
 80013c0:	f003 0307 	and.w	r3, r3, #7
 80013c4:	2101      	movs	r1, #1
 80013c6:	fa01 f303 	lsl.w	r3, r1, r3
 80013ca:	b25b      	sxtb	r3, r3
 80013cc:	43db      	mvns	r3, r3
 80013ce:	b25b      	sxtb	r3, r3
 80013d0:	4013      	ands	r3, r2
 80013d2:	b259      	sxtb	r1, r3
 80013d4:	79fa      	ldrb	r2, [r7, #7]
 80013d6:	4603      	mov	r3, r0
 80013d8:	01db      	lsls	r3, r3, #7
 80013da:	4413      	add	r3, r2
 80013dc:	b2c9      	uxtb	r1, r1
 80013de:	4a04      	ldr	r2, [pc, #16]	@ (80013f0 <screen_driver_DrawPixel+0xa4>)
 80013e0:	54d1      	strb	r1, [r2, r3]
 80013e2:	e000      	b.n	80013e6 <screen_driver_DrawPixel+0x9a>
        return;
 80013e4:	bf00      	nop
    }
}
 80013e6:	370c      	adds	r7, #12
 80013e8:	46bd      	mov	sp, r7
 80013ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ee:	4770      	bx	lr
 80013f0:	200003b4 	.word	0x200003b4

080013f4 <screen_driver_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char screen_driver_WriteChar(char ch, screen_driver_Font_t Font, screen_driver_COLOR color) {
 80013f4:	b590      	push	{r4, r7, lr}
 80013f6:	b089      	sub	sp, #36	@ 0x24
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	4604      	mov	r4, r0
 80013fc:	4638      	mov	r0, r7
 80013fe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8001402:	4623      	mov	r3, r4
 8001404:	73fb      	strb	r3, [r7, #15]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8001406:	7bfb      	ldrb	r3, [r7, #15]
 8001408:	2b1f      	cmp	r3, #31
 800140a:	d902      	bls.n	8001412 <screen_driver_WriteChar+0x1e>
 800140c:	7bfb      	ldrb	r3, [r7, #15]
 800140e:	2b7e      	cmp	r3, #126	@ 0x7e
 8001410:	d901      	bls.n	8001416 <screen_driver_WriteChar+0x22>
        return 0;
 8001412:	2300      	movs	r3, #0
 8001414:	e077      	b.n	8001506 <screen_driver_WriteChar+0x112>
    
    // Check remaining space on current line
    if (screen_driver_WIDTH < (screen_driver.CurrentX + Font.width) ||
 8001416:	4b3e      	ldr	r3, [pc, #248]	@ (8001510 <screen_driver_WriteChar+0x11c>)
 8001418:	881b      	ldrh	r3, [r3, #0]
 800141a:	461a      	mov	r2, r3
 800141c:	783b      	ldrb	r3, [r7, #0]
 800141e:	4413      	add	r3, r2
 8001420:	2b80      	cmp	r3, #128	@ 0x80
 8001422:	dc06      	bgt.n	8001432 <screen_driver_WriteChar+0x3e>
        screen_driver_HEIGHT < (screen_driver.CurrentY + Font.height))
 8001424:	4b3a      	ldr	r3, [pc, #232]	@ (8001510 <screen_driver_WriteChar+0x11c>)
 8001426:	885b      	ldrh	r3, [r3, #2]
 8001428:	461a      	mov	r2, r3
 800142a:	787b      	ldrb	r3, [r7, #1]
 800142c:	4413      	add	r3, r2
    if (screen_driver_WIDTH < (screen_driver.CurrentX + Font.width) ||
 800142e:	2b80      	cmp	r3, #128	@ 0x80
 8001430:	dd01      	ble.n	8001436 <screen_driver_WriteChar+0x42>
    {
        // Not enough space on current line
        return 0;
 8001432:	2300      	movs	r3, #0
 8001434:	e067      	b.n	8001506 <screen_driver_WriteChar+0x112>
    }
    
    // Use the font to write
    for(i = 0; i < Font.height; i++) {
 8001436:	2300      	movs	r3, #0
 8001438:	61fb      	str	r3, [r7, #28]
 800143a:	e04e      	b.n	80014da <screen_driver_WriteChar+0xe6>
        b = Font.data[(ch - 32) * Font.height + i];
 800143c:	687a      	ldr	r2, [r7, #4]
 800143e:	7bfb      	ldrb	r3, [r7, #15]
 8001440:	3b20      	subs	r3, #32
 8001442:	7879      	ldrb	r1, [r7, #1]
 8001444:	fb01 f303 	mul.w	r3, r1, r3
 8001448:	4619      	mov	r1, r3
 800144a:	69fb      	ldr	r3, [r7, #28]
 800144c:	440b      	add	r3, r1
 800144e:	005b      	lsls	r3, r3, #1
 8001450:	4413      	add	r3, r2
 8001452:	881b      	ldrh	r3, [r3, #0]
 8001454:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.width; j++) {
 8001456:	2300      	movs	r3, #0
 8001458:	61bb      	str	r3, [r7, #24]
 800145a:	e036      	b.n	80014ca <screen_driver_WriteChar+0xd6>
            if((b << j) & 0x8000)  {
 800145c:	697a      	ldr	r2, [r7, #20]
 800145e:	69bb      	ldr	r3, [r7, #24]
 8001460:	fa02 f303 	lsl.w	r3, r2, r3
 8001464:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001468:	2b00      	cmp	r3, #0
 800146a:	d013      	beq.n	8001494 <screen_driver_WriteChar+0xa0>
                screen_driver_DrawPixel(screen_driver.CurrentX + j, (screen_driver.CurrentY + i), (screen_driver_COLOR) color);
 800146c:	4b28      	ldr	r3, [pc, #160]	@ (8001510 <screen_driver_WriteChar+0x11c>)
 800146e:	881b      	ldrh	r3, [r3, #0]
 8001470:	b2da      	uxtb	r2, r3
 8001472:	69bb      	ldr	r3, [r7, #24]
 8001474:	b2db      	uxtb	r3, r3
 8001476:	4413      	add	r3, r2
 8001478:	b2d8      	uxtb	r0, r3
 800147a:	4b25      	ldr	r3, [pc, #148]	@ (8001510 <screen_driver_WriteChar+0x11c>)
 800147c:	885b      	ldrh	r3, [r3, #2]
 800147e:	b2da      	uxtb	r2, r3
 8001480:	69fb      	ldr	r3, [r7, #28]
 8001482:	b2db      	uxtb	r3, r3
 8001484:	4413      	add	r3, r2
 8001486:	b2db      	uxtb	r3, r3
 8001488:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 800148c:	4619      	mov	r1, r3
 800148e:	f7ff ff5d 	bl	800134c <screen_driver_DrawPixel>
 8001492:	e017      	b.n	80014c4 <screen_driver_WriteChar+0xd0>
            } else {
                screen_driver_DrawPixel(screen_driver.CurrentX + j, (screen_driver.CurrentY + i), (screen_driver_COLOR)!color);
 8001494:	4b1e      	ldr	r3, [pc, #120]	@ (8001510 <screen_driver_WriteChar+0x11c>)
 8001496:	881b      	ldrh	r3, [r3, #0]
 8001498:	b2da      	uxtb	r2, r3
 800149a:	69bb      	ldr	r3, [r7, #24]
 800149c:	b2db      	uxtb	r3, r3
 800149e:	4413      	add	r3, r2
 80014a0:	b2d8      	uxtb	r0, r3
 80014a2:	4b1b      	ldr	r3, [pc, #108]	@ (8001510 <screen_driver_WriteChar+0x11c>)
 80014a4:	885b      	ldrh	r3, [r3, #2]
 80014a6:	b2da      	uxtb	r2, r3
 80014a8:	69fb      	ldr	r3, [r7, #28]
 80014aa:	b2db      	uxtb	r3, r3
 80014ac:	4413      	add	r3, r2
 80014ae:	b2d9      	uxtb	r1, r3
 80014b0:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	bf0c      	ite	eq
 80014b8:	2301      	moveq	r3, #1
 80014ba:	2300      	movne	r3, #0
 80014bc:	b2db      	uxtb	r3, r3
 80014be:	461a      	mov	r2, r3
 80014c0:	f7ff ff44 	bl	800134c <screen_driver_DrawPixel>
        for(j = 0; j < Font.width; j++) {
 80014c4:	69bb      	ldr	r3, [r7, #24]
 80014c6:	3301      	adds	r3, #1
 80014c8:	61bb      	str	r3, [r7, #24]
 80014ca:	783b      	ldrb	r3, [r7, #0]
 80014cc:	461a      	mov	r2, r3
 80014ce:	69bb      	ldr	r3, [r7, #24]
 80014d0:	4293      	cmp	r3, r2
 80014d2:	d3c3      	bcc.n	800145c <screen_driver_WriteChar+0x68>
    for(i = 0; i < Font.height; i++) {
 80014d4:	69fb      	ldr	r3, [r7, #28]
 80014d6:	3301      	adds	r3, #1
 80014d8:	61fb      	str	r3, [r7, #28]
 80014da:	787b      	ldrb	r3, [r7, #1]
 80014dc:	461a      	mov	r2, r3
 80014de:	69fb      	ldr	r3, [r7, #28]
 80014e0:	4293      	cmp	r3, r2
 80014e2:	d3ab      	bcc.n	800143c <screen_driver_WriteChar+0x48>
            }
        }
    }
    
    // The current space is now taken
    screen_driver.CurrentX += Font.char_width ? Font.char_width[ch - 32] : Font.width;
 80014e4:	4b0a      	ldr	r3, [pc, #40]	@ (8001510 <screen_driver_WriteChar+0x11c>)
 80014e6:	881b      	ldrh	r3, [r3, #0]
 80014e8:	68ba      	ldr	r2, [r7, #8]
 80014ea:	2a00      	cmp	r2, #0
 80014ec:	d005      	beq.n	80014fa <screen_driver_WriteChar+0x106>
 80014ee:	68b9      	ldr	r1, [r7, #8]
 80014f0:	7bfa      	ldrb	r2, [r7, #15]
 80014f2:	3a20      	subs	r2, #32
 80014f4:	440a      	add	r2, r1
 80014f6:	7812      	ldrb	r2, [r2, #0]
 80014f8:	e000      	b.n	80014fc <screen_driver_WriteChar+0x108>
 80014fa:	783a      	ldrb	r2, [r7, #0]
 80014fc:	4413      	add	r3, r2
 80014fe:	b29a      	uxth	r2, r3
 8001500:	4b03      	ldr	r3, [pc, #12]	@ (8001510 <screen_driver_WriteChar+0x11c>)
 8001502:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8001504:	7bfb      	ldrb	r3, [r7, #15]
}
 8001506:	4618      	mov	r0, r3
 8001508:	3724      	adds	r7, #36	@ 0x24
 800150a:	46bd      	mov	sp, r7
 800150c:	bd90      	pop	{r4, r7, pc}
 800150e:	bf00      	nop
 8001510:	20000bb4 	.word	0x20000bb4

08001514 <screen_driver_WriteString>:

/* Write full string to screenbuffer */
char screen_driver_WriteString(char* str, screen_driver_Font_t Font, screen_driver_COLOR color) {
 8001514:	b580      	push	{r7, lr}
 8001516:	b086      	sub	sp, #24
 8001518:	af02      	add	r7, sp, #8
 800151a:	60f8      	str	r0, [r7, #12]
 800151c:	4638      	mov	r0, r7
 800151e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    while (*str) {
 8001522:	e013      	b.n	800154c <screen_driver_WriteString+0x38>
        if (screen_driver_WriteChar(*str, Font, color) != *str) {
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	7818      	ldrb	r0, [r3, #0]
 8001528:	7e3b      	ldrb	r3, [r7, #24]
 800152a:	9300      	str	r3, [sp, #0]
 800152c:	463b      	mov	r3, r7
 800152e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001530:	f7ff ff60 	bl	80013f4 <screen_driver_WriteChar>
 8001534:	4603      	mov	r3, r0
 8001536:	461a      	mov	r2, r3
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	781b      	ldrb	r3, [r3, #0]
 800153c:	429a      	cmp	r2, r3
 800153e:	d002      	beq.n	8001546 <screen_driver_WriteString+0x32>
            // Char could not be written
            return *str;
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	781b      	ldrb	r3, [r3, #0]
 8001544:	e008      	b.n	8001558 <screen_driver_WriteString+0x44>
        }
        str++;
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	3301      	adds	r3, #1
 800154a:	60fb      	str	r3, [r7, #12]
    while (*str) {
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	781b      	ldrb	r3, [r3, #0]
 8001550:	2b00      	cmp	r3, #0
 8001552:	d1e7      	bne.n	8001524 <screen_driver_WriteString+0x10>
    }
    
    // Everything ok
    return *str;
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	781b      	ldrb	r3, [r3, #0]
}
 8001558:	4618      	mov	r0, r3
 800155a:	3710      	adds	r7, #16
 800155c:	46bd      	mov	sp, r7
 800155e:	bd80      	pop	{r7, pc}

08001560 <screen_driver_SetCursor>:

/* Position the cursor */
void screen_driver_SetCursor(uint8_t x, uint8_t y) {
 8001560:	b480      	push	{r7}
 8001562:	b083      	sub	sp, #12
 8001564:	af00      	add	r7, sp, #0
 8001566:	4603      	mov	r3, r0
 8001568:	460a      	mov	r2, r1
 800156a:	71fb      	strb	r3, [r7, #7]
 800156c:	4613      	mov	r3, r2
 800156e:	71bb      	strb	r3, [r7, #6]
    screen_driver.CurrentX = x;
 8001570:	79fb      	ldrb	r3, [r7, #7]
 8001572:	b29a      	uxth	r2, r3
 8001574:	4b05      	ldr	r3, [pc, #20]	@ (800158c <screen_driver_SetCursor+0x2c>)
 8001576:	801a      	strh	r2, [r3, #0]
    screen_driver.CurrentY = y;
 8001578:	79bb      	ldrb	r3, [r7, #6]
 800157a:	b29a      	uxth	r2, r3
 800157c:	4b03      	ldr	r3, [pc, #12]	@ (800158c <screen_driver_SetCursor+0x2c>)
 800157e:	805a      	strh	r2, [r3, #2]
}
 8001580:	bf00      	nop
 8001582:	370c      	adds	r7, #12
 8001584:	46bd      	mov	sp, r7
 8001586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158a:	4770      	bx	lr
 800158c:	20000bb4 	.word	0x20000bb4

08001590 <screen_driver_Line>:

/* Draw line by Bresenhem's algorithm */
void screen_driver_Line(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, screen_driver_COLOR color) {
 8001590:	b590      	push	{r4, r7, lr}
 8001592:	b089      	sub	sp, #36	@ 0x24
 8001594:	af00      	add	r7, sp, #0
 8001596:	4604      	mov	r4, r0
 8001598:	4608      	mov	r0, r1
 800159a:	4611      	mov	r1, r2
 800159c:	461a      	mov	r2, r3
 800159e:	4623      	mov	r3, r4
 80015a0:	71fb      	strb	r3, [r7, #7]
 80015a2:	4603      	mov	r3, r0
 80015a4:	71bb      	strb	r3, [r7, #6]
 80015a6:	460b      	mov	r3, r1
 80015a8:	717b      	strb	r3, [r7, #5]
 80015aa:	4613      	mov	r3, r2
 80015ac:	713b      	strb	r3, [r7, #4]
    int32_t deltaX = abs(x2 - x1);
 80015ae:	797a      	ldrb	r2, [r7, #5]
 80015b0:	79fb      	ldrb	r3, [r7, #7]
 80015b2:	1ad3      	subs	r3, r2, r3
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	bfb8      	it	lt
 80015b8:	425b      	neglt	r3, r3
 80015ba:	61bb      	str	r3, [r7, #24]
    int32_t deltaY = abs(y2 - y1);
 80015bc:	793a      	ldrb	r2, [r7, #4]
 80015be:	79bb      	ldrb	r3, [r7, #6]
 80015c0:	1ad3      	subs	r3, r2, r3
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	bfb8      	it	lt
 80015c6:	425b      	neglt	r3, r3
 80015c8:	617b      	str	r3, [r7, #20]
    int32_t signX = ((x1 < x2) ? 1 : -1);
 80015ca:	79fa      	ldrb	r2, [r7, #7]
 80015cc:	797b      	ldrb	r3, [r7, #5]
 80015ce:	429a      	cmp	r2, r3
 80015d0:	d201      	bcs.n	80015d6 <screen_driver_Line+0x46>
 80015d2:	2301      	movs	r3, #1
 80015d4:	e001      	b.n	80015da <screen_driver_Line+0x4a>
 80015d6:	f04f 33ff 	mov.w	r3, #4294967295
 80015da:	613b      	str	r3, [r7, #16]
    int32_t signY = ((y1 < y2) ? 1 : -1);
 80015dc:	79ba      	ldrb	r2, [r7, #6]
 80015de:	793b      	ldrb	r3, [r7, #4]
 80015e0:	429a      	cmp	r2, r3
 80015e2:	d201      	bcs.n	80015e8 <screen_driver_Line+0x58>
 80015e4:	2301      	movs	r3, #1
 80015e6:	e001      	b.n	80015ec <screen_driver_Line+0x5c>
 80015e8:	f04f 33ff 	mov.w	r3, #4294967295
 80015ec:	60fb      	str	r3, [r7, #12]
    int32_t error = deltaX - deltaY;
 80015ee:	69ba      	ldr	r2, [r7, #24]
 80015f0:	697b      	ldr	r3, [r7, #20]
 80015f2:	1ad3      	subs	r3, r2, r3
 80015f4:	61fb      	str	r3, [r7, #28]
    int32_t error2;
    
    screen_driver_DrawPixel(x2, y2, color);
 80015f6:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 80015fa:	7939      	ldrb	r1, [r7, #4]
 80015fc:	797b      	ldrb	r3, [r7, #5]
 80015fe:	4618      	mov	r0, r3
 8001600:	f7ff fea4 	bl	800134c <screen_driver_DrawPixel>

    while((x1 != x2) || (y1 != y2)) {
 8001604:	e024      	b.n	8001650 <screen_driver_Line+0xc0>
        screen_driver_DrawPixel(x1, y1, color);
 8001606:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 800160a:	79b9      	ldrb	r1, [r7, #6]
 800160c:	79fb      	ldrb	r3, [r7, #7]
 800160e:	4618      	mov	r0, r3
 8001610:	f7ff fe9c 	bl	800134c <screen_driver_DrawPixel>
        error2 = error * 2;
 8001614:	69fb      	ldr	r3, [r7, #28]
 8001616:	005b      	lsls	r3, r3, #1
 8001618:	60bb      	str	r3, [r7, #8]
        if(error2 > -deltaY) {
 800161a:	697b      	ldr	r3, [r7, #20]
 800161c:	425b      	negs	r3, r3
 800161e:	68ba      	ldr	r2, [r7, #8]
 8001620:	429a      	cmp	r2, r3
 8001622:	dd08      	ble.n	8001636 <screen_driver_Line+0xa6>
            error -= deltaY;
 8001624:	69fa      	ldr	r2, [r7, #28]
 8001626:	697b      	ldr	r3, [r7, #20]
 8001628:	1ad3      	subs	r3, r2, r3
 800162a:	61fb      	str	r3, [r7, #28]
            x1 += signX;
 800162c:	693b      	ldr	r3, [r7, #16]
 800162e:	b2da      	uxtb	r2, r3
 8001630:	79fb      	ldrb	r3, [r7, #7]
 8001632:	4413      	add	r3, r2
 8001634:	71fb      	strb	r3, [r7, #7]
        }
        
        if(error2 < deltaX) {
 8001636:	68ba      	ldr	r2, [r7, #8]
 8001638:	69bb      	ldr	r3, [r7, #24]
 800163a:	429a      	cmp	r2, r3
 800163c:	da08      	bge.n	8001650 <screen_driver_Line+0xc0>
            error += deltaX;
 800163e:	69fa      	ldr	r2, [r7, #28]
 8001640:	69bb      	ldr	r3, [r7, #24]
 8001642:	4413      	add	r3, r2
 8001644:	61fb      	str	r3, [r7, #28]
            y1 += signY;
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	b2da      	uxtb	r2, r3
 800164a:	79bb      	ldrb	r3, [r7, #6]
 800164c:	4413      	add	r3, r2
 800164e:	71bb      	strb	r3, [r7, #6]
    while((x1 != x2) || (y1 != y2)) {
 8001650:	79fa      	ldrb	r2, [r7, #7]
 8001652:	797b      	ldrb	r3, [r7, #5]
 8001654:	429a      	cmp	r2, r3
 8001656:	d1d6      	bne.n	8001606 <screen_driver_Line+0x76>
 8001658:	79ba      	ldrb	r2, [r7, #6]
 800165a:	793b      	ldrb	r3, [r7, #4]
 800165c:	429a      	cmp	r2, r3
 800165e:	d1d2      	bne.n	8001606 <screen_driver_Line+0x76>
        }
    }
    return;
 8001660:	bf00      	nop
}
 8001662:	3724      	adds	r7, #36	@ 0x24
 8001664:	46bd      	mov	sp, r7
 8001666:	bd90      	pop	{r4, r7, pc}

08001668 <screen_driver_SetContrast>:
        }
    }
    return;
}

void screen_driver_SetContrast(const uint8_t value) {
 8001668:	b580      	push	{r7, lr}
 800166a:	b084      	sub	sp, #16
 800166c:	af00      	add	r7, sp, #0
 800166e:	4603      	mov	r3, r0
 8001670:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8001672:	2381      	movs	r3, #129	@ 0x81
 8001674:	73fb      	strb	r3, [r7, #15]
    screen_driver_WriteCommand(kSetContrastControlRegister);
 8001676:	7bfb      	ldrb	r3, [r7, #15]
 8001678:	4618      	mov	r0, r3
 800167a:	f7ff fd6d 	bl	8001158 <screen_driver_WriteCommand>
    screen_driver_WriteCommand(value);
 800167e:	79fb      	ldrb	r3, [r7, #7]
 8001680:	4618      	mov	r0, r3
 8001682:	f7ff fd69 	bl	8001158 <screen_driver_WriteCommand>
}
 8001686:	bf00      	nop
 8001688:	3710      	adds	r7, #16
 800168a:	46bd      	mov	sp, r7
 800168c:	bd80      	pop	{r7, pc}
	...

08001690 <screen_driver_SetDisplayOn>:

void screen_driver_SetDisplayOn(const uint8_t on) {
 8001690:	b580      	push	{r7, lr}
 8001692:	b084      	sub	sp, #16
 8001694:	af00      	add	r7, sp, #0
 8001696:	4603      	mov	r3, r0
 8001698:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 800169a:	79fb      	ldrb	r3, [r7, #7]
 800169c:	2b00      	cmp	r3, #0
 800169e:	d005      	beq.n	80016ac <screen_driver_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 80016a0:	23af      	movs	r3, #175	@ 0xaf
 80016a2:	73fb      	strb	r3, [r7, #15]
        screen_driver.DisplayOn = 1;
 80016a4:	4b08      	ldr	r3, [pc, #32]	@ (80016c8 <screen_driver_SetDisplayOn+0x38>)
 80016a6:	2201      	movs	r2, #1
 80016a8:	715a      	strb	r2, [r3, #5]
 80016aa:	e004      	b.n	80016b6 <screen_driver_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 80016ac:	23ae      	movs	r3, #174	@ 0xae
 80016ae:	73fb      	strb	r3, [r7, #15]
        screen_driver.DisplayOn = 0;
 80016b0:	4b05      	ldr	r3, [pc, #20]	@ (80016c8 <screen_driver_SetDisplayOn+0x38>)
 80016b2:	2200      	movs	r2, #0
 80016b4:	715a      	strb	r2, [r3, #5]
    }
    screen_driver_WriteCommand(value);
 80016b6:	7bfb      	ldrb	r3, [r7, #15]
 80016b8:	4618      	mov	r0, r3
 80016ba:	f7ff fd4d 	bl	8001158 <screen_driver_WriteCommand>
}
 80016be:	bf00      	nop
 80016c0:	3710      	adds	r7, #16
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}
 80016c6:	bf00      	nop
 80016c8:	20000bb4 	.word	0x20000bb4

080016cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b082      	sub	sp, #8
 80016d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016d2:	2300      	movs	r3, #0
 80016d4:	607b      	str	r3, [r7, #4]
 80016d6:	4b12      	ldr	r3, [pc, #72]	@ (8001720 <HAL_MspInit+0x54>)
 80016d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016da:	4a11      	ldr	r2, [pc, #68]	@ (8001720 <HAL_MspInit+0x54>)
 80016dc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80016e0:	6453      	str	r3, [r2, #68]	@ 0x44
 80016e2:	4b0f      	ldr	r3, [pc, #60]	@ (8001720 <HAL_MspInit+0x54>)
 80016e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016e6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80016ea:	607b      	str	r3, [r7, #4]
 80016ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016ee:	2300      	movs	r3, #0
 80016f0:	603b      	str	r3, [r7, #0]
 80016f2:	4b0b      	ldr	r3, [pc, #44]	@ (8001720 <HAL_MspInit+0x54>)
 80016f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016f6:	4a0a      	ldr	r2, [pc, #40]	@ (8001720 <HAL_MspInit+0x54>)
 80016f8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80016fc:	6413      	str	r3, [r2, #64]	@ 0x40
 80016fe:	4b08      	ldr	r3, [pc, #32]	@ (8001720 <HAL_MspInit+0x54>)
 8001700:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001702:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001706:	603b      	str	r3, [r7, #0]
 8001708:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800170a:	2200      	movs	r2, #0
 800170c:	210f      	movs	r1, #15
 800170e:	f06f 0001 	mvn.w	r0, #1
 8001712:	f000 fea9 	bl	8002468 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001716:	bf00      	nop
 8001718:	3708      	adds	r7, #8
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}
 800171e:	bf00      	nop
 8001720:	40023800 	.word	0x40023800

08001724 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b08a      	sub	sp, #40	@ 0x28
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800172c:	f107 0314 	add.w	r3, r7, #20
 8001730:	2200      	movs	r2, #0
 8001732:	601a      	str	r2, [r3, #0]
 8001734:	605a      	str	r2, [r3, #4]
 8001736:	609a      	str	r2, [r3, #8]
 8001738:	60da      	str	r2, [r3, #12]
 800173a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	4a17      	ldr	r2, [pc, #92]	@ (80017a0 <HAL_ADC_MspInit+0x7c>)
 8001742:	4293      	cmp	r3, r2
 8001744:	d127      	bne.n	8001796 <HAL_ADC_MspInit+0x72>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001746:	2300      	movs	r3, #0
 8001748:	613b      	str	r3, [r7, #16]
 800174a:	4b16      	ldr	r3, [pc, #88]	@ (80017a4 <HAL_ADC_MspInit+0x80>)
 800174c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800174e:	4a15      	ldr	r2, [pc, #84]	@ (80017a4 <HAL_ADC_MspInit+0x80>)
 8001750:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001754:	6453      	str	r3, [r2, #68]	@ 0x44
 8001756:	4b13      	ldr	r3, [pc, #76]	@ (80017a4 <HAL_ADC_MspInit+0x80>)
 8001758:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800175a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800175e:	613b      	str	r3, [r7, #16]
 8001760:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001762:	2300      	movs	r3, #0
 8001764:	60fb      	str	r3, [r7, #12]
 8001766:	4b0f      	ldr	r3, [pc, #60]	@ (80017a4 <HAL_ADC_MspInit+0x80>)
 8001768:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800176a:	4a0e      	ldr	r2, [pc, #56]	@ (80017a4 <HAL_ADC_MspInit+0x80>)
 800176c:	f043 0301 	orr.w	r3, r3, #1
 8001770:	6313      	str	r3, [r2, #48]	@ 0x30
 8001772:	4b0c      	ldr	r3, [pc, #48]	@ (80017a4 <HAL_ADC_MspInit+0x80>)
 8001774:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001776:	f003 0301 	and.w	r3, r3, #1
 800177a:	60fb      	str	r3, [r7, #12]
 800177c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800177e:	2301      	movs	r3, #1
 8001780:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001782:	2303      	movs	r3, #3
 8001784:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001786:	2300      	movs	r3, #0
 8001788:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800178a:	f107 0314 	add.w	r3, r7, #20
 800178e:	4619      	mov	r1, r3
 8001790:	4805      	ldr	r0, [pc, #20]	@ (80017a8 <HAL_ADC_MspInit+0x84>)
 8001792:	f000 ff25 	bl	80025e0 <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001796:	bf00      	nop
 8001798:	3728      	adds	r7, #40	@ 0x28
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}
 800179e:	bf00      	nop
 80017a0:	40012000 	.word	0x40012000
 80017a4:	40023800 	.word	0x40023800
 80017a8:	40020000 	.word	0x40020000

080017ac <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b08a      	sub	sp, #40	@ 0x28
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017b4:	f107 0314 	add.w	r3, r7, #20
 80017b8:	2200      	movs	r2, #0
 80017ba:	601a      	str	r2, [r3, #0]
 80017bc:	605a      	str	r2, [r3, #4]
 80017be:	609a      	str	r2, [r3, #8]
 80017c0:	60da      	str	r2, [r3, #12]
 80017c2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	4a19      	ldr	r2, [pc, #100]	@ (8001830 <HAL_SPI_MspInit+0x84>)
 80017ca:	4293      	cmp	r3, r2
 80017cc:	d12b      	bne.n	8001826 <HAL_SPI_MspInit+0x7a>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80017ce:	2300      	movs	r3, #0
 80017d0:	613b      	str	r3, [r7, #16]
 80017d2:	4b18      	ldr	r3, [pc, #96]	@ (8001834 <HAL_SPI_MspInit+0x88>)
 80017d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017d6:	4a17      	ldr	r2, [pc, #92]	@ (8001834 <HAL_SPI_MspInit+0x88>)
 80017d8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80017dc:	6453      	str	r3, [r2, #68]	@ 0x44
 80017de:	4b15      	ldr	r3, [pc, #84]	@ (8001834 <HAL_SPI_MspInit+0x88>)
 80017e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017e2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80017e6:	613b      	str	r3, [r7, #16]
 80017e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017ea:	2300      	movs	r3, #0
 80017ec:	60fb      	str	r3, [r7, #12]
 80017ee:	4b11      	ldr	r3, [pc, #68]	@ (8001834 <HAL_SPI_MspInit+0x88>)
 80017f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017f2:	4a10      	ldr	r2, [pc, #64]	@ (8001834 <HAL_SPI_MspInit+0x88>)
 80017f4:	f043 0301 	orr.w	r3, r3, #1
 80017f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80017fa:	4b0e      	ldr	r3, [pc, #56]	@ (8001834 <HAL_SPI_MspInit+0x88>)
 80017fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017fe:	f003 0301 	and.w	r3, r3, #1
 8001802:	60fb      	str	r3, [r7, #12]
 8001804:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001806:	23e0      	movs	r3, #224	@ 0xe0
 8001808:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800180a:	2302      	movs	r3, #2
 800180c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800180e:	2300      	movs	r3, #0
 8001810:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001812:	2303      	movs	r3, #3
 8001814:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001816:	2305      	movs	r3, #5
 8001818:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800181a:	f107 0314 	add.w	r3, r7, #20
 800181e:	4619      	mov	r1, r3
 8001820:	4805      	ldr	r0, [pc, #20]	@ (8001838 <HAL_SPI_MspInit+0x8c>)
 8001822:	f000 fedd 	bl	80025e0 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8001826:	bf00      	nop
 8001828:	3728      	adds	r7, #40	@ 0x28
 800182a:	46bd      	mov	sp, r7
 800182c:	bd80      	pop	{r7, pc}
 800182e:	bf00      	nop
 8001830:	40013000 	.word	0x40013000
 8001834:	40023800 	.word	0x40023800
 8001838:	40020000 	.word	0x40020000

0800183c <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b084      	sub	sp, #16
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800184c:	d115      	bne.n	800187a <HAL_TIM_Base_MspInit+0x3e>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800184e:	2300      	movs	r3, #0
 8001850:	60fb      	str	r3, [r7, #12]
 8001852:	4b0c      	ldr	r3, [pc, #48]	@ (8001884 <HAL_TIM_Base_MspInit+0x48>)
 8001854:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001856:	4a0b      	ldr	r2, [pc, #44]	@ (8001884 <HAL_TIM_Base_MspInit+0x48>)
 8001858:	f043 0301 	orr.w	r3, r3, #1
 800185c:	6413      	str	r3, [r2, #64]	@ 0x40
 800185e:	4b09      	ldr	r3, [pc, #36]	@ (8001884 <HAL_TIM_Base_MspInit+0x48>)
 8001860:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001862:	f003 0301 	and.w	r3, r3, #1
 8001866:	60fb      	str	r3, [r7, #12]
 8001868:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 800186a:	2200      	movs	r2, #0
 800186c:	2105      	movs	r1, #5
 800186e:	201c      	movs	r0, #28
 8001870:	f000 fdfa 	bl	8002468 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001874:	201c      	movs	r0, #28
 8001876:	f000 fe13 	bl	80024a0 <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 800187a:	bf00      	nop
 800187c:	3710      	adds	r7, #16
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}
 8001882:	bf00      	nop
 8001884:	40023800 	.word	0x40023800

08001888 <HAL_TIM_Encoder_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_encoder: TIM_Encoder handle pointer
  * @retval None
  */
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b08c      	sub	sp, #48	@ 0x30
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001890:	f107 031c 	add.w	r3, r7, #28
 8001894:	2200      	movs	r2, #0
 8001896:	601a      	str	r2, [r3, #0]
 8001898:	605a      	str	r2, [r3, #4]
 800189a:	609a      	str	r2, [r3, #8]
 800189c:	60da      	str	r2, [r3, #12]
 800189e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	4a3a      	ldr	r2, [pc, #232]	@ (8001990 <HAL_TIM_Encoder_MspInit+0x108>)
 80018a6:	4293      	cmp	r3, r2
 80018a8:	d134      	bne.n	8001914 <HAL_TIM_Encoder_MspInit+0x8c>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80018aa:	2300      	movs	r3, #0
 80018ac:	61bb      	str	r3, [r7, #24]
 80018ae:	4b39      	ldr	r3, [pc, #228]	@ (8001994 <HAL_TIM_Encoder_MspInit+0x10c>)
 80018b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018b2:	4a38      	ldr	r2, [pc, #224]	@ (8001994 <HAL_TIM_Encoder_MspInit+0x10c>)
 80018b4:	f043 0302 	orr.w	r3, r3, #2
 80018b8:	6413      	str	r3, [r2, #64]	@ 0x40
 80018ba:	4b36      	ldr	r3, [pc, #216]	@ (8001994 <HAL_TIM_Encoder_MspInit+0x10c>)
 80018bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018be:	f003 0302 	and.w	r3, r3, #2
 80018c2:	61bb      	str	r3, [r7, #24]
 80018c4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018c6:	2300      	movs	r3, #0
 80018c8:	617b      	str	r3, [r7, #20]
 80018ca:	4b32      	ldr	r3, [pc, #200]	@ (8001994 <HAL_TIM_Encoder_MspInit+0x10c>)
 80018cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018ce:	4a31      	ldr	r2, [pc, #196]	@ (8001994 <HAL_TIM_Encoder_MspInit+0x10c>)
 80018d0:	f043 0302 	orr.w	r3, r3, #2
 80018d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80018d6:	4b2f      	ldr	r3, [pc, #188]	@ (8001994 <HAL_TIM_Encoder_MspInit+0x10c>)
 80018d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018da:	f003 0302 	and.w	r3, r3, #2
 80018de:	617b      	str	r3, [r7, #20]
 80018e0:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80018e2:	2330      	movs	r3, #48	@ 0x30
 80018e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018e6:	2302      	movs	r3, #2
 80018e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80018ea:	2301      	movs	r3, #1
 80018ec:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80018ee:	2302      	movs	r3, #2
 80018f0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80018f2:	2302      	movs	r3, #2
 80018f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018f6:	f107 031c 	add.w	r3, r7, #28
 80018fa:	4619      	mov	r1, r3
 80018fc:	4826      	ldr	r0, [pc, #152]	@ (8001998 <HAL_TIM_Encoder_MspInit+0x110>)
 80018fe:	f000 fe6f 	bl	80025e0 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8001902:	2200      	movs	r2, #0
 8001904:	2105      	movs	r1, #5
 8001906:	201d      	movs	r0, #29
 8001908:	f000 fdae 	bl	8002468 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800190c:	201d      	movs	r0, #29
 800190e:	f000 fdc7 	bl	80024a0 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM4_MspInit 1 */

    /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001912:	e038      	b.n	8001986 <HAL_TIM_Encoder_MspInit+0xfe>
  else if(htim_encoder->Instance==TIM4)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	4a20      	ldr	r2, [pc, #128]	@ (800199c <HAL_TIM_Encoder_MspInit+0x114>)
 800191a:	4293      	cmp	r3, r2
 800191c:	d133      	bne.n	8001986 <HAL_TIM_Encoder_MspInit+0xfe>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800191e:	2300      	movs	r3, #0
 8001920:	613b      	str	r3, [r7, #16]
 8001922:	4b1c      	ldr	r3, [pc, #112]	@ (8001994 <HAL_TIM_Encoder_MspInit+0x10c>)
 8001924:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001926:	4a1b      	ldr	r2, [pc, #108]	@ (8001994 <HAL_TIM_Encoder_MspInit+0x10c>)
 8001928:	f043 0304 	orr.w	r3, r3, #4
 800192c:	6413      	str	r3, [r2, #64]	@ 0x40
 800192e:	4b19      	ldr	r3, [pc, #100]	@ (8001994 <HAL_TIM_Encoder_MspInit+0x10c>)
 8001930:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001932:	f003 0304 	and.w	r3, r3, #4
 8001936:	613b      	str	r3, [r7, #16]
 8001938:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800193a:	2300      	movs	r3, #0
 800193c:	60fb      	str	r3, [r7, #12]
 800193e:	4b15      	ldr	r3, [pc, #84]	@ (8001994 <HAL_TIM_Encoder_MspInit+0x10c>)
 8001940:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001942:	4a14      	ldr	r2, [pc, #80]	@ (8001994 <HAL_TIM_Encoder_MspInit+0x10c>)
 8001944:	f043 0302 	orr.w	r3, r3, #2
 8001948:	6313      	str	r3, [r2, #48]	@ 0x30
 800194a:	4b12      	ldr	r3, [pc, #72]	@ (8001994 <HAL_TIM_Encoder_MspInit+0x10c>)
 800194c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800194e:	f003 0302 	and.w	r3, r3, #2
 8001952:	60fb      	str	r3, [r7, #12]
 8001954:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001956:	23c0      	movs	r3, #192	@ 0xc0
 8001958:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800195a:	2302      	movs	r3, #2
 800195c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800195e:	2301      	movs	r3, #1
 8001960:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001962:	2302      	movs	r3, #2
 8001964:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001966:	2302      	movs	r3, #2
 8001968:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800196a:	f107 031c 	add.w	r3, r7, #28
 800196e:	4619      	mov	r1, r3
 8001970:	4809      	ldr	r0, [pc, #36]	@ (8001998 <HAL_TIM_Encoder_MspInit+0x110>)
 8001972:	f000 fe35 	bl	80025e0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 8001976:	2200      	movs	r2, #0
 8001978:	2105      	movs	r1, #5
 800197a:	201e      	movs	r0, #30
 800197c:	f000 fd74 	bl	8002468 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001980:	201e      	movs	r0, #30
 8001982:	f000 fd8d 	bl	80024a0 <HAL_NVIC_EnableIRQ>
}
 8001986:	bf00      	nop
 8001988:	3730      	adds	r7, #48	@ 0x30
 800198a:	46bd      	mov	sp, r7
 800198c:	bd80      	pop	{r7, pc}
 800198e:	bf00      	nop
 8001990:	40000400 	.word	0x40000400
 8001994:	40023800 	.word	0x40023800
 8001998:	40020400 	.word	0x40020400
 800199c:	40000800 	.word	0x40000800

080019a0 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b08c      	sub	sp, #48	@ 0x30
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019a8:	f107 031c 	add.w	r3, r7, #28
 80019ac:	2200      	movs	r2, #0
 80019ae:	601a      	str	r2, [r3, #0]
 80019b0:	605a      	str	r2, [r3, #4]
 80019b2:	609a      	str	r2, [r3, #8]
 80019b4:	60da      	str	r2, [r3, #12]
 80019b6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	4a36      	ldr	r2, [pc, #216]	@ (8001a98 <HAL_UART_MspInit+0xf8>)
 80019be:	4293      	cmp	r3, r2
 80019c0:	d12d      	bne.n	8001a1e <HAL_UART_MspInit+0x7e>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80019c2:	2300      	movs	r3, #0
 80019c4:	61bb      	str	r3, [r7, #24]
 80019c6:	4b35      	ldr	r3, [pc, #212]	@ (8001a9c <HAL_UART_MspInit+0xfc>)
 80019c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019ca:	4a34      	ldr	r2, [pc, #208]	@ (8001a9c <HAL_UART_MspInit+0xfc>)
 80019cc:	f043 0310 	orr.w	r3, r3, #16
 80019d0:	6453      	str	r3, [r2, #68]	@ 0x44
 80019d2:	4b32      	ldr	r3, [pc, #200]	@ (8001a9c <HAL_UART_MspInit+0xfc>)
 80019d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019d6:	f003 0310 	and.w	r3, r3, #16
 80019da:	61bb      	str	r3, [r7, #24]
 80019dc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019de:	2300      	movs	r3, #0
 80019e0:	617b      	str	r3, [r7, #20]
 80019e2:	4b2e      	ldr	r3, [pc, #184]	@ (8001a9c <HAL_UART_MspInit+0xfc>)
 80019e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019e6:	4a2d      	ldr	r2, [pc, #180]	@ (8001a9c <HAL_UART_MspInit+0xfc>)
 80019e8:	f043 0301 	orr.w	r3, r3, #1
 80019ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80019ee:	4b2b      	ldr	r3, [pc, #172]	@ (8001a9c <HAL_UART_MspInit+0xfc>)
 80019f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019f2:	f003 0301 	and.w	r3, r3, #1
 80019f6:	617b      	str	r3, [r7, #20]
 80019f8:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80019fa:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80019fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a00:	2302      	movs	r3, #2
 8001a02:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a04:	2300      	movs	r3, #0
 8001a06:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a08:	2303      	movs	r3, #3
 8001a0a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001a0c:	2307      	movs	r3, #7
 8001a0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a10:	f107 031c 	add.w	r3, r7, #28
 8001a14:	4619      	mov	r1, r3
 8001a16:	4822      	ldr	r0, [pc, #136]	@ (8001aa0 <HAL_UART_MspInit+0x100>)
 8001a18:	f000 fde2 	bl	80025e0 <HAL_GPIO_Init>
    /* USER CODE BEGIN USART2_MspInit 1 */

    /* USER CODE END USART2_MspInit 1 */
  }

}
 8001a1c:	e038      	b.n	8001a90 <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART2)
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	4a20      	ldr	r2, [pc, #128]	@ (8001aa4 <HAL_UART_MspInit+0x104>)
 8001a24:	4293      	cmp	r3, r2
 8001a26:	d133      	bne.n	8001a90 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001a28:	2300      	movs	r3, #0
 8001a2a:	613b      	str	r3, [r7, #16]
 8001a2c:	4b1b      	ldr	r3, [pc, #108]	@ (8001a9c <HAL_UART_MspInit+0xfc>)
 8001a2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a30:	4a1a      	ldr	r2, [pc, #104]	@ (8001a9c <HAL_UART_MspInit+0xfc>)
 8001a32:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001a36:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a38:	4b18      	ldr	r3, [pc, #96]	@ (8001a9c <HAL_UART_MspInit+0xfc>)
 8001a3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a3c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a40:	613b      	str	r3, [r7, #16]
 8001a42:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a44:	2300      	movs	r3, #0
 8001a46:	60fb      	str	r3, [r7, #12]
 8001a48:	4b14      	ldr	r3, [pc, #80]	@ (8001a9c <HAL_UART_MspInit+0xfc>)
 8001a4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a4c:	4a13      	ldr	r2, [pc, #76]	@ (8001a9c <HAL_UART_MspInit+0xfc>)
 8001a4e:	f043 0301 	orr.w	r3, r3, #1
 8001a52:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a54:	4b11      	ldr	r3, [pc, #68]	@ (8001a9c <HAL_UART_MspInit+0xfc>)
 8001a56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a58:	f003 0301 	and.w	r3, r3, #1
 8001a5c:	60fb      	str	r3, [r7, #12]
 8001a5e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001a60:	230c      	movs	r3, #12
 8001a62:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a64:	2302      	movs	r3, #2
 8001a66:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a6c:	2302      	movs	r3, #2
 8001a6e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001a70:	2307      	movs	r3, #7
 8001a72:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a74:	f107 031c 	add.w	r3, r7, #28
 8001a78:	4619      	mov	r1, r3
 8001a7a:	4809      	ldr	r0, [pc, #36]	@ (8001aa0 <HAL_UART_MspInit+0x100>)
 8001a7c:	f000 fdb0 	bl	80025e0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8001a80:	2200      	movs	r2, #0
 8001a82:	2105      	movs	r1, #5
 8001a84:	2026      	movs	r0, #38	@ 0x26
 8001a86:	f000 fcef 	bl	8002468 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001a8a:	2026      	movs	r0, #38	@ 0x26
 8001a8c:	f000 fd08 	bl	80024a0 <HAL_NVIC_EnableIRQ>
}
 8001a90:	bf00      	nop
 8001a92:	3730      	adds	r7, #48	@ 0x30
 8001a94:	46bd      	mov	sp, r7
 8001a96:	bd80      	pop	{r7, pc}
 8001a98:	40011000 	.word	0x40011000
 8001a9c:	40023800 	.word	0x40023800
 8001aa0:	40020000 	.word	0x40020000
 8001aa4:	40004400 	.word	0x40004400

08001aa8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b08c      	sub	sp, #48	@ 0x30
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001ab8:	2300      	movs	r3, #0
 8001aba:	60bb      	str	r3, [r7, #8]
 8001abc:	4b2e      	ldr	r3, [pc, #184]	@ (8001b78 <HAL_InitTick+0xd0>)
 8001abe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ac0:	4a2d      	ldr	r2, [pc, #180]	@ (8001b78 <HAL_InitTick+0xd0>)
 8001ac2:	f043 0301 	orr.w	r3, r3, #1
 8001ac6:	6453      	str	r3, [r2, #68]	@ 0x44
 8001ac8:	4b2b      	ldr	r3, [pc, #172]	@ (8001b78 <HAL_InitTick+0xd0>)
 8001aca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001acc:	f003 0301 	and.w	r3, r3, #1
 8001ad0:	60bb      	str	r3, [r7, #8]
 8001ad2:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001ad4:	f107 020c 	add.w	r2, r7, #12
 8001ad8:	f107 0310 	add.w	r3, r7, #16
 8001adc:	4611      	mov	r1, r2
 8001ade:	4618      	mov	r0, r3
 8001ae0:	f002 fdc6 	bl	8004670 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001ae4:	f002 fdb0 	bl	8004648 <HAL_RCC_GetPCLK2Freq>
 8001ae8:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001aea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001aec:	4a23      	ldr	r2, [pc, #140]	@ (8001b7c <HAL_InitTick+0xd4>)
 8001aee:	fba2 2303 	umull	r2, r3, r2, r3
 8001af2:	0c9b      	lsrs	r3, r3, #18
 8001af4:	3b01      	subs	r3, #1
 8001af6:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001af8:	4b21      	ldr	r3, [pc, #132]	@ (8001b80 <HAL_InitTick+0xd8>)
 8001afa:	4a22      	ldr	r2, [pc, #136]	@ (8001b84 <HAL_InitTick+0xdc>)
 8001afc:	601a      	str	r2, [r3, #0]
   * Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001afe:	4b20      	ldr	r3, [pc, #128]	@ (8001b80 <HAL_InitTick+0xd8>)
 8001b00:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001b04:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001b06:	4a1e      	ldr	r2, [pc, #120]	@ (8001b80 <HAL_InitTick+0xd8>)
 8001b08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b0a:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001b0c:	4b1c      	ldr	r3, [pc, #112]	@ (8001b80 <HAL_InitTick+0xd8>)
 8001b0e:	2200      	movs	r2, #0
 8001b10:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b12:	4b1b      	ldr	r3, [pc, #108]	@ (8001b80 <HAL_InitTick+0xd8>)
 8001b14:	2200      	movs	r2, #0
 8001b16:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b18:	4b19      	ldr	r3, [pc, #100]	@ (8001b80 <HAL_InitTick+0xd8>)
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8001b1e:	4818      	ldr	r0, [pc, #96]	@ (8001b80 <HAL_InitTick+0xd8>)
 8001b20:	f003 f882 	bl	8004c28 <HAL_TIM_Base_Init>
 8001b24:	4603      	mov	r3, r0
 8001b26:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8001b2a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d11b      	bne.n	8001b6a <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8001b32:	4813      	ldr	r0, [pc, #76]	@ (8001b80 <HAL_InitTick+0xd8>)
 8001b34:	f003 f8c8 	bl	8004cc8 <HAL_TIM_Base_Start_IT>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8001b3e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d111      	bne.n	8001b6a <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001b46:	2019      	movs	r0, #25
 8001b48:	f000 fcaa 	bl	80024a0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	2b0f      	cmp	r3, #15
 8001b50:	d808      	bhi.n	8001b64 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8001b52:	2200      	movs	r2, #0
 8001b54:	6879      	ldr	r1, [r7, #4]
 8001b56:	2019      	movs	r0, #25
 8001b58:	f000 fc86 	bl	8002468 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001b5c:	4a0a      	ldr	r2, [pc, #40]	@ (8001b88 <HAL_InitTick+0xe0>)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	6013      	str	r3, [r2, #0]
 8001b62:	e002      	b.n	8001b6a <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8001b64:	2301      	movs	r3, #1
 8001b66:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001b6a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8001b6e:	4618      	mov	r0, r3
 8001b70:	3730      	adds	r7, #48	@ 0x30
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bd80      	pop	{r7, pc}
 8001b76:	bf00      	nop
 8001b78:	40023800 	.word	0x40023800
 8001b7c:	431bde83 	.word	0x431bde83
 8001b80:	20000bbc 	.word	0x20000bbc
 8001b84:	40010000 	.word	0x40010000
 8001b88:	20000018 	.word	0x20000018

08001b8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001b90:	bf00      	nop
 8001b92:	e7fd      	b.n	8001b90 <NMI_Handler+0x4>

08001b94 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b94:	b480      	push	{r7}
 8001b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b98:	bf00      	nop
 8001b9a:	e7fd      	b.n	8001b98 <HardFault_Handler+0x4>

08001b9c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ba0:	bf00      	nop
 8001ba2:	e7fd      	b.n	8001ba0 <MemManage_Handler+0x4>

08001ba4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ba8:	bf00      	nop
 8001baa:	e7fd      	b.n	8001ba8 <BusFault_Handler+0x4>

08001bac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001bac:	b480      	push	{r7}
 8001bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001bb0:	bf00      	nop
 8001bb2:	e7fd      	b.n	8001bb0 <UsageFault_Handler+0x4>

08001bb4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001bb8:	bf00      	nop
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc0:	4770      	bx	lr
	...

08001bc4 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001bc8:	4802      	ldr	r0, [pc, #8]	@ (8001bd4 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001bca:	f003 fa42 	bl	8005052 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001bce:	bf00      	nop
 8001bd0:	bd80      	pop	{r7, pc}
 8001bd2:	bf00      	nop
 8001bd4:	20000bbc 	.word	0x20000bbc

08001bd8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001bdc:	4802      	ldr	r0, [pc, #8]	@ (8001be8 <TIM2_IRQHandler+0x10>)
 8001bde:	f003 fa38 	bl	8005052 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001be2:	bf00      	nop
 8001be4:	bd80      	pop	{r7, pc}
 8001be6:	bf00      	nop
 8001be8:	20000240 	.word	0x20000240

08001bec <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001bf0:	4802      	ldr	r0, [pc, #8]	@ (8001bfc <TIM3_IRQHandler+0x10>)
 8001bf2:	f003 fa2e 	bl	8005052 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001bf6:	bf00      	nop
 8001bf8:	bd80      	pop	{r7, pc}
 8001bfa:	bf00      	nop
 8001bfc:	20000288 	.word	0x20000288

08001c00 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001c04:	4802      	ldr	r0, [pc, #8]	@ (8001c10 <TIM4_IRQHandler+0x10>)
 8001c06:	f003 fa24 	bl	8005052 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001c0a:	bf00      	nop
 8001c0c:	bd80      	pop	{r7, pc}
 8001c0e:	bf00      	nop
 8001c10:	200002d0 	.word	0x200002d0

08001c14 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001c18:	4802      	ldr	r0, [pc, #8]	@ (8001c24 <USART2_IRQHandler+0x10>)
 8001c1a:	f003 fec7 	bl	80059ac <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001c1e:	bf00      	nop
 8001c20:	bd80      	pop	{r7, pc}
 8001c22:	bf00      	nop
 8001c24:	20000360 	.word	0x20000360

08001c28 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Btn1_Pin);
 8001c2c:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8001c30:	f000 fe74 	bl	800291c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Btn4_Pin);
 8001c34:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001c38:	f000 fe70 	bl	800291c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Btn3_Pin);
 8001c3c:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8001c40:	f000 fe6c 	bl	800291c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Btn2_Pin);
 8001c44:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8001c48:	f000 fe68 	bl	800291c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001c4c:	bf00      	nop
 8001c4e:	bd80      	pop	{r7, pc}

08001c50 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001c54:	4802      	ldr	r0, [pc, #8]	@ (8001c60 <OTG_FS_IRQHandler+0x10>)
 8001c56:	f000 ffbd 	bl	8002bd4 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001c5a:	bf00      	nop
 8001c5c:	bd80      	pop	{r7, pc}
 8001c5e:	bf00      	nop
 8001c60:	20005ad4 	.word	0x20005ad4

08001c64 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b086      	sub	sp, #24
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c6c:	4a14      	ldr	r2, [pc, #80]	@ (8001cc0 <_sbrk+0x5c>)
 8001c6e:	4b15      	ldr	r3, [pc, #84]	@ (8001cc4 <_sbrk+0x60>)
 8001c70:	1ad3      	subs	r3, r2, r3
 8001c72:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c74:	697b      	ldr	r3, [r7, #20]
 8001c76:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c78:	4b13      	ldr	r3, [pc, #76]	@ (8001cc8 <_sbrk+0x64>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d102      	bne.n	8001c86 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c80:	4b11      	ldr	r3, [pc, #68]	@ (8001cc8 <_sbrk+0x64>)
 8001c82:	4a12      	ldr	r2, [pc, #72]	@ (8001ccc <_sbrk+0x68>)
 8001c84:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c86:	4b10      	ldr	r3, [pc, #64]	@ (8001cc8 <_sbrk+0x64>)
 8001c88:	681a      	ldr	r2, [r3, #0]
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	4413      	add	r3, r2
 8001c8e:	693a      	ldr	r2, [r7, #16]
 8001c90:	429a      	cmp	r2, r3
 8001c92:	d207      	bcs.n	8001ca4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c94:	f00b f970 	bl	800cf78 <__errno>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	220c      	movs	r2, #12
 8001c9c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c9e:	f04f 33ff 	mov.w	r3, #4294967295
 8001ca2:	e009      	b.n	8001cb8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ca4:	4b08      	ldr	r3, [pc, #32]	@ (8001cc8 <_sbrk+0x64>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001caa:	4b07      	ldr	r3, [pc, #28]	@ (8001cc8 <_sbrk+0x64>)
 8001cac:	681a      	ldr	r2, [r3, #0]
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	4413      	add	r3, r2
 8001cb2:	4a05      	ldr	r2, [pc, #20]	@ (8001cc8 <_sbrk+0x64>)
 8001cb4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001cb6:	68fb      	ldr	r3, [r7, #12]
}
 8001cb8:	4618      	mov	r0, r3
 8001cba:	3718      	adds	r7, #24
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	bd80      	pop	{r7, pc}
 8001cc0:	20020000 	.word	0x20020000
 8001cc4:	00000400 	.word	0x00000400
 8001cc8:	20000c04 	.word	0x20000c04
 8001ccc:	20006118 	.word	0x20006118

08001cd0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001cd4:	4b06      	ldr	r3, [pc, #24]	@ (8001cf0 <SystemInit+0x20>)
 8001cd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001cda:	4a05      	ldr	r2, [pc, #20]	@ (8001cf0 <SystemInit+0x20>)
 8001cdc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001ce0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ce4:	bf00      	nop
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cec:	4770      	bx	lr
 8001cee:	bf00      	nop
 8001cf0:	e000ed00 	.word	0xe000ed00

08001cf4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001cf4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001d2c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001cf8:	f7ff ffea 	bl	8001cd0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001cfc:	480c      	ldr	r0, [pc, #48]	@ (8001d30 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001cfe:	490d      	ldr	r1, [pc, #52]	@ (8001d34 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001d00:	4a0d      	ldr	r2, [pc, #52]	@ (8001d38 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001d02:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d04:	e002      	b.n	8001d0c <LoopCopyDataInit>

08001d06 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d06:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d08:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d0a:	3304      	adds	r3, #4

08001d0c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d0c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d0e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d10:	d3f9      	bcc.n	8001d06 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d12:	4a0a      	ldr	r2, [pc, #40]	@ (8001d3c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001d14:	4c0a      	ldr	r4, [pc, #40]	@ (8001d40 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001d16:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d18:	e001      	b.n	8001d1e <LoopFillZerobss>

08001d1a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d1a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d1c:	3204      	adds	r2, #4

08001d1e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d1e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d20:	d3fb      	bcc.n	8001d1a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001d22:	f00b f92f 	bl	800cf84 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001d26:	f7fe fc41 	bl	80005ac <main>
  bx  lr    
 8001d2a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001d2c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001d30:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d34:	20000184 	.word	0x20000184
  ldr r2, =_sidata
 8001d38:	0800f214 	.word	0x0800f214
  ldr r2, =_sbss
 8001d3c:	20000184 	.word	0x20000184
  ldr r4, =_ebss
 8001d40:	20006114 	.word	0x20006114

08001d44 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001d44:	e7fe      	b.n	8001d44 <ADC_IRQHandler>
	...

08001d48 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001d4c:	4b0e      	ldr	r3, [pc, #56]	@ (8001d88 <HAL_Init+0x40>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4a0d      	ldr	r2, [pc, #52]	@ (8001d88 <HAL_Init+0x40>)
 8001d52:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001d56:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001d58:	4b0b      	ldr	r3, [pc, #44]	@ (8001d88 <HAL_Init+0x40>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	4a0a      	ldr	r2, [pc, #40]	@ (8001d88 <HAL_Init+0x40>)
 8001d5e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001d62:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d64:	4b08      	ldr	r3, [pc, #32]	@ (8001d88 <HAL_Init+0x40>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	4a07      	ldr	r2, [pc, #28]	@ (8001d88 <HAL_Init+0x40>)
 8001d6a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d6e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d70:	2003      	movs	r0, #3
 8001d72:	f000 fb6e 	bl	8002452 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d76:	200f      	movs	r0, #15
 8001d78:	f7ff fe96 	bl	8001aa8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d7c:	f7ff fca6 	bl	80016cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d80:	2300      	movs	r3, #0
}
 8001d82:	4618      	mov	r0, r3
 8001d84:	bd80      	pop	{r7, pc}
 8001d86:	bf00      	nop
 8001d88:	40023c00 	.word	0x40023c00

08001d8c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d90:	4b06      	ldr	r3, [pc, #24]	@ (8001dac <HAL_IncTick+0x20>)
 8001d92:	781b      	ldrb	r3, [r3, #0]
 8001d94:	461a      	mov	r2, r3
 8001d96:	4b06      	ldr	r3, [pc, #24]	@ (8001db0 <HAL_IncTick+0x24>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	4413      	add	r3, r2
 8001d9c:	4a04      	ldr	r2, [pc, #16]	@ (8001db0 <HAL_IncTick+0x24>)
 8001d9e:	6013      	str	r3, [r2, #0]
}
 8001da0:	bf00      	nop
 8001da2:	46bd      	mov	sp, r7
 8001da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da8:	4770      	bx	lr
 8001daa:	bf00      	nop
 8001dac:	2000001c 	.word	0x2000001c
 8001db0:	20000c08 	.word	0x20000c08

08001db4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001db4:	b480      	push	{r7}
 8001db6:	af00      	add	r7, sp, #0
  return uwTick;
 8001db8:	4b03      	ldr	r3, [pc, #12]	@ (8001dc8 <HAL_GetTick+0x14>)
 8001dba:	681b      	ldr	r3, [r3, #0]
}
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc4:	4770      	bx	lr
 8001dc6:	bf00      	nop
 8001dc8:	20000c08 	.word	0x20000c08

08001dcc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b084      	sub	sp, #16
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001dd4:	f7ff ffee 	bl	8001db4 <HAL_GetTick>
 8001dd8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001de4:	d005      	beq.n	8001df2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001de6:	4b0a      	ldr	r3, [pc, #40]	@ (8001e10 <HAL_Delay+0x44>)
 8001de8:	781b      	ldrb	r3, [r3, #0]
 8001dea:	461a      	mov	r2, r3
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	4413      	add	r3, r2
 8001df0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001df2:	bf00      	nop
 8001df4:	f7ff ffde 	bl	8001db4 <HAL_GetTick>
 8001df8:	4602      	mov	r2, r0
 8001dfa:	68bb      	ldr	r3, [r7, #8]
 8001dfc:	1ad3      	subs	r3, r2, r3
 8001dfe:	68fa      	ldr	r2, [r7, #12]
 8001e00:	429a      	cmp	r2, r3
 8001e02:	d8f7      	bhi.n	8001df4 <HAL_Delay+0x28>
  {
  }
}
 8001e04:	bf00      	nop
 8001e06:	bf00      	nop
 8001e08:	3710      	adds	r7, #16
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd80      	pop	{r7, pc}
 8001e0e:	bf00      	nop
 8001e10:	2000001c 	.word	0x2000001c

08001e14 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b084      	sub	sp, #16
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d101      	bne.n	8001e2a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001e26:	2301      	movs	r3, #1
 8001e28:	e033      	b.n	8001e92 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d109      	bne.n	8001e46 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001e32:	6878      	ldr	r0, [r7, #4]
 8001e34:	f7ff fc76 	bl	8001724 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	2200      	movs	r2, #0
 8001e42:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e4a:	f003 0310 	and.w	r3, r3, #16
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d118      	bne.n	8001e84 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e56:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001e5a:	f023 0302 	bic.w	r3, r3, #2
 8001e5e:	f043 0202 	orr.w	r2, r3, #2
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8001e66:	6878      	ldr	r0, [r7, #4]
 8001e68:	f000 f94a 	bl	8002100 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	2200      	movs	r2, #0
 8001e70:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e76:	f023 0303 	bic.w	r3, r3, #3
 8001e7a:	f043 0201 	orr.w	r2, r3, #1
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	641a      	str	r2, [r3, #64]	@ 0x40
 8001e82:	e001      	b.n	8001e88 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001e84:	2301      	movs	r3, #1
 8001e86:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001e90:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e92:	4618      	mov	r0, r3
 8001e94:	3710      	adds	r7, #16
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bd80      	pop	{r7, pc}
	...

08001e9c <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	b085      	sub	sp, #20
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
 8001ea4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001eb0:	2b01      	cmp	r3, #1
 8001eb2:	d101      	bne.n	8001eb8 <HAL_ADC_ConfigChannel+0x1c>
 8001eb4:	2302      	movs	r3, #2
 8001eb6:	e113      	b.n	80020e0 <HAL_ADC_ConfigChannel+0x244>
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	2201      	movs	r2, #1
 8001ebc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	2b09      	cmp	r3, #9
 8001ec6:	d925      	bls.n	8001f14 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	68d9      	ldr	r1, [r3, #12]
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	b29b      	uxth	r3, r3
 8001ed4:	461a      	mov	r2, r3
 8001ed6:	4613      	mov	r3, r2
 8001ed8:	005b      	lsls	r3, r3, #1
 8001eda:	4413      	add	r3, r2
 8001edc:	3b1e      	subs	r3, #30
 8001ede:	2207      	movs	r2, #7
 8001ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee4:	43da      	mvns	r2, r3
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	400a      	ands	r2, r1
 8001eec:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	68d9      	ldr	r1, [r3, #12]
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	689a      	ldr	r2, [r3, #8]
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	b29b      	uxth	r3, r3
 8001efe:	4618      	mov	r0, r3
 8001f00:	4603      	mov	r3, r0
 8001f02:	005b      	lsls	r3, r3, #1
 8001f04:	4403      	add	r3, r0
 8001f06:	3b1e      	subs	r3, #30
 8001f08:	409a      	lsls	r2, r3
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	430a      	orrs	r2, r1
 8001f10:	60da      	str	r2, [r3, #12]
 8001f12:	e022      	b.n	8001f5a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	6919      	ldr	r1, [r3, #16]
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	b29b      	uxth	r3, r3
 8001f20:	461a      	mov	r2, r3
 8001f22:	4613      	mov	r3, r2
 8001f24:	005b      	lsls	r3, r3, #1
 8001f26:	4413      	add	r3, r2
 8001f28:	2207      	movs	r2, #7
 8001f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f2e:	43da      	mvns	r2, r3
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	400a      	ands	r2, r1
 8001f36:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	6919      	ldr	r1, [r3, #16]
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	689a      	ldr	r2, [r3, #8]
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	b29b      	uxth	r3, r3
 8001f48:	4618      	mov	r0, r3
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	005b      	lsls	r3, r3, #1
 8001f4e:	4403      	add	r3, r0
 8001f50:	409a      	lsls	r2, r3
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	430a      	orrs	r2, r1
 8001f58:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	685b      	ldr	r3, [r3, #4]
 8001f5e:	2b06      	cmp	r3, #6
 8001f60:	d824      	bhi.n	8001fac <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	685a      	ldr	r2, [r3, #4]
 8001f6c:	4613      	mov	r3, r2
 8001f6e:	009b      	lsls	r3, r3, #2
 8001f70:	4413      	add	r3, r2
 8001f72:	3b05      	subs	r3, #5
 8001f74:	221f      	movs	r2, #31
 8001f76:	fa02 f303 	lsl.w	r3, r2, r3
 8001f7a:	43da      	mvns	r2, r3
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	400a      	ands	r2, r1
 8001f82:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	b29b      	uxth	r3, r3
 8001f90:	4618      	mov	r0, r3
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	685a      	ldr	r2, [r3, #4]
 8001f96:	4613      	mov	r3, r2
 8001f98:	009b      	lsls	r3, r3, #2
 8001f9a:	4413      	add	r3, r2
 8001f9c:	3b05      	subs	r3, #5
 8001f9e:	fa00 f203 	lsl.w	r2, r0, r3
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	430a      	orrs	r2, r1
 8001fa8:	635a      	str	r2, [r3, #52]	@ 0x34
 8001faa:	e04c      	b.n	8002046 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	685b      	ldr	r3, [r3, #4]
 8001fb0:	2b0c      	cmp	r3, #12
 8001fb2:	d824      	bhi.n	8001ffe <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	685a      	ldr	r2, [r3, #4]
 8001fbe:	4613      	mov	r3, r2
 8001fc0:	009b      	lsls	r3, r3, #2
 8001fc2:	4413      	add	r3, r2
 8001fc4:	3b23      	subs	r3, #35	@ 0x23
 8001fc6:	221f      	movs	r2, #31
 8001fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fcc:	43da      	mvns	r2, r3
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	400a      	ands	r2, r1
 8001fd4:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	b29b      	uxth	r3, r3
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	685a      	ldr	r2, [r3, #4]
 8001fe8:	4613      	mov	r3, r2
 8001fea:	009b      	lsls	r3, r3, #2
 8001fec:	4413      	add	r3, r2
 8001fee:	3b23      	subs	r3, #35	@ 0x23
 8001ff0:	fa00 f203 	lsl.w	r2, r0, r3
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	430a      	orrs	r2, r1
 8001ffa:	631a      	str	r2, [r3, #48]	@ 0x30
 8001ffc:	e023      	b.n	8002046 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	685a      	ldr	r2, [r3, #4]
 8002008:	4613      	mov	r3, r2
 800200a:	009b      	lsls	r3, r3, #2
 800200c:	4413      	add	r3, r2
 800200e:	3b41      	subs	r3, #65	@ 0x41
 8002010:	221f      	movs	r2, #31
 8002012:	fa02 f303 	lsl.w	r3, r2, r3
 8002016:	43da      	mvns	r2, r3
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	400a      	ands	r2, r1
 800201e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	b29b      	uxth	r3, r3
 800202c:	4618      	mov	r0, r3
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	685a      	ldr	r2, [r3, #4]
 8002032:	4613      	mov	r3, r2
 8002034:	009b      	lsls	r3, r3, #2
 8002036:	4413      	add	r3, r2
 8002038:	3b41      	subs	r3, #65	@ 0x41
 800203a:	fa00 f203 	lsl.w	r2, r0, r3
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	430a      	orrs	r2, r1
 8002044:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002046:	4b29      	ldr	r3, [pc, #164]	@ (80020ec <HAL_ADC_ConfigChannel+0x250>)
 8002048:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	4a28      	ldr	r2, [pc, #160]	@ (80020f0 <HAL_ADC_ConfigChannel+0x254>)
 8002050:	4293      	cmp	r3, r2
 8002052:	d10f      	bne.n	8002074 <HAL_ADC_ConfigChannel+0x1d8>
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	2b12      	cmp	r3, #18
 800205a:	d10b      	bne.n	8002074 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	685b      	ldr	r3, [r3, #4]
 8002060:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	685b      	ldr	r3, [r3, #4]
 800206c:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	4a1d      	ldr	r2, [pc, #116]	@ (80020f0 <HAL_ADC_ConfigChannel+0x254>)
 800207a:	4293      	cmp	r3, r2
 800207c:	d12b      	bne.n	80020d6 <HAL_ADC_ConfigChannel+0x23a>
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	4a1c      	ldr	r2, [pc, #112]	@ (80020f4 <HAL_ADC_ConfigChannel+0x258>)
 8002084:	4293      	cmp	r3, r2
 8002086:	d003      	beq.n	8002090 <HAL_ADC_ConfigChannel+0x1f4>
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	2b11      	cmp	r3, #17
 800208e:	d122      	bne.n	80020d6 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	685b      	ldr	r3, [r3, #4]
 8002094:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	685b      	ldr	r3, [r3, #4]
 80020a0:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	4a11      	ldr	r2, [pc, #68]	@ (80020f4 <HAL_ADC_ConfigChannel+0x258>)
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d111      	bne.n	80020d6 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80020b2:	4b11      	ldr	r3, [pc, #68]	@ (80020f8 <HAL_ADC_ConfigChannel+0x25c>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	4a11      	ldr	r2, [pc, #68]	@ (80020fc <HAL_ADC_ConfigChannel+0x260>)
 80020b8:	fba2 2303 	umull	r2, r3, r2, r3
 80020bc:	0c9a      	lsrs	r2, r3, #18
 80020be:	4613      	mov	r3, r2
 80020c0:	009b      	lsls	r3, r3, #2
 80020c2:	4413      	add	r3, r2
 80020c4:	005b      	lsls	r3, r3, #1
 80020c6:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80020c8:	e002      	b.n	80020d0 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80020ca:	68bb      	ldr	r3, [r7, #8]
 80020cc:	3b01      	subs	r3, #1
 80020ce:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80020d0:	68bb      	ldr	r3, [r7, #8]
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d1f9      	bne.n	80020ca <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	2200      	movs	r2, #0
 80020da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80020de:	2300      	movs	r3, #0
}
 80020e0:	4618      	mov	r0, r3
 80020e2:	3714      	adds	r7, #20
 80020e4:	46bd      	mov	sp, r7
 80020e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ea:	4770      	bx	lr
 80020ec:	40012300 	.word	0x40012300
 80020f0:	40012000 	.word	0x40012000
 80020f4:	10000012 	.word	0x10000012
 80020f8:	20000014 	.word	0x20000014
 80020fc:	431bde83 	.word	0x431bde83

08002100 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002100:	b480      	push	{r7}
 8002102:	b085      	sub	sp, #20
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002108:	4b79      	ldr	r3, [pc, #484]	@ (80022f0 <ADC_Init+0x1f0>)
 800210a:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	685a      	ldr	r2, [r3, #4]
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	431a      	orrs	r2, r3
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	685a      	ldr	r2, [r3, #4]
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002134:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	6859      	ldr	r1, [r3, #4]
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	691b      	ldr	r3, [r3, #16]
 8002140:	021a      	lsls	r2, r3, #8
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	430a      	orrs	r2, r1
 8002148:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	685a      	ldr	r2, [r3, #4]
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002158:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	6859      	ldr	r1, [r3, #4]
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	689a      	ldr	r2, [r3, #8]
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	430a      	orrs	r2, r1
 800216a:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	689a      	ldr	r2, [r3, #8]
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800217a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	6899      	ldr	r1, [r3, #8]
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	68da      	ldr	r2, [r3, #12]
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	430a      	orrs	r2, r1
 800218c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002192:	4a58      	ldr	r2, [pc, #352]	@ (80022f4 <ADC_Init+0x1f4>)
 8002194:	4293      	cmp	r3, r2
 8002196:	d022      	beq.n	80021de <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	689a      	ldr	r2, [r3, #8]
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80021a6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	6899      	ldr	r1, [r3, #8]
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	430a      	orrs	r2, r1
 80021b8:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	689a      	ldr	r2, [r3, #8]
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80021c8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	6899      	ldr	r1, [r3, #8]
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	430a      	orrs	r2, r1
 80021da:	609a      	str	r2, [r3, #8]
 80021dc:	e00f      	b.n	80021fe <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	689a      	ldr	r2, [r3, #8]
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80021ec:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	689a      	ldr	r2, [r3, #8]
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80021fc:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	689a      	ldr	r2, [r3, #8]
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f022 0202 	bic.w	r2, r2, #2
 800220c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	6899      	ldr	r1, [r3, #8]
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	7e1b      	ldrb	r3, [r3, #24]
 8002218:	005a      	lsls	r2, r3, #1
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	430a      	orrs	r2, r1
 8002220:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002228:	2b00      	cmp	r3, #0
 800222a:	d01b      	beq.n	8002264 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	685a      	ldr	r2, [r3, #4]
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800223a:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	685a      	ldr	r2, [r3, #4]
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800224a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	6859      	ldr	r1, [r3, #4]
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002256:	3b01      	subs	r3, #1
 8002258:	035a      	lsls	r2, r3, #13
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	430a      	orrs	r2, r1
 8002260:	605a      	str	r2, [r3, #4]
 8002262:	e007      	b.n	8002274 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	685a      	ldr	r2, [r3, #4]
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002272:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8002282:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	69db      	ldr	r3, [r3, #28]
 800228e:	3b01      	subs	r3, #1
 8002290:	051a      	lsls	r2, r3, #20
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	430a      	orrs	r2, r1
 8002298:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	689a      	ldr	r2, [r3, #8]
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80022a8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	6899      	ldr	r1, [r3, #8]
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80022b6:	025a      	lsls	r2, r3, #9
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	430a      	orrs	r2, r1
 80022be:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	689a      	ldr	r2, [r3, #8]
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80022ce:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	6899      	ldr	r1, [r3, #8]
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	695b      	ldr	r3, [r3, #20]
 80022da:	029a      	lsls	r2, r3, #10
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	430a      	orrs	r2, r1
 80022e2:	609a      	str	r2, [r3, #8]
}
 80022e4:	bf00      	nop
 80022e6:	3714      	adds	r7, #20
 80022e8:	46bd      	mov	sp, r7
 80022ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ee:	4770      	bx	lr
 80022f0:	40012300 	.word	0x40012300
 80022f4:	0f000001 	.word	0x0f000001

080022f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022f8:	b480      	push	{r7}
 80022fa:	b085      	sub	sp, #20
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	f003 0307 	and.w	r3, r3, #7
 8002306:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002308:	4b0c      	ldr	r3, [pc, #48]	@ (800233c <__NVIC_SetPriorityGrouping+0x44>)
 800230a:	68db      	ldr	r3, [r3, #12]
 800230c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800230e:	68ba      	ldr	r2, [r7, #8]
 8002310:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002314:	4013      	ands	r3, r2
 8002316:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800231c:	68bb      	ldr	r3, [r7, #8]
 800231e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002320:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002324:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002328:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800232a:	4a04      	ldr	r2, [pc, #16]	@ (800233c <__NVIC_SetPriorityGrouping+0x44>)
 800232c:	68bb      	ldr	r3, [r7, #8]
 800232e:	60d3      	str	r3, [r2, #12]
}
 8002330:	bf00      	nop
 8002332:	3714      	adds	r7, #20
 8002334:	46bd      	mov	sp, r7
 8002336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233a:	4770      	bx	lr
 800233c:	e000ed00 	.word	0xe000ed00

08002340 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002340:	b480      	push	{r7}
 8002342:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002344:	4b04      	ldr	r3, [pc, #16]	@ (8002358 <__NVIC_GetPriorityGrouping+0x18>)
 8002346:	68db      	ldr	r3, [r3, #12]
 8002348:	0a1b      	lsrs	r3, r3, #8
 800234a:	f003 0307 	and.w	r3, r3, #7
}
 800234e:	4618      	mov	r0, r3
 8002350:	46bd      	mov	sp, r7
 8002352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002356:	4770      	bx	lr
 8002358:	e000ed00 	.word	0xe000ed00

0800235c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800235c:	b480      	push	{r7}
 800235e:	b083      	sub	sp, #12
 8002360:	af00      	add	r7, sp, #0
 8002362:	4603      	mov	r3, r0
 8002364:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002366:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800236a:	2b00      	cmp	r3, #0
 800236c:	db0b      	blt.n	8002386 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800236e:	79fb      	ldrb	r3, [r7, #7]
 8002370:	f003 021f 	and.w	r2, r3, #31
 8002374:	4907      	ldr	r1, [pc, #28]	@ (8002394 <__NVIC_EnableIRQ+0x38>)
 8002376:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800237a:	095b      	lsrs	r3, r3, #5
 800237c:	2001      	movs	r0, #1
 800237e:	fa00 f202 	lsl.w	r2, r0, r2
 8002382:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002386:	bf00      	nop
 8002388:	370c      	adds	r7, #12
 800238a:	46bd      	mov	sp, r7
 800238c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002390:	4770      	bx	lr
 8002392:	bf00      	nop
 8002394:	e000e100 	.word	0xe000e100

08002398 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002398:	b480      	push	{r7}
 800239a:	b083      	sub	sp, #12
 800239c:	af00      	add	r7, sp, #0
 800239e:	4603      	mov	r3, r0
 80023a0:	6039      	str	r1, [r7, #0]
 80023a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	db0a      	blt.n	80023c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	b2da      	uxtb	r2, r3
 80023b0:	490c      	ldr	r1, [pc, #48]	@ (80023e4 <__NVIC_SetPriority+0x4c>)
 80023b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023b6:	0112      	lsls	r2, r2, #4
 80023b8:	b2d2      	uxtb	r2, r2
 80023ba:	440b      	add	r3, r1
 80023bc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80023c0:	e00a      	b.n	80023d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	b2da      	uxtb	r2, r3
 80023c6:	4908      	ldr	r1, [pc, #32]	@ (80023e8 <__NVIC_SetPriority+0x50>)
 80023c8:	79fb      	ldrb	r3, [r7, #7]
 80023ca:	f003 030f 	and.w	r3, r3, #15
 80023ce:	3b04      	subs	r3, #4
 80023d0:	0112      	lsls	r2, r2, #4
 80023d2:	b2d2      	uxtb	r2, r2
 80023d4:	440b      	add	r3, r1
 80023d6:	761a      	strb	r2, [r3, #24]
}
 80023d8:	bf00      	nop
 80023da:	370c      	adds	r7, #12
 80023dc:	46bd      	mov	sp, r7
 80023de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e2:	4770      	bx	lr
 80023e4:	e000e100 	.word	0xe000e100
 80023e8:	e000ed00 	.word	0xe000ed00

080023ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023ec:	b480      	push	{r7}
 80023ee:	b089      	sub	sp, #36	@ 0x24
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	60f8      	str	r0, [r7, #12]
 80023f4:	60b9      	str	r1, [r7, #8]
 80023f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	f003 0307 	and.w	r3, r3, #7
 80023fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002400:	69fb      	ldr	r3, [r7, #28]
 8002402:	f1c3 0307 	rsb	r3, r3, #7
 8002406:	2b04      	cmp	r3, #4
 8002408:	bf28      	it	cs
 800240a:	2304      	movcs	r3, #4
 800240c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800240e:	69fb      	ldr	r3, [r7, #28]
 8002410:	3304      	adds	r3, #4
 8002412:	2b06      	cmp	r3, #6
 8002414:	d902      	bls.n	800241c <NVIC_EncodePriority+0x30>
 8002416:	69fb      	ldr	r3, [r7, #28]
 8002418:	3b03      	subs	r3, #3
 800241a:	e000      	b.n	800241e <NVIC_EncodePriority+0x32>
 800241c:	2300      	movs	r3, #0
 800241e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002420:	f04f 32ff 	mov.w	r2, #4294967295
 8002424:	69bb      	ldr	r3, [r7, #24]
 8002426:	fa02 f303 	lsl.w	r3, r2, r3
 800242a:	43da      	mvns	r2, r3
 800242c:	68bb      	ldr	r3, [r7, #8]
 800242e:	401a      	ands	r2, r3
 8002430:	697b      	ldr	r3, [r7, #20]
 8002432:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002434:	f04f 31ff 	mov.w	r1, #4294967295
 8002438:	697b      	ldr	r3, [r7, #20]
 800243a:	fa01 f303 	lsl.w	r3, r1, r3
 800243e:	43d9      	mvns	r1, r3
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002444:	4313      	orrs	r3, r2
         );
}
 8002446:	4618      	mov	r0, r3
 8002448:	3724      	adds	r7, #36	@ 0x24
 800244a:	46bd      	mov	sp, r7
 800244c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002450:	4770      	bx	lr

08002452 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002452:	b580      	push	{r7, lr}
 8002454:	b082      	sub	sp, #8
 8002456:	af00      	add	r7, sp, #0
 8002458:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800245a:	6878      	ldr	r0, [r7, #4]
 800245c:	f7ff ff4c 	bl	80022f8 <__NVIC_SetPriorityGrouping>
}
 8002460:	bf00      	nop
 8002462:	3708      	adds	r7, #8
 8002464:	46bd      	mov	sp, r7
 8002466:	bd80      	pop	{r7, pc}

08002468 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002468:	b580      	push	{r7, lr}
 800246a:	b086      	sub	sp, #24
 800246c:	af00      	add	r7, sp, #0
 800246e:	4603      	mov	r3, r0
 8002470:	60b9      	str	r1, [r7, #8]
 8002472:	607a      	str	r2, [r7, #4]
 8002474:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002476:	2300      	movs	r3, #0
 8002478:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800247a:	f7ff ff61 	bl	8002340 <__NVIC_GetPriorityGrouping>
 800247e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002480:	687a      	ldr	r2, [r7, #4]
 8002482:	68b9      	ldr	r1, [r7, #8]
 8002484:	6978      	ldr	r0, [r7, #20]
 8002486:	f7ff ffb1 	bl	80023ec <NVIC_EncodePriority>
 800248a:	4602      	mov	r2, r0
 800248c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002490:	4611      	mov	r1, r2
 8002492:	4618      	mov	r0, r3
 8002494:	f7ff ff80 	bl	8002398 <__NVIC_SetPriority>
}
 8002498:	bf00      	nop
 800249a:	3718      	adds	r7, #24
 800249c:	46bd      	mov	sp, r7
 800249e:	bd80      	pop	{r7, pc}

080024a0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b082      	sub	sp, #8
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	4603      	mov	r3, r0
 80024a8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80024aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024ae:	4618      	mov	r0, r3
 80024b0:	f7ff ff54 	bl	800235c <__NVIC_EnableIRQ>
}
 80024b4:	bf00      	nop
 80024b6:	3708      	adds	r7, #8
 80024b8:	46bd      	mov	sp, r7
 80024ba:	bd80      	pop	{r7, pc}

080024bc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b084      	sub	sp, #16
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024c8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80024ca:	f7ff fc73 	bl	8001db4 <HAL_GetTick>
 80024ce:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80024d6:	b2db      	uxtb	r3, r3
 80024d8:	2b02      	cmp	r3, #2
 80024da:	d008      	beq.n	80024ee <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2280      	movs	r2, #128	@ 0x80
 80024e0:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	2200      	movs	r2, #0
 80024e6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80024ea:	2301      	movs	r3, #1
 80024ec:	e052      	b.n	8002594 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	681a      	ldr	r2, [r3, #0]
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f022 0216 	bic.w	r2, r2, #22
 80024fc:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	695a      	ldr	r2, [r3, #20]
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800250c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002512:	2b00      	cmp	r3, #0
 8002514:	d103      	bne.n	800251e <HAL_DMA_Abort+0x62>
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800251a:	2b00      	cmp	r3, #0
 800251c:	d007      	beq.n	800252e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	681a      	ldr	r2, [r3, #0]
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f022 0208 	bic.w	r2, r2, #8
 800252c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	681a      	ldr	r2, [r3, #0]
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f022 0201 	bic.w	r2, r2, #1
 800253c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800253e:	e013      	b.n	8002568 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002540:	f7ff fc38 	bl	8001db4 <HAL_GetTick>
 8002544:	4602      	mov	r2, r0
 8002546:	68bb      	ldr	r3, [r7, #8]
 8002548:	1ad3      	subs	r3, r2, r3
 800254a:	2b05      	cmp	r3, #5
 800254c:	d90c      	bls.n	8002568 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	2220      	movs	r2, #32
 8002552:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2203      	movs	r2, #3
 8002558:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2200      	movs	r2, #0
 8002560:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8002564:	2303      	movs	r3, #3
 8002566:	e015      	b.n	8002594 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f003 0301 	and.w	r3, r3, #1
 8002572:	2b00      	cmp	r3, #0
 8002574:	d1e4      	bne.n	8002540 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800257a:	223f      	movs	r2, #63	@ 0x3f
 800257c:	409a      	lsls	r2, r3
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	2201      	movs	r2, #1
 8002586:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	2200      	movs	r2, #0
 800258e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8002592:	2300      	movs	r3, #0
}
 8002594:	4618      	mov	r0, r3
 8002596:	3710      	adds	r7, #16
 8002598:	46bd      	mov	sp, r7
 800259a:	bd80      	pop	{r7, pc}

0800259c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800259c:	b480      	push	{r7}
 800259e:	b083      	sub	sp, #12
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80025aa:	b2db      	uxtb	r3, r3
 80025ac:	2b02      	cmp	r3, #2
 80025ae:	d004      	beq.n	80025ba <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2280      	movs	r2, #128	@ 0x80
 80025b4:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80025b6:	2301      	movs	r3, #1
 80025b8:	e00c      	b.n	80025d4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	2205      	movs	r2, #5
 80025be:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	681a      	ldr	r2, [r3, #0]
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f022 0201 	bic.w	r2, r2, #1
 80025d0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80025d2:	2300      	movs	r3, #0
}
 80025d4:	4618      	mov	r0, r3
 80025d6:	370c      	adds	r7, #12
 80025d8:	46bd      	mov	sp, r7
 80025da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025de:	4770      	bx	lr

080025e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80025e0:	b480      	push	{r7}
 80025e2:	b089      	sub	sp, #36	@ 0x24
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
 80025e8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80025ea:	2300      	movs	r3, #0
 80025ec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80025ee:	2300      	movs	r3, #0
 80025f0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80025f2:	2300      	movs	r3, #0
 80025f4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80025f6:	2300      	movs	r3, #0
 80025f8:	61fb      	str	r3, [r7, #28]
 80025fa:	e159      	b.n	80028b0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80025fc:	2201      	movs	r2, #1
 80025fe:	69fb      	ldr	r3, [r7, #28]
 8002600:	fa02 f303 	lsl.w	r3, r2, r3
 8002604:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	697a      	ldr	r2, [r7, #20]
 800260c:	4013      	ands	r3, r2
 800260e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002610:	693a      	ldr	r2, [r7, #16]
 8002612:	697b      	ldr	r3, [r7, #20]
 8002614:	429a      	cmp	r2, r3
 8002616:	f040 8148 	bne.w	80028aa <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	685b      	ldr	r3, [r3, #4]
 800261e:	f003 0303 	and.w	r3, r3, #3
 8002622:	2b01      	cmp	r3, #1
 8002624:	d005      	beq.n	8002632 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002626:	683b      	ldr	r3, [r7, #0]
 8002628:	685b      	ldr	r3, [r3, #4]
 800262a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800262e:	2b02      	cmp	r3, #2
 8002630:	d130      	bne.n	8002694 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	689b      	ldr	r3, [r3, #8]
 8002636:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002638:	69fb      	ldr	r3, [r7, #28]
 800263a:	005b      	lsls	r3, r3, #1
 800263c:	2203      	movs	r2, #3
 800263e:	fa02 f303 	lsl.w	r3, r2, r3
 8002642:	43db      	mvns	r3, r3
 8002644:	69ba      	ldr	r2, [r7, #24]
 8002646:	4013      	ands	r3, r2
 8002648:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	68da      	ldr	r2, [r3, #12]
 800264e:	69fb      	ldr	r3, [r7, #28]
 8002650:	005b      	lsls	r3, r3, #1
 8002652:	fa02 f303 	lsl.w	r3, r2, r3
 8002656:	69ba      	ldr	r2, [r7, #24]
 8002658:	4313      	orrs	r3, r2
 800265a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	69ba      	ldr	r2, [r7, #24]
 8002660:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	685b      	ldr	r3, [r3, #4]
 8002666:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002668:	2201      	movs	r2, #1
 800266a:	69fb      	ldr	r3, [r7, #28]
 800266c:	fa02 f303 	lsl.w	r3, r2, r3
 8002670:	43db      	mvns	r3, r3
 8002672:	69ba      	ldr	r2, [r7, #24]
 8002674:	4013      	ands	r3, r2
 8002676:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	685b      	ldr	r3, [r3, #4]
 800267c:	091b      	lsrs	r3, r3, #4
 800267e:	f003 0201 	and.w	r2, r3, #1
 8002682:	69fb      	ldr	r3, [r7, #28]
 8002684:	fa02 f303 	lsl.w	r3, r2, r3
 8002688:	69ba      	ldr	r2, [r7, #24]
 800268a:	4313      	orrs	r3, r2
 800268c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	69ba      	ldr	r2, [r7, #24]
 8002692:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	685b      	ldr	r3, [r3, #4]
 8002698:	f003 0303 	and.w	r3, r3, #3
 800269c:	2b03      	cmp	r3, #3
 800269e:	d017      	beq.n	80026d0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	68db      	ldr	r3, [r3, #12]
 80026a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80026a6:	69fb      	ldr	r3, [r7, #28]
 80026a8:	005b      	lsls	r3, r3, #1
 80026aa:	2203      	movs	r2, #3
 80026ac:	fa02 f303 	lsl.w	r3, r2, r3
 80026b0:	43db      	mvns	r3, r3
 80026b2:	69ba      	ldr	r2, [r7, #24]
 80026b4:	4013      	ands	r3, r2
 80026b6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	689a      	ldr	r2, [r3, #8]
 80026bc:	69fb      	ldr	r3, [r7, #28]
 80026be:	005b      	lsls	r3, r3, #1
 80026c0:	fa02 f303 	lsl.w	r3, r2, r3
 80026c4:	69ba      	ldr	r2, [r7, #24]
 80026c6:	4313      	orrs	r3, r2
 80026c8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	69ba      	ldr	r2, [r7, #24]
 80026ce:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	685b      	ldr	r3, [r3, #4]
 80026d4:	f003 0303 	and.w	r3, r3, #3
 80026d8:	2b02      	cmp	r3, #2
 80026da:	d123      	bne.n	8002724 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80026dc:	69fb      	ldr	r3, [r7, #28]
 80026de:	08da      	lsrs	r2, r3, #3
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	3208      	adds	r2, #8
 80026e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80026e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80026ea:	69fb      	ldr	r3, [r7, #28]
 80026ec:	f003 0307 	and.w	r3, r3, #7
 80026f0:	009b      	lsls	r3, r3, #2
 80026f2:	220f      	movs	r2, #15
 80026f4:	fa02 f303 	lsl.w	r3, r2, r3
 80026f8:	43db      	mvns	r3, r3
 80026fa:	69ba      	ldr	r2, [r7, #24]
 80026fc:	4013      	ands	r3, r2
 80026fe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	691a      	ldr	r2, [r3, #16]
 8002704:	69fb      	ldr	r3, [r7, #28]
 8002706:	f003 0307 	and.w	r3, r3, #7
 800270a:	009b      	lsls	r3, r3, #2
 800270c:	fa02 f303 	lsl.w	r3, r2, r3
 8002710:	69ba      	ldr	r2, [r7, #24]
 8002712:	4313      	orrs	r3, r2
 8002714:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002716:	69fb      	ldr	r3, [r7, #28]
 8002718:	08da      	lsrs	r2, r3, #3
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	3208      	adds	r2, #8
 800271e:	69b9      	ldr	r1, [r7, #24]
 8002720:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800272a:	69fb      	ldr	r3, [r7, #28]
 800272c:	005b      	lsls	r3, r3, #1
 800272e:	2203      	movs	r2, #3
 8002730:	fa02 f303 	lsl.w	r3, r2, r3
 8002734:	43db      	mvns	r3, r3
 8002736:	69ba      	ldr	r2, [r7, #24]
 8002738:	4013      	ands	r3, r2
 800273a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	685b      	ldr	r3, [r3, #4]
 8002740:	f003 0203 	and.w	r2, r3, #3
 8002744:	69fb      	ldr	r3, [r7, #28]
 8002746:	005b      	lsls	r3, r3, #1
 8002748:	fa02 f303 	lsl.w	r3, r2, r3
 800274c:	69ba      	ldr	r2, [r7, #24]
 800274e:	4313      	orrs	r3, r2
 8002750:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	69ba      	ldr	r2, [r7, #24]
 8002756:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	685b      	ldr	r3, [r3, #4]
 800275c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002760:	2b00      	cmp	r3, #0
 8002762:	f000 80a2 	beq.w	80028aa <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002766:	2300      	movs	r3, #0
 8002768:	60fb      	str	r3, [r7, #12]
 800276a:	4b57      	ldr	r3, [pc, #348]	@ (80028c8 <HAL_GPIO_Init+0x2e8>)
 800276c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800276e:	4a56      	ldr	r2, [pc, #344]	@ (80028c8 <HAL_GPIO_Init+0x2e8>)
 8002770:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002774:	6453      	str	r3, [r2, #68]	@ 0x44
 8002776:	4b54      	ldr	r3, [pc, #336]	@ (80028c8 <HAL_GPIO_Init+0x2e8>)
 8002778:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800277a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800277e:	60fb      	str	r3, [r7, #12]
 8002780:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002782:	4a52      	ldr	r2, [pc, #328]	@ (80028cc <HAL_GPIO_Init+0x2ec>)
 8002784:	69fb      	ldr	r3, [r7, #28]
 8002786:	089b      	lsrs	r3, r3, #2
 8002788:	3302      	adds	r3, #2
 800278a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800278e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002790:	69fb      	ldr	r3, [r7, #28]
 8002792:	f003 0303 	and.w	r3, r3, #3
 8002796:	009b      	lsls	r3, r3, #2
 8002798:	220f      	movs	r2, #15
 800279a:	fa02 f303 	lsl.w	r3, r2, r3
 800279e:	43db      	mvns	r3, r3
 80027a0:	69ba      	ldr	r2, [r7, #24]
 80027a2:	4013      	ands	r3, r2
 80027a4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	4a49      	ldr	r2, [pc, #292]	@ (80028d0 <HAL_GPIO_Init+0x2f0>)
 80027aa:	4293      	cmp	r3, r2
 80027ac:	d019      	beq.n	80027e2 <HAL_GPIO_Init+0x202>
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	4a48      	ldr	r2, [pc, #288]	@ (80028d4 <HAL_GPIO_Init+0x2f4>)
 80027b2:	4293      	cmp	r3, r2
 80027b4:	d013      	beq.n	80027de <HAL_GPIO_Init+0x1fe>
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	4a47      	ldr	r2, [pc, #284]	@ (80028d8 <HAL_GPIO_Init+0x2f8>)
 80027ba:	4293      	cmp	r3, r2
 80027bc:	d00d      	beq.n	80027da <HAL_GPIO_Init+0x1fa>
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	4a46      	ldr	r2, [pc, #280]	@ (80028dc <HAL_GPIO_Init+0x2fc>)
 80027c2:	4293      	cmp	r3, r2
 80027c4:	d007      	beq.n	80027d6 <HAL_GPIO_Init+0x1f6>
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	4a45      	ldr	r2, [pc, #276]	@ (80028e0 <HAL_GPIO_Init+0x300>)
 80027ca:	4293      	cmp	r3, r2
 80027cc:	d101      	bne.n	80027d2 <HAL_GPIO_Init+0x1f2>
 80027ce:	2304      	movs	r3, #4
 80027d0:	e008      	b.n	80027e4 <HAL_GPIO_Init+0x204>
 80027d2:	2307      	movs	r3, #7
 80027d4:	e006      	b.n	80027e4 <HAL_GPIO_Init+0x204>
 80027d6:	2303      	movs	r3, #3
 80027d8:	e004      	b.n	80027e4 <HAL_GPIO_Init+0x204>
 80027da:	2302      	movs	r3, #2
 80027dc:	e002      	b.n	80027e4 <HAL_GPIO_Init+0x204>
 80027de:	2301      	movs	r3, #1
 80027e0:	e000      	b.n	80027e4 <HAL_GPIO_Init+0x204>
 80027e2:	2300      	movs	r3, #0
 80027e4:	69fa      	ldr	r2, [r7, #28]
 80027e6:	f002 0203 	and.w	r2, r2, #3
 80027ea:	0092      	lsls	r2, r2, #2
 80027ec:	4093      	lsls	r3, r2
 80027ee:	69ba      	ldr	r2, [r7, #24]
 80027f0:	4313      	orrs	r3, r2
 80027f2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80027f4:	4935      	ldr	r1, [pc, #212]	@ (80028cc <HAL_GPIO_Init+0x2ec>)
 80027f6:	69fb      	ldr	r3, [r7, #28]
 80027f8:	089b      	lsrs	r3, r3, #2
 80027fa:	3302      	adds	r3, #2
 80027fc:	69ba      	ldr	r2, [r7, #24]
 80027fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002802:	4b38      	ldr	r3, [pc, #224]	@ (80028e4 <HAL_GPIO_Init+0x304>)
 8002804:	689b      	ldr	r3, [r3, #8]
 8002806:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002808:	693b      	ldr	r3, [r7, #16]
 800280a:	43db      	mvns	r3, r3
 800280c:	69ba      	ldr	r2, [r7, #24]
 800280e:	4013      	ands	r3, r2
 8002810:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	685b      	ldr	r3, [r3, #4]
 8002816:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800281a:	2b00      	cmp	r3, #0
 800281c:	d003      	beq.n	8002826 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800281e:	69ba      	ldr	r2, [r7, #24]
 8002820:	693b      	ldr	r3, [r7, #16]
 8002822:	4313      	orrs	r3, r2
 8002824:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002826:	4a2f      	ldr	r2, [pc, #188]	@ (80028e4 <HAL_GPIO_Init+0x304>)
 8002828:	69bb      	ldr	r3, [r7, #24]
 800282a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800282c:	4b2d      	ldr	r3, [pc, #180]	@ (80028e4 <HAL_GPIO_Init+0x304>)
 800282e:	68db      	ldr	r3, [r3, #12]
 8002830:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002832:	693b      	ldr	r3, [r7, #16]
 8002834:	43db      	mvns	r3, r3
 8002836:	69ba      	ldr	r2, [r7, #24]
 8002838:	4013      	ands	r3, r2
 800283a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	685b      	ldr	r3, [r3, #4]
 8002840:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002844:	2b00      	cmp	r3, #0
 8002846:	d003      	beq.n	8002850 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002848:	69ba      	ldr	r2, [r7, #24]
 800284a:	693b      	ldr	r3, [r7, #16]
 800284c:	4313      	orrs	r3, r2
 800284e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002850:	4a24      	ldr	r2, [pc, #144]	@ (80028e4 <HAL_GPIO_Init+0x304>)
 8002852:	69bb      	ldr	r3, [r7, #24]
 8002854:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002856:	4b23      	ldr	r3, [pc, #140]	@ (80028e4 <HAL_GPIO_Init+0x304>)
 8002858:	685b      	ldr	r3, [r3, #4]
 800285a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800285c:	693b      	ldr	r3, [r7, #16]
 800285e:	43db      	mvns	r3, r3
 8002860:	69ba      	ldr	r2, [r7, #24]
 8002862:	4013      	ands	r3, r2
 8002864:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	685b      	ldr	r3, [r3, #4]
 800286a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800286e:	2b00      	cmp	r3, #0
 8002870:	d003      	beq.n	800287a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002872:	69ba      	ldr	r2, [r7, #24]
 8002874:	693b      	ldr	r3, [r7, #16]
 8002876:	4313      	orrs	r3, r2
 8002878:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800287a:	4a1a      	ldr	r2, [pc, #104]	@ (80028e4 <HAL_GPIO_Init+0x304>)
 800287c:	69bb      	ldr	r3, [r7, #24]
 800287e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002880:	4b18      	ldr	r3, [pc, #96]	@ (80028e4 <HAL_GPIO_Init+0x304>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002886:	693b      	ldr	r3, [r7, #16]
 8002888:	43db      	mvns	r3, r3
 800288a:	69ba      	ldr	r2, [r7, #24]
 800288c:	4013      	ands	r3, r2
 800288e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	685b      	ldr	r3, [r3, #4]
 8002894:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002898:	2b00      	cmp	r3, #0
 800289a:	d003      	beq.n	80028a4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800289c:	69ba      	ldr	r2, [r7, #24]
 800289e:	693b      	ldr	r3, [r7, #16]
 80028a0:	4313      	orrs	r3, r2
 80028a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80028a4:	4a0f      	ldr	r2, [pc, #60]	@ (80028e4 <HAL_GPIO_Init+0x304>)
 80028a6:	69bb      	ldr	r3, [r7, #24]
 80028a8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80028aa:	69fb      	ldr	r3, [r7, #28]
 80028ac:	3301      	adds	r3, #1
 80028ae:	61fb      	str	r3, [r7, #28]
 80028b0:	69fb      	ldr	r3, [r7, #28]
 80028b2:	2b0f      	cmp	r3, #15
 80028b4:	f67f aea2 	bls.w	80025fc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80028b8:	bf00      	nop
 80028ba:	bf00      	nop
 80028bc:	3724      	adds	r7, #36	@ 0x24
 80028be:	46bd      	mov	sp, r7
 80028c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c4:	4770      	bx	lr
 80028c6:	bf00      	nop
 80028c8:	40023800 	.word	0x40023800
 80028cc:	40013800 	.word	0x40013800
 80028d0:	40020000 	.word	0x40020000
 80028d4:	40020400 	.word	0x40020400
 80028d8:	40020800 	.word	0x40020800
 80028dc:	40020c00 	.word	0x40020c00
 80028e0:	40021000 	.word	0x40021000
 80028e4:	40013c00 	.word	0x40013c00

080028e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80028e8:	b480      	push	{r7}
 80028ea:	b083      	sub	sp, #12
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
 80028f0:	460b      	mov	r3, r1
 80028f2:	807b      	strh	r3, [r7, #2]
 80028f4:	4613      	mov	r3, r2
 80028f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80028f8:	787b      	ldrb	r3, [r7, #1]
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d003      	beq.n	8002906 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80028fe:	887a      	ldrh	r2, [r7, #2]
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002904:	e003      	b.n	800290e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002906:	887b      	ldrh	r3, [r7, #2]
 8002908:	041a      	lsls	r2, r3, #16
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	619a      	str	r2, [r3, #24]
}
 800290e:	bf00      	nop
 8002910:	370c      	adds	r7, #12
 8002912:	46bd      	mov	sp, r7
 8002914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002918:	4770      	bx	lr
	...

0800291c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b082      	sub	sp, #8
 8002920:	af00      	add	r7, sp, #0
 8002922:	4603      	mov	r3, r0
 8002924:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002926:	4b08      	ldr	r3, [pc, #32]	@ (8002948 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002928:	695a      	ldr	r2, [r3, #20]
 800292a:	88fb      	ldrh	r3, [r7, #6]
 800292c:	4013      	ands	r3, r2
 800292e:	2b00      	cmp	r3, #0
 8002930:	d006      	beq.n	8002940 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002932:	4a05      	ldr	r2, [pc, #20]	@ (8002948 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002934:	88fb      	ldrh	r3, [r7, #6]
 8002936:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002938:	88fb      	ldrh	r3, [r7, #6]
 800293a:	4618      	mov	r0, r3
 800293c:	f7fe f95a 	bl	8000bf4 <HAL_GPIO_EXTI_Callback>
  }
}
 8002940:	bf00      	nop
 8002942:	3708      	adds	r7, #8
 8002944:	46bd      	mov	sp, r7
 8002946:	bd80      	pop	{r7, pc}
 8002948:	40013c00 	.word	0x40013c00

0800294c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	b086      	sub	sp, #24
 8002950:	af02      	add	r7, sp, #8
 8002952:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2b00      	cmp	r3, #0
 8002958:	d101      	bne.n	800295e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800295a:	2301      	movs	r3, #1
 800295c:	e101      	b.n	8002b62 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800296a:	b2db      	uxtb	r3, r3
 800296c:	2b00      	cmp	r3, #0
 800296e:	d106      	bne.n	800297e <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2200      	movs	r2, #0
 8002974:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002978:	6878      	ldr	r0, [r7, #4]
 800297a:	f009 feeb 	bl	800c754 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	2203      	movs	r2, #3
 8002982:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8002986:	68bb      	ldr	r3, [r7, #8]
 8002988:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800298c:	d102      	bne.n	8002994 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	2200      	movs	r2, #0
 8002992:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	4618      	mov	r0, r3
 800299a:	f004 f874 	bl	8006a86 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6818      	ldr	r0, [r3, #0]
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	7c1a      	ldrb	r2, [r3, #16]
 80029a6:	f88d 2000 	strb.w	r2, [sp]
 80029aa:	3304      	adds	r3, #4
 80029ac:	cb0e      	ldmia	r3, {r1, r2, r3}
 80029ae:	f003 ff53 	bl	8006858 <USB_CoreInit>
 80029b2:	4603      	mov	r3, r0
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d005      	beq.n	80029c4 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2202      	movs	r2, #2
 80029bc:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80029c0:	2301      	movs	r3, #1
 80029c2:	e0ce      	b.n	8002b62 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	2100      	movs	r1, #0
 80029ca:	4618      	mov	r0, r3
 80029cc:	f004 f86c 	bl	8006aa8 <USB_SetCurrentMode>
 80029d0:	4603      	mov	r3, r0
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d005      	beq.n	80029e2 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	2202      	movs	r2, #2
 80029da:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80029de:	2301      	movs	r3, #1
 80029e0:	e0bf      	b.n	8002b62 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80029e2:	2300      	movs	r3, #0
 80029e4:	73fb      	strb	r3, [r7, #15]
 80029e6:	e04a      	b.n	8002a7e <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80029e8:	7bfa      	ldrb	r2, [r7, #15]
 80029ea:	6879      	ldr	r1, [r7, #4]
 80029ec:	4613      	mov	r3, r2
 80029ee:	00db      	lsls	r3, r3, #3
 80029f0:	4413      	add	r3, r2
 80029f2:	009b      	lsls	r3, r3, #2
 80029f4:	440b      	add	r3, r1
 80029f6:	3315      	adds	r3, #21
 80029f8:	2201      	movs	r2, #1
 80029fa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80029fc:	7bfa      	ldrb	r2, [r7, #15]
 80029fe:	6879      	ldr	r1, [r7, #4]
 8002a00:	4613      	mov	r3, r2
 8002a02:	00db      	lsls	r3, r3, #3
 8002a04:	4413      	add	r3, r2
 8002a06:	009b      	lsls	r3, r3, #2
 8002a08:	440b      	add	r3, r1
 8002a0a:	3314      	adds	r3, #20
 8002a0c:	7bfa      	ldrb	r2, [r7, #15]
 8002a0e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002a10:	7bfa      	ldrb	r2, [r7, #15]
 8002a12:	7bfb      	ldrb	r3, [r7, #15]
 8002a14:	b298      	uxth	r0, r3
 8002a16:	6879      	ldr	r1, [r7, #4]
 8002a18:	4613      	mov	r3, r2
 8002a1a:	00db      	lsls	r3, r3, #3
 8002a1c:	4413      	add	r3, r2
 8002a1e:	009b      	lsls	r3, r3, #2
 8002a20:	440b      	add	r3, r1
 8002a22:	332e      	adds	r3, #46	@ 0x2e
 8002a24:	4602      	mov	r2, r0
 8002a26:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002a28:	7bfa      	ldrb	r2, [r7, #15]
 8002a2a:	6879      	ldr	r1, [r7, #4]
 8002a2c:	4613      	mov	r3, r2
 8002a2e:	00db      	lsls	r3, r3, #3
 8002a30:	4413      	add	r3, r2
 8002a32:	009b      	lsls	r3, r3, #2
 8002a34:	440b      	add	r3, r1
 8002a36:	3318      	adds	r3, #24
 8002a38:	2200      	movs	r2, #0
 8002a3a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002a3c:	7bfa      	ldrb	r2, [r7, #15]
 8002a3e:	6879      	ldr	r1, [r7, #4]
 8002a40:	4613      	mov	r3, r2
 8002a42:	00db      	lsls	r3, r3, #3
 8002a44:	4413      	add	r3, r2
 8002a46:	009b      	lsls	r3, r3, #2
 8002a48:	440b      	add	r3, r1
 8002a4a:	331c      	adds	r3, #28
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002a50:	7bfa      	ldrb	r2, [r7, #15]
 8002a52:	6879      	ldr	r1, [r7, #4]
 8002a54:	4613      	mov	r3, r2
 8002a56:	00db      	lsls	r3, r3, #3
 8002a58:	4413      	add	r3, r2
 8002a5a:	009b      	lsls	r3, r3, #2
 8002a5c:	440b      	add	r3, r1
 8002a5e:	3320      	adds	r3, #32
 8002a60:	2200      	movs	r2, #0
 8002a62:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002a64:	7bfa      	ldrb	r2, [r7, #15]
 8002a66:	6879      	ldr	r1, [r7, #4]
 8002a68:	4613      	mov	r3, r2
 8002a6a:	00db      	lsls	r3, r3, #3
 8002a6c:	4413      	add	r3, r2
 8002a6e:	009b      	lsls	r3, r3, #2
 8002a70:	440b      	add	r3, r1
 8002a72:	3324      	adds	r3, #36	@ 0x24
 8002a74:	2200      	movs	r2, #0
 8002a76:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a78:	7bfb      	ldrb	r3, [r7, #15]
 8002a7a:	3301      	adds	r3, #1
 8002a7c:	73fb      	strb	r3, [r7, #15]
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	791b      	ldrb	r3, [r3, #4]
 8002a82:	7bfa      	ldrb	r2, [r7, #15]
 8002a84:	429a      	cmp	r2, r3
 8002a86:	d3af      	bcc.n	80029e8 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a88:	2300      	movs	r3, #0
 8002a8a:	73fb      	strb	r3, [r7, #15]
 8002a8c:	e044      	b.n	8002b18 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002a8e:	7bfa      	ldrb	r2, [r7, #15]
 8002a90:	6879      	ldr	r1, [r7, #4]
 8002a92:	4613      	mov	r3, r2
 8002a94:	00db      	lsls	r3, r3, #3
 8002a96:	4413      	add	r3, r2
 8002a98:	009b      	lsls	r3, r3, #2
 8002a9a:	440b      	add	r3, r1
 8002a9c:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002aa4:	7bfa      	ldrb	r2, [r7, #15]
 8002aa6:	6879      	ldr	r1, [r7, #4]
 8002aa8:	4613      	mov	r3, r2
 8002aaa:	00db      	lsls	r3, r3, #3
 8002aac:	4413      	add	r3, r2
 8002aae:	009b      	lsls	r3, r3, #2
 8002ab0:	440b      	add	r3, r1
 8002ab2:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8002ab6:	7bfa      	ldrb	r2, [r7, #15]
 8002ab8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002aba:	7bfa      	ldrb	r2, [r7, #15]
 8002abc:	6879      	ldr	r1, [r7, #4]
 8002abe:	4613      	mov	r3, r2
 8002ac0:	00db      	lsls	r3, r3, #3
 8002ac2:	4413      	add	r3, r2
 8002ac4:	009b      	lsls	r3, r3, #2
 8002ac6:	440b      	add	r3, r1
 8002ac8:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002acc:	2200      	movs	r2, #0
 8002ace:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002ad0:	7bfa      	ldrb	r2, [r7, #15]
 8002ad2:	6879      	ldr	r1, [r7, #4]
 8002ad4:	4613      	mov	r3, r2
 8002ad6:	00db      	lsls	r3, r3, #3
 8002ad8:	4413      	add	r3, r2
 8002ada:	009b      	lsls	r3, r3, #2
 8002adc:	440b      	add	r3, r1
 8002ade:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002ae6:	7bfa      	ldrb	r2, [r7, #15]
 8002ae8:	6879      	ldr	r1, [r7, #4]
 8002aea:	4613      	mov	r3, r2
 8002aec:	00db      	lsls	r3, r3, #3
 8002aee:	4413      	add	r3, r2
 8002af0:	009b      	lsls	r3, r3, #2
 8002af2:	440b      	add	r3, r1
 8002af4:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8002af8:	2200      	movs	r2, #0
 8002afa:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002afc:	7bfa      	ldrb	r2, [r7, #15]
 8002afe:	6879      	ldr	r1, [r7, #4]
 8002b00:	4613      	mov	r3, r2
 8002b02:	00db      	lsls	r3, r3, #3
 8002b04:	4413      	add	r3, r2
 8002b06:	009b      	lsls	r3, r3, #2
 8002b08:	440b      	add	r3, r1
 8002b0a:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002b0e:	2200      	movs	r2, #0
 8002b10:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b12:	7bfb      	ldrb	r3, [r7, #15]
 8002b14:	3301      	adds	r3, #1
 8002b16:	73fb      	strb	r3, [r7, #15]
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	791b      	ldrb	r3, [r3, #4]
 8002b1c:	7bfa      	ldrb	r2, [r7, #15]
 8002b1e:	429a      	cmp	r2, r3
 8002b20:	d3b5      	bcc.n	8002a8e <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6818      	ldr	r0, [r3, #0]
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	7c1a      	ldrb	r2, [r3, #16]
 8002b2a:	f88d 2000 	strb.w	r2, [sp]
 8002b2e:	3304      	adds	r3, #4
 8002b30:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002b32:	f004 f805 	bl	8006b40 <USB_DevInit>
 8002b36:	4603      	mov	r3, r0
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d005      	beq.n	8002b48 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2202      	movs	r2, #2
 8002b40:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002b44:	2301      	movs	r3, #1
 8002b46:	e00c      	b.n	8002b62 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	2201      	movs	r2, #1
 8002b52:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	f005 f84f 	bl	8007bfe <USB_DevDisconnect>

  return HAL_OK;
 8002b60:	2300      	movs	r3, #0
}
 8002b62:	4618      	mov	r0, r3
 8002b64:	3710      	adds	r7, #16
 8002b66:	46bd      	mov	sp, r7
 8002b68:	bd80      	pop	{r7, pc}

08002b6a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002b6a:	b580      	push	{r7, lr}
 8002b6c:	b084      	sub	sp, #16
 8002b6e:	af00      	add	r7, sp, #0
 8002b70:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002b7e:	2b01      	cmp	r3, #1
 8002b80:	d101      	bne.n	8002b86 <HAL_PCD_Start+0x1c>
 8002b82:	2302      	movs	r3, #2
 8002b84:	e022      	b.n	8002bcc <HAL_PCD_Start+0x62>
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	2201      	movs	r2, #1
 8002b8a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	68db      	ldr	r3, [r3, #12]
 8002b92:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d009      	beq.n	8002bae <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8002b9e:	2b01      	cmp	r3, #1
 8002ba0:	d105      	bne.n	8002bae <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ba6:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	f003 ff56 	bl	8006a64 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	f004 fffd 	bl	8007bbc <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002bca:	2300      	movs	r3, #0
}
 8002bcc:	4618      	mov	r0, r3
 8002bce:	3710      	adds	r7, #16
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	bd80      	pop	{r7, pc}

08002bd4 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002bd4:	b590      	push	{r4, r7, lr}
 8002bd6:	b08d      	sub	sp, #52	@ 0x34
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002be2:	6a3b      	ldr	r3, [r7, #32]
 8002be4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	4618      	mov	r0, r3
 8002bec:	f005 f8bb 	bl	8007d66 <USB_GetMode>
 8002bf0:	4603      	mov	r3, r0
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	f040 848c 	bne.w	8003510 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	f005 f81f 	bl	8007c40 <USB_ReadInterrupts>
 8002c02:	4603      	mov	r3, r0
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	f000 8482 	beq.w	800350e <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002c0a:	69fb      	ldr	r3, [r7, #28]
 8002c0c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002c10:	689b      	ldr	r3, [r3, #8]
 8002c12:	0a1b      	lsrs	r3, r3, #8
 8002c14:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	4618      	mov	r0, r3
 8002c24:	f005 f80c 	bl	8007c40 <USB_ReadInterrupts>
 8002c28:	4603      	mov	r3, r0
 8002c2a:	f003 0302 	and.w	r3, r3, #2
 8002c2e:	2b02      	cmp	r3, #2
 8002c30:	d107      	bne.n	8002c42 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	695a      	ldr	r2, [r3, #20]
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f002 0202 	and.w	r2, r2, #2
 8002c40:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	4618      	mov	r0, r3
 8002c48:	f004 fffa 	bl	8007c40 <USB_ReadInterrupts>
 8002c4c:	4603      	mov	r3, r0
 8002c4e:	f003 0310 	and.w	r3, r3, #16
 8002c52:	2b10      	cmp	r3, #16
 8002c54:	d161      	bne.n	8002d1a <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	699a      	ldr	r2, [r3, #24]
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f022 0210 	bic.w	r2, r2, #16
 8002c64:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002c66:	6a3b      	ldr	r3, [r7, #32]
 8002c68:	6a1b      	ldr	r3, [r3, #32]
 8002c6a:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002c6c:	69bb      	ldr	r3, [r7, #24]
 8002c6e:	f003 020f 	and.w	r2, r3, #15
 8002c72:	4613      	mov	r3, r2
 8002c74:	00db      	lsls	r3, r3, #3
 8002c76:	4413      	add	r3, r2
 8002c78:	009b      	lsls	r3, r3, #2
 8002c7a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002c7e:	687a      	ldr	r2, [r7, #4]
 8002c80:	4413      	add	r3, r2
 8002c82:	3304      	adds	r3, #4
 8002c84:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002c86:	69bb      	ldr	r3, [r7, #24]
 8002c88:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8002c8c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002c90:	d124      	bne.n	8002cdc <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002c92:	69ba      	ldr	r2, [r7, #24]
 8002c94:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8002c98:	4013      	ands	r3, r2
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d035      	beq.n	8002d0a <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002c9e:	697b      	ldr	r3, [r7, #20]
 8002ca0:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002ca2:	69bb      	ldr	r3, [r7, #24]
 8002ca4:	091b      	lsrs	r3, r3, #4
 8002ca6:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002ca8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002cac:	b29b      	uxth	r3, r3
 8002cae:	461a      	mov	r2, r3
 8002cb0:	6a38      	ldr	r0, [r7, #32]
 8002cb2:	f004 fe31 	bl	8007918 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002cb6:	697b      	ldr	r3, [r7, #20]
 8002cb8:	68da      	ldr	r2, [r3, #12]
 8002cba:	69bb      	ldr	r3, [r7, #24]
 8002cbc:	091b      	lsrs	r3, r3, #4
 8002cbe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002cc2:	441a      	add	r2, r3
 8002cc4:	697b      	ldr	r3, [r7, #20]
 8002cc6:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002cc8:	697b      	ldr	r3, [r7, #20]
 8002cca:	695a      	ldr	r2, [r3, #20]
 8002ccc:	69bb      	ldr	r3, [r7, #24]
 8002cce:	091b      	lsrs	r3, r3, #4
 8002cd0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002cd4:	441a      	add	r2, r3
 8002cd6:	697b      	ldr	r3, [r7, #20]
 8002cd8:	615a      	str	r2, [r3, #20]
 8002cda:	e016      	b.n	8002d0a <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002cdc:	69bb      	ldr	r3, [r7, #24]
 8002cde:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8002ce2:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8002ce6:	d110      	bne.n	8002d0a <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002cee:	2208      	movs	r2, #8
 8002cf0:	4619      	mov	r1, r3
 8002cf2:	6a38      	ldr	r0, [r7, #32]
 8002cf4:	f004 fe10 	bl	8007918 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002cf8:	697b      	ldr	r3, [r7, #20]
 8002cfa:	695a      	ldr	r2, [r3, #20]
 8002cfc:	69bb      	ldr	r3, [r7, #24]
 8002cfe:	091b      	lsrs	r3, r3, #4
 8002d00:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002d04:	441a      	add	r2, r3
 8002d06:	697b      	ldr	r3, [r7, #20]
 8002d08:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	699a      	ldr	r2, [r3, #24]
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f042 0210 	orr.w	r2, r2, #16
 8002d18:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	4618      	mov	r0, r3
 8002d20:	f004 ff8e 	bl	8007c40 <USB_ReadInterrupts>
 8002d24:	4603      	mov	r3, r0
 8002d26:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002d2a:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8002d2e:	f040 80a7 	bne.w	8002e80 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002d32:	2300      	movs	r3, #0
 8002d34:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	f004 ff93 	bl	8007c66 <USB_ReadDevAllOutEpInterrupt>
 8002d40:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8002d42:	e099      	b.n	8002e78 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002d44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d46:	f003 0301 	and.w	r3, r3, #1
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	f000 808e 	beq.w	8002e6c <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d56:	b2d2      	uxtb	r2, r2
 8002d58:	4611      	mov	r1, r2
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	f004 ffb7 	bl	8007cce <USB_ReadDevOutEPInterrupt>
 8002d60:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002d62:	693b      	ldr	r3, [r7, #16]
 8002d64:	f003 0301 	and.w	r3, r3, #1
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d00c      	beq.n	8002d86 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002d6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d6e:	015a      	lsls	r2, r3, #5
 8002d70:	69fb      	ldr	r3, [r7, #28]
 8002d72:	4413      	add	r3, r2
 8002d74:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002d78:	461a      	mov	r2, r3
 8002d7a:	2301      	movs	r3, #1
 8002d7c:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002d7e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002d80:	6878      	ldr	r0, [r7, #4]
 8002d82:	f000 fe8b 	bl	8003a9c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002d86:	693b      	ldr	r3, [r7, #16]
 8002d88:	f003 0308 	and.w	r3, r3, #8
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d00c      	beq.n	8002daa <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002d90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d92:	015a      	lsls	r2, r3, #5
 8002d94:	69fb      	ldr	r3, [r7, #28]
 8002d96:	4413      	add	r3, r2
 8002d98:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002d9c:	461a      	mov	r2, r3
 8002d9e:	2308      	movs	r3, #8
 8002da0:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002da2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002da4:	6878      	ldr	r0, [r7, #4]
 8002da6:	f000 ff61 	bl	8003c6c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002daa:	693b      	ldr	r3, [r7, #16]
 8002dac:	f003 0310 	and.w	r3, r3, #16
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d008      	beq.n	8002dc6 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002db4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002db6:	015a      	lsls	r2, r3, #5
 8002db8:	69fb      	ldr	r3, [r7, #28]
 8002dba:	4413      	add	r3, r2
 8002dbc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002dc0:	461a      	mov	r2, r3
 8002dc2:	2310      	movs	r3, #16
 8002dc4:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002dc6:	693b      	ldr	r3, [r7, #16]
 8002dc8:	f003 0302 	and.w	r3, r3, #2
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d030      	beq.n	8002e32 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002dd0:	6a3b      	ldr	r3, [r7, #32]
 8002dd2:	695b      	ldr	r3, [r3, #20]
 8002dd4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002dd8:	2b80      	cmp	r3, #128	@ 0x80
 8002dda:	d109      	bne.n	8002df0 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002ddc:	69fb      	ldr	r3, [r7, #28]
 8002dde:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002de2:	685b      	ldr	r3, [r3, #4]
 8002de4:	69fa      	ldr	r2, [r7, #28]
 8002de6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002dea:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002dee:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002df0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002df2:	4613      	mov	r3, r2
 8002df4:	00db      	lsls	r3, r3, #3
 8002df6:	4413      	add	r3, r2
 8002df8:	009b      	lsls	r3, r3, #2
 8002dfa:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002dfe:	687a      	ldr	r2, [r7, #4]
 8002e00:	4413      	add	r3, r2
 8002e02:	3304      	adds	r3, #4
 8002e04:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002e06:	697b      	ldr	r3, [r7, #20]
 8002e08:	78db      	ldrb	r3, [r3, #3]
 8002e0a:	2b01      	cmp	r3, #1
 8002e0c:	d108      	bne.n	8002e20 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002e0e:	697b      	ldr	r3, [r7, #20]
 8002e10:	2200      	movs	r2, #0
 8002e12:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002e14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e16:	b2db      	uxtb	r3, r3
 8002e18:	4619      	mov	r1, r3
 8002e1a:	6878      	ldr	r0, [r7, #4]
 8002e1c:	f009 fd96 	bl	800c94c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002e20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e22:	015a      	lsls	r2, r3, #5
 8002e24:	69fb      	ldr	r3, [r7, #28]
 8002e26:	4413      	add	r3, r2
 8002e28:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002e2c:	461a      	mov	r2, r3
 8002e2e:	2302      	movs	r3, #2
 8002e30:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002e32:	693b      	ldr	r3, [r7, #16]
 8002e34:	f003 0320 	and.w	r3, r3, #32
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d008      	beq.n	8002e4e <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002e3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e3e:	015a      	lsls	r2, r3, #5
 8002e40:	69fb      	ldr	r3, [r7, #28]
 8002e42:	4413      	add	r3, r2
 8002e44:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002e48:	461a      	mov	r2, r3
 8002e4a:	2320      	movs	r3, #32
 8002e4c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002e4e:	693b      	ldr	r3, [r7, #16]
 8002e50:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d009      	beq.n	8002e6c <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002e58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e5a:	015a      	lsls	r2, r3, #5
 8002e5c:	69fb      	ldr	r3, [r7, #28]
 8002e5e:	4413      	add	r3, r2
 8002e60:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002e64:	461a      	mov	r2, r3
 8002e66:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002e6a:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002e6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e6e:	3301      	adds	r3, #1
 8002e70:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8002e72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e74:	085b      	lsrs	r3, r3, #1
 8002e76:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8002e78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	f47f af62 	bne.w	8002d44 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	4618      	mov	r0, r3
 8002e86:	f004 fedb 	bl	8007c40 <USB_ReadInterrupts>
 8002e8a:	4603      	mov	r3, r0
 8002e8c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002e90:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002e94:	f040 80db 	bne.w	800304e <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	f004 fefc 	bl	8007c9a <USB_ReadDevAllInEpInterrupt>
 8002ea2:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8002ea8:	e0cd      	b.n	8003046 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002eaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002eac:	f003 0301 	and.w	r3, r3, #1
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	f000 80c2 	beq.w	800303a <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ebc:	b2d2      	uxtb	r2, r2
 8002ebe:	4611      	mov	r1, r2
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	f004 ff22 	bl	8007d0a <USB_ReadDevInEPInterrupt>
 8002ec6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002ec8:	693b      	ldr	r3, [r7, #16]
 8002eca:	f003 0301 	and.w	r3, r3, #1
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d057      	beq.n	8002f82 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002ed2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ed4:	f003 030f 	and.w	r3, r3, #15
 8002ed8:	2201      	movs	r2, #1
 8002eda:	fa02 f303 	lsl.w	r3, r2, r3
 8002ede:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002ee0:	69fb      	ldr	r3, [r7, #28]
 8002ee2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002ee6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	43db      	mvns	r3, r3
 8002eec:	69f9      	ldr	r1, [r7, #28]
 8002eee:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8002ef2:	4013      	ands	r3, r2
 8002ef4:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002ef6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ef8:	015a      	lsls	r2, r3, #5
 8002efa:	69fb      	ldr	r3, [r7, #28]
 8002efc:	4413      	add	r3, r2
 8002efe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002f02:	461a      	mov	r2, r3
 8002f04:	2301      	movs	r3, #1
 8002f06:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	799b      	ldrb	r3, [r3, #6]
 8002f0c:	2b01      	cmp	r3, #1
 8002f0e:	d132      	bne.n	8002f76 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002f10:	6879      	ldr	r1, [r7, #4]
 8002f12:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f14:	4613      	mov	r3, r2
 8002f16:	00db      	lsls	r3, r3, #3
 8002f18:	4413      	add	r3, r2
 8002f1a:	009b      	lsls	r3, r3, #2
 8002f1c:	440b      	add	r3, r1
 8002f1e:	3320      	adds	r3, #32
 8002f20:	6819      	ldr	r1, [r3, #0]
 8002f22:	6878      	ldr	r0, [r7, #4]
 8002f24:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f26:	4613      	mov	r3, r2
 8002f28:	00db      	lsls	r3, r3, #3
 8002f2a:	4413      	add	r3, r2
 8002f2c:	009b      	lsls	r3, r3, #2
 8002f2e:	4403      	add	r3, r0
 8002f30:	331c      	adds	r3, #28
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	4419      	add	r1, r3
 8002f36:	6878      	ldr	r0, [r7, #4]
 8002f38:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f3a:	4613      	mov	r3, r2
 8002f3c:	00db      	lsls	r3, r3, #3
 8002f3e:	4413      	add	r3, r2
 8002f40:	009b      	lsls	r3, r3, #2
 8002f42:	4403      	add	r3, r0
 8002f44:	3320      	adds	r3, #32
 8002f46:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002f48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d113      	bne.n	8002f76 <HAL_PCD_IRQHandler+0x3a2>
 8002f4e:	6879      	ldr	r1, [r7, #4]
 8002f50:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f52:	4613      	mov	r3, r2
 8002f54:	00db      	lsls	r3, r3, #3
 8002f56:	4413      	add	r3, r2
 8002f58:	009b      	lsls	r3, r3, #2
 8002f5a:	440b      	add	r3, r1
 8002f5c:	3324      	adds	r3, #36	@ 0x24
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d108      	bne.n	8002f76 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6818      	ldr	r0, [r3, #0]
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002f6e:	461a      	mov	r2, r3
 8002f70:	2101      	movs	r1, #1
 8002f72:	f004 ff29 	bl	8007dc8 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002f76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f78:	b2db      	uxtb	r3, r3
 8002f7a:	4619      	mov	r1, r3
 8002f7c:	6878      	ldr	r0, [r7, #4]
 8002f7e:	f009 fc6a 	bl	800c856 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002f82:	693b      	ldr	r3, [r7, #16]
 8002f84:	f003 0308 	and.w	r3, r3, #8
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d008      	beq.n	8002f9e <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002f8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f8e:	015a      	lsls	r2, r3, #5
 8002f90:	69fb      	ldr	r3, [r7, #28]
 8002f92:	4413      	add	r3, r2
 8002f94:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002f98:	461a      	mov	r2, r3
 8002f9a:	2308      	movs	r3, #8
 8002f9c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002f9e:	693b      	ldr	r3, [r7, #16]
 8002fa0:	f003 0310 	and.w	r3, r3, #16
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d008      	beq.n	8002fba <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002fa8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002faa:	015a      	lsls	r2, r3, #5
 8002fac:	69fb      	ldr	r3, [r7, #28]
 8002fae:	4413      	add	r3, r2
 8002fb0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002fb4:	461a      	mov	r2, r3
 8002fb6:	2310      	movs	r3, #16
 8002fb8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002fba:	693b      	ldr	r3, [r7, #16]
 8002fbc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d008      	beq.n	8002fd6 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002fc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fc6:	015a      	lsls	r2, r3, #5
 8002fc8:	69fb      	ldr	r3, [r7, #28]
 8002fca:	4413      	add	r3, r2
 8002fcc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002fd0:	461a      	mov	r2, r3
 8002fd2:	2340      	movs	r3, #64	@ 0x40
 8002fd4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002fd6:	693b      	ldr	r3, [r7, #16]
 8002fd8:	f003 0302 	and.w	r3, r3, #2
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d023      	beq.n	8003028 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002fe0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002fe2:	6a38      	ldr	r0, [r7, #32]
 8002fe4:	f003 ff10 	bl	8006e08 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002fe8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002fea:	4613      	mov	r3, r2
 8002fec:	00db      	lsls	r3, r3, #3
 8002fee:	4413      	add	r3, r2
 8002ff0:	009b      	lsls	r3, r3, #2
 8002ff2:	3310      	adds	r3, #16
 8002ff4:	687a      	ldr	r2, [r7, #4]
 8002ff6:	4413      	add	r3, r2
 8002ff8:	3304      	adds	r3, #4
 8002ffa:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002ffc:	697b      	ldr	r3, [r7, #20]
 8002ffe:	78db      	ldrb	r3, [r3, #3]
 8003000:	2b01      	cmp	r3, #1
 8003002:	d108      	bne.n	8003016 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8003004:	697b      	ldr	r3, [r7, #20]
 8003006:	2200      	movs	r2, #0
 8003008:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800300a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800300c:	b2db      	uxtb	r3, r3
 800300e:	4619      	mov	r1, r3
 8003010:	6878      	ldr	r0, [r7, #4]
 8003012:	f009 fcad 	bl	800c970 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003016:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003018:	015a      	lsls	r2, r3, #5
 800301a:	69fb      	ldr	r3, [r7, #28]
 800301c:	4413      	add	r3, r2
 800301e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003022:	461a      	mov	r2, r3
 8003024:	2302      	movs	r3, #2
 8003026:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003028:	693b      	ldr	r3, [r7, #16]
 800302a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800302e:	2b00      	cmp	r3, #0
 8003030:	d003      	beq.n	800303a <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003032:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003034:	6878      	ldr	r0, [r7, #4]
 8003036:	f000 fca5 	bl	8003984 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800303a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800303c:	3301      	adds	r3, #1
 800303e:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8003040:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003042:	085b      	lsrs	r3, r3, #1
 8003044:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8003046:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003048:	2b00      	cmp	r3, #0
 800304a:	f47f af2e 	bne.w	8002eaa <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	4618      	mov	r0, r3
 8003054:	f004 fdf4 	bl	8007c40 <USB_ReadInterrupts>
 8003058:	4603      	mov	r3, r0
 800305a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800305e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003062:	d122      	bne.n	80030aa <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003064:	69fb      	ldr	r3, [r7, #28]
 8003066:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800306a:	685b      	ldr	r3, [r3, #4]
 800306c:	69fa      	ldr	r2, [r7, #28]
 800306e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003072:	f023 0301 	bic.w	r3, r3, #1
 8003076:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 800307e:	2b01      	cmp	r3, #1
 8003080:	d108      	bne.n	8003094 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	2200      	movs	r2, #0
 8003086:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800308a:	2100      	movs	r1, #0
 800308c:	6878      	ldr	r0, [r7, #4]
 800308e:	f000 fe8b 	bl	8003da8 <HAL_PCDEx_LPM_Callback>
 8003092:	e002      	b.n	800309a <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003094:	6878      	ldr	r0, [r7, #4]
 8003096:	f009 fc4b 	bl	800c930 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	695a      	ldr	r2, [r3, #20]
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 80030a8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	4618      	mov	r0, r3
 80030b0:	f004 fdc6 	bl	8007c40 <USB_ReadInterrupts>
 80030b4:	4603      	mov	r3, r0
 80030b6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80030ba:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80030be:	d112      	bne.n	80030e6 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80030c0:	69fb      	ldr	r3, [r7, #28]
 80030c2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80030c6:	689b      	ldr	r3, [r3, #8]
 80030c8:	f003 0301 	and.w	r3, r3, #1
 80030cc:	2b01      	cmp	r3, #1
 80030ce:	d102      	bne.n	80030d6 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80030d0:	6878      	ldr	r0, [r7, #4]
 80030d2:	f009 fc07 	bl	800c8e4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	695a      	ldr	r2, [r3, #20]
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 80030e4:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	4618      	mov	r0, r3
 80030ec:	f004 fda8 	bl	8007c40 <USB_ReadInterrupts>
 80030f0:	4603      	mov	r3, r0
 80030f2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80030f6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80030fa:	f040 80b7 	bne.w	800326c <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80030fe:	69fb      	ldr	r3, [r7, #28]
 8003100:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003104:	685b      	ldr	r3, [r3, #4]
 8003106:	69fa      	ldr	r2, [r7, #28]
 8003108:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800310c:	f023 0301 	bic.w	r3, r3, #1
 8003110:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	2110      	movs	r1, #16
 8003118:	4618      	mov	r0, r3
 800311a:	f003 fe75 	bl	8006e08 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800311e:	2300      	movs	r3, #0
 8003120:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003122:	e046      	b.n	80031b2 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003124:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003126:	015a      	lsls	r2, r3, #5
 8003128:	69fb      	ldr	r3, [r7, #28]
 800312a:	4413      	add	r3, r2
 800312c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003130:	461a      	mov	r2, r3
 8003132:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003136:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003138:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800313a:	015a      	lsls	r2, r3, #5
 800313c:	69fb      	ldr	r3, [r7, #28]
 800313e:	4413      	add	r3, r2
 8003140:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003148:	0151      	lsls	r1, r2, #5
 800314a:	69fa      	ldr	r2, [r7, #28]
 800314c:	440a      	add	r2, r1
 800314e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003152:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003156:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003158:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800315a:	015a      	lsls	r2, r3, #5
 800315c:	69fb      	ldr	r3, [r7, #28]
 800315e:	4413      	add	r3, r2
 8003160:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003164:	461a      	mov	r2, r3
 8003166:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800316a:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800316c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800316e:	015a      	lsls	r2, r3, #5
 8003170:	69fb      	ldr	r3, [r7, #28]
 8003172:	4413      	add	r3, r2
 8003174:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800317c:	0151      	lsls	r1, r2, #5
 800317e:	69fa      	ldr	r2, [r7, #28]
 8003180:	440a      	add	r2, r1
 8003182:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003186:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800318a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800318c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800318e:	015a      	lsls	r2, r3, #5
 8003190:	69fb      	ldr	r3, [r7, #28]
 8003192:	4413      	add	r3, r2
 8003194:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800319c:	0151      	lsls	r1, r2, #5
 800319e:	69fa      	ldr	r2, [r7, #28]
 80031a0:	440a      	add	r2, r1
 80031a2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80031a6:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80031aa:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80031ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80031ae:	3301      	adds	r3, #1
 80031b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	791b      	ldrb	r3, [r3, #4]
 80031b6:	461a      	mov	r2, r3
 80031b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80031ba:	4293      	cmp	r3, r2
 80031bc:	d3b2      	bcc.n	8003124 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80031be:	69fb      	ldr	r3, [r7, #28]
 80031c0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80031c4:	69db      	ldr	r3, [r3, #28]
 80031c6:	69fa      	ldr	r2, [r7, #28]
 80031c8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80031cc:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 80031d0:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	7bdb      	ldrb	r3, [r3, #15]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d016      	beq.n	8003208 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80031da:	69fb      	ldr	r3, [r7, #28]
 80031dc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80031e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80031e4:	69fa      	ldr	r2, [r7, #28]
 80031e6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80031ea:	f043 030b 	orr.w	r3, r3, #11
 80031ee:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80031f2:	69fb      	ldr	r3, [r7, #28]
 80031f4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80031f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031fa:	69fa      	ldr	r2, [r7, #28]
 80031fc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003200:	f043 030b 	orr.w	r3, r3, #11
 8003204:	6453      	str	r3, [r2, #68]	@ 0x44
 8003206:	e015      	b.n	8003234 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003208:	69fb      	ldr	r3, [r7, #28]
 800320a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800320e:	695b      	ldr	r3, [r3, #20]
 8003210:	69fa      	ldr	r2, [r7, #28]
 8003212:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003216:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800321a:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 800321e:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003220:	69fb      	ldr	r3, [r7, #28]
 8003222:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003226:	691b      	ldr	r3, [r3, #16]
 8003228:	69fa      	ldr	r2, [r7, #28]
 800322a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800322e:	f043 030b 	orr.w	r3, r3, #11
 8003232:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003234:	69fb      	ldr	r3, [r7, #28]
 8003236:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	69fa      	ldr	r2, [r7, #28]
 800323e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003242:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8003246:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6818      	ldr	r0, [r3, #0]
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003256:	461a      	mov	r2, r3
 8003258:	f004 fdb6 	bl	8007dc8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	695a      	ldr	r2, [r3, #20]
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 800326a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	4618      	mov	r0, r3
 8003272:	f004 fce5 	bl	8007c40 <USB_ReadInterrupts>
 8003276:	4603      	mov	r3, r0
 8003278:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800327c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003280:	d123      	bne.n	80032ca <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	4618      	mov	r0, r3
 8003288:	f004 fd7b 	bl	8007d82 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	4618      	mov	r0, r3
 8003292:	f003 fe32 	bl	8006efa <USB_GetDevSpeed>
 8003296:	4603      	mov	r3, r0
 8003298:	461a      	mov	r2, r3
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681c      	ldr	r4, [r3, #0]
 80032a2:	f001 f9b1 	bl	8004608 <HAL_RCC_GetHCLKFreq>
 80032a6:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80032ac:	461a      	mov	r2, r3
 80032ae:	4620      	mov	r0, r4
 80032b0:	f003 fb36 	bl	8006920 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80032b4:	6878      	ldr	r0, [r7, #4]
 80032b6:	f009 faf6 	bl	800c8a6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	695a      	ldr	r2, [r3, #20]
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 80032c8:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	4618      	mov	r0, r3
 80032d0:	f004 fcb6 	bl	8007c40 <USB_ReadInterrupts>
 80032d4:	4603      	mov	r3, r0
 80032d6:	f003 0308 	and.w	r3, r3, #8
 80032da:	2b08      	cmp	r3, #8
 80032dc:	d10a      	bne.n	80032f4 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80032de:	6878      	ldr	r0, [r7, #4]
 80032e0:	f009 fad3 	bl	800c88a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	695a      	ldr	r2, [r3, #20]
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f002 0208 	and.w	r2, r2, #8
 80032f2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	4618      	mov	r0, r3
 80032fa:	f004 fca1 	bl	8007c40 <USB_ReadInterrupts>
 80032fe:	4603      	mov	r3, r0
 8003300:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003304:	2b80      	cmp	r3, #128	@ 0x80
 8003306:	d123      	bne.n	8003350 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8003308:	6a3b      	ldr	r3, [r7, #32]
 800330a:	699b      	ldr	r3, [r3, #24]
 800330c:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003310:	6a3b      	ldr	r3, [r7, #32]
 8003312:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003314:	2301      	movs	r3, #1
 8003316:	627b      	str	r3, [r7, #36]	@ 0x24
 8003318:	e014      	b.n	8003344 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800331a:	6879      	ldr	r1, [r7, #4]
 800331c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800331e:	4613      	mov	r3, r2
 8003320:	00db      	lsls	r3, r3, #3
 8003322:	4413      	add	r3, r2
 8003324:	009b      	lsls	r3, r3, #2
 8003326:	440b      	add	r3, r1
 8003328:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800332c:	781b      	ldrb	r3, [r3, #0]
 800332e:	2b01      	cmp	r3, #1
 8003330:	d105      	bne.n	800333e <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8003332:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003334:	b2db      	uxtb	r3, r3
 8003336:	4619      	mov	r1, r3
 8003338:	6878      	ldr	r0, [r7, #4]
 800333a:	f000 faf2 	bl	8003922 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800333e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003340:	3301      	adds	r3, #1
 8003342:	627b      	str	r3, [r7, #36]	@ 0x24
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	791b      	ldrb	r3, [r3, #4]
 8003348:	461a      	mov	r2, r3
 800334a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800334c:	4293      	cmp	r3, r2
 800334e:	d3e4      	bcc.n	800331a <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	4618      	mov	r0, r3
 8003356:	f004 fc73 	bl	8007c40 <USB_ReadInterrupts>
 800335a:	4603      	mov	r3, r0
 800335c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003360:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003364:	d13c      	bne.n	80033e0 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003366:	2301      	movs	r3, #1
 8003368:	627b      	str	r3, [r7, #36]	@ 0x24
 800336a:	e02b      	b.n	80033c4 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800336c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800336e:	015a      	lsls	r2, r3, #5
 8003370:	69fb      	ldr	r3, [r7, #28]
 8003372:	4413      	add	r3, r2
 8003374:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800337c:	6879      	ldr	r1, [r7, #4]
 800337e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003380:	4613      	mov	r3, r2
 8003382:	00db      	lsls	r3, r3, #3
 8003384:	4413      	add	r3, r2
 8003386:	009b      	lsls	r3, r3, #2
 8003388:	440b      	add	r3, r1
 800338a:	3318      	adds	r3, #24
 800338c:	781b      	ldrb	r3, [r3, #0]
 800338e:	2b01      	cmp	r3, #1
 8003390:	d115      	bne.n	80033be <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8003392:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003394:	2b00      	cmp	r3, #0
 8003396:	da12      	bge.n	80033be <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003398:	6879      	ldr	r1, [r7, #4]
 800339a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800339c:	4613      	mov	r3, r2
 800339e:	00db      	lsls	r3, r3, #3
 80033a0:	4413      	add	r3, r2
 80033a2:	009b      	lsls	r3, r3, #2
 80033a4:	440b      	add	r3, r1
 80033a6:	3317      	adds	r3, #23
 80033a8:	2201      	movs	r2, #1
 80033aa:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80033ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033ae:	b2db      	uxtb	r3, r3
 80033b0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80033b4:	b2db      	uxtb	r3, r3
 80033b6:	4619      	mov	r1, r3
 80033b8:	6878      	ldr	r0, [r7, #4]
 80033ba:	f000 fab2 	bl	8003922 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80033be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033c0:	3301      	adds	r3, #1
 80033c2:	627b      	str	r3, [r7, #36]	@ 0x24
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	791b      	ldrb	r3, [r3, #4]
 80033c8:	461a      	mov	r2, r3
 80033ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033cc:	4293      	cmp	r3, r2
 80033ce:	d3cd      	bcc.n	800336c <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	695a      	ldr	r2, [r3, #20]
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 80033de:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	4618      	mov	r0, r3
 80033e6:	f004 fc2b 	bl	8007c40 <USB_ReadInterrupts>
 80033ea:	4603      	mov	r3, r0
 80033ec:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80033f0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80033f4:	d156      	bne.n	80034a4 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80033f6:	2301      	movs	r3, #1
 80033f8:	627b      	str	r3, [r7, #36]	@ 0x24
 80033fa:	e045      	b.n	8003488 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80033fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033fe:	015a      	lsls	r2, r3, #5
 8003400:	69fb      	ldr	r3, [r7, #28]
 8003402:	4413      	add	r3, r2
 8003404:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800340c:	6879      	ldr	r1, [r7, #4]
 800340e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003410:	4613      	mov	r3, r2
 8003412:	00db      	lsls	r3, r3, #3
 8003414:	4413      	add	r3, r2
 8003416:	009b      	lsls	r3, r3, #2
 8003418:	440b      	add	r3, r1
 800341a:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800341e:	781b      	ldrb	r3, [r3, #0]
 8003420:	2b01      	cmp	r3, #1
 8003422:	d12e      	bne.n	8003482 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003424:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003426:	2b00      	cmp	r3, #0
 8003428:	da2b      	bge.n	8003482 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800342a:	69bb      	ldr	r3, [r7, #24]
 800342c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8003436:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800343a:	429a      	cmp	r2, r3
 800343c:	d121      	bne.n	8003482 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800343e:	6879      	ldr	r1, [r7, #4]
 8003440:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003442:	4613      	mov	r3, r2
 8003444:	00db      	lsls	r3, r3, #3
 8003446:	4413      	add	r3, r2
 8003448:	009b      	lsls	r3, r3, #2
 800344a:	440b      	add	r3, r1
 800344c:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8003450:	2201      	movs	r2, #1
 8003452:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8003454:	6a3b      	ldr	r3, [r7, #32]
 8003456:	699b      	ldr	r3, [r3, #24]
 8003458:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800345c:	6a3b      	ldr	r3, [r7, #32]
 800345e:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8003460:	6a3b      	ldr	r3, [r7, #32]
 8003462:	695b      	ldr	r3, [r3, #20]
 8003464:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003468:	2b00      	cmp	r3, #0
 800346a:	d10a      	bne.n	8003482 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800346c:	69fb      	ldr	r3, [r7, #28]
 800346e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003472:	685b      	ldr	r3, [r3, #4]
 8003474:	69fa      	ldr	r2, [r7, #28]
 8003476:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800347a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800347e:	6053      	str	r3, [r2, #4]
            break;
 8003480:	e008      	b.n	8003494 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003482:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003484:	3301      	adds	r3, #1
 8003486:	627b      	str	r3, [r7, #36]	@ 0x24
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	791b      	ldrb	r3, [r3, #4]
 800348c:	461a      	mov	r2, r3
 800348e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003490:	4293      	cmp	r3, r2
 8003492:	d3b3      	bcc.n	80033fc <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	695a      	ldr	r2, [r3, #20]
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 80034a2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	4618      	mov	r0, r3
 80034aa:	f004 fbc9 	bl	8007c40 <USB_ReadInterrupts>
 80034ae:	4603      	mov	r3, r0
 80034b0:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80034b4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80034b8:	d10a      	bne.n	80034d0 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80034ba:	6878      	ldr	r0, [r7, #4]
 80034bc:	f009 fa6a 	bl	800c994 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	695a      	ldr	r2, [r3, #20]
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 80034ce:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	4618      	mov	r0, r3
 80034d6:	f004 fbb3 	bl	8007c40 <USB_ReadInterrupts>
 80034da:	4603      	mov	r3, r0
 80034dc:	f003 0304 	and.w	r3, r3, #4
 80034e0:	2b04      	cmp	r3, #4
 80034e2:	d115      	bne.n	8003510 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	685b      	ldr	r3, [r3, #4]
 80034ea:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80034ec:	69bb      	ldr	r3, [r7, #24]
 80034ee:	f003 0304 	and.w	r3, r3, #4
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d002      	beq.n	80034fc <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80034f6:	6878      	ldr	r0, [r7, #4]
 80034f8:	f009 fa5a 	bl	800c9b0 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	6859      	ldr	r1, [r3, #4]
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	69ba      	ldr	r2, [r7, #24]
 8003508:	430a      	orrs	r2, r1
 800350a:	605a      	str	r2, [r3, #4]
 800350c:	e000      	b.n	8003510 <HAL_PCD_IRQHandler+0x93c>
      return;
 800350e:	bf00      	nop
    }
  }
}
 8003510:	3734      	adds	r7, #52	@ 0x34
 8003512:	46bd      	mov	sp, r7
 8003514:	bd90      	pop	{r4, r7, pc}

08003516 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003516:	b580      	push	{r7, lr}
 8003518:	b082      	sub	sp, #8
 800351a:	af00      	add	r7, sp, #0
 800351c:	6078      	str	r0, [r7, #4]
 800351e:	460b      	mov	r3, r1
 8003520:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003528:	2b01      	cmp	r3, #1
 800352a:	d101      	bne.n	8003530 <HAL_PCD_SetAddress+0x1a>
 800352c:	2302      	movs	r3, #2
 800352e:	e012      	b.n	8003556 <HAL_PCD_SetAddress+0x40>
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2201      	movs	r2, #1
 8003534:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	78fa      	ldrb	r2, [r7, #3]
 800353c:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	78fa      	ldrb	r2, [r7, #3]
 8003544:	4611      	mov	r1, r2
 8003546:	4618      	mov	r0, r3
 8003548:	f004 fb12 	bl	8007b70 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2200      	movs	r2, #0
 8003550:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003554:	2300      	movs	r3, #0
}
 8003556:	4618      	mov	r0, r3
 8003558:	3708      	adds	r7, #8
 800355a:	46bd      	mov	sp, r7
 800355c:	bd80      	pop	{r7, pc}

0800355e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800355e:	b580      	push	{r7, lr}
 8003560:	b084      	sub	sp, #16
 8003562:	af00      	add	r7, sp, #0
 8003564:	6078      	str	r0, [r7, #4]
 8003566:	4608      	mov	r0, r1
 8003568:	4611      	mov	r1, r2
 800356a:	461a      	mov	r2, r3
 800356c:	4603      	mov	r3, r0
 800356e:	70fb      	strb	r3, [r7, #3]
 8003570:	460b      	mov	r3, r1
 8003572:	803b      	strh	r3, [r7, #0]
 8003574:	4613      	mov	r3, r2
 8003576:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8003578:	2300      	movs	r3, #0
 800357a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800357c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003580:	2b00      	cmp	r3, #0
 8003582:	da0f      	bge.n	80035a4 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003584:	78fb      	ldrb	r3, [r7, #3]
 8003586:	f003 020f 	and.w	r2, r3, #15
 800358a:	4613      	mov	r3, r2
 800358c:	00db      	lsls	r3, r3, #3
 800358e:	4413      	add	r3, r2
 8003590:	009b      	lsls	r3, r3, #2
 8003592:	3310      	adds	r3, #16
 8003594:	687a      	ldr	r2, [r7, #4]
 8003596:	4413      	add	r3, r2
 8003598:	3304      	adds	r3, #4
 800359a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	2201      	movs	r2, #1
 80035a0:	705a      	strb	r2, [r3, #1]
 80035a2:	e00f      	b.n	80035c4 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80035a4:	78fb      	ldrb	r3, [r7, #3]
 80035a6:	f003 020f 	and.w	r2, r3, #15
 80035aa:	4613      	mov	r3, r2
 80035ac:	00db      	lsls	r3, r3, #3
 80035ae:	4413      	add	r3, r2
 80035b0:	009b      	lsls	r3, r3, #2
 80035b2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80035b6:	687a      	ldr	r2, [r7, #4]
 80035b8:	4413      	add	r3, r2
 80035ba:	3304      	adds	r3, #4
 80035bc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	2200      	movs	r2, #0
 80035c2:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80035c4:	78fb      	ldrb	r3, [r7, #3]
 80035c6:	f003 030f 	and.w	r3, r3, #15
 80035ca:	b2da      	uxtb	r2, r3
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 80035d0:	883b      	ldrh	r3, [r7, #0]
 80035d2:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	78ba      	ldrb	r2, [r7, #2]
 80035de:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	785b      	ldrb	r3, [r3, #1]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d004      	beq.n	80035f2 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	781b      	ldrb	r3, [r3, #0]
 80035ec:	461a      	mov	r2, r3
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80035f2:	78bb      	ldrb	r3, [r7, #2]
 80035f4:	2b02      	cmp	r3, #2
 80035f6:	d102      	bne.n	80035fe <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	2200      	movs	r2, #0
 80035fc:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003604:	2b01      	cmp	r3, #1
 8003606:	d101      	bne.n	800360c <HAL_PCD_EP_Open+0xae>
 8003608:	2302      	movs	r3, #2
 800360a:	e00e      	b.n	800362a <HAL_PCD_EP_Open+0xcc>
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2201      	movs	r2, #1
 8003610:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	68f9      	ldr	r1, [r7, #12]
 800361a:	4618      	mov	r0, r3
 800361c:	f003 fc92 	bl	8006f44 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2200      	movs	r2, #0
 8003624:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8003628:	7afb      	ldrb	r3, [r7, #11]
}
 800362a:	4618      	mov	r0, r3
 800362c:	3710      	adds	r7, #16
 800362e:	46bd      	mov	sp, r7
 8003630:	bd80      	pop	{r7, pc}

08003632 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003632:	b580      	push	{r7, lr}
 8003634:	b084      	sub	sp, #16
 8003636:	af00      	add	r7, sp, #0
 8003638:	6078      	str	r0, [r7, #4]
 800363a:	460b      	mov	r3, r1
 800363c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800363e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003642:	2b00      	cmp	r3, #0
 8003644:	da0f      	bge.n	8003666 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003646:	78fb      	ldrb	r3, [r7, #3]
 8003648:	f003 020f 	and.w	r2, r3, #15
 800364c:	4613      	mov	r3, r2
 800364e:	00db      	lsls	r3, r3, #3
 8003650:	4413      	add	r3, r2
 8003652:	009b      	lsls	r3, r3, #2
 8003654:	3310      	adds	r3, #16
 8003656:	687a      	ldr	r2, [r7, #4]
 8003658:	4413      	add	r3, r2
 800365a:	3304      	adds	r3, #4
 800365c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	2201      	movs	r2, #1
 8003662:	705a      	strb	r2, [r3, #1]
 8003664:	e00f      	b.n	8003686 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003666:	78fb      	ldrb	r3, [r7, #3]
 8003668:	f003 020f 	and.w	r2, r3, #15
 800366c:	4613      	mov	r3, r2
 800366e:	00db      	lsls	r3, r3, #3
 8003670:	4413      	add	r3, r2
 8003672:	009b      	lsls	r3, r3, #2
 8003674:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003678:	687a      	ldr	r2, [r7, #4]
 800367a:	4413      	add	r3, r2
 800367c:	3304      	adds	r3, #4
 800367e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	2200      	movs	r2, #0
 8003684:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8003686:	78fb      	ldrb	r3, [r7, #3]
 8003688:	f003 030f 	and.w	r3, r3, #15
 800368c:	b2da      	uxtb	r2, r3
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003698:	2b01      	cmp	r3, #1
 800369a:	d101      	bne.n	80036a0 <HAL_PCD_EP_Close+0x6e>
 800369c:	2302      	movs	r3, #2
 800369e:	e00e      	b.n	80036be <HAL_PCD_EP_Close+0x8c>
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2201      	movs	r2, #1
 80036a4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	68f9      	ldr	r1, [r7, #12]
 80036ae:	4618      	mov	r0, r3
 80036b0:	f003 fcd0 	bl	8007054 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2200      	movs	r2, #0
 80036b8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 80036bc:	2300      	movs	r3, #0
}
 80036be:	4618      	mov	r0, r3
 80036c0:	3710      	adds	r7, #16
 80036c2:	46bd      	mov	sp, r7
 80036c4:	bd80      	pop	{r7, pc}

080036c6 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80036c6:	b580      	push	{r7, lr}
 80036c8:	b086      	sub	sp, #24
 80036ca:	af00      	add	r7, sp, #0
 80036cc:	60f8      	str	r0, [r7, #12]
 80036ce:	607a      	str	r2, [r7, #4]
 80036d0:	603b      	str	r3, [r7, #0]
 80036d2:	460b      	mov	r3, r1
 80036d4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80036d6:	7afb      	ldrb	r3, [r7, #11]
 80036d8:	f003 020f 	and.w	r2, r3, #15
 80036dc:	4613      	mov	r3, r2
 80036de:	00db      	lsls	r3, r3, #3
 80036e0:	4413      	add	r3, r2
 80036e2:	009b      	lsls	r3, r3, #2
 80036e4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80036e8:	68fa      	ldr	r2, [r7, #12]
 80036ea:	4413      	add	r3, r2
 80036ec:	3304      	adds	r3, #4
 80036ee:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80036f0:	697b      	ldr	r3, [r7, #20]
 80036f2:	687a      	ldr	r2, [r7, #4]
 80036f4:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80036f6:	697b      	ldr	r3, [r7, #20]
 80036f8:	683a      	ldr	r2, [r7, #0]
 80036fa:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80036fc:	697b      	ldr	r3, [r7, #20]
 80036fe:	2200      	movs	r2, #0
 8003700:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8003702:	697b      	ldr	r3, [r7, #20]
 8003704:	2200      	movs	r2, #0
 8003706:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003708:	7afb      	ldrb	r3, [r7, #11]
 800370a:	f003 030f 	and.w	r3, r3, #15
 800370e:	b2da      	uxtb	r2, r3
 8003710:	697b      	ldr	r3, [r7, #20]
 8003712:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	799b      	ldrb	r3, [r3, #6]
 8003718:	2b01      	cmp	r3, #1
 800371a:	d102      	bne.n	8003722 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800371c:	687a      	ldr	r2, [r7, #4]
 800371e:	697b      	ldr	r3, [r7, #20]
 8003720:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	6818      	ldr	r0, [r3, #0]
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	799b      	ldrb	r3, [r3, #6]
 800372a:	461a      	mov	r2, r3
 800372c:	6979      	ldr	r1, [r7, #20]
 800372e:	f003 fd6d 	bl	800720c <USB_EPStartXfer>

  return HAL_OK;
 8003732:	2300      	movs	r3, #0
}
 8003734:	4618      	mov	r0, r3
 8003736:	3718      	adds	r7, #24
 8003738:	46bd      	mov	sp, r7
 800373a:	bd80      	pop	{r7, pc}

0800373c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800373c:	b580      	push	{r7, lr}
 800373e:	b086      	sub	sp, #24
 8003740:	af00      	add	r7, sp, #0
 8003742:	60f8      	str	r0, [r7, #12]
 8003744:	607a      	str	r2, [r7, #4]
 8003746:	603b      	str	r3, [r7, #0]
 8003748:	460b      	mov	r3, r1
 800374a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800374c:	7afb      	ldrb	r3, [r7, #11]
 800374e:	f003 020f 	and.w	r2, r3, #15
 8003752:	4613      	mov	r3, r2
 8003754:	00db      	lsls	r3, r3, #3
 8003756:	4413      	add	r3, r2
 8003758:	009b      	lsls	r3, r3, #2
 800375a:	3310      	adds	r3, #16
 800375c:	68fa      	ldr	r2, [r7, #12]
 800375e:	4413      	add	r3, r2
 8003760:	3304      	adds	r3, #4
 8003762:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003764:	697b      	ldr	r3, [r7, #20]
 8003766:	687a      	ldr	r2, [r7, #4]
 8003768:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800376a:	697b      	ldr	r3, [r7, #20]
 800376c:	683a      	ldr	r2, [r7, #0]
 800376e:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8003770:	697b      	ldr	r3, [r7, #20]
 8003772:	2200      	movs	r2, #0
 8003774:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8003776:	697b      	ldr	r3, [r7, #20]
 8003778:	2201      	movs	r2, #1
 800377a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800377c:	7afb      	ldrb	r3, [r7, #11]
 800377e:	f003 030f 	and.w	r3, r3, #15
 8003782:	b2da      	uxtb	r2, r3
 8003784:	697b      	ldr	r3, [r7, #20]
 8003786:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	799b      	ldrb	r3, [r3, #6]
 800378c:	2b01      	cmp	r3, #1
 800378e:	d102      	bne.n	8003796 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003790:	687a      	ldr	r2, [r7, #4]
 8003792:	697b      	ldr	r3, [r7, #20]
 8003794:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	6818      	ldr	r0, [r3, #0]
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	799b      	ldrb	r3, [r3, #6]
 800379e:	461a      	mov	r2, r3
 80037a0:	6979      	ldr	r1, [r7, #20]
 80037a2:	f003 fd33 	bl	800720c <USB_EPStartXfer>

  return HAL_OK;
 80037a6:	2300      	movs	r3, #0
}
 80037a8:	4618      	mov	r0, r3
 80037aa:	3718      	adds	r7, #24
 80037ac:	46bd      	mov	sp, r7
 80037ae:	bd80      	pop	{r7, pc}

080037b0 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b084      	sub	sp, #16
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
 80037b8:	460b      	mov	r3, r1
 80037ba:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80037bc:	78fb      	ldrb	r3, [r7, #3]
 80037be:	f003 030f 	and.w	r3, r3, #15
 80037c2:	687a      	ldr	r2, [r7, #4]
 80037c4:	7912      	ldrb	r2, [r2, #4]
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d901      	bls.n	80037ce <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80037ca:	2301      	movs	r3, #1
 80037cc:	e04f      	b.n	800386e <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80037ce:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	da0f      	bge.n	80037f6 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80037d6:	78fb      	ldrb	r3, [r7, #3]
 80037d8:	f003 020f 	and.w	r2, r3, #15
 80037dc:	4613      	mov	r3, r2
 80037de:	00db      	lsls	r3, r3, #3
 80037e0:	4413      	add	r3, r2
 80037e2:	009b      	lsls	r3, r3, #2
 80037e4:	3310      	adds	r3, #16
 80037e6:	687a      	ldr	r2, [r7, #4]
 80037e8:	4413      	add	r3, r2
 80037ea:	3304      	adds	r3, #4
 80037ec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	2201      	movs	r2, #1
 80037f2:	705a      	strb	r2, [r3, #1]
 80037f4:	e00d      	b.n	8003812 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80037f6:	78fa      	ldrb	r2, [r7, #3]
 80037f8:	4613      	mov	r3, r2
 80037fa:	00db      	lsls	r3, r3, #3
 80037fc:	4413      	add	r3, r2
 80037fe:	009b      	lsls	r3, r3, #2
 8003800:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003804:	687a      	ldr	r2, [r7, #4]
 8003806:	4413      	add	r3, r2
 8003808:	3304      	adds	r3, #4
 800380a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	2200      	movs	r2, #0
 8003810:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	2201      	movs	r2, #1
 8003816:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003818:	78fb      	ldrb	r3, [r7, #3]
 800381a:	f003 030f 	and.w	r3, r3, #15
 800381e:	b2da      	uxtb	r2, r3
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800382a:	2b01      	cmp	r3, #1
 800382c:	d101      	bne.n	8003832 <HAL_PCD_EP_SetStall+0x82>
 800382e:	2302      	movs	r3, #2
 8003830:	e01d      	b.n	800386e <HAL_PCD_EP_SetStall+0xbe>
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	2201      	movs	r2, #1
 8003836:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	68f9      	ldr	r1, [r7, #12]
 8003840:	4618      	mov	r0, r3
 8003842:	f004 f8c1 	bl	80079c8 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003846:	78fb      	ldrb	r3, [r7, #3]
 8003848:	f003 030f 	and.w	r3, r3, #15
 800384c:	2b00      	cmp	r3, #0
 800384e:	d109      	bne.n	8003864 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6818      	ldr	r0, [r3, #0]
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	7999      	ldrb	r1, [r3, #6]
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800385e:	461a      	mov	r2, r3
 8003860:	f004 fab2 	bl	8007dc8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2200      	movs	r2, #0
 8003868:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800386c:	2300      	movs	r3, #0
}
 800386e:	4618      	mov	r0, r3
 8003870:	3710      	adds	r7, #16
 8003872:	46bd      	mov	sp, r7
 8003874:	bd80      	pop	{r7, pc}

08003876 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003876:	b580      	push	{r7, lr}
 8003878:	b084      	sub	sp, #16
 800387a:	af00      	add	r7, sp, #0
 800387c:	6078      	str	r0, [r7, #4]
 800387e:	460b      	mov	r3, r1
 8003880:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003882:	78fb      	ldrb	r3, [r7, #3]
 8003884:	f003 030f 	and.w	r3, r3, #15
 8003888:	687a      	ldr	r2, [r7, #4]
 800388a:	7912      	ldrb	r2, [r2, #4]
 800388c:	4293      	cmp	r3, r2
 800388e:	d901      	bls.n	8003894 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003890:	2301      	movs	r3, #1
 8003892:	e042      	b.n	800391a <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003894:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003898:	2b00      	cmp	r3, #0
 800389a:	da0f      	bge.n	80038bc <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800389c:	78fb      	ldrb	r3, [r7, #3]
 800389e:	f003 020f 	and.w	r2, r3, #15
 80038a2:	4613      	mov	r3, r2
 80038a4:	00db      	lsls	r3, r3, #3
 80038a6:	4413      	add	r3, r2
 80038a8:	009b      	lsls	r3, r3, #2
 80038aa:	3310      	adds	r3, #16
 80038ac:	687a      	ldr	r2, [r7, #4]
 80038ae:	4413      	add	r3, r2
 80038b0:	3304      	adds	r3, #4
 80038b2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	2201      	movs	r2, #1
 80038b8:	705a      	strb	r2, [r3, #1]
 80038ba:	e00f      	b.n	80038dc <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80038bc:	78fb      	ldrb	r3, [r7, #3]
 80038be:	f003 020f 	and.w	r2, r3, #15
 80038c2:	4613      	mov	r3, r2
 80038c4:	00db      	lsls	r3, r3, #3
 80038c6:	4413      	add	r3, r2
 80038c8:	009b      	lsls	r3, r3, #2
 80038ca:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80038ce:	687a      	ldr	r2, [r7, #4]
 80038d0:	4413      	add	r3, r2
 80038d2:	3304      	adds	r3, #4
 80038d4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	2200      	movs	r2, #0
 80038da:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	2200      	movs	r2, #0
 80038e0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80038e2:	78fb      	ldrb	r3, [r7, #3]
 80038e4:	f003 030f 	and.w	r3, r3, #15
 80038e8:	b2da      	uxtb	r2, r3
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80038f4:	2b01      	cmp	r3, #1
 80038f6:	d101      	bne.n	80038fc <HAL_PCD_EP_ClrStall+0x86>
 80038f8:	2302      	movs	r3, #2
 80038fa:	e00e      	b.n	800391a <HAL_PCD_EP_ClrStall+0xa4>
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2201      	movs	r2, #1
 8003900:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	68f9      	ldr	r1, [r7, #12]
 800390a:	4618      	mov	r0, r3
 800390c:	f004 f8ca 	bl	8007aa4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2200      	movs	r2, #0
 8003914:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003918:	2300      	movs	r3, #0
}
 800391a:	4618      	mov	r0, r3
 800391c:	3710      	adds	r7, #16
 800391e:	46bd      	mov	sp, r7
 8003920:	bd80      	pop	{r7, pc}

08003922 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003922:	b580      	push	{r7, lr}
 8003924:	b084      	sub	sp, #16
 8003926:	af00      	add	r7, sp, #0
 8003928:	6078      	str	r0, [r7, #4]
 800392a:	460b      	mov	r3, r1
 800392c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800392e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003932:	2b00      	cmp	r3, #0
 8003934:	da0c      	bge.n	8003950 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003936:	78fb      	ldrb	r3, [r7, #3]
 8003938:	f003 020f 	and.w	r2, r3, #15
 800393c:	4613      	mov	r3, r2
 800393e:	00db      	lsls	r3, r3, #3
 8003940:	4413      	add	r3, r2
 8003942:	009b      	lsls	r3, r3, #2
 8003944:	3310      	adds	r3, #16
 8003946:	687a      	ldr	r2, [r7, #4]
 8003948:	4413      	add	r3, r2
 800394a:	3304      	adds	r3, #4
 800394c:	60fb      	str	r3, [r7, #12]
 800394e:	e00c      	b.n	800396a <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003950:	78fb      	ldrb	r3, [r7, #3]
 8003952:	f003 020f 	and.w	r2, r3, #15
 8003956:	4613      	mov	r3, r2
 8003958:	00db      	lsls	r3, r3, #3
 800395a:	4413      	add	r3, r2
 800395c:	009b      	lsls	r3, r3, #2
 800395e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003962:	687a      	ldr	r2, [r7, #4]
 8003964:	4413      	add	r3, r2
 8003966:	3304      	adds	r3, #4
 8003968:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	68f9      	ldr	r1, [r7, #12]
 8003970:	4618      	mov	r0, r3
 8003972:	f003 fee9 	bl	8007748 <USB_EPStopXfer>
 8003976:	4603      	mov	r3, r0
 8003978:	72fb      	strb	r3, [r7, #11]

  return ret;
 800397a:	7afb      	ldrb	r3, [r7, #11]
}
 800397c:	4618      	mov	r0, r3
 800397e:	3710      	adds	r7, #16
 8003980:	46bd      	mov	sp, r7
 8003982:	bd80      	pop	{r7, pc}

08003984 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003984:	b580      	push	{r7, lr}
 8003986:	b08a      	sub	sp, #40	@ 0x28
 8003988:	af02      	add	r7, sp, #8
 800398a:	6078      	str	r0, [r7, #4]
 800398c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003994:	697b      	ldr	r3, [r7, #20]
 8003996:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003998:	683a      	ldr	r2, [r7, #0]
 800399a:	4613      	mov	r3, r2
 800399c:	00db      	lsls	r3, r3, #3
 800399e:	4413      	add	r3, r2
 80039a0:	009b      	lsls	r3, r3, #2
 80039a2:	3310      	adds	r3, #16
 80039a4:	687a      	ldr	r2, [r7, #4]
 80039a6:	4413      	add	r3, r2
 80039a8:	3304      	adds	r3, #4
 80039aa:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	695a      	ldr	r2, [r3, #20]
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	691b      	ldr	r3, [r3, #16]
 80039b4:	429a      	cmp	r2, r3
 80039b6:	d901      	bls.n	80039bc <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80039b8:	2301      	movs	r3, #1
 80039ba:	e06b      	b.n	8003a94 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	691a      	ldr	r2, [r3, #16]
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	695b      	ldr	r3, [r3, #20]
 80039c4:	1ad3      	subs	r3, r2, r3
 80039c6:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	689b      	ldr	r3, [r3, #8]
 80039cc:	69fa      	ldr	r2, [r7, #28]
 80039ce:	429a      	cmp	r2, r3
 80039d0:	d902      	bls.n	80039d8 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	689b      	ldr	r3, [r3, #8]
 80039d6:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80039d8:	69fb      	ldr	r3, [r7, #28]
 80039da:	3303      	adds	r3, #3
 80039dc:	089b      	lsrs	r3, r3, #2
 80039de:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80039e0:	e02a      	b.n	8003a38 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	691a      	ldr	r2, [r3, #16]
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	695b      	ldr	r3, [r3, #20]
 80039ea:	1ad3      	subs	r3, r2, r3
 80039ec:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	689b      	ldr	r3, [r3, #8]
 80039f2:	69fa      	ldr	r2, [r7, #28]
 80039f4:	429a      	cmp	r2, r3
 80039f6:	d902      	bls.n	80039fe <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	689b      	ldr	r3, [r3, #8]
 80039fc:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80039fe:	69fb      	ldr	r3, [r7, #28]
 8003a00:	3303      	adds	r3, #3
 8003a02:	089b      	lsrs	r3, r3, #2
 8003a04:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	68d9      	ldr	r1, [r3, #12]
 8003a0a:	683b      	ldr	r3, [r7, #0]
 8003a0c:	b2da      	uxtb	r2, r3
 8003a0e:	69fb      	ldr	r3, [r7, #28]
 8003a10:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003a16:	9300      	str	r3, [sp, #0]
 8003a18:	4603      	mov	r3, r0
 8003a1a:	6978      	ldr	r0, [r7, #20]
 8003a1c:	f003 ff3e 	bl	800789c <USB_WritePacket>

    ep->xfer_buff  += len;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	68da      	ldr	r2, [r3, #12]
 8003a24:	69fb      	ldr	r3, [r7, #28]
 8003a26:	441a      	add	r2, r3
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	695a      	ldr	r2, [r3, #20]
 8003a30:	69fb      	ldr	r3, [r7, #28]
 8003a32:	441a      	add	r2, r3
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	015a      	lsls	r2, r3, #5
 8003a3c:	693b      	ldr	r3, [r7, #16]
 8003a3e:	4413      	add	r3, r2
 8003a40:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003a44:	699b      	ldr	r3, [r3, #24]
 8003a46:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003a48:	69ba      	ldr	r2, [r7, #24]
 8003a4a:	429a      	cmp	r2, r3
 8003a4c:	d809      	bhi.n	8003a62 <PCD_WriteEmptyTxFifo+0xde>
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	695a      	ldr	r2, [r3, #20]
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003a56:	429a      	cmp	r2, r3
 8003a58:	d203      	bcs.n	8003a62 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	691b      	ldr	r3, [r3, #16]
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d1bf      	bne.n	80039e2 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	691a      	ldr	r2, [r3, #16]
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	695b      	ldr	r3, [r3, #20]
 8003a6a:	429a      	cmp	r2, r3
 8003a6c:	d811      	bhi.n	8003a92 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003a6e:	683b      	ldr	r3, [r7, #0]
 8003a70:	f003 030f 	and.w	r3, r3, #15
 8003a74:	2201      	movs	r2, #1
 8003a76:	fa02 f303 	lsl.w	r3, r2, r3
 8003a7a:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003a7c:	693b      	ldr	r3, [r7, #16]
 8003a7e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003a82:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003a84:	68bb      	ldr	r3, [r7, #8]
 8003a86:	43db      	mvns	r3, r3
 8003a88:	6939      	ldr	r1, [r7, #16]
 8003a8a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003a8e:	4013      	ands	r3, r2
 8003a90:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8003a92:	2300      	movs	r3, #0
}
 8003a94:	4618      	mov	r0, r3
 8003a96:	3720      	adds	r7, #32
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	bd80      	pop	{r7, pc}

08003a9c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	b088      	sub	sp, #32
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
 8003aa4:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003aac:	69fb      	ldr	r3, [r7, #28]
 8003aae:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003ab0:	69fb      	ldr	r3, [r7, #28]
 8003ab2:	333c      	adds	r3, #60	@ 0x3c
 8003ab4:	3304      	adds	r3, #4
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003aba:	683b      	ldr	r3, [r7, #0]
 8003abc:	015a      	lsls	r2, r3, #5
 8003abe:	69bb      	ldr	r3, [r7, #24]
 8003ac0:	4413      	add	r3, r2
 8003ac2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003ac6:	689b      	ldr	r3, [r3, #8]
 8003ac8:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	799b      	ldrb	r3, [r3, #6]
 8003ace:	2b01      	cmp	r3, #1
 8003ad0:	d17b      	bne.n	8003bca <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003ad2:	693b      	ldr	r3, [r7, #16]
 8003ad4:	f003 0308 	and.w	r3, r3, #8
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d015      	beq.n	8003b08 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003adc:	697b      	ldr	r3, [r7, #20]
 8003ade:	4a61      	ldr	r2, [pc, #388]	@ (8003c64 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003ae0:	4293      	cmp	r3, r2
 8003ae2:	f240 80b9 	bls.w	8003c58 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003ae6:	693b      	ldr	r3, [r7, #16]
 8003ae8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	f000 80b3 	beq.w	8003c58 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003af2:	683b      	ldr	r3, [r7, #0]
 8003af4:	015a      	lsls	r2, r3, #5
 8003af6:	69bb      	ldr	r3, [r7, #24]
 8003af8:	4413      	add	r3, r2
 8003afa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003afe:	461a      	mov	r2, r3
 8003b00:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003b04:	6093      	str	r3, [r2, #8]
 8003b06:	e0a7      	b.n	8003c58 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003b08:	693b      	ldr	r3, [r7, #16]
 8003b0a:	f003 0320 	and.w	r3, r3, #32
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d009      	beq.n	8003b26 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003b12:	683b      	ldr	r3, [r7, #0]
 8003b14:	015a      	lsls	r2, r3, #5
 8003b16:	69bb      	ldr	r3, [r7, #24]
 8003b18:	4413      	add	r3, r2
 8003b1a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003b1e:	461a      	mov	r2, r3
 8003b20:	2320      	movs	r3, #32
 8003b22:	6093      	str	r3, [r2, #8]
 8003b24:	e098      	b.n	8003c58 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003b26:	693b      	ldr	r3, [r7, #16]
 8003b28:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	f040 8093 	bne.w	8003c58 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003b32:	697b      	ldr	r3, [r7, #20]
 8003b34:	4a4b      	ldr	r2, [pc, #300]	@ (8003c64 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003b36:	4293      	cmp	r3, r2
 8003b38:	d90f      	bls.n	8003b5a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003b3a:	693b      	ldr	r3, [r7, #16]
 8003b3c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d00a      	beq.n	8003b5a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	015a      	lsls	r2, r3, #5
 8003b48:	69bb      	ldr	r3, [r7, #24]
 8003b4a:	4413      	add	r3, r2
 8003b4c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003b50:	461a      	mov	r2, r3
 8003b52:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003b56:	6093      	str	r3, [r2, #8]
 8003b58:	e07e      	b.n	8003c58 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8003b5a:	683a      	ldr	r2, [r7, #0]
 8003b5c:	4613      	mov	r3, r2
 8003b5e:	00db      	lsls	r3, r3, #3
 8003b60:	4413      	add	r3, r2
 8003b62:	009b      	lsls	r3, r3, #2
 8003b64:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003b68:	687a      	ldr	r2, [r7, #4]
 8003b6a:	4413      	add	r3, r2
 8003b6c:	3304      	adds	r3, #4
 8003b6e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	6a1a      	ldr	r2, [r3, #32]
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	0159      	lsls	r1, r3, #5
 8003b78:	69bb      	ldr	r3, [r7, #24]
 8003b7a:	440b      	add	r3, r1
 8003b7c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003b80:	691b      	ldr	r3, [r3, #16]
 8003b82:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b86:	1ad2      	subs	r2, r2, r3
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d114      	bne.n	8003bbc <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	691b      	ldr	r3, [r3, #16]
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d109      	bne.n	8003bae <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6818      	ldr	r0, [r3, #0]
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003ba4:	461a      	mov	r2, r3
 8003ba6:	2101      	movs	r1, #1
 8003ba8:	f004 f90e 	bl	8007dc8 <USB_EP0_OutStart>
 8003bac:	e006      	b.n	8003bbc <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	68da      	ldr	r2, [r3, #12]
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	695b      	ldr	r3, [r3, #20]
 8003bb6:	441a      	add	r2, r3
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	b2db      	uxtb	r3, r3
 8003bc0:	4619      	mov	r1, r3
 8003bc2:	6878      	ldr	r0, [r7, #4]
 8003bc4:	f008 fe2c 	bl	800c820 <HAL_PCD_DataOutStageCallback>
 8003bc8:	e046      	b.n	8003c58 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003bca:	697b      	ldr	r3, [r7, #20]
 8003bcc:	4a26      	ldr	r2, [pc, #152]	@ (8003c68 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8003bce:	4293      	cmp	r3, r2
 8003bd0:	d124      	bne.n	8003c1c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003bd2:	693b      	ldr	r3, [r7, #16]
 8003bd4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d00a      	beq.n	8003bf2 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	015a      	lsls	r2, r3, #5
 8003be0:	69bb      	ldr	r3, [r7, #24]
 8003be2:	4413      	add	r3, r2
 8003be4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003be8:	461a      	mov	r2, r3
 8003bea:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003bee:	6093      	str	r3, [r2, #8]
 8003bf0:	e032      	b.n	8003c58 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003bf2:	693b      	ldr	r3, [r7, #16]
 8003bf4:	f003 0320 	and.w	r3, r3, #32
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d008      	beq.n	8003c0e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003bfc:	683b      	ldr	r3, [r7, #0]
 8003bfe:	015a      	lsls	r2, r3, #5
 8003c00:	69bb      	ldr	r3, [r7, #24]
 8003c02:	4413      	add	r3, r2
 8003c04:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003c08:	461a      	mov	r2, r3
 8003c0a:	2320      	movs	r3, #32
 8003c0c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003c0e:	683b      	ldr	r3, [r7, #0]
 8003c10:	b2db      	uxtb	r3, r3
 8003c12:	4619      	mov	r1, r3
 8003c14:	6878      	ldr	r0, [r7, #4]
 8003c16:	f008 fe03 	bl	800c820 <HAL_PCD_DataOutStageCallback>
 8003c1a:	e01d      	b.n	8003c58 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003c1c:	683b      	ldr	r3, [r7, #0]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d114      	bne.n	8003c4c <PCD_EP_OutXfrComplete_int+0x1b0>
 8003c22:	6879      	ldr	r1, [r7, #4]
 8003c24:	683a      	ldr	r2, [r7, #0]
 8003c26:	4613      	mov	r3, r2
 8003c28:	00db      	lsls	r3, r3, #3
 8003c2a:	4413      	add	r3, r2
 8003c2c:	009b      	lsls	r3, r3, #2
 8003c2e:	440b      	add	r3, r1
 8003c30:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d108      	bne.n	8003c4c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6818      	ldr	r0, [r3, #0]
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003c44:	461a      	mov	r2, r3
 8003c46:	2100      	movs	r1, #0
 8003c48:	f004 f8be 	bl	8007dc8 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	b2db      	uxtb	r3, r3
 8003c50:	4619      	mov	r1, r3
 8003c52:	6878      	ldr	r0, [r7, #4]
 8003c54:	f008 fde4 	bl	800c820 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003c58:	2300      	movs	r3, #0
}
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	3720      	adds	r7, #32
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	bd80      	pop	{r7, pc}
 8003c62:	bf00      	nop
 8003c64:	4f54300a 	.word	0x4f54300a
 8003c68:	4f54310a 	.word	0x4f54310a

08003c6c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	b086      	sub	sp, #24
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
 8003c74:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c7c:	697b      	ldr	r3, [r7, #20]
 8003c7e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003c80:	697b      	ldr	r3, [r7, #20]
 8003c82:	333c      	adds	r3, #60	@ 0x3c
 8003c84:	3304      	adds	r3, #4
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003c8a:	683b      	ldr	r3, [r7, #0]
 8003c8c:	015a      	lsls	r2, r3, #5
 8003c8e:	693b      	ldr	r3, [r7, #16]
 8003c90:	4413      	add	r3, r2
 8003c92:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003c96:	689b      	ldr	r3, [r3, #8]
 8003c98:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	4a15      	ldr	r2, [pc, #84]	@ (8003cf4 <PCD_EP_OutSetupPacket_int+0x88>)
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d90e      	bls.n	8003cc0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003ca2:	68bb      	ldr	r3, [r7, #8]
 8003ca4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d009      	beq.n	8003cc0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	015a      	lsls	r2, r3, #5
 8003cb0:	693b      	ldr	r3, [r7, #16]
 8003cb2:	4413      	add	r3, r2
 8003cb4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003cb8:	461a      	mov	r2, r3
 8003cba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003cbe:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003cc0:	6878      	ldr	r0, [r7, #4]
 8003cc2:	f008 fd9b 	bl	800c7fc <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	4a0a      	ldr	r2, [pc, #40]	@ (8003cf4 <PCD_EP_OutSetupPacket_int+0x88>)
 8003cca:	4293      	cmp	r3, r2
 8003ccc:	d90c      	bls.n	8003ce8 <PCD_EP_OutSetupPacket_int+0x7c>
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	799b      	ldrb	r3, [r3, #6]
 8003cd2:	2b01      	cmp	r3, #1
 8003cd4:	d108      	bne.n	8003ce8 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6818      	ldr	r0, [r3, #0]
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003ce0:	461a      	mov	r2, r3
 8003ce2:	2101      	movs	r1, #1
 8003ce4:	f004 f870 	bl	8007dc8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003ce8:	2300      	movs	r3, #0
}
 8003cea:	4618      	mov	r0, r3
 8003cec:	3718      	adds	r7, #24
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	bd80      	pop	{r7, pc}
 8003cf2:	bf00      	nop
 8003cf4:	4f54300a 	.word	0x4f54300a

08003cf8 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003cf8:	b480      	push	{r7}
 8003cfa:	b085      	sub	sp, #20
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
 8003d00:	460b      	mov	r3, r1
 8003d02:	70fb      	strb	r3, [r7, #3]
 8003d04:	4613      	mov	r3, r2
 8003d06:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d0e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003d10:	78fb      	ldrb	r3, [r7, #3]
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d107      	bne.n	8003d26 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003d16:	883b      	ldrh	r3, [r7, #0]
 8003d18:	0419      	lsls	r1, r3, #16
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	68ba      	ldr	r2, [r7, #8]
 8003d20:	430a      	orrs	r2, r1
 8003d22:	629a      	str	r2, [r3, #40]	@ 0x28
 8003d24:	e028      	b.n	8003d78 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d2c:	0c1b      	lsrs	r3, r3, #16
 8003d2e:	68ba      	ldr	r2, [r7, #8]
 8003d30:	4413      	add	r3, r2
 8003d32:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003d34:	2300      	movs	r3, #0
 8003d36:	73fb      	strb	r3, [r7, #15]
 8003d38:	e00d      	b.n	8003d56 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681a      	ldr	r2, [r3, #0]
 8003d3e:	7bfb      	ldrb	r3, [r7, #15]
 8003d40:	3340      	adds	r3, #64	@ 0x40
 8003d42:	009b      	lsls	r3, r3, #2
 8003d44:	4413      	add	r3, r2
 8003d46:	685b      	ldr	r3, [r3, #4]
 8003d48:	0c1b      	lsrs	r3, r3, #16
 8003d4a:	68ba      	ldr	r2, [r7, #8]
 8003d4c:	4413      	add	r3, r2
 8003d4e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003d50:	7bfb      	ldrb	r3, [r7, #15]
 8003d52:	3301      	adds	r3, #1
 8003d54:	73fb      	strb	r3, [r7, #15]
 8003d56:	7bfa      	ldrb	r2, [r7, #15]
 8003d58:	78fb      	ldrb	r3, [r7, #3]
 8003d5a:	3b01      	subs	r3, #1
 8003d5c:	429a      	cmp	r2, r3
 8003d5e:	d3ec      	bcc.n	8003d3a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003d60:	883b      	ldrh	r3, [r7, #0]
 8003d62:	0418      	lsls	r0, r3, #16
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	6819      	ldr	r1, [r3, #0]
 8003d68:	78fb      	ldrb	r3, [r7, #3]
 8003d6a:	3b01      	subs	r3, #1
 8003d6c:	68ba      	ldr	r2, [r7, #8]
 8003d6e:	4302      	orrs	r2, r0
 8003d70:	3340      	adds	r3, #64	@ 0x40
 8003d72:	009b      	lsls	r3, r3, #2
 8003d74:	440b      	add	r3, r1
 8003d76:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003d78:	2300      	movs	r3, #0
}
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	3714      	adds	r7, #20
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d84:	4770      	bx	lr

08003d86 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003d86:	b480      	push	{r7}
 8003d88:	b083      	sub	sp, #12
 8003d8a:	af00      	add	r7, sp, #0
 8003d8c:	6078      	str	r0, [r7, #4]
 8003d8e:	460b      	mov	r3, r1
 8003d90:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	887a      	ldrh	r2, [r7, #2]
 8003d98:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8003d9a:	2300      	movs	r3, #0
}
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	370c      	adds	r7, #12
 8003da0:	46bd      	mov	sp, r7
 8003da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da6:	4770      	bx	lr

08003da8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003da8:	b480      	push	{r7}
 8003daa:	b083      	sub	sp, #12
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
 8003db0:	460b      	mov	r3, r1
 8003db2:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003db4:	bf00      	nop
 8003db6:	370c      	adds	r7, #12
 8003db8:	46bd      	mov	sp, r7
 8003dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dbe:	4770      	bx	lr

08003dc0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	b086      	sub	sp, #24
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d101      	bne.n	8003dd2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003dce:	2301      	movs	r3, #1
 8003dd0:	e267      	b.n	80042a2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f003 0301 	and.w	r3, r3, #1
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d075      	beq.n	8003eca <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003dde:	4b88      	ldr	r3, [pc, #544]	@ (8004000 <HAL_RCC_OscConfig+0x240>)
 8003de0:	689b      	ldr	r3, [r3, #8]
 8003de2:	f003 030c 	and.w	r3, r3, #12
 8003de6:	2b04      	cmp	r3, #4
 8003de8:	d00c      	beq.n	8003e04 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003dea:	4b85      	ldr	r3, [pc, #532]	@ (8004000 <HAL_RCC_OscConfig+0x240>)
 8003dec:	689b      	ldr	r3, [r3, #8]
 8003dee:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003df2:	2b08      	cmp	r3, #8
 8003df4:	d112      	bne.n	8003e1c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003df6:	4b82      	ldr	r3, [pc, #520]	@ (8004000 <HAL_RCC_OscConfig+0x240>)
 8003df8:	685b      	ldr	r3, [r3, #4]
 8003dfa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003dfe:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003e02:	d10b      	bne.n	8003e1c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e04:	4b7e      	ldr	r3, [pc, #504]	@ (8004000 <HAL_RCC_OscConfig+0x240>)
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d05b      	beq.n	8003ec8 <HAL_RCC_OscConfig+0x108>
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	685b      	ldr	r3, [r3, #4]
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d157      	bne.n	8003ec8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003e18:	2301      	movs	r3, #1
 8003e1a:	e242      	b.n	80042a2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	685b      	ldr	r3, [r3, #4]
 8003e20:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003e24:	d106      	bne.n	8003e34 <HAL_RCC_OscConfig+0x74>
 8003e26:	4b76      	ldr	r3, [pc, #472]	@ (8004000 <HAL_RCC_OscConfig+0x240>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	4a75      	ldr	r2, [pc, #468]	@ (8004000 <HAL_RCC_OscConfig+0x240>)
 8003e2c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e30:	6013      	str	r3, [r2, #0]
 8003e32:	e01d      	b.n	8003e70 <HAL_RCC_OscConfig+0xb0>
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	685b      	ldr	r3, [r3, #4]
 8003e38:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003e3c:	d10c      	bne.n	8003e58 <HAL_RCC_OscConfig+0x98>
 8003e3e:	4b70      	ldr	r3, [pc, #448]	@ (8004000 <HAL_RCC_OscConfig+0x240>)
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	4a6f      	ldr	r2, [pc, #444]	@ (8004000 <HAL_RCC_OscConfig+0x240>)
 8003e44:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003e48:	6013      	str	r3, [r2, #0]
 8003e4a:	4b6d      	ldr	r3, [pc, #436]	@ (8004000 <HAL_RCC_OscConfig+0x240>)
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	4a6c      	ldr	r2, [pc, #432]	@ (8004000 <HAL_RCC_OscConfig+0x240>)
 8003e50:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e54:	6013      	str	r3, [r2, #0]
 8003e56:	e00b      	b.n	8003e70 <HAL_RCC_OscConfig+0xb0>
 8003e58:	4b69      	ldr	r3, [pc, #420]	@ (8004000 <HAL_RCC_OscConfig+0x240>)
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	4a68      	ldr	r2, [pc, #416]	@ (8004000 <HAL_RCC_OscConfig+0x240>)
 8003e5e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003e62:	6013      	str	r3, [r2, #0]
 8003e64:	4b66      	ldr	r3, [pc, #408]	@ (8004000 <HAL_RCC_OscConfig+0x240>)
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	4a65      	ldr	r2, [pc, #404]	@ (8004000 <HAL_RCC_OscConfig+0x240>)
 8003e6a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003e6e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	685b      	ldr	r3, [r3, #4]
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d013      	beq.n	8003ea0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e78:	f7fd ff9c 	bl	8001db4 <HAL_GetTick>
 8003e7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e7e:	e008      	b.n	8003e92 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e80:	f7fd ff98 	bl	8001db4 <HAL_GetTick>
 8003e84:	4602      	mov	r2, r0
 8003e86:	693b      	ldr	r3, [r7, #16]
 8003e88:	1ad3      	subs	r3, r2, r3
 8003e8a:	2b64      	cmp	r3, #100	@ 0x64
 8003e8c:	d901      	bls.n	8003e92 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003e8e:	2303      	movs	r3, #3
 8003e90:	e207      	b.n	80042a2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e92:	4b5b      	ldr	r3, [pc, #364]	@ (8004000 <HAL_RCC_OscConfig+0x240>)
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d0f0      	beq.n	8003e80 <HAL_RCC_OscConfig+0xc0>
 8003e9e:	e014      	b.n	8003eca <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ea0:	f7fd ff88 	bl	8001db4 <HAL_GetTick>
 8003ea4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ea6:	e008      	b.n	8003eba <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ea8:	f7fd ff84 	bl	8001db4 <HAL_GetTick>
 8003eac:	4602      	mov	r2, r0
 8003eae:	693b      	ldr	r3, [r7, #16]
 8003eb0:	1ad3      	subs	r3, r2, r3
 8003eb2:	2b64      	cmp	r3, #100	@ 0x64
 8003eb4:	d901      	bls.n	8003eba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003eb6:	2303      	movs	r3, #3
 8003eb8:	e1f3      	b.n	80042a2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003eba:	4b51      	ldr	r3, [pc, #324]	@ (8004000 <HAL_RCC_OscConfig+0x240>)
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d1f0      	bne.n	8003ea8 <HAL_RCC_OscConfig+0xe8>
 8003ec6:	e000      	b.n	8003eca <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ec8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f003 0302 	and.w	r3, r3, #2
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d063      	beq.n	8003f9e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003ed6:	4b4a      	ldr	r3, [pc, #296]	@ (8004000 <HAL_RCC_OscConfig+0x240>)
 8003ed8:	689b      	ldr	r3, [r3, #8]
 8003eda:	f003 030c 	and.w	r3, r3, #12
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d00b      	beq.n	8003efa <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003ee2:	4b47      	ldr	r3, [pc, #284]	@ (8004000 <HAL_RCC_OscConfig+0x240>)
 8003ee4:	689b      	ldr	r3, [r3, #8]
 8003ee6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003eea:	2b08      	cmp	r3, #8
 8003eec:	d11c      	bne.n	8003f28 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003eee:	4b44      	ldr	r3, [pc, #272]	@ (8004000 <HAL_RCC_OscConfig+0x240>)
 8003ef0:	685b      	ldr	r3, [r3, #4]
 8003ef2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d116      	bne.n	8003f28 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003efa:	4b41      	ldr	r3, [pc, #260]	@ (8004000 <HAL_RCC_OscConfig+0x240>)
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f003 0302 	and.w	r3, r3, #2
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d005      	beq.n	8003f12 <HAL_RCC_OscConfig+0x152>
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	68db      	ldr	r3, [r3, #12]
 8003f0a:	2b01      	cmp	r3, #1
 8003f0c:	d001      	beq.n	8003f12 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003f0e:	2301      	movs	r3, #1
 8003f10:	e1c7      	b.n	80042a2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f12:	4b3b      	ldr	r3, [pc, #236]	@ (8004000 <HAL_RCC_OscConfig+0x240>)
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	691b      	ldr	r3, [r3, #16]
 8003f1e:	00db      	lsls	r3, r3, #3
 8003f20:	4937      	ldr	r1, [pc, #220]	@ (8004000 <HAL_RCC_OscConfig+0x240>)
 8003f22:	4313      	orrs	r3, r2
 8003f24:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f26:	e03a      	b.n	8003f9e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	68db      	ldr	r3, [r3, #12]
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d020      	beq.n	8003f72 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003f30:	4b34      	ldr	r3, [pc, #208]	@ (8004004 <HAL_RCC_OscConfig+0x244>)
 8003f32:	2201      	movs	r2, #1
 8003f34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f36:	f7fd ff3d 	bl	8001db4 <HAL_GetTick>
 8003f3a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f3c:	e008      	b.n	8003f50 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f3e:	f7fd ff39 	bl	8001db4 <HAL_GetTick>
 8003f42:	4602      	mov	r2, r0
 8003f44:	693b      	ldr	r3, [r7, #16]
 8003f46:	1ad3      	subs	r3, r2, r3
 8003f48:	2b02      	cmp	r3, #2
 8003f4a:	d901      	bls.n	8003f50 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003f4c:	2303      	movs	r3, #3
 8003f4e:	e1a8      	b.n	80042a2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f50:	4b2b      	ldr	r3, [pc, #172]	@ (8004000 <HAL_RCC_OscConfig+0x240>)
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f003 0302 	and.w	r3, r3, #2
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d0f0      	beq.n	8003f3e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f5c:	4b28      	ldr	r3, [pc, #160]	@ (8004000 <HAL_RCC_OscConfig+0x240>)
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	691b      	ldr	r3, [r3, #16]
 8003f68:	00db      	lsls	r3, r3, #3
 8003f6a:	4925      	ldr	r1, [pc, #148]	@ (8004000 <HAL_RCC_OscConfig+0x240>)
 8003f6c:	4313      	orrs	r3, r2
 8003f6e:	600b      	str	r3, [r1, #0]
 8003f70:	e015      	b.n	8003f9e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003f72:	4b24      	ldr	r3, [pc, #144]	@ (8004004 <HAL_RCC_OscConfig+0x244>)
 8003f74:	2200      	movs	r2, #0
 8003f76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f78:	f7fd ff1c 	bl	8001db4 <HAL_GetTick>
 8003f7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f7e:	e008      	b.n	8003f92 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f80:	f7fd ff18 	bl	8001db4 <HAL_GetTick>
 8003f84:	4602      	mov	r2, r0
 8003f86:	693b      	ldr	r3, [r7, #16]
 8003f88:	1ad3      	subs	r3, r2, r3
 8003f8a:	2b02      	cmp	r3, #2
 8003f8c:	d901      	bls.n	8003f92 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003f8e:	2303      	movs	r3, #3
 8003f90:	e187      	b.n	80042a2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f92:	4b1b      	ldr	r3, [pc, #108]	@ (8004000 <HAL_RCC_OscConfig+0x240>)
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f003 0302 	and.w	r3, r3, #2
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d1f0      	bne.n	8003f80 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f003 0308 	and.w	r3, r3, #8
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d036      	beq.n	8004018 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	695b      	ldr	r3, [r3, #20]
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d016      	beq.n	8003fe0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003fb2:	4b15      	ldr	r3, [pc, #84]	@ (8004008 <HAL_RCC_OscConfig+0x248>)
 8003fb4:	2201      	movs	r2, #1
 8003fb6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fb8:	f7fd fefc 	bl	8001db4 <HAL_GetTick>
 8003fbc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003fbe:	e008      	b.n	8003fd2 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003fc0:	f7fd fef8 	bl	8001db4 <HAL_GetTick>
 8003fc4:	4602      	mov	r2, r0
 8003fc6:	693b      	ldr	r3, [r7, #16]
 8003fc8:	1ad3      	subs	r3, r2, r3
 8003fca:	2b02      	cmp	r3, #2
 8003fcc:	d901      	bls.n	8003fd2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003fce:	2303      	movs	r3, #3
 8003fd0:	e167      	b.n	80042a2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003fd2:	4b0b      	ldr	r3, [pc, #44]	@ (8004000 <HAL_RCC_OscConfig+0x240>)
 8003fd4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003fd6:	f003 0302 	and.w	r3, r3, #2
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d0f0      	beq.n	8003fc0 <HAL_RCC_OscConfig+0x200>
 8003fde:	e01b      	b.n	8004018 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003fe0:	4b09      	ldr	r3, [pc, #36]	@ (8004008 <HAL_RCC_OscConfig+0x248>)
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003fe6:	f7fd fee5 	bl	8001db4 <HAL_GetTick>
 8003fea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003fec:	e00e      	b.n	800400c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003fee:	f7fd fee1 	bl	8001db4 <HAL_GetTick>
 8003ff2:	4602      	mov	r2, r0
 8003ff4:	693b      	ldr	r3, [r7, #16]
 8003ff6:	1ad3      	subs	r3, r2, r3
 8003ff8:	2b02      	cmp	r3, #2
 8003ffa:	d907      	bls.n	800400c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003ffc:	2303      	movs	r3, #3
 8003ffe:	e150      	b.n	80042a2 <HAL_RCC_OscConfig+0x4e2>
 8004000:	40023800 	.word	0x40023800
 8004004:	42470000 	.word	0x42470000
 8004008:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800400c:	4b88      	ldr	r3, [pc, #544]	@ (8004230 <HAL_RCC_OscConfig+0x470>)
 800400e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004010:	f003 0302 	and.w	r3, r3, #2
 8004014:	2b00      	cmp	r3, #0
 8004016:	d1ea      	bne.n	8003fee <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f003 0304 	and.w	r3, r3, #4
 8004020:	2b00      	cmp	r3, #0
 8004022:	f000 8097 	beq.w	8004154 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004026:	2300      	movs	r3, #0
 8004028:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800402a:	4b81      	ldr	r3, [pc, #516]	@ (8004230 <HAL_RCC_OscConfig+0x470>)
 800402c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800402e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004032:	2b00      	cmp	r3, #0
 8004034:	d10f      	bne.n	8004056 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004036:	2300      	movs	r3, #0
 8004038:	60bb      	str	r3, [r7, #8]
 800403a:	4b7d      	ldr	r3, [pc, #500]	@ (8004230 <HAL_RCC_OscConfig+0x470>)
 800403c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800403e:	4a7c      	ldr	r2, [pc, #496]	@ (8004230 <HAL_RCC_OscConfig+0x470>)
 8004040:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004044:	6413      	str	r3, [r2, #64]	@ 0x40
 8004046:	4b7a      	ldr	r3, [pc, #488]	@ (8004230 <HAL_RCC_OscConfig+0x470>)
 8004048:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800404a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800404e:	60bb      	str	r3, [r7, #8]
 8004050:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004052:	2301      	movs	r3, #1
 8004054:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004056:	4b77      	ldr	r3, [pc, #476]	@ (8004234 <HAL_RCC_OscConfig+0x474>)
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800405e:	2b00      	cmp	r3, #0
 8004060:	d118      	bne.n	8004094 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004062:	4b74      	ldr	r3, [pc, #464]	@ (8004234 <HAL_RCC_OscConfig+0x474>)
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	4a73      	ldr	r2, [pc, #460]	@ (8004234 <HAL_RCC_OscConfig+0x474>)
 8004068:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800406c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800406e:	f7fd fea1 	bl	8001db4 <HAL_GetTick>
 8004072:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004074:	e008      	b.n	8004088 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004076:	f7fd fe9d 	bl	8001db4 <HAL_GetTick>
 800407a:	4602      	mov	r2, r0
 800407c:	693b      	ldr	r3, [r7, #16]
 800407e:	1ad3      	subs	r3, r2, r3
 8004080:	2b02      	cmp	r3, #2
 8004082:	d901      	bls.n	8004088 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004084:	2303      	movs	r3, #3
 8004086:	e10c      	b.n	80042a2 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004088:	4b6a      	ldr	r3, [pc, #424]	@ (8004234 <HAL_RCC_OscConfig+0x474>)
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004090:	2b00      	cmp	r3, #0
 8004092:	d0f0      	beq.n	8004076 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	689b      	ldr	r3, [r3, #8]
 8004098:	2b01      	cmp	r3, #1
 800409a:	d106      	bne.n	80040aa <HAL_RCC_OscConfig+0x2ea>
 800409c:	4b64      	ldr	r3, [pc, #400]	@ (8004230 <HAL_RCC_OscConfig+0x470>)
 800409e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040a0:	4a63      	ldr	r2, [pc, #396]	@ (8004230 <HAL_RCC_OscConfig+0x470>)
 80040a2:	f043 0301 	orr.w	r3, r3, #1
 80040a6:	6713      	str	r3, [r2, #112]	@ 0x70
 80040a8:	e01c      	b.n	80040e4 <HAL_RCC_OscConfig+0x324>
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	689b      	ldr	r3, [r3, #8]
 80040ae:	2b05      	cmp	r3, #5
 80040b0:	d10c      	bne.n	80040cc <HAL_RCC_OscConfig+0x30c>
 80040b2:	4b5f      	ldr	r3, [pc, #380]	@ (8004230 <HAL_RCC_OscConfig+0x470>)
 80040b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040b6:	4a5e      	ldr	r2, [pc, #376]	@ (8004230 <HAL_RCC_OscConfig+0x470>)
 80040b8:	f043 0304 	orr.w	r3, r3, #4
 80040bc:	6713      	str	r3, [r2, #112]	@ 0x70
 80040be:	4b5c      	ldr	r3, [pc, #368]	@ (8004230 <HAL_RCC_OscConfig+0x470>)
 80040c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040c2:	4a5b      	ldr	r2, [pc, #364]	@ (8004230 <HAL_RCC_OscConfig+0x470>)
 80040c4:	f043 0301 	orr.w	r3, r3, #1
 80040c8:	6713      	str	r3, [r2, #112]	@ 0x70
 80040ca:	e00b      	b.n	80040e4 <HAL_RCC_OscConfig+0x324>
 80040cc:	4b58      	ldr	r3, [pc, #352]	@ (8004230 <HAL_RCC_OscConfig+0x470>)
 80040ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040d0:	4a57      	ldr	r2, [pc, #348]	@ (8004230 <HAL_RCC_OscConfig+0x470>)
 80040d2:	f023 0301 	bic.w	r3, r3, #1
 80040d6:	6713      	str	r3, [r2, #112]	@ 0x70
 80040d8:	4b55      	ldr	r3, [pc, #340]	@ (8004230 <HAL_RCC_OscConfig+0x470>)
 80040da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040dc:	4a54      	ldr	r2, [pc, #336]	@ (8004230 <HAL_RCC_OscConfig+0x470>)
 80040de:	f023 0304 	bic.w	r3, r3, #4
 80040e2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	689b      	ldr	r3, [r3, #8]
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d015      	beq.n	8004118 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040ec:	f7fd fe62 	bl	8001db4 <HAL_GetTick>
 80040f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040f2:	e00a      	b.n	800410a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040f4:	f7fd fe5e 	bl	8001db4 <HAL_GetTick>
 80040f8:	4602      	mov	r2, r0
 80040fa:	693b      	ldr	r3, [r7, #16]
 80040fc:	1ad3      	subs	r3, r2, r3
 80040fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004102:	4293      	cmp	r3, r2
 8004104:	d901      	bls.n	800410a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004106:	2303      	movs	r3, #3
 8004108:	e0cb      	b.n	80042a2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800410a:	4b49      	ldr	r3, [pc, #292]	@ (8004230 <HAL_RCC_OscConfig+0x470>)
 800410c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800410e:	f003 0302 	and.w	r3, r3, #2
 8004112:	2b00      	cmp	r3, #0
 8004114:	d0ee      	beq.n	80040f4 <HAL_RCC_OscConfig+0x334>
 8004116:	e014      	b.n	8004142 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004118:	f7fd fe4c 	bl	8001db4 <HAL_GetTick>
 800411c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800411e:	e00a      	b.n	8004136 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004120:	f7fd fe48 	bl	8001db4 <HAL_GetTick>
 8004124:	4602      	mov	r2, r0
 8004126:	693b      	ldr	r3, [r7, #16]
 8004128:	1ad3      	subs	r3, r2, r3
 800412a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800412e:	4293      	cmp	r3, r2
 8004130:	d901      	bls.n	8004136 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004132:	2303      	movs	r3, #3
 8004134:	e0b5      	b.n	80042a2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004136:	4b3e      	ldr	r3, [pc, #248]	@ (8004230 <HAL_RCC_OscConfig+0x470>)
 8004138:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800413a:	f003 0302 	and.w	r3, r3, #2
 800413e:	2b00      	cmp	r3, #0
 8004140:	d1ee      	bne.n	8004120 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004142:	7dfb      	ldrb	r3, [r7, #23]
 8004144:	2b01      	cmp	r3, #1
 8004146:	d105      	bne.n	8004154 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004148:	4b39      	ldr	r3, [pc, #228]	@ (8004230 <HAL_RCC_OscConfig+0x470>)
 800414a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800414c:	4a38      	ldr	r2, [pc, #224]	@ (8004230 <HAL_RCC_OscConfig+0x470>)
 800414e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004152:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	699b      	ldr	r3, [r3, #24]
 8004158:	2b00      	cmp	r3, #0
 800415a:	f000 80a1 	beq.w	80042a0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800415e:	4b34      	ldr	r3, [pc, #208]	@ (8004230 <HAL_RCC_OscConfig+0x470>)
 8004160:	689b      	ldr	r3, [r3, #8]
 8004162:	f003 030c 	and.w	r3, r3, #12
 8004166:	2b08      	cmp	r3, #8
 8004168:	d05c      	beq.n	8004224 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	699b      	ldr	r3, [r3, #24]
 800416e:	2b02      	cmp	r3, #2
 8004170:	d141      	bne.n	80041f6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004172:	4b31      	ldr	r3, [pc, #196]	@ (8004238 <HAL_RCC_OscConfig+0x478>)
 8004174:	2200      	movs	r2, #0
 8004176:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004178:	f7fd fe1c 	bl	8001db4 <HAL_GetTick>
 800417c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800417e:	e008      	b.n	8004192 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004180:	f7fd fe18 	bl	8001db4 <HAL_GetTick>
 8004184:	4602      	mov	r2, r0
 8004186:	693b      	ldr	r3, [r7, #16]
 8004188:	1ad3      	subs	r3, r2, r3
 800418a:	2b02      	cmp	r3, #2
 800418c:	d901      	bls.n	8004192 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800418e:	2303      	movs	r3, #3
 8004190:	e087      	b.n	80042a2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004192:	4b27      	ldr	r3, [pc, #156]	@ (8004230 <HAL_RCC_OscConfig+0x470>)
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800419a:	2b00      	cmp	r3, #0
 800419c:	d1f0      	bne.n	8004180 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	69da      	ldr	r2, [r3, #28]
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6a1b      	ldr	r3, [r3, #32]
 80041a6:	431a      	orrs	r2, r3
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041ac:	019b      	lsls	r3, r3, #6
 80041ae:	431a      	orrs	r2, r3
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041b4:	085b      	lsrs	r3, r3, #1
 80041b6:	3b01      	subs	r3, #1
 80041b8:	041b      	lsls	r3, r3, #16
 80041ba:	431a      	orrs	r2, r3
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041c0:	061b      	lsls	r3, r3, #24
 80041c2:	491b      	ldr	r1, [pc, #108]	@ (8004230 <HAL_RCC_OscConfig+0x470>)
 80041c4:	4313      	orrs	r3, r2
 80041c6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80041c8:	4b1b      	ldr	r3, [pc, #108]	@ (8004238 <HAL_RCC_OscConfig+0x478>)
 80041ca:	2201      	movs	r2, #1
 80041cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041ce:	f7fd fdf1 	bl	8001db4 <HAL_GetTick>
 80041d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041d4:	e008      	b.n	80041e8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041d6:	f7fd fded 	bl	8001db4 <HAL_GetTick>
 80041da:	4602      	mov	r2, r0
 80041dc:	693b      	ldr	r3, [r7, #16]
 80041de:	1ad3      	subs	r3, r2, r3
 80041e0:	2b02      	cmp	r3, #2
 80041e2:	d901      	bls.n	80041e8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80041e4:	2303      	movs	r3, #3
 80041e6:	e05c      	b.n	80042a2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041e8:	4b11      	ldr	r3, [pc, #68]	@ (8004230 <HAL_RCC_OscConfig+0x470>)
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d0f0      	beq.n	80041d6 <HAL_RCC_OscConfig+0x416>
 80041f4:	e054      	b.n	80042a0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80041f6:	4b10      	ldr	r3, [pc, #64]	@ (8004238 <HAL_RCC_OscConfig+0x478>)
 80041f8:	2200      	movs	r2, #0
 80041fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041fc:	f7fd fdda 	bl	8001db4 <HAL_GetTick>
 8004200:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004202:	e008      	b.n	8004216 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004204:	f7fd fdd6 	bl	8001db4 <HAL_GetTick>
 8004208:	4602      	mov	r2, r0
 800420a:	693b      	ldr	r3, [r7, #16]
 800420c:	1ad3      	subs	r3, r2, r3
 800420e:	2b02      	cmp	r3, #2
 8004210:	d901      	bls.n	8004216 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004212:	2303      	movs	r3, #3
 8004214:	e045      	b.n	80042a2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004216:	4b06      	ldr	r3, [pc, #24]	@ (8004230 <HAL_RCC_OscConfig+0x470>)
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800421e:	2b00      	cmp	r3, #0
 8004220:	d1f0      	bne.n	8004204 <HAL_RCC_OscConfig+0x444>
 8004222:	e03d      	b.n	80042a0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	699b      	ldr	r3, [r3, #24]
 8004228:	2b01      	cmp	r3, #1
 800422a:	d107      	bne.n	800423c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800422c:	2301      	movs	r3, #1
 800422e:	e038      	b.n	80042a2 <HAL_RCC_OscConfig+0x4e2>
 8004230:	40023800 	.word	0x40023800
 8004234:	40007000 	.word	0x40007000
 8004238:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800423c:	4b1b      	ldr	r3, [pc, #108]	@ (80042ac <HAL_RCC_OscConfig+0x4ec>)
 800423e:	685b      	ldr	r3, [r3, #4]
 8004240:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	699b      	ldr	r3, [r3, #24]
 8004246:	2b01      	cmp	r3, #1
 8004248:	d028      	beq.n	800429c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004254:	429a      	cmp	r2, r3
 8004256:	d121      	bne.n	800429c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004262:	429a      	cmp	r2, r3
 8004264:	d11a      	bne.n	800429c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004266:	68fa      	ldr	r2, [r7, #12]
 8004268:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800426c:	4013      	ands	r3, r2
 800426e:	687a      	ldr	r2, [r7, #4]
 8004270:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004272:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004274:	4293      	cmp	r3, r2
 8004276:	d111      	bne.n	800429c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004282:	085b      	lsrs	r3, r3, #1
 8004284:	3b01      	subs	r3, #1
 8004286:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004288:	429a      	cmp	r2, r3
 800428a:	d107      	bne.n	800429c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004296:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004298:	429a      	cmp	r2, r3
 800429a:	d001      	beq.n	80042a0 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800429c:	2301      	movs	r3, #1
 800429e:	e000      	b.n	80042a2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80042a0:	2300      	movs	r3, #0
}
 80042a2:	4618      	mov	r0, r3
 80042a4:	3718      	adds	r7, #24
 80042a6:	46bd      	mov	sp, r7
 80042a8:	bd80      	pop	{r7, pc}
 80042aa:	bf00      	nop
 80042ac:	40023800 	.word	0x40023800

080042b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80042b0:	b580      	push	{r7, lr}
 80042b2:	b084      	sub	sp, #16
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
 80042b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d101      	bne.n	80042c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80042c0:	2301      	movs	r3, #1
 80042c2:	e0cc      	b.n	800445e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80042c4:	4b68      	ldr	r3, [pc, #416]	@ (8004468 <HAL_RCC_ClockConfig+0x1b8>)
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f003 0307 	and.w	r3, r3, #7
 80042cc:	683a      	ldr	r2, [r7, #0]
 80042ce:	429a      	cmp	r2, r3
 80042d0:	d90c      	bls.n	80042ec <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042d2:	4b65      	ldr	r3, [pc, #404]	@ (8004468 <HAL_RCC_ClockConfig+0x1b8>)
 80042d4:	683a      	ldr	r2, [r7, #0]
 80042d6:	b2d2      	uxtb	r2, r2
 80042d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80042da:	4b63      	ldr	r3, [pc, #396]	@ (8004468 <HAL_RCC_ClockConfig+0x1b8>)
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f003 0307 	and.w	r3, r3, #7
 80042e2:	683a      	ldr	r2, [r7, #0]
 80042e4:	429a      	cmp	r2, r3
 80042e6:	d001      	beq.n	80042ec <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80042e8:	2301      	movs	r3, #1
 80042ea:	e0b8      	b.n	800445e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f003 0302 	and.w	r3, r3, #2
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d020      	beq.n	800433a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f003 0304 	and.w	r3, r3, #4
 8004300:	2b00      	cmp	r3, #0
 8004302:	d005      	beq.n	8004310 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004304:	4b59      	ldr	r3, [pc, #356]	@ (800446c <HAL_RCC_ClockConfig+0x1bc>)
 8004306:	689b      	ldr	r3, [r3, #8]
 8004308:	4a58      	ldr	r2, [pc, #352]	@ (800446c <HAL_RCC_ClockConfig+0x1bc>)
 800430a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800430e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f003 0308 	and.w	r3, r3, #8
 8004318:	2b00      	cmp	r3, #0
 800431a:	d005      	beq.n	8004328 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800431c:	4b53      	ldr	r3, [pc, #332]	@ (800446c <HAL_RCC_ClockConfig+0x1bc>)
 800431e:	689b      	ldr	r3, [r3, #8]
 8004320:	4a52      	ldr	r2, [pc, #328]	@ (800446c <HAL_RCC_ClockConfig+0x1bc>)
 8004322:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004326:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004328:	4b50      	ldr	r3, [pc, #320]	@ (800446c <HAL_RCC_ClockConfig+0x1bc>)
 800432a:	689b      	ldr	r3, [r3, #8]
 800432c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	689b      	ldr	r3, [r3, #8]
 8004334:	494d      	ldr	r1, [pc, #308]	@ (800446c <HAL_RCC_ClockConfig+0x1bc>)
 8004336:	4313      	orrs	r3, r2
 8004338:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f003 0301 	and.w	r3, r3, #1
 8004342:	2b00      	cmp	r3, #0
 8004344:	d044      	beq.n	80043d0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	685b      	ldr	r3, [r3, #4]
 800434a:	2b01      	cmp	r3, #1
 800434c:	d107      	bne.n	800435e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800434e:	4b47      	ldr	r3, [pc, #284]	@ (800446c <HAL_RCC_ClockConfig+0x1bc>)
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004356:	2b00      	cmp	r3, #0
 8004358:	d119      	bne.n	800438e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800435a:	2301      	movs	r3, #1
 800435c:	e07f      	b.n	800445e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	685b      	ldr	r3, [r3, #4]
 8004362:	2b02      	cmp	r3, #2
 8004364:	d003      	beq.n	800436e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800436a:	2b03      	cmp	r3, #3
 800436c:	d107      	bne.n	800437e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800436e:	4b3f      	ldr	r3, [pc, #252]	@ (800446c <HAL_RCC_ClockConfig+0x1bc>)
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004376:	2b00      	cmp	r3, #0
 8004378:	d109      	bne.n	800438e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800437a:	2301      	movs	r3, #1
 800437c:	e06f      	b.n	800445e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800437e:	4b3b      	ldr	r3, [pc, #236]	@ (800446c <HAL_RCC_ClockConfig+0x1bc>)
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f003 0302 	and.w	r3, r3, #2
 8004386:	2b00      	cmp	r3, #0
 8004388:	d101      	bne.n	800438e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800438a:	2301      	movs	r3, #1
 800438c:	e067      	b.n	800445e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800438e:	4b37      	ldr	r3, [pc, #220]	@ (800446c <HAL_RCC_ClockConfig+0x1bc>)
 8004390:	689b      	ldr	r3, [r3, #8]
 8004392:	f023 0203 	bic.w	r2, r3, #3
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	685b      	ldr	r3, [r3, #4]
 800439a:	4934      	ldr	r1, [pc, #208]	@ (800446c <HAL_RCC_ClockConfig+0x1bc>)
 800439c:	4313      	orrs	r3, r2
 800439e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80043a0:	f7fd fd08 	bl	8001db4 <HAL_GetTick>
 80043a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043a6:	e00a      	b.n	80043be <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80043a8:	f7fd fd04 	bl	8001db4 <HAL_GetTick>
 80043ac:	4602      	mov	r2, r0
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	1ad3      	subs	r3, r2, r3
 80043b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80043b6:	4293      	cmp	r3, r2
 80043b8:	d901      	bls.n	80043be <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80043ba:	2303      	movs	r3, #3
 80043bc:	e04f      	b.n	800445e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043be:	4b2b      	ldr	r3, [pc, #172]	@ (800446c <HAL_RCC_ClockConfig+0x1bc>)
 80043c0:	689b      	ldr	r3, [r3, #8]
 80043c2:	f003 020c 	and.w	r2, r3, #12
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	685b      	ldr	r3, [r3, #4]
 80043ca:	009b      	lsls	r3, r3, #2
 80043cc:	429a      	cmp	r2, r3
 80043ce:	d1eb      	bne.n	80043a8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80043d0:	4b25      	ldr	r3, [pc, #148]	@ (8004468 <HAL_RCC_ClockConfig+0x1b8>)
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f003 0307 	and.w	r3, r3, #7
 80043d8:	683a      	ldr	r2, [r7, #0]
 80043da:	429a      	cmp	r2, r3
 80043dc:	d20c      	bcs.n	80043f8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043de:	4b22      	ldr	r3, [pc, #136]	@ (8004468 <HAL_RCC_ClockConfig+0x1b8>)
 80043e0:	683a      	ldr	r2, [r7, #0]
 80043e2:	b2d2      	uxtb	r2, r2
 80043e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80043e6:	4b20      	ldr	r3, [pc, #128]	@ (8004468 <HAL_RCC_ClockConfig+0x1b8>)
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f003 0307 	and.w	r3, r3, #7
 80043ee:	683a      	ldr	r2, [r7, #0]
 80043f0:	429a      	cmp	r2, r3
 80043f2:	d001      	beq.n	80043f8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80043f4:	2301      	movs	r3, #1
 80043f6:	e032      	b.n	800445e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f003 0304 	and.w	r3, r3, #4
 8004400:	2b00      	cmp	r3, #0
 8004402:	d008      	beq.n	8004416 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004404:	4b19      	ldr	r3, [pc, #100]	@ (800446c <HAL_RCC_ClockConfig+0x1bc>)
 8004406:	689b      	ldr	r3, [r3, #8]
 8004408:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	68db      	ldr	r3, [r3, #12]
 8004410:	4916      	ldr	r1, [pc, #88]	@ (800446c <HAL_RCC_ClockConfig+0x1bc>)
 8004412:	4313      	orrs	r3, r2
 8004414:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f003 0308 	and.w	r3, r3, #8
 800441e:	2b00      	cmp	r3, #0
 8004420:	d009      	beq.n	8004436 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004422:	4b12      	ldr	r3, [pc, #72]	@ (800446c <HAL_RCC_ClockConfig+0x1bc>)
 8004424:	689b      	ldr	r3, [r3, #8]
 8004426:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	691b      	ldr	r3, [r3, #16]
 800442e:	00db      	lsls	r3, r3, #3
 8004430:	490e      	ldr	r1, [pc, #56]	@ (800446c <HAL_RCC_ClockConfig+0x1bc>)
 8004432:	4313      	orrs	r3, r2
 8004434:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004436:	f000 f821 	bl	800447c <HAL_RCC_GetSysClockFreq>
 800443a:	4602      	mov	r2, r0
 800443c:	4b0b      	ldr	r3, [pc, #44]	@ (800446c <HAL_RCC_ClockConfig+0x1bc>)
 800443e:	689b      	ldr	r3, [r3, #8]
 8004440:	091b      	lsrs	r3, r3, #4
 8004442:	f003 030f 	and.w	r3, r3, #15
 8004446:	490a      	ldr	r1, [pc, #40]	@ (8004470 <HAL_RCC_ClockConfig+0x1c0>)
 8004448:	5ccb      	ldrb	r3, [r1, r3]
 800444a:	fa22 f303 	lsr.w	r3, r2, r3
 800444e:	4a09      	ldr	r2, [pc, #36]	@ (8004474 <HAL_RCC_ClockConfig+0x1c4>)
 8004450:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004452:	4b09      	ldr	r3, [pc, #36]	@ (8004478 <HAL_RCC_ClockConfig+0x1c8>)
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	4618      	mov	r0, r3
 8004458:	f7fd fb26 	bl	8001aa8 <HAL_InitTick>

  return HAL_OK;
 800445c:	2300      	movs	r3, #0
}
 800445e:	4618      	mov	r0, r3
 8004460:	3710      	adds	r7, #16
 8004462:	46bd      	mov	sp, r7
 8004464:	bd80      	pop	{r7, pc}
 8004466:	bf00      	nop
 8004468:	40023c00 	.word	0x40023c00
 800446c:	40023800 	.word	0x40023800
 8004470:	0800f194 	.word	0x0800f194
 8004474:	20000014 	.word	0x20000014
 8004478:	20000018 	.word	0x20000018

0800447c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800447c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004480:	b090      	sub	sp, #64	@ 0x40
 8004482:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004484:	2300      	movs	r3, #0
 8004486:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8004488:	2300      	movs	r3, #0
 800448a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 800448c:	2300      	movs	r3, #0
 800448e:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8004490:	2300      	movs	r3, #0
 8004492:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004494:	4b59      	ldr	r3, [pc, #356]	@ (80045fc <HAL_RCC_GetSysClockFreq+0x180>)
 8004496:	689b      	ldr	r3, [r3, #8]
 8004498:	f003 030c 	and.w	r3, r3, #12
 800449c:	2b08      	cmp	r3, #8
 800449e:	d00d      	beq.n	80044bc <HAL_RCC_GetSysClockFreq+0x40>
 80044a0:	2b08      	cmp	r3, #8
 80044a2:	f200 80a1 	bhi.w	80045e8 <HAL_RCC_GetSysClockFreq+0x16c>
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d002      	beq.n	80044b0 <HAL_RCC_GetSysClockFreq+0x34>
 80044aa:	2b04      	cmp	r3, #4
 80044ac:	d003      	beq.n	80044b6 <HAL_RCC_GetSysClockFreq+0x3a>
 80044ae:	e09b      	b.n	80045e8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80044b0:	4b53      	ldr	r3, [pc, #332]	@ (8004600 <HAL_RCC_GetSysClockFreq+0x184>)
 80044b2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80044b4:	e09b      	b.n	80045ee <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80044b6:	4b53      	ldr	r3, [pc, #332]	@ (8004604 <HAL_RCC_GetSysClockFreq+0x188>)
 80044b8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80044ba:	e098      	b.n	80045ee <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80044bc:	4b4f      	ldr	r3, [pc, #316]	@ (80045fc <HAL_RCC_GetSysClockFreq+0x180>)
 80044be:	685b      	ldr	r3, [r3, #4]
 80044c0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80044c4:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80044c6:	4b4d      	ldr	r3, [pc, #308]	@ (80045fc <HAL_RCC_GetSysClockFreq+0x180>)
 80044c8:	685b      	ldr	r3, [r3, #4]
 80044ca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d028      	beq.n	8004524 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80044d2:	4b4a      	ldr	r3, [pc, #296]	@ (80045fc <HAL_RCC_GetSysClockFreq+0x180>)
 80044d4:	685b      	ldr	r3, [r3, #4]
 80044d6:	099b      	lsrs	r3, r3, #6
 80044d8:	2200      	movs	r2, #0
 80044da:	623b      	str	r3, [r7, #32]
 80044dc:	627a      	str	r2, [r7, #36]	@ 0x24
 80044de:	6a3b      	ldr	r3, [r7, #32]
 80044e0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80044e4:	2100      	movs	r1, #0
 80044e6:	4b47      	ldr	r3, [pc, #284]	@ (8004604 <HAL_RCC_GetSysClockFreq+0x188>)
 80044e8:	fb03 f201 	mul.w	r2, r3, r1
 80044ec:	2300      	movs	r3, #0
 80044ee:	fb00 f303 	mul.w	r3, r0, r3
 80044f2:	4413      	add	r3, r2
 80044f4:	4a43      	ldr	r2, [pc, #268]	@ (8004604 <HAL_RCC_GetSysClockFreq+0x188>)
 80044f6:	fba0 1202 	umull	r1, r2, r0, r2
 80044fa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80044fc:	460a      	mov	r2, r1
 80044fe:	62ba      	str	r2, [r7, #40]	@ 0x28
 8004500:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004502:	4413      	add	r3, r2
 8004504:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004506:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004508:	2200      	movs	r2, #0
 800450a:	61bb      	str	r3, [r7, #24]
 800450c:	61fa      	str	r2, [r7, #28]
 800450e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004512:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8004516:	f7fb feb3 	bl	8000280 <__aeabi_uldivmod>
 800451a:	4602      	mov	r2, r0
 800451c:	460b      	mov	r3, r1
 800451e:	4613      	mov	r3, r2
 8004520:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004522:	e053      	b.n	80045cc <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004524:	4b35      	ldr	r3, [pc, #212]	@ (80045fc <HAL_RCC_GetSysClockFreq+0x180>)
 8004526:	685b      	ldr	r3, [r3, #4]
 8004528:	099b      	lsrs	r3, r3, #6
 800452a:	2200      	movs	r2, #0
 800452c:	613b      	str	r3, [r7, #16]
 800452e:	617a      	str	r2, [r7, #20]
 8004530:	693b      	ldr	r3, [r7, #16]
 8004532:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004536:	f04f 0b00 	mov.w	fp, #0
 800453a:	4652      	mov	r2, sl
 800453c:	465b      	mov	r3, fp
 800453e:	f04f 0000 	mov.w	r0, #0
 8004542:	f04f 0100 	mov.w	r1, #0
 8004546:	0159      	lsls	r1, r3, #5
 8004548:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800454c:	0150      	lsls	r0, r2, #5
 800454e:	4602      	mov	r2, r0
 8004550:	460b      	mov	r3, r1
 8004552:	ebb2 080a 	subs.w	r8, r2, sl
 8004556:	eb63 090b 	sbc.w	r9, r3, fp
 800455a:	f04f 0200 	mov.w	r2, #0
 800455e:	f04f 0300 	mov.w	r3, #0
 8004562:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004566:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800456a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800456e:	ebb2 0408 	subs.w	r4, r2, r8
 8004572:	eb63 0509 	sbc.w	r5, r3, r9
 8004576:	f04f 0200 	mov.w	r2, #0
 800457a:	f04f 0300 	mov.w	r3, #0
 800457e:	00eb      	lsls	r3, r5, #3
 8004580:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004584:	00e2      	lsls	r2, r4, #3
 8004586:	4614      	mov	r4, r2
 8004588:	461d      	mov	r5, r3
 800458a:	eb14 030a 	adds.w	r3, r4, sl
 800458e:	603b      	str	r3, [r7, #0]
 8004590:	eb45 030b 	adc.w	r3, r5, fp
 8004594:	607b      	str	r3, [r7, #4]
 8004596:	f04f 0200 	mov.w	r2, #0
 800459a:	f04f 0300 	mov.w	r3, #0
 800459e:	e9d7 4500 	ldrd	r4, r5, [r7]
 80045a2:	4629      	mov	r1, r5
 80045a4:	028b      	lsls	r3, r1, #10
 80045a6:	4621      	mov	r1, r4
 80045a8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80045ac:	4621      	mov	r1, r4
 80045ae:	028a      	lsls	r2, r1, #10
 80045b0:	4610      	mov	r0, r2
 80045b2:	4619      	mov	r1, r3
 80045b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80045b6:	2200      	movs	r2, #0
 80045b8:	60bb      	str	r3, [r7, #8]
 80045ba:	60fa      	str	r2, [r7, #12]
 80045bc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80045c0:	f7fb fe5e 	bl	8000280 <__aeabi_uldivmod>
 80045c4:	4602      	mov	r2, r0
 80045c6:	460b      	mov	r3, r1
 80045c8:	4613      	mov	r3, r2
 80045ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80045cc:	4b0b      	ldr	r3, [pc, #44]	@ (80045fc <HAL_RCC_GetSysClockFreq+0x180>)
 80045ce:	685b      	ldr	r3, [r3, #4]
 80045d0:	0c1b      	lsrs	r3, r3, #16
 80045d2:	f003 0303 	and.w	r3, r3, #3
 80045d6:	3301      	adds	r3, #1
 80045d8:	005b      	lsls	r3, r3, #1
 80045da:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80045dc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80045de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80045e4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80045e6:	e002      	b.n	80045ee <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80045e8:	4b05      	ldr	r3, [pc, #20]	@ (8004600 <HAL_RCC_GetSysClockFreq+0x184>)
 80045ea:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80045ec:	bf00      	nop
    }
  }
  return sysclockfreq;
 80045ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80045f0:	4618      	mov	r0, r3
 80045f2:	3740      	adds	r7, #64	@ 0x40
 80045f4:	46bd      	mov	sp, r7
 80045f6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80045fa:	bf00      	nop
 80045fc:	40023800 	.word	0x40023800
 8004600:	00f42400 	.word	0x00f42400
 8004604:	017d7840 	.word	0x017d7840

08004608 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004608:	b480      	push	{r7}
 800460a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800460c:	4b03      	ldr	r3, [pc, #12]	@ (800461c <HAL_RCC_GetHCLKFreq+0x14>)
 800460e:	681b      	ldr	r3, [r3, #0]
}
 8004610:	4618      	mov	r0, r3
 8004612:	46bd      	mov	sp, r7
 8004614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004618:	4770      	bx	lr
 800461a:	bf00      	nop
 800461c:	20000014 	.word	0x20000014

08004620 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004620:	b580      	push	{r7, lr}
 8004622:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004624:	f7ff fff0 	bl	8004608 <HAL_RCC_GetHCLKFreq>
 8004628:	4602      	mov	r2, r0
 800462a:	4b05      	ldr	r3, [pc, #20]	@ (8004640 <HAL_RCC_GetPCLK1Freq+0x20>)
 800462c:	689b      	ldr	r3, [r3, #8]
 800462e:	0a9b      	lsrs	r3, r3, #10
 8004630:	f003 0307 	and.w	r3, r3, #7
 8004634:	4903      	ldr	r1, [pc, #12]	@ (8004644 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004636:	5ccb      	ldrb	r3, [r1, r3]
 8004638:	fa22 f303 	lsr.w	r3, r2, r3
}
 800463c:	4618      	mov	r0, r3
 800463e:	bd80      	pop	{r7, pc}
 8004640:	40023800 	.word	0x40023800
 8004644:	0800f1a4 	.word	0x0800f1a4

08004648 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004648:	b580      	push	{r7, lr}
 800464a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800464c:	f7ff ffdc 	bl	8004608 <HAL_RCC_GetHCLKFreq>
 8004650:	4602      	mov	r2, r0
 8004652:	4b05      	ldr	r3, [pc, #20]	@ (8004668 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004654:	689b      	ldr	r3, [r3, #8]
 8004656:	0b5b      	lsrs	r3, r3, #13
 8004658:	f003 0307 	and.w	r3, r3, #7
 800465c:	4903      	ldr	r1, [pc, #12]	@ (800466c <HAL_RCC_GetPCLK2Freq+0x24>)
 800465e:	5ccb      	ldrb	r3, [r1, r3]
 8004660:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004664:	4618      	mov	r0, r3
 8004666:	bd80      	pop	{r7, pc}
 8004668:	40023800 	.word	0x40023800
 800466c:	0800f1a4 	.word	0x0800f1a4

08004670 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004670:	b480      	push	{r7}
 8004672:	b083      	sub	sp, #12
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
 8004678:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	220f      	movs	r2, #15
 800467e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004680:	4b12      	ldr	r3, [pc, #72]	@ (80046cc <HAL_RCC_GetClockConfig+0x5c>)
 8004682:	689b      	ldr	r3, [r3, #8]
 8004684:	f003 0203 	and.w	r2, r3, #3
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800468c:	4b0f      	ldr	r3, [pc, #60]	@ (80046cc <HAL_RCC_GetClockConfig+0x5c>)
 800468e:	689b      	ldr	r3, [r3, #8]
 8004690:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004698:	4b0c      	ldr	r3, [pc, #48]	@ (80046cc <HAL_RCC_GetClockConfig+0x5c>)
 800469a:	689b      	ldr	r3, [r3, #8]
 800469c:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80046a4:	4b09      	ldr	r3, [pc, #36]	@ (80046cc <HAL_RCC_GetClockConfig+0x5c>)
 80046a6:	689b      	ldr	r3, [r3, #8]
 80046a8:	08db      	lsrs	r3, r3, #3
 80046aa:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80046b2:	4b07      	ldr	r3, [pc, #28]	@ (80046d0 <HAL_RCC_GetClockConfig+0x60>)
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f003 0207 	and.w	r2, r3, #7
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	601a      	str	r2, [r3, #0]
}
 80046be:	bf00      	nop
 80046c0:	370c      	adds	r7, #12
 80046c2:	46bd      	mov	sp, r7
 80046c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c8:	4770      	bx	lr
 80046ca:	bf00      	nop
 80046cc:	40023800 	.word	0x40023800
 80046d0:	40023c00 	.word	0x40023c00

080046d4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80046d4:	b580      	push	{r7, lr}
 80046d6:	b082      	sub	sp, #8
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d101      	bne.n	80046e6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80046e2:	2301      	movs	r3, #1
 80046e4:	e07b      	b.n	80047de <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d108      	bne.n	8004700 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	685b      	ldr	r3, [r3, #4]
 80046f2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80046f6:	d009      	beq.n	800470c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2200      	movs	r2, #0
 80046fc:	61da      	str	r2, [r3, #28]
 80046fe:	e005      	b.n	800470c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2200      	movs	r2, #0
 8004704:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	2200      	movs	r2, #0
 800470a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2200      	movs	r2, #0
 8004710:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004718:	b2db      	uxtb	r3, r3
 800471a:	2b00      	cmp	r3, #0
 800471c:	d106      	bne.n	800472c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	2200      	movs	r2, #0
 8004722:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004726:	6878      	ldr	r0, [r7, #4]
 8004728:	f7fd f840 	bl	80017ac <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	2202      	movs	r2, #2
 8004730:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	681a      	ldr	r2, [r3, #0]
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004742:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	685b      	ldr	r3, [r3, #4]
 8004748:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	689b      	ldr	r3, [r3, #8]
 8004750:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004754:	431a      	orrs	r2, r3
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	68db      	ldr	r3, [r3, #12]
 800475a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800475e:	431a      	orrs	r2, r3
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	691b      	ldr	r3, [r3, #16]
 8004764:	f003 0302 	and.w	r3, r3, #2
 8004768:	431a      	orrs	r2, r3
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	695b      	ldr	r3, [r3, #20]
 800476e:	f003 0301 	and.w	r3, r3, #1
 8004772:	431a      	orrs	r2, r3
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	699b      	ldr	r3, [r3, #24]
 8004778:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800477c:	431a      	orrs	r2, r3
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	69db      	ldr	r3, [r3, #28]
 8004782:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004786:	431a      	orrs	r2, r3
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	6a1b      	ldr	r3, [r3, #32]
 800478c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004790:	ea42 0103 	orr.w	r1, r2, r3
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004798:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	430a      	orrs	r2, r1
 80047a2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	699b      	ldr	r3, [r3, #24]
 80047a8:	0c1b      	lsrs	r3, r3, #16
 80047aa:	f003 0104 	and.w	r1, r3, #4
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047b2:	f003 0210 	and.w	r2, r3, #16
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	430a      	orrs	r2, r1
 80047bc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	69da      	ldr	r2, [r3, #28]
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80047cc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	2200      	movs	r2, #0
 80047d2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2201      	movs	r2, #1
 80047d8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80047dc:	2300      	movs	r3, #0
}
 80047de:	4618      	mov	r0, r3
 80047e0:	3708      	adds	r7, #8
 80047e2:	46bd      	mov	sp, r7
 80047e4:	bd80      	pop	{r7, pc}

080047e6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80047e6:	b580      	push	{r7, lr}
 80047e8:	b088      	sub	sp, #32
 80047ea:	af00      	add	r7, sp, #0
 80047ec:	60f8      	str	r0, [r7, #12]
 80047ee:	60b9      	str	r1, [r7, #8]
 80047f0:	603b      	str	r3, [r7, #0]
 80047f2:	4613      	mov	r3, r2
 80047f4:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80047f6:	f7fd fadd 	bl	8001db4 <HAL_GetTick>
 80047fa:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80047fc:	88fb      	ldrh	r3, [r7, #6]
 80047fe:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004806:	b2db      	uxtb	r3, r3
 8004808:	2b01      	cmp	r3, #1
 800480a:	d001      	beq.n	8004810 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 800480c:	2302      	movs	r3, #2
 800480e:	e12a      	b.n	8004a66 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8004810:	68bb      	ldr	r3, [r7, #8]
 8004812:	2b00      	cmp	r3, #0
 8004814:	d002      	beq.n	800481c <HAL_SPI_Transmit+0x36>
 8004816:	88fb      	ldrh	r3, [r7, #6]
 8004818:	2b00      	cmp	r3, #0
 800481a:	d101      	bne.n	8004820 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 800481c:	2301      	movs	r3, #1
 800481e:	e122      	b.n	8004a66 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004826:	2b01      	cmp	r3, #1
 8004828:	d101      	bne.n	800482e <HAL_SPI_Transmit+0x48>
 800482a:	2302      	movs	r3, #2
 800482c:	e11b      	b.n	8004a66 <HAL_SPI_Transmit+0x280>
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	2201      	movs	r2, #1
 8004832:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	2203      	movs	r2, #3
 800483a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	2200      	movs	r2, #0
 8004842:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	68ba      	ldr	r2, [r7, #8]
 8004848:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	88fa      	ldrh	r2, [r7, #6]
 800484e:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	88fa      	ldrh	r2, [r7, #6]
 8004854:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	2200      	movs	r2, #0
 800485a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	2200      	movs	r2, #0
 8004860:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	2200      	movs	r2, #0
 8004866:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	2200      	movs	r2, #0
 800486c:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	2200      	movs	r2, #0
 8004872:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	689b      	ldr	r3, [r3, #8]
 8004878:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800487c:	d10f      	bne.n	800489e <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	681a      	ldr	r2, [r3, #0]
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800488c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	681a      	ldr	r2, [r3, #0]
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800489c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80048a8:	2b40      	cmp	r3, #64	@ 0x40
 80048aa:	d007      	beq.n	80048bc <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	681a      	ldr	r2, [r3, #0]
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80048ba:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	68db      	ldr	r3, [r3, #12]
 80048c0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80048c4:	d152      	bne.n	800496c <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	685b      	ldr	r3, [r3, #4]
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d002      	beq.n	80048d4 <HAL_SPI_Transmit+0xee>
 80048ce:	8b7b      	ldrh	r3, [r7, #26]
 80048d0:	2b01      	cmp	r3, #1
 80048d2:	d145      	bne.n	8004960 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048d8:	881a      	ldrh	r2, [r3, #0]
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048e4:	1c9a      	adds	r2, r3, #2
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80048ee:	b29b      	uxth	r3, r3
 80048f0:	3b01      	subs	r3, #1
 80048f2:	b29a      	uxth	r2, r3
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80048f8:	e032      	b.n	8004960 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	689b      	ldr	r3, [r3, #8]
 8004900:	f003 0302 	and.w	r3, r3, #2
 8004904:	2b02      	cmp	r3, #2
 8004906:	d112      	bne.n	800492e <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800490c:	881a      	ldrh	r2, [r3, #0]
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004918:	1c9a      	adds	r2, r3, #2
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004922:	b29b      	uxth	r3, r3
 8004924:	3b01      	subs	r3, #1
 8004926:	b29a      	uxth	r2, r3
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	86da      	strh	r2, [r3, #54]	@ 0x36
 800492c:	e018      	b.n	8004960 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800492e:	f7fd fa41 	bl	8001db4 <HAL_GetTick>
 8004932:	4602      	mov	r2, r0
 8004934:	69fb      	ldr	r3, [r7, #28]
 8004936:	1ad3      	subs	r3, r2, r3
 8004938:	683a      	ldr	r2, [r7, #0]
 800493a:	429a      	cmp	r2, r3
 800493c:	d803      	bhi.n	8004946 <HAL_SPI_Transmit+0x160>
 800493e:	683b      	ldr	r3, [r7, #0]
 8004940:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004944:	d102      	bne.n	800494c <HAL_SPI_Transmit+0x166>
 8004946:	683b      	ldr	r3, [r7, #0]
 8004948:	2b00      	cmp	r3, #0
 800494a:	d109      	bne.n	8004960 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	2201      	movs	r2, #1
 8004950:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	2200      	movs	r2, #0
 8004958:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800495c:	2303      	movs	r3, #3
 800495e:	e082      	b.n	8004a66 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004964:	b29b      	uxth	r3, r3
 8004966:	2b00      	cmp	r3, #0
 8004968:	d1c7      	bne.n	80048fa <HAL_SPI_Transmit+0x114>
 800496a:	e053      	b.n	8004a14 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	685b      	ldr	r3, [r3, #4]
 8004970:	2b00      	cmp	r3, #0
 8004972:	d002      	beq.n	800497a <HAL_SPI_Transmit+0x194>
 8004974:	8b7b      	ldrh	r3, [r7, #26]
 8004976:	2b01      	cmp	r3, #1
 8004978:	d147      	bne.n	8004a0a <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	330c      	adds	r3, #12
 8004984:	7812      	ldrb	r2, [r2, #0]
 8004986:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800498c:	1c5a      	adds	r2, r3, #1
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004996:	b29b      	uxth	r3, r3
 8004998:	3b01      	subs	r3, #1
 800499a:	b29a      	uxth	r2, r3
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80049a0:	e033      	b.n	8004a0a <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	689b      	ldr	r3, [r3, #8]
 80049a8:	f003 0302 	and.w	r3, r3, #2
 80049ac:	2b02      	cmp	r3, #2
 80049ae:	d113      	bne.n	80049d8 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	330c      	adds	r3, #12
 80049ba:	7812      	ldrb	r2, [r2, #0]
 80049bc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049c2:	1c5a      	adds	r2, r3, #1
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80049cc:	b29b      	uxth	r3, r3
 80049ce:	3b01      	subs	r3, #1
 80049d0:	b29a      	uxth	r2, r3
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	86da      	strh	r2, [r3, #54]	@ 0x36
 80049d6:	e018      	b.n	8004a0a <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80049d8:	f7fd f9ec 	bl	8001db4 <HAL_GetTick>
 80049dc:	4602      	mov	r2, r0
 80049de:	69fb      	ldr	r3, [r7, #28]
 80049e0:	1ad3      	subs	r3, r2, r3
 80049e2:	683a      	ldr	r2, [r7, #0]
 80049e4:	429a      	cmp	r2, r3
 80049e6:	d803      	bhi.n	80049f0 <HAL_SPI_Transmit+0x20a>
 80049e8:	683b      	ldr	r3, [r7, #0]
 80049ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049ee:	d102      	bne.n	80049f6 <HAL_SPI_Transmit+0x210>
 80049f0:	683b      	ldr	r3, [r7, #0]
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d109      	bne.n	8004a0a <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	2201      	movs	r2, #1
 80049fa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	2200      	movs	r2, #0
 8004a02:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004a06:	2303      	movs	r3, #3
 8004a08:	e02d      	b.n	8004a66 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004a0e:	b29b      	uxth	r3, r3
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d1c6      	bne.n	80049a2 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004a14:	69fa      	ldr	r2, [r7, #28]
 8004a16:	6839      	ldr	r1, [r7, #0]
 8004a18:	68f8      	ldr	r0, [r7, #12]
 8004a1a:	f000 f8b1 	bl	8004b80 <SPI_EndRxTxTransaction>
 8004a1e:	4603      	mov	r3, r0
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d002      	beq.n	8004a2a <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	2220      	movs	r2, #32
 8004a28:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	689b      	ldr	r3, [r3, #8]
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d10a      	bne.n	8004a48 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004a32:	2300      	movs	r3, #0
 8004a34:	617b      	str	r3, [r7, #20]
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	68db      	ldr	r3, [r3, #12]
 8004a3c:	617b      	str	r3, [r7, #20]
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	689b      	ldr	r3, [r3, #8]
 8004a44:	617b      	str	r3, [r7, #20]
 8004a46:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	2201      	movs	r2, #1
 8004a4c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	2200      	movs	r2, #0
 8004a54:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d001      	beq.n	8004a64 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8004a60:	2301      	movs	r3, #1
 8004a62:	e000      	b.n	8004a66 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8004a64:	2300      	movs	r3, #0
  }
}
 8004a66:	4618      	mov	r0, r3
 8004a68:	3720      	adds	r7, #32
 8004a6a:	46bd      	mov	sp, r7
 8004a6c:	bd80      	pop	{r7, pc}
	...

08004a70 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004a70:	b580      	push	{r7, lr}
 8004a72:	b088      	sub	sp, #32
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	60f8      	str	r0, [r7, #12]
 8004a78:	60b9      	str	r1, [r7, #8]
 8004a7a:	603b      	str	r3, [r7, #0]
 8004a7c:	4613      	mov	r3, r2
 8004a7e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004a80:	f7fd f998 	bl	8001db4 <HAL_GetTick>
 8004a84:	4602      	mov	r2, r0
 8004a86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a88:	1a9b      	subs	r3, r3, r2
 8004a8a:	683a      	ldr	r2, [r7, #0]
 8004a8c:	4413      	add	r3, r2
 8004a8e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004a90:	f7fd f990 	bl	8001db4 <HAL_GetTick>
 8004a94:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004a96:	4b39      	ldr	r3, [pc, #228]	@ (8004b7c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	015b      	lsls	r3, r3, #5
 8004a9c:	0d1b      	lsrs	r3, r3, #20
 8004a9e:	69fa      	ldr	r2, [r7, #28]
 8004aa0:	fb02 f303 	mul.w	r3, r2, r3
 8004aa4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004aa6:	e054      	b.n	8004b52 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004aae:	d050      	beq.n	8004b52 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004ab0:	f7fd f980 	bl	8001db4 <HAL_GetTick>
 8004ab4:	4602      	mov	r2, r0
 8004ab6:	69bb      	ldr	r3, [r7, #24]
 8004ab8:	1ad3      	subs	r3, r2, r3
 8004aba:	69fa      	ldr	r2, [r7, #28]
 8004abc:	429a      	cmp	r2, r3
 8004abe:	d902      	bls.n	8004ac6 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004ac0:	69fb      	ldr	r3, [r7, #28]
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d13d      	bne.n	8004b42 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	685a      	ldr	r2, [r3, #4]
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004ad4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	685b      	ldr	r3, [r3, #4]
 8004ada:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004ade:	d111      	bne.n	8004b04 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	689b      	ldr	r3, [r3, #8]
 8004ae4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004ae8:	d004      	beq.n	8004af4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	689b      	ldr	r3, [r3, #8]
 8004aee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004af2:	d107      	bne.n	8004b04 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	681a      	ldr	r2, [r3, #0]
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004b02:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b08:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004b0c:	d10f      	bne.n	8004b2e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	681a      	ldr	r2, [r3, #0]
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004b1c:	601a      	str	r2, [r3, #0]
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	681a      	ldr	r2, [r3, #0]
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004b2c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	2201      	movs	r2, #1
 8004b32:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	2200      	movs	r2, #0
 8004b3a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8004b3e:	2303      	movs	r3, #3
 8004b40:	e017      	b.n	8004b72 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004b42:	697b      	ldr	r3, [r7, #20]
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d101      	bne.n	8004b4c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004b48:	2300      	movs	r3, #0
 8004b4a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004b4c:	697b      	ldr	r3, [r7, #20]
 8004b4e:	3b01      	subs	r3, #1
 8004b50:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	689a      	ldr	r2, [r3, #8]
 8004b58:	68bb      	ldr	r3, [r7, #8]
 8004b5a:	4013      	ands	r3, r2
 8004b5c:	68ba      	ldr	r2, [r7, #8]
 8004b5e:	429a      	cmp	r2, r3
 8004b60:	bf0c      	ite	eq
 8004b62:	2301      	moveq	r3, #1
 8004b64:	2300      	movne	r3, #0
 8004b66:	b2db      	uxtb	r3, r3
 8004b68:	461a      	mov	r2, r3
 8004b6a:	79fb      	ldrb	r3, [r7, #7]
 8004b6c:	429a      	cmp	r2, r3
 8004b6e:	d19b      	bne.n	8004aa8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004b70:	2300      	movs	r3, #0
}
 8004b72:	4618      	mov	r0, r3
 8004b74:	3720      	adds	r7, #32
 8004b76:	46bd      	mov	sp, r7
 8004b78:	bd80      	pop	{r7, pc}
 8004b7a:	bf00      	nop
 8004b7c:	20000014 	.word	0x20000014

08004b80 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004b80:	b580      	push	{r7, lr}
 8004b82:	b088      	sub	sp, #32
 8004b84:	af02      	add	r7, sp, #8
 8004b86:	60f8      	str	r0, [r7, #12]
 8004b88:	60b9      	str	r1, [r7, #8]
 8004b8a:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	9300      	str	r3, [sp, #0]
 8004b90:	68bb      	ldr	r3, [r7, #8]
 8004b92:	2201      	movs	r2, #1
 8004b94:	2102      	movs	r1, #2
 8004b96:	68f8      	ldr	r0, [r7, #12]
 8004b98:	f7ff ff6a 	bl	8004a70 <SPI_WaitFlagStateUntilTimeout>
 8004b9c:	4603      	mov	r3, r0
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d007      	beq.n	8004bb2 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ba6:	f043 0220 	orr.w	r2, r3, #32
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8004bae:	2303      	movs	r3, #3
 8004bb0:	e032      	b.n	8004c18 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004bb2:	4b1b      	ldr	r3, [pc, #108]	@ (8004c20 <SPI_EndRxTxTransaction+0xa0>)
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	4a1b      	ldr	r2, [pc, #108]	@ (8004c24 <SPI_EndRxTxTransaction+0xa4>)
 8004bb8:	fba2 2303 	umull	r2, r3, r2, r3
 8004bbc:	0d5b      	lsrs	r3, r3, #21
 8004bbe:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004bc2:	fb02 f303 	mul.w	r3, r2, r3
 8004bc6:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	685b      	ldr	r3, [r3, #4]
 8004bcc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004bd0:	d112      	bne.n	8004bf8 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	9300      	str	r3, [sp, #0]
 8004bd6:	68bb      	ldr	r3, [r7, #8]
 8004bd8:	2200      	movs	r2, #0
 8004bda:	2180      	movs	r1, #128	@ 0x80
 8004bdc:	68f8      	ldr	r0, [r7, #12]
 8004bde:	f7ff ff47 	bl	8004a70 <SPI_WaitFlagStateUntilTimeout>
 8004be2:	4603      	mov	r3, r0
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d016      	beq.n	8004c16 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004bec:	f043 0220 	orr.w	r2, r3, #32
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8004bf4:	2303      	movs	r3, #3
 8004bf6:	e00f      	b.n	8004c18 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004bf8:	697b      	ldr	r3, [r7, #20]
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d00a      	beq.n	8004c14 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8004bfe:	697b      	ldr	r3, [r7, #20]
 8004c00:	3b01      	subs	r3, #1
 8004c02:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	689b      	ldr	r3, [r3, #8]
 8004c0a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c0e:	2b80      	cmp	r3, #128	@ 0x80
 8004c10:	d0f2      	beq.n	8004bf8 <SPI_EndRxTxTransaction+0x78>
 8004c12:	e000      	b.n	8004c16 <SPI_EndRxTxTransaction+0x96>
        break;
 8004c14:	bf00      	nop
  }

  return HAL_OK;
 8004c16:	2300      	movs	r3, #0
}
 8004c18:	4618      	mov	r0, r3
 8004c1a:	3718      	adds	r7, #24
 8004c1c:	46bd      	mov	sp, r7
 8004c1e:	bd80      	pop	{r7, pc}
 8004c20:	20000014 	.word	0x20000014
 8004c24:	165e9f81 	.word	0x165e9f81

08004c28 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004c28:	b580      	push	{r7, lr}
 8004c2a:	b082      	sub	sp, #8
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d101      	bne.n	8004c3a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004c36:	2301      	movs	r3, #1
 8004c38:	e041      	b.n	8004cbe <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004c40:	b2db      	uxtb	r3, r3
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d106      	bne.n	8004c54 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	2200      	movs	r2, #0
 8004c4a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004c4e:	6878      	ldr	r0, [r7, #4]
 8004c50:	f7fc fdf4 	bl	800183c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2202      	movs	r2, #2
 8004c58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681a      	ldr	r2, [r3, #0]
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	3304      	adds	r3, #4
 8004c64:	4619      	mov	r1, r3
 8004c66:	4610      	mov	r0, r2
 8004c68:	f000 fbd2 	bl	8005410 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2201      	movs	r2, #1
 8004c70:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	2201      	movs	r2, #1
 8004c78:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2201      	movs	r2, #1
 8004c80:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2201      	movs	r2, #1
 8004c88:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	2201      	movs	r2, #1
 8004c90:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	2201      	movs	r2, #1
 8004c98:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	2201      	movs	r2, #1
 8004ca0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	2201      	movs	r2, #1
 8004ca8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	2201      	movs	r2, #1
 8004cb0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	2201      	movs	r2, #1
 8004cb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004cbc:	2300      	movs	r3, #0
}
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	3708      	adds	r7, #8
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	bd80      	pop	{r7, pc}
	...

08004cc8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004cc8:	b480      	push	{r7}
 8004cca:	b085      	sub	sp, #20
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004cd6:	b2db      	uxtb	r3, r3
 8004cd8:	2b01      	cmp	r3, #1
 8004cda:	d001      	beq.n	8004ce0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004cdc:	2301      	movs	r3, #1
 8004cde:	e044      	b.n	8004d6a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2202      	movs	r2, #2
 8004ce4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	68da      	ldr	r2, [r3, #12]
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f042 0201 	orr.w	r2, r2, #1
 8004cf6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	4a1e      	ldr	r2, [pc, #120]	@ (8004d78 <HAL_TIM_Base_Start_IT+0xb0>)
 8004cfe:	4293      	cmp	r3, r2
 8004d00:	d018      	beq.n	8004d34 <HAL_TIM_Base_Start_IT+0x6c>
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004d0a:	d013      	beq.n	8004d34 <HAL_TIM_Base_Start_IT+0x6c>
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	4a1a      	ldr	r2, [pc, #104]	@ (8004d7c <HAL_TIM_Base_Start_IT+0xb4>)
 8004d12:	4293      	cmp	r3, r2
 8004d14:	d00e      	beq.n	8004d34 <HAL_TIM_Base_Start_IT+0x6c>
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	4a19      	ldr	r2, [pc, #100]	@ (8004d80 <HAL_TIM_Base_Start_IT+0xb8>)
 8004d1c:	4293      	cmp	r3, r2
 8004d1e:	d009      	beq.n	8004d34 <HAL_TIM_Base_Start_IT+0x6c>
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	4a17      	ldr	r2, [pc, #92]	@ (8004d84 <HAL_TIM_Base_Start_IT+0xbc>)
 8004d26:	4293      	cmp	r3, r2
 8004d28:	d004      	beq.n	8004d34 <HAL_TIM_Base_Start_IT+0x6c>
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	4a16      	ldr	r2, [pc, #88]	@ (8004d88 <HAL_TIM_Base_Start_IT+0xc0>)
 8004d30:	4293      	cmp	r3, r2
 8004d32:	d111      	bne.n	8004d58 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	689b      	ldr	r3, [r3, #8]
 8004d3a:	f003 0307 	and.w	r3, r3, #7
 8004d3e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	2b06      	cmp	r3, #6
 8004d44:	d010      	beq.n	8004d68 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	681a      	ldr	r2, [r3, #0]
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f042 0201 	orr.w	r2, r2, #1
 8004d54:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d56:	e007      	b.n	8004d68 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	681a      	ldr	r2, [r3, #0]
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f042 0201 	orr.w	r2, r2, #1
 8004d66:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004d68:	2300      	movs	r3, #0
}
 8004d6a:	4618      	mov	r0, r3
 8004d6c:	3714      	adds	r7, #20
 8004d6e:	46bd      	mov	sp, r7
 8004d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d74:	4770      	bx	lr
 8004d76:	bf00      	nop
 8004d78:	40010000 	.word	0x40010000
 8004d7c:	40000400 	.word	0x40000400
 8004d80:	40000800 	.word	0x40000800
 8004d84:	40000c00 	.word	0x40000c00
 8004d88:	40014000 	.word	0x40014000

08004d8c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8004d8c:	b480      	push	{r7}
 8004d8e:	b083      	sub	sp, #12
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	68da      	ldr	r2, [r3, #12]
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f022 0201 	bic.w	r2, r2, #1
 8004da2:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	6a1a      	ldr	r2, [r3, #32]
 8004daa:	f241 1311 	movw	r3, #4369	@ 0x1111
 8004dae:	4013      	ands	r3, r2
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d10f      	bne.n	8004dd4 <HAL_TIM_Base_Stop_IT+0x48>
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	6a1a      	ldr	r2, [r3, #32]
 8004dba:	f240 4344 	movw	r3, #1092	@ 0x444
 8004dbe:	4013      	ands	r3, r2
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d107      	bne.n	8004dd4 <HAL_TIM_Base_Stop_IT+0x48>
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	681a      	ldr	r2, [r3, #0]
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f022 0201 	bic.w	r2, r2, #1
 8004dd2:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2201      	movs	r2, #1
 8004dd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8004ddc:	2300      	movs	r3, #0
}
 8004dde:	4618      	mov	r0, r3
 8004de0:	370c      	adds	r7, #12
 8004de2:	46bd      	mov	sp, r7
 8004de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de8:	4770      	bx	lr

08004dea <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8004dea:	b580      	push	{r7, lr}
 8004dec:	b086      	sub	sp, #24
 8004dee:	af00      	add	r7, sp, #0
 8004df0:	6078      	str	r0, [r7, #4]
 8004df2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d101      	bne.n	8004dfe <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004dfa:	2301      	movs	r3, #1
 8004dfc:	e097      	b.n	8004f2e <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004e04:	b2db      	uxtb	r3, r3
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d106      	bne.n	8004e18 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004e12:	6878      	ldr	r0, [r7, #4]
 8004e14:	f7fc fd38 	bl	8001888 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2202      	movs	r2, #2
 8004e1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	689b      	ldr	r3, [r3, #8]
 8004e26:	687a      	ldr	r2, [r7, #4]
 8004e28:	6812      	ldr	r2, [r2, #0]
 8004e2a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004e2e:	f023 0307 	bic.w	r3, r3, #7
 8004e32:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681a      	ldr	r2, [r3, #0]
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	3304      	adds	r3, #4
 8004e3c:	4619      	mov	r1, r3
 8004e3e:	4610      	mov	r0, r2
 8004e40:	f000 fae6 	bl	8005410 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	689b      	ldr	r3, [r3, #8]
 8004e4a:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	699b      	ldr	r3, [r3, #24]
 8004e52:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	6a1b      	ldr	r3, [r3, #32]
 8004e5a:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004e5c:	683b      	ldr	r3, [r7, #0]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	697a      	ldr	r2, [r7, #20]
 8004e62:	4313      	orrs	r3, r2
 8004e64:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004e66:	693b      	ldr	r3, [r7, #16]
 8004e68:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004e6c:	f023 0303 	bic.w	r3, r3, #3
 8004e70:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004e72:	683b      	ldr	r3, [r7, #0]
 8004e74:	689a      	ldr	r2, [r3, #8]
 8004e76:	683b      	ldr	r3, [r7, #0]
 8004e78:	699b      	ldr	r3, [r3, #24]
 8004e7a:	021b      	lsls	r3, r3, #8
 8004e7c:	4313      	orrs	r3, r2
 8004e7e:	693a      	ldr	r2, [r7, #16]
 8004e80:	4313      	orrs	r3, r2
 8004e82:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004e84:	693b      	ldr	r3, [r7, #16]
 8004e86:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8004e8a:	f023 030c 	bic.w	r3, r3, #12
 8004e8e:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004e90:	693b      	ldr	r3, [r7, #16]
 8004e92:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004e96:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004e9a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004e9c:	683b      	ldr	r3, [r7, #0]
 8004e9e:	68da      	ldr	r2, [r3, #12]
 8004ea0:	683b      	ldr	r3, [r7, #0]
 8004ea2:	69db      	ldr	r3, [r3, #28]
 8004ea4:	021b      	lsls	r3, r3, #8
 8004ea6:	4313      	orrs	r3, r2
 8004ea8:	693a      	ldr	r2, [r7, #16]
 8004eaa:	4313      	orrs	r3, r2
 8004eac:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004eae:	683b      	ldr	r3, [r7, #0]
 8004eb0:	691b      	ldr	r3, [r3, #16]
 8004eb2:	011a      	lsls	r2, r3, #4
 8004eb4:	683b      	ldr	r3, [r7, #0]
 8004eb6:	6a1b      	ldr	r3, [r3, #32]
 8004eb8:	031b      	lsls	r3, r3, #12
 8004eba:	4313      	orrs	r3, r2
 8004ebc:	693a      	ldr	r2, [r7, #16]
 8004ebe:	4313      	orrs	r3, r2
 8004ec0:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8004ec8:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8004ed0:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004ed2:	683b      	ldr	r3, [r7, #0]
 8004ed4:	685a      	ldr	r2, [r3, #4]
 8004ed6:	683b      	ldr	r3, [r7, #0]
 8004ed8:	695b      	ldr	r3, [r3, #20]
 8004eda:	011b      	lsls	r3, r3, #4
 8004edc:	4313      	orrs	r3, r2
 8004ede:	68fa      	ldr	r2, [r7, #12]
 8004ee0:	4313      	orrs	r3, r2
 8004ee2:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	697a      	ldr	r2, [r7, #20]
 8004eea:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	693a      	ldr	r2, [r7, #16]
 8004ef2:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	68fa      	ldr	r2, [r7, #12]
 8004efa:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	2201      	movs	r2, #1
 8004f00:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	2201      	movs	r2, #1
 8004f08:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	2201      	movs	r2, #1
 8004f10:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	2201      	movs	r2, #1
 8004f18:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2201      	movs	r2, #1
 8004f20:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2201      	movs	r2, #1
 8004f28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004f2c:	2300      	movs	r3, #0
}
 8004f2e:	4618      	mov	r0, r3
 8004f30:	3718      	adds	r7, #24
 8004f32:	46bd      	mov	sp, r7
 8004f34:	bd80      	pop	{r7, pc}

08004f36 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004f36:	b580      	push	{r7, lr}
 8004f38:	b084      	sub	sp, #16
 8004f3a:	af00      	add	r7, sp, #0
 8004f3c:	6078      	str	r0, [r7, #4]
 8004f3e:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004f46:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004f4e:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004f56:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8004f5e:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8004f60:	683b      	ldr	r3, [r7, #0]
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d110      	bne.n	8004f88 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004f66:	7bfb      	ldrb	r3, [r7, #15]
 8004f68:	2b01      	cmp	r3, #1
 8004f6a:	d102      	bne.n	8004f72 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8004f6c:	7b7b      	ldrb	r3, [r7, #13]
 8004f6e:	2b01      	cmp	r3, #1
 8004f70:	d001      	beq.n	8004f76 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8004f72:	2301      	movs	r3, #1
 8004f74:	e069      	b.n	800504a <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	2202      	movs	r2, #2
 8004f7a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	2202      	movs	r2, #2
 8004f82:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004f86:	e031      	b.n	8004fec <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8004f88:	683b      	ldr	r3, [r7, #0]
 8004f8a:	2b04      	cmp	r3, #4
 8004f8c:	d110      	bne.n	8004fb0 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004f8e:	7bbb      	ldrb	r3, [r7, #14]
 8004f90:	2b01      	cmp	r3, #1
 8004f92:	d102      	bne.n	8004f9a <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004f94:	7b3b      	ldrb	r3, [r7, #12]
 8004f96:	2b01      	cmp	r3, #1
 8004f98:	d001      	beq.n	8004f9e <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8004f9a:	2301      	movs	r3, #1
 8004f9c:	e055      	b.n	800504a <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	2202      	movs	r2, #2
 8004fa2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	2202      	movs	r2, #2
 8004faa:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004fae:	e01d      	b.n	8004fec <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004fb0:	7bfb      	ldrb	r3, [r7, #15]
 8004fb2:	2b01      	cmp	r3, #1
 8004fb4:	d108      	bne.n	8004fc8 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004fb6:	7bbb      	ldrb	r3, [r7, #14]
 8004fb8:	2b01      	cmp	r3, #1
 8004fba:	d105      	bne.n	8004fc8 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004fbc:	7b7b      	ldrb	r3, [r7, #13]
 8004fbe:	2b01      	cmp	r3, #1
 8004fc0:	d102      	bne.n	8004fc8 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004fc2:	7b3b      	ldrb	r3, [r7, #12]
 8004fc4:	2b01      	cmp	r3, #1
 8004fc6:	d001      	beq.n	8004fcc <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8004fc8:	2301      	movs	r3, #1
 8004fca:	e03e      	b.n	800504a <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2202      	movs	r2, #2
 8004fd0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2202      	movs	r2, #2
 8004fd8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2202      	movs	r2, #2
 8004fe0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	2202      	movs	r2, #2
 8004fe8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8004fec:	683b      	ldr	r3, [r7, #0]
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d003      	beq.n	8004ffa <HAL_TIM_Encoder_Start+0xc4>
 8004ff2:	683b      	ldr	r3, [r7, #0]
 8004ff4:	2b04      	cmp	r3, #4
 8004ff6:	d008      	beq.n	800500a <HAL_TIM_Encoder_Start+0xd4>
 8004ff8:	e00f      	b.n	800501a <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	2201      	movs	r2, #1
 8005000:	2100      	movs	r1, #0
 8005002:	4618      	mov	r0, r3
 8005004:	f000 fb2a 	bl	800565c <TIM_CCxChannelCmd>
      break;
 8005008:	e016      	b.n	8005038 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	2201      	movs	r2, #1
 8005010:	2104      	movs	r1, #4
 8005012:	4618      	mov	r0, r3
 8005014:	f000 fb22 	bl	800565c <TIM_CCxChannelCmd>
      break;
 8005018:	e00e      	b.n	8005038 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	2201      	movs	r2, #1
 8005020:	2100      	movs	r1, #0
 8005022:	4618      	mov	r0, r3
 8005024:	f000 fb1a 	bl	800565c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	2201      	movs	r2, #1
 800502e:	2104      	movs	r1, #4
 8005030:	4618      	mov	r0, r3
 8005032:	f000 fb13 	bl	800565c <TIM_CCxChannelCmd>
      break;
 8005036:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	681a      	ldr	r2, [r3, #0]
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	f042 0201 	orr.w	r2, r2, #1
 8005046:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005048:	2300      	movs	r3, #0
}
 800504a:	4618      	mov	r0, r3
 800504c:	3710      	adds	r7, #16
 800504e:	46bd      	mov	sp, r7
 8005050:	bd80      	pop	{r7, pc}

08005052 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005052:	b580      	push	{r7, lr}
 8005054:	b084      	sub	sp, #16
 8005056:	af00      	add	r7, sp, #0
 8005058:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	68db      	ldr	r3, [r3, #12]
 8005060:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	691b      	ldr	r3, [r3, #16]
 8005068:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800506a:	68bb      	ldr	r3, [r7, #8]
 800506c:	f003 0302 	and.w	r3, r3, #2
 8005070:	2b00      	cmp	r3, #0
 8005072:	d020      	beq.n	80050b6 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	f003 0302 	and.w	r3, r3, #2
 800507a:	2b00      	cmp	r3, #0
 800507c:	d01b      	beq.n	80050b6 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f06f 0202 	mvn.w	r2, #2
 8005086:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2201      	movs	r2, #1
 800508c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	699b      	ldr	r3, [r3, #24]
 8005094:	f003 0303 	and.w	r3, r3, #3
 8005098:	2b00      	cmp	r3, #0
 800509a:	d003      	beq.n	80050a4 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800509c:	6878      	ldr	r0, [r7, #4]
 800509e:	f000 f999 	bl	80053d4 <HAL_TIM_IC_CaptureCallback>
 80050a2:	e005      	b.n	80050b0 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80050a4:	6878      	ldr	r0, [r7, #4]
 80050a6:	f000 f98b 	bl	80053c0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050aa:	6878      	ldr	r0, [r7, #4]
 80050ac:	f000 f99c 	bl	80053e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	2200      	movs	r2, #0
 80050b4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80050b6:	68bb      	ldr	r3, [r7, #8]
 80050b8:	f003 0304 	and.w	r3, r3, #4
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d020      	beq.n	8005102 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	f003 0304 	and.w	r3, r3, #4
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d01b      	beq.n	8005102 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f06f 0204 	mvn.w	r2, #4
 80050d2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	2202      	movs	r2, #2
 80050d8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	699b      	ldr	r3, [r3, #24]
 80050e0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d003      	beq.n	80050f0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80050e8:	6878      	ldr	r0, [r7, #4]
 80050ea:	f000 f973 	bl	80053d4 <HAL_TIM_IC_CaptureCallback>
 80050ee:	e005      	b.n	80050fc <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80050f0:	6878      	ldr	r0, [r7, #4]
 80050f2:	f000 f965 	bl	80053c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050f6:	6878      	ldr	r0, [r7, #4]
 80050f8:	f000 f976 	bl	80053e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	2200      	movs	r2, #0
 8005100:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005102:	68bb      	ldr	r3, [r7, #8]
 8005104:	f003 0308 	and.w	r3, r3, #8
 8005108:	2b00      	cmp	r3, #0
 800510a:	d020      	beq.n	800514e <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	f003 0308 	and.w	r3, r3, #8
 8005112:	2b00      	cmp	r3, #0
 8005114:	d01b      	beq.n	800514e <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	f06f 0208 	mvn.w	r2, #8
 800511e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	2204      	movs	r2, #4
 8005124:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	69db      	ldr	r3, [r3, #28]
 800512c:	f003 0303 	and.w	r3, r3, #3
 8005130:	2b00      	cmp	r3, #0
 8005132:	d003      	beq.n	800513c <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005134:	6878      	ldr	r0, [r7, #4]
 8005136:	f000 f94d 	bl	80053d4 <HAL_TIM_IC_CaptureCallback>
 800513a:	e005      	b.n	8005148 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800513c:	6878      	ldr	r0, [r7, #4]
 800513e:	f000 f93f 	bl	80053c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005142:	6878      	ldr	r0, [r7, #4]
 8005144:	f000 f950 	bl	80053e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2200      	movs	r2, #0
 800514c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800514e:	68bb      	ldr	r3, [r7, #8]
 8005150:	f003 0310 	and.w	r3, r3, #16
 8005154:	2b00      	cmp	r3, #0
 8005156:	d020      	beq.n	800519a <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	f003 0310 	and.w	r3, r3, #16
 800515e:	2b00      	cmp	r3, #0
 8005160:	d01b      	beq.n	800519a <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	f06f 0210 	mvn.w	r2, #16
 800516a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2208      	movs	r2, #8
 8005170:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	69db      	ldr	r3, [r3, #28]
 8005178:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800517c:	2b00      	cmp	r3, #0
 800517e:	d003      	beq.n	8005188 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005180:	6878      	ldr	r0, [r7, #4]
 8005182:	f000 f927 	bl	80053d4 <HAL_TIM_IC_CaptureCallback>
 8005186:	e005      	b.n	8005194 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005188:	6878      	ldr	r0, [r7, #4]
 800518a:	f000 f919 	bl	80053c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800518e:	6878      	ldr	r0, [r7, #4]
 8005190:	f000 f92a 	bl	80053e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	2200      	movs	r2, #0
 8005198:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800519a:	68bb      	ldr	r3, [r7, #8]
 800519c:	f003 0301 	and.w	r3, r3, #1
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d00c      	beq.n	80051be <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	f003 0301 	and.w	r3, r3, #1
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d007      	beq.n	80051be <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f06f 0201 	mvn.w	r2, #1
 80051b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80051b8:	6878      	ldr	r0, [r7, #4]
 80051ba:	f7fb fdf5 	bl	8000da8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80051be:	68bb      	ldr	r3, [r7, #8]
 80051c0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d00c      	beq.n	80051e2 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d007      	beq.n	80051e2 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80051da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80051dc:	6878      	ldr	r0, [r7, #4]
 80051de:	f000 fadb 	bl	8005798 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80051e2:	68bb      	ldr	r3, [r7, #8]
 80051e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d00c      	beq.n	8005206 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d007      	beq.n	8005206 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80051fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005200:	6878      	ldr	r0, [r7, #4]
 8005202:	f000 f8fb 	bl	80053fc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005206:	68bb      	ldr	r3, [r7, #8]
 8005208:	f003 0320 	and.w	r3, r3, #32
 800520c:	2b00      	cmp	r3, #0
 800520e:	d00c      	beq.n	800522a <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	f003 0320 	and.w	r3, r3, #32
 8005216:	2b00      	cmp	r3, #0
 8005218:	d007      	beq.n	800522a <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f06f 0220 	mvn.w	r2, #32
 8005222:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005224:	6878      	ldr	r0, [r7, #4]
 8005226:	f000 faad 	bl	8005784 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800522a:	bf00      	nop
 800522c:	3710      	adds	r7, #16
 800522e:	46bd      	mov	sp, r7
 8005230:	bd80      	pop	{r7, pc}

08005232 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005232:	b580      	push	{r7, lr}
 8005234:	b084      	sub	sp, #16
 8005236:	af00      	add	r7, sp, #0
 8005238:	6078      	str	r0, [r7, #4]
 800523a:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800523c:	2300      	movs	r3, #0
 800523e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005246:	2b01      	cmp	r3, #1
 8005248:	d101      	bne.n	800524e <HAL_TIM_ConfigClockSource+0x1c>
 800524a:	2302      	movs	r3, #2
 800524c:	e0b4      	b.n	80053b8 <HAL_TIM_ConfigClockSource+0x186>
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	2201      	movs	r2, #1
 8005252:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	2202      	movs	r2, #2
 800525a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	689b      	ldr	r3, [r3, #8]
 8005264:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005266:	68bb      	ldr	r3, [r7, #8]
 8005268:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800526c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800526e:	68bb      	ldr	r3, [r7, #8]
 8005270:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005274:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	68ba      	ldr	r2, [r7, #8]
 800527c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800527e:	683b      	ldr	r3, [r7, #0]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005286:	d03e      	beq.n	8005306 <HAL_TIM_ConfigClockSource+0xd4>
 8005288:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800528c:	f200 8087 	bhi.w	800539e <HAL_TIM_ConfigClockSource+0x16c>
 8005290:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005294:	f000 8086 	beq.w	80053a4 <HAL_TIM_ConfigClockSource+0x172>
 8005298:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800529c:	d87f      	bhi.n	800539e <HAL_TIM_ConfigClockSource+0x16c>
 800529e:	2b70      	cmp	r3, #112	@ 0x70
 80052a0:	d01a      	beq.n	80052d8 <HAL_TIM_ConfigClockSource+0xa6>
 80052a2:	2b70      	cmp	r3, #112	@ 0x70
 80052a4:	d87b      	bhi.n	800539e <HAL_TIM_ConfigClockSource+0x16c>
 80052a6:	2b60      	cmp	r3, #96	@ 0x60
 80052a8:	d050      	beq.n	800534c <HAL_TIM_ConfigClockSource+0x11a>
 80052aa:	2b60      	cmp	r3, #96	@ 0x60
 80052ac:	d877      	bhi.n	800539e <HAL_TIM_ConfigClockSource+0x16c>
 80052ae:	2b50      	cmp	r3, #80	@ 0x50
 80052b0:	d03c      	beq.n	800532c <HAL_TIM_ConfigClockSource+0xfa>
 80052b2:	2b50      	cmp	r3, #80	@ 0x50
 80052b4:	d873      	bhi.n	800539e <HAL_TIM_ConfigClockSource+0x16c>
 80052b6:	2b40      	cmp	r3, #64	@ 0x40
 80052b8:	d058      	beq.n	800536c <HAL_TIM_ConfigClockSource+0x13a>
 80052ba:	2b40      	cmp	r3, #64	@ 0x40
 80052bc:	d86f      	bhi.n	800539e <HAL_TIM_ConfigClockSource+0x16c>
 80052be:	2b30      	cmp	r3, #48	@ 0x30
 80052c0:	d064      	beq.n	800538c <HAL_TIM_ConfigClockSource+0x15a>
 80052c2:	2b30      	cmp	r3, #48	@ 0x30
 80052c4:	d86b      	bhi.n	800539e <HAL_TIM_ConfigClockSource+0x16c>
 80052c6:	2b20      	cmp	r3, #32
 80052c8:	d060      	beq.n	800538c <HAL_TIM_ConfigClockSource+0x15a>
 80052ca:	2b20      	cmp	r3, #32
 80052cc:	d867      	bhi.n	800539e <HAL_TIM_ConfigClockSource+0x16c>
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d05c      	beq.n	800538c <HAL_TIM_ConfigClockSource+0x15a>
 80052d2:	2b10      	cmp	r3, #16
 80052d4:	d05a      	beq.n	800538c <HAL_TIM_ConfigClockSource+0x15a>
 80052d6:	e062      	b.n	800539e <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80052dc:	683b      	ldr	r3, [r7, #0]
 80052de:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80052e0:	683b      	ldr	r3, [r7, #0]
 80052e2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80052e4:	683b      	ldr	r3, [r7, #0]
 80052e6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80052e8:	f000 f998 	bl	800561c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	689b      	ldr	r3, [r3, #8]
 80052f2:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80052f4:	68bb      	ldr	r3, [r7, #8]
 80052f6:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80052fa:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	68ba      	ldr	r2, [r7, #8]
 8005302:	609a      	str	r2, [r3, #8]
      break;
 8005304:	e04f      	b.n	80053a6 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800530a:	683b      	ldr	r3, [r7, #0]
 800530c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800530e:	683b      	ldr	r3, [r7, #0]
 8005310:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005312:	683b      	ldr	r3, [r7, #0]
 8005314:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005316:	f000 f981 	bl	800561c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	689a      	ldr	r2, [r3, #8]
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005328:	609a      	str	r2, [r3, #8]
      break;
 800532a:	e03c      	b.n	80053a6 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005330:	683b      	ldr	r3, [r7, #0]
 8005332:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005334:	683b      	ldr	r3, [r7, #0]
 8005336:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005338:	461a      	mov	r2, r3
 800533a:	f000 f8f5 	bl	8005528 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	2150      	movs	r1, #80	@ 0x50
 8005344:	4618      	mov	r0, r3
 8005346:	f000 f94e 	bl	80055e6 <TIM_ITRx_SetConfig>
      break;
 800534a:	e02c      	b.n	80053a6 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005350:	683b      	ldr	r3, [r7, #0]
 8005352:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005354:	683b      	ldr	r3, [r7, #0]
 8005356:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005358:	461a      	mov	r2, r3
 800535a:	f000 f914 	bl	8005586 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	2160      	movs	r1, #96	@ 0x60
 8005364:	4618      	mov	r0, r3
 8005366:	f000 f93e 	bl	80055e6 <TIM_ITRx_SetConfig>
      break;
 800536a:	e01c      	b.n	80053a6 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005370:	683b      	ldr	r3, [r7, #0]
 8005372:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005374:	683b      	ldr	r3, [r7, #0]
 8005376:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005378:	461a      	mov	r2, r3
 800537a:	f000 f8d5 	bl	8005528 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	2140      	movs	r1, #64	@ 0x40
 8005384:	4618      	mov	r0, r3
 8005386:	f000 f92e 	bl	80055e6 <TIM_ITRx_SetConfig>
      break;
 800538a:	e00c      	b.n	80053a6 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681a      	ldr	r2, [r3, #0]
 8005390:	683b      	ldr	r3, [r7, #0]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	4619      	mov	r1, r3
 8005396:	4610      	mov	r0, r2
 8005398:	f000 f925 	bl	80055e6 <TIM_ITRx_SetConfig>
      break;
 800539c:	e003      	b.n	80053a6 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800539e:	2301      	movs	r3, #1
 80053a0:	73fb      	strb	r3, [r7, #15]
      break;
 80053a2:	e000      	b.n	80053a6 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80053a4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	2201      	movs	r2, #1
 80053aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	2200      	movs	r2, #0
 80053b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80053b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80053b8:	4618      	mov	r0, r3
 80053ba:	3710      	adds	r7, #16
 80053bc:	46bd      	mov	sp, r7
 80053be:	bd80      	pop	{r7, pc}

080053c0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80053c0:	b480      	push	{r7}
 80053c2:	b083      	sub	sp, #12
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80053c8:	bf00      	nop
 80053ca:	370c      	adds	r7, #12
 80053cc:	46bd      	mov	sp, r7
 80053ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d2:	4770      	bx	lr

080053d4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80053d4:	b480      	push	{r7}
 80053d6:	b083      	sub	sp, #12
 80053d8:	af00      	add	r7, sp, #0
 80053da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80053dc:	bf00      	nop
 80053de:	370c      	adds	r7, #12
 80053e0:	46bd      	mov	sp, r7
 80053e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e6:	4770      	bx	lr

080053e8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80053e8:	b480      	push	{r7}
 80053ea:	b083      	sub	sp, #12
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80053f0:	bf00      	nop
 80053f2:	370c      	adds	r7, #12
 80053f4:	46bd      	mov	sp, r7
 80053f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fa:	4770      	bx	lr

080053fc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80053fc:	b480      	push	{r7}
 80053fe:	b083      	sub	sp, #12
 8005400:	af00      	add	r7, sp, #0
 8005402:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005404:	bf00      	nop
 8005406:	370c      	adds	r7, #12
 8005408:	46bd      	mov	sp, r7
 800540a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540e:	4770      	bx	lr

08005410 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005410:	b480      	push	{r7}
 8005412:	b085      	sub	sp, #20
 8005414:	af00      	add	r7, sp, #0
 8005416:	6078      	str	r0, [r7, #4]
 8005418:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	4a3a      	ldr	r2, [pc, #232]	@ (800550c <TIM_Base_SetConfig+0xfc>)
 8005424:	4293      	cmp	r3, r2
 8005426:	d00f      	beq.n	8005448 <TIM_Base_SetConfig+0x38>
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800542e:	d00b      	beq.n	8005448 <TIM_Base_SetConfig+0x38>
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	4a37      	ldr	r2, [pc, #220]	@ (8005510 <TIM_Base_SetConfig+0x100>)
 8005434:	4293      	cmp	r3, r2
 8005436:	d007      	beq.n	8005448 <TIM_Base_SetConfig+0x38>
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	4a36      	ldr	r2, [pc, #216]	@ (8005514 <TIM_Base_SetConfig+0x104>)
 800543c:	4293      	cmp	r3, r2
 800543e:	d003      	beq.n	8005448 <TIM_Base_SetConfig+0x38>
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	4a35      	ldr	r2, [pc, #212]	@ (8005518 <TIM_Base_SetConfig+0x108>)
 8005444:	4293      	cmp	r3, r2
 8005446:	d108      	bne.n	800545a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800544e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005450:	683b      	ldr	r3, [r7, #0]
 8005452:	685b      	ldr	r3, [r3, #4]
 8005454:	68fa      	ldr	r2, [r7, #12]
 8005456:	4313      	orrs	r3, r2
 8005458:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	4a2b      	ldr	r2, [pc, #172]	@ (800550c <TIM_Base_SetConfig+0xfc>)
 800545e:	4293      	cmp	r3, r2
 8005460:	d01b      	beq.n	800549a <TIM_Base_SetConfig+0x8a>
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005468:	d017      	beq.n	800549a <TIM_Base_SetConfig+0x8a>
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	4a28      	ldr	r2, [pc, #160]	@ (8005510 <TIM_Base_SetConfig+0x100>)
 800546e:	4293      	cmp	r3, r2
 8005470:	d013      	beq.n	800549a <TIM_Base_SetConfig+0x8a>
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	4a27      	ldr	r2, [pc, #156]	@ (8005514 <TIM_Base_SetConfig+0x104>)
 8005476:	4293      	cmp	r3, r2
 8005478:	d00f      	beq.n	800549a <TIM_Base_SetConfig+0x8a>
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	4a26      	ldr	r2, [pc, #152]	@ (8005518 <TIM_Base_SetConfig+0x108>)
 800547e:	4293      	cmp	r3, r2
 8005480:	d00b      	beq.n	800549a <TIM_Base_SetConfig+0x8a>
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	4a25      	ldr	r2, [pc, #148]	@ (800551c <TIM_Base_SetConfig+0x10c>)
 8005486:	4293      	cmp	r3, r2
 8005488:	d007      	beq.n	800549a <TIM_Base_SetConfig+0x8a>
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	4a24      	ldr	r2, [pc, #144]	@ (8005520 <TIM_Base_SetConfig+0x110>)
 800548e:	4293      	cmp	r3, r2
 8005490:	d003      	beq.n	800549a <TIM_Base_SetConfig+0x8a>
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	4a23      	ldr	r2, [pc, #140]	@ (8005524 <TIM_Base_SetConfig+0x114>)
 8005496:	4293      	cmp	r3, r2
 8005498:	d108      	bne.n	80054ac <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80054a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80054a2:	683b      	ldr	r3, [r7, #0]
 80054a4:	68db      	ldr	r3, [r3, #12]
 80054a6:	68fa      	ldr	r2, [r7, #12]
 80054a8:	4313      	orrs	r3, r2
 80054aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80054b2:	683b      	ldr	r3, [r7, #0]
 80054b4:	695b      	ldr	r3, [r3, #20]
 80054b6:	4313      	orrs	r3, r2
 80054b8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	68fa      	ldr	r2, [r7, #12]
 80054be:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80054c0:	683b      	ldr	r3, [r7, #0]
 80054c2:	689a      	ldr	r2, [r3, #8]
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80054c8:	683b      	ldr	r3, [r7, #0]
 80054ca:	681a      	ldr	r2, [r3, #0]
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	4a0e      	ldr	r2, [pc, #56]	@ (800550c <TIM_Base_SetConfig+0xfc>)
 80054d4:	4293      	cmp	r3, r2
 80054d6:	d103      	bne.n	80054e0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80054d8:	683b      	ldr	r3, [r7, #0]
 80054da:	691a      	ldr	r2, [r3, #16]
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	2201      	movs	r2, #1
 80054e4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	691b      	ldr	r3, [r3, #16]
 80054ea:	f003 0301 	and.w	r3, r3, #1
 80054ee:	2b01      	cmp	r3, #1
 80054f0:	d105      	bne.n	80054fe <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	691b      	ldr	r3, [r3, #16]
 80054f6:	f023 0201 	bic.w	r2, r3, #1
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	611a      	str	r2, [r3, #16]
  }
}
 80054fe:	bf00      	nop
 8005500:	3714      	adds	r7, #20
 8005502:	46bd      	mov	sp, r7
 8005504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005508:	4770      	bx	lr
 800550a:	bf00      	nop
 800550c:	40010000 	.word	0x40010000
 8005510:	40000400 	.word	0x40000400
 8005514:	40000800 	.word	0x40000800
 8005518:	40000c00 	.word	0x40000c00
 800551c:	40014000 	.word	0x40014000
 8005520:	40014400 	.word	0x40014400
 8005524:	40014800 	.word	0x40014800

08005528 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005528:	b480      	push	{r7}
 800552a:	b087      	sub	sp, #28
 800552c:	af00      	add	r7, sp, #0
 800552e:	60f8      	str	r0, [r7, #12]
 8005530:	60b9      	str	r1, [r7, #8]
 8005532:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	6a1b      	ldr	r3, [r3, #32]
 8005538:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	6a1b      	ldr	r3, [r3, #32]
 800553e:	f023 0201 	bic.w	r2, r3, #1
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	699b      	ldr	r3, [r3, #24]
 800554a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800554c:	693b      	ldr	r3, [r7, #16]
 800554e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005552:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	011b      	lsls	r3, r3, #4
 8005558:	693a      	ldr	r2, [r7, #16]
 800555a:	4313      	orrs	r3, r2
 800555c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800555e:	697b      	ldr	r3, [r7, #20]
 8005560:	f023 030a 	bic.w	r3, r3, #10
 8005564:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005566:	697a      	ldr	r2, [r7, #20]
 8005568:	68bb      	ldr	r3, [r7, #8]
 800556a:	4313      	orrs	r3, r2
 800556c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	693a      	ldr	r2, [r7, #16]
 8005572:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	697a      	ldr	r2, [r7, #20]
 8005578:	621a      	str	r2, [r3, #32]
}
 800557a:	bf00      	nop
 800557c:	371c      	adds	r7, #28
 800557e:	46bd      	mov	sp, r7
 8005580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005584:	4770      	bx	lr

08005586 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005586:	b480      	push	{r7}
 8005588:	b087      	sub	sp, #28
 800558a:	af00      	add	r7, sp, #0
 800558c:	60f8      	str	r0, [r7, #12]
 800558e:	60b9      	str	r1, [r7, #8]
 8005590:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	6a1b      	ldr	r3, [r3, #32]
 8005596:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	6a1b      	ldr	r3, [r3, #32]
 800559c:	f023 0210 	bic.w	r2, r3, #16
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	699b      	ldr	r3, [r3, #24]
 80055a8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80055aa:	693b      	ldr	r3, [r7, #16]
 80055ac:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80055b0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	031b      	lsls	r3, r3, #12
 80055b6:	693a      	ldr	r2, [r7, #16]
 80055b8:	4313      	orrs	r3, r2
 80055ba:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80055bc:	697b      	ldr	r3, [r7, #20]
 80055be:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80055c2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80055c4:	68bb      	ldr	r3, [r7, #8]
 80055c6:	011b      	lsls	r3, r3, #4
 80055c8:	697a      	ldr	r2, [r7, #20]
 80055ca:	4313      	orrs	r3, r2
 80055cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	693a      	ldr	r2, [r7, #16]
 80055d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	697a      	ldr	r2, [r7, #20]
 80055d8:	621a      	str	r2, [r3, #32]
}
 80055da:	bf00      	nop
 80055dc:	371c      	adds	r7, #28
 80055de:	46bd      	mov	sp, r7
 80055e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e4:	4770      	bx	lr

080055e6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80055e6:	b480      	push	{r7}
 80055e8:	b085      	sub	sp, #20
 80055ea:	af00      	add	r7, sp, #0
 80055ec:	6078      	str	r0, [r7, #4]
 80055ee:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	689b      	ldr	r3, [r3, #8]
 80055f4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80055fc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80055fe:	683a      	ldr	r2, [r7, #0]
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	4313      	orrs	r3, r2
 8005604:	f043 0307 	orr.w	r3, r3, #7
 8005608:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	68fa      	ldr	r2, [r7, #12]
 800560e:	609a      	str	r2, [r3, #8]
}
 8005610:	bf00      	nop
 8005612:	3714      	adds	r7, #20
 8005614:	46bd      	mov	sp, r7
 8005616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561a:	4770      	bx	lr

0800561c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800561c:	b480      	push	{r7}
 800561e:	b087      	sub	sp, #28
 8005620:	af00      	add	r7, sp, #0
 8005622:	60f8      	str	r0, [r7, #12]
 8005624:	60b9      	str	r1, [r7, #8]
 8005626:	607a      	str	r2, [r7, #4]
 8005628:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	689b      	ldr	r3, [r3, #8]
 800562e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005630:	697b      	ldr	r3, [r7, #20]
 8005632:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005636:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005638:	683b      	ldr	r3, [r7, #0]
 800563a:	021a      	lsls	r2, r3, #8
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	431a      	orrs	r2, r3
 8005640:	68bb      	ldr	r3, [r7, #8]
 8005642:	4313      	orrs	r3, r2
 8005644:	697a      	ldr	r2, [r7, #20]
 8005646:	4313      	orrs	r3, r2
 8005648:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	697a      	ldr	r2, [r7, #20]
 800564e:	609a      	str	r2, [r3, #8]
}
 8005650:	bf00      	nop
 8005652:	371c      	adds	r7, #28
 8005654:	46bd      	mov	sp, r7
 8005656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565a:	4770      	bx	lr

0800565c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800565c:	b480      	push	{r7}
 800565e:	b087      	sub	sp, #28
 8005660:	af00      	add	r7, sp, #0
 8005662:	60f8      	str	r0, [r7, #12]
 8005664:	60b9      	str	r1, [r7, #8]
 8005666:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005668:	68bb      	ldr	r3, [r7, #8]
 800566a:	f003 031f 	and.w	r3, r3, #31
 800566e:	2201      	movs	r2, #1
 8005670:	fa02 f303 	lsl.w	r3, r2, r3
 8005674:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	6a1a      	ldr	r2, [r3, #32]
 800567a:	697b      	ldr	r3, [r7, #20]
 800567c:	43db      	mvns	r3, r3
 800567e:	401a      	ands	r2, r3
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	6a1a      	ldr	r2, [r3, #32]
 8005688:	68bb      	ldr	r3, [r7, #8]
 800568a:	f003 031f 	and.w	r3, r3, #31
 800568e:	6879      	ldr	r1, [r7, #4]
 8005690:	fa01 f303 	lsl.w	r3, r1, r3
 8005694:	431a      	orrs	r2, r3
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	621a      	str	r2, [r3, #32]
}
 800569a:	bf00      	nop
 800569c:	371c      	adds	r7, #28
 800569e:	46bd      	mov	sp, r7
 80056a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a4:	4770      	bx	lr
	...

080056a8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80056a8:	b480      	push	{r7}
 80056aa:	b085      	sub	sp, #20
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	6078      	str	r0, [r7, #4]
 80056b0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80056b8:	2b01      	cmp	r3, #1
 80056ba:	d101      	bne.n	80056c0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80056bc:	2302      	movs	r3, #2
 80056be:	e050      	b.n	8005762 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	2201      	movs	r2, #1
 80056c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	2202      	movs	r2, #2
 80056cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	685b      	ldr	r3, [r3, #4]
 80056d6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	689b      	ldr	r3, [r3, #8]
 80056de:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80056e6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80056e8:	683b      	ldr	r3, [r7, #0]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	68fa      	ldr	r2, [r7, #12]
 80056ee:	4313      	orrs	r3, r2
 80056f0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	68fa      	ldr	r2, [r7, #12]
 80056f8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	4a1c      	ldr	r2, [pc, #112]	@ (8005770 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005700:	4293      	cmp	r3, r2
 8005702:	d018      	beq.n	8005736 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800570c:	d013      	beq.n	8005736 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	4a18      	ldr	r2, [pc, #96]	@ (8005774 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005714:	4293      	cmp	r3, r2
 8005716:	d00e      	beq.n	8005736 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	4a16      	ldr	r2, [pc, #88]	@ (8005778 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800571e:	4293      	cmp	r3, r2
 8005720:	d009      	beq.n	8005736 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	4a15      	ldr	r2, [pc, #84]	@ (800577c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005728:	4293      	cmp	r3, r2
 800572a:	d004      	beq.n	8005736 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	4a13      	ldr	r2, [pc, #76]	@ (8005780 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005732:	4293      	cmp	r3, r2
 8005734:	d10c      	bne.n	8005750 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005736:	68bb      	ldr	r3, [r7, #8]
 8005738:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800573c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800573e:	683b      	ldr	r3, [r7, #0]
 8005740:	685b      	ldr	r3, [r3, #4]
 8005742:	68ba      	ldr	r2, [r7, #8]
 8005744:	4313      	orrs	r3, r2
 8005746:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	68ba      	ldr	r2, [r7, #8]
 800574e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	2201      	movs	r2, #1
 8005754:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2200      	movs	r2, #0
 800575c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005760:	2300      	movs	r3, #0
}
 8005762:	4618      	mov	r0, r3
 8005764:	3714      	adds	r7, #20
 8005766:	46bd      	mov	sp, r7
 8005768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576c:	4770      	bx	lr
 800576e:	bf00      	nop
 8005770:	40010000 	.word	0x40010000
 8005774:	40000400 	.word	0x40000400
 8005778:	40000800 	.word	0x40000800
 800577c:	40000c00 	.word	0x40000c00
 8005780:	40014000 	.word	0x40014000

08005784 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005784:	b480      	push	{r7}
 8005786:	b083      	sub	sp, #12
 8005788:	af00      	add	r7, sp, #0
 800578a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800578c:	bf00      	nop
 800578e:	370c      	adds	r7, #12
 8005790:	46bd      	mov	sp, r7
 8005792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005796:	4770      	bx	lr

08005798 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005798:	b480      	push	{r7}
 800579a:	b083      	sub	sp, #12
 800579c:	af00      	add	r7, sp, #0
 800579e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80057a0:	bf00      	nop
 80057a2:	370c      	adds	r7, #12
 80057a4:	46bd      	mov	sp, r7
 80057a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057aa:	4770      	bx	lr

080057ac <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80057ac:	b580      	push	{r7, lr}
 80057ae:	b082      	sub	sp, #8
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d101      	bne.n	80057be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80057ba:	2301      	movs	r3, #1
 80057bc:	e042      	b.n	8005844 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80057c4:	b2db      	uxtb	r3, r3
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d106      	bne.n	80057d8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	2200      	movs	r2, #0
 80057ce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80057d2:	6878      	ldr	r0, [r7, #4]
 80057d4:	f7fc f8e4 	bl	80019a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	2224      	movs	r2, #36	@ 0x24
 80057dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	68da      	ldr	r2, [r3, #12]
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80057ee:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80057f0:	6878      	ldr	r0, [r7, #4]
 80057f2:	f000 fdbd 	bl	8006370 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	691a      	ldr	r2, [r3, #16]
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005804:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	695a      	ldr	r2, [r3, #20]
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005814:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	68da      	ldr	r2, [r3, #12]
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005824:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	2200      	movs	r2, #0
 800582a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2220      	movs	r2, #32
 8005830:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	2220      	movs	r2, #32
 8005838:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	2200      	movs	r2, #0
 8005840:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005842:	2300      	movs	r3, #0
}
 8005844:	4618      	mov	r0, r3
 8005846:	3708      	adds	r7, #8
 8005848:	46bd      	mov	sp, r7
 800584a:	bd80      	pop	{r7, pc}

0800584c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800584c:	b580      	push	{r7, lr}
 800584e:	b08a      	sub	sp, #40	@ 0x28
 8005850:	af02      	add	r7, sp, #8
 8005852:	60f8      	str	r0, [r7, #12]
 8005854:	60b9      	str	r1, [r7, #8]
 8005856:	603b      	str	r3, [r7, #0]
 8005858:	4613      	mov	r3, r2
 800585a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800585c:	2300      	movs	r3, #0
 800585e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005866:	b2db      	uxtb	r3, r3
 8005868:	2b20      	cmp	r3, #32
 800586a:	d175      	bne.n	8005958 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800586c:	68bb      	ldr	r3, [r7, #8]
 800586e:	2b00      	cmp	r3, #0
 8005870:	d002      	beq.n	8005878 <HAL_UART_Transmit+0x2c>
 8005872:	88fb      	ldrh	r3, [r7, #6]
 8005874:	2b00      	cmp	r3, #0
 8005876:	d101      	bne.n	800587c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005878:	2301      	movs	r3, #1
 800587a:	e06e      	b.n	800595a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	2200      	movs	r2, #0
 8005880:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	2221      	movs	r2, #33	@ 0x21
 8005886:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800588a:	f7fc fa93 	bl	8001db4 <HAL_GetTick>
 800588e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	88fa      	ldrh	r2, [r7, #6]
 8005894:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	88fa      	ldrh	r2, [r7, #6]
 800589a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	689b      	ldr	r3, [r3, #8]
 80058a0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80058a4:	d108      	bne.n	80058b8 <HAL_UART_Transmit+0x6c>
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	691b      	ldr	r3, [r3, #16]
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d104      	bne.n	80058b8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80058ae:	2300      	movs	r3, #0
 80058b0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80058b2:	68bb      	ldr	r3, [r7, #8]
 80058b4:	61bb      	str	r3, [r7, #24]
 80058b6:	e003      	b.n	80058c0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80058b8:	68bb      	ldr	r3, [r7, #8]
 80058ba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80058bc:	2300      	movs	r3, #0
 80058be:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80058c0:	e02e      	b.n	8005920 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80058c2:	683b      	ldr	r3, [r7, #0]
 80058c4:	9300      	str	r3, [sp, #0]
 80058c6:	697b      	ldr	r3, [r7, #20]
 80058c8:	2200      	movs	r2, #0
 80058ca:	2180      	movs	r1, #128	@ 0x80
 80058cc:	68f8      	ldr	r0, [r7, #12]
 80058ce:	f000 fb1f 	bl	8005f10 <UART_WaitOnFlagUntilTimeout>
 80058d2:	4603      	mov	r3, r0
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d005      	beq.n	80058e4 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	2220      	movs	r2, #32
 80058dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80058e0:	2303      	movs	r3, #3
 80058e2:	e03a      	b.n	800595a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80058e4:	69fb      	ldr	r3, [r7, #28]
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d10b      	bne.n	8005902 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80058ea:	69bb      	ldr	r3, [r7, #24]
 80058ec:	881b      	ldrh	r3, [r3, #0]
 80058ee:	461a      	mov	r2, r3
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80058f8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80058fa:	69bb      	ldr	r3, [r7, #24]
 80058fc:	3302      	adds	r3, #2
 80058fe:	61bb      	str	r3, [r7, #24]
 8005900:	e007      	b.n	8005912 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005902:	69fb      	ldr	r3, [r7, #28]
 8005904:	781a      	ldrb	r2, [r3, #0]
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800590c:	69fb      	ldr	r3, [r7, #28]
 800590e:	3301      	adds	r3, #1
 8005910:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005916:	b29b      	uxth	r3, r3
 8005918:	3b01      	subs	r3, #1
 800591a:	b29a      	uxth	r2, r3
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005924:	b29b      	uxth	r3, r3
 8005926:	2b00      	cmp	r3, #0
 8005928:	d1cb      	bne.n	80058c2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800592a:	683b      	ldr	r3, [r7, #0]
 800592c:	9300      	str	r3, [sp, #0]
 800592e:	697b      	ldr	r3, [r7, #20]
 8005930:	2200      	movs	r2, #0
 8005932:	2140      	movs	r1, #64	@ 0x40
 8005934:	68f8      	ldr	r0, [r7, #12]
 8005936:	f000 faeb 	bl	8005f10 <UART_WaitOnFlagUntilTimeout>
 800593a:	4603      	mov	r3, r0
 800593c:	2b00      	cmp	r3, #0
 800593e:	d005      	beq.n	800594c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	2220      	movs	r2, #32
 8005944:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8005948:	2303      	movs	r3, #3
 800594a:	e006      	b.n	800595a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	2220      	movs	r2, #32
 8005950:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8005954:	2300      	movs	r3, #0
 8005956:	e000      	b.n	800595a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8005958:	2302      	movs	r3, #2
  }
}
 800595a:	4618      	mov	r0, r3
 800595c:	3720      	adds	r7, #32
 800595e:	46bd      	mov	sp, r7
 8005960:	bd80      	pop	{r7, pc}

08005962 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005962:	b580      	push	{r7, lr}
 8005964:	b084      	sub	sp, #16
 8005966:	af00      	add	r7, sp, #0
 8005968:	60f8      	str	r0, [r7, #12]
 800596a:	60b9      	str	r1, [r7, #8]
 800596c:	4613      	mov	r3, r2
 800596e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005976:	b2db      	uxtb	r3, r3
 8005978:	2b20      	cmp	r3, #32
 800597a:	d112      	bne.n	80059a2 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800597c:	68bb      	ldr	r3, [r7, #8]
 800597e:	2b00      	cmp	r3, #0
 8005980:	d002      	beq.n	8005988 <HAL_UART_Receive_IT+0x26>
 8005982:	88fb      	ldrh	r3, [r7, #6]
 8005984:	2b00      	cmp	r3, #0
 8005986:	d101      	bne.n	800598c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005988:	2301      	movs	r3, #1
 800598a:	e00b      	b.n	80059a4 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	2200      	movs	r2, #0
 8005990:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005992:	88fb      	ldrh	r3, [r7, #6]
 8005994:	461a      	mov	r2, r3
 8005996:	68b9      	ldr	r1, [r7, #8]
 8005998:	68f8      	ldr	r0, [r7, #12]
 800599a:	f000 fb12 	bl	8005fc2 <UART_Start_Receive_IT>
 800599e:	4603      	mov	r3, r0
 80059a0:	e000      	b.n	80059a4 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80059a2:	2302      	movs	r3, #2
  }
}
 80059a4:	4618      	mov	r0, r3
 80059a6:	3710      	adds	r7, #16
 80059a8:	46bd      	mov	sp, r7
 80059aa:	bd80      	pop	{r7, pc}

080059ac <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80059ac:	b580      	push	{r7, lr}
 80059ae:	b0ba      	sub	sp, #232	@ 0xe8
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	68db      	ldr	r3, [r3, #12]
 80059c4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	695b      	ldr	r3, [r3, #20]
 80059ce:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80059d2:	2300      	movs	r3, #0
 80059d4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80059d8:	2300      	movs	r3, #0
 80059da:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80059de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80059e2:	f003 030f 	and.w	r3, r3, #15
 80059e6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80059ea:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d10f      	bne.n	8005a12 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80059f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80059f6:	f003 0320 	and.w	r3, r3, #32
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d009      	beq.n	8005a12 <HAL_UART_IRQHandler+0x66>
 80059fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005a02:	f003 0320 	and.w	r3, r3, #32
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d003      	beq.n	8005a12 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005a0a:	6878      	ldr	r0, [r7, #4]
 8005a0c:	f000 fbf2 	bl	80061f4 <UART_Receive_IT>
      return;
 8005a10:	e25b      	b.n	8005eca <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005a12:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	f000 80de 	beq.w	8005bd8 <HAL_UART_IRQHandler+0x22c>
 8005a1c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005a20:	f003 0301 	and.w	r3, r3, #1
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d106      	bne.n	8005a36 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005a28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005a2c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	f000 80d1 	beq.w	8005bd8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005a36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005a3a:	f003 0301 	and.w	r3, r3, #1
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d00b      	beq.n	8005a5a <HAL_UART_IRQHandler+0xae>
 8005a42:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005a46:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d005      	beq.n	8005a5a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a52:	f043 0201 	orr.w	r2, r3, #1
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005a5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005a5e:	f003 0304 	and.w	r3, r3, #4
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d00b      	beq.n	8005a7e <HAL_UART_IRQHandler+0xd2>
 8005a66:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005a6a:	f003 0301 	and.w	r3, r3, #1
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d005      	beq.n	8005a7e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a76:	f043 0202 	orr.w	r2, r3, #2
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005a7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005a82:	f003 0302 	and.w	r3, r3, #2
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d00b      	beq.n	8005aa2 <HAL_UART_IRQHandler+0xf6>
 8005a8a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005a8e:	f003 0301 	and.w	r3, r3, #1
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d005      	beq.n	8005aa2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a9a:	f043 0204 	orr.w	r2, r3, #4
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005aa2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005aa6:	f003 0308 	and.w	r3, r3, #8
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d011      	beq.n	8005ad2 <HAL_UART_IRQHandler+0x126>
 8005aae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005ab2:	f003 0320 	and.w	r3, r3, #32
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d105      	bne.n	8005ac6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005aba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005abe:	f003 0301 	and.w	r3, r3, #1
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d005      	beq.n	8005ad2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005aca:	f043 0208 	orr.w	r2, r3, #8
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	f000 81f2 	beq.w	8005ec0 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005adc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005ae0:	f003 0320 	and.w	r3, r3, #32
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d008      	beq.n	8005afa <HAL_UART_IRQHandler+0x14e>
 8005ae8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005aec:	f003 0320 	and.w	r3, r3, #32
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d002      	beq.n	8005afa <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005af4:	6878      	ldr	r0, [r7, #4]
 8005af6:	f000 fb7d 	bl	80061f4 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	695b      	ldr	r3, [r3, #20]
 8005b00:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b04:	2b40      	cmp	r3, #64	@ 0x40
 8005b06:	bf0c      	ite	eq
 8005b08:	2301      	moveq	r3, #1
 8005b0a:	2300      	movne	r3, #0
 8005b0c:	b2db      	uxtb	r3, r3
 8005b0e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b16:	f003 0308 	and.w	r3, r3, #8
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d103      	bne.n	8005b26 <HAL_UART_IRQHandler+0x17a>
 8005b1e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d04f      	beq.n	8005bc6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005b26:	6878      	ldr	r0, [r7, #4]
 8005b28:	f000 fa85 	bl	8006036 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	695b      	ldr	r3, [r3, #20]
 8005b32:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b36:	2b40      	cmp	r3, #64	@ 0x40
 8005b38:	d141      	bne.n	8005bbe <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	3314      	adds	r3, #20
 8005b40:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b44:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005b48:	e853 3f00 	ldrex	r3, [r3]
 8005b4c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005b50:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005b54:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005b58:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	3314      	adds	r3, #20
 8005b62:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005b66:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005b6a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b6e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005b72:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005b76:	e841 2300 	strex	r3, r2, [r1]
 8005b7a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005b7e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d1d9      	bne.n	8005b3a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d013      	beq.n	8005bb6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b92:	4a7e      	ldr	r2, [pc, #504]	@ (8005d8c <HAL_UART_IRQHandler+0x3e0>)
 8005b94:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b9a:	4618      	mov	r0, r3
 8005b9c:	f7fc fcfe 	bl	800259c <HAL_DMA_Abort_IT>
 8005ba0:	4603      	mov	r3, r0
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d016      	beq.n	8005bd4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005baa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005bac:	687a      	ldr	r2, [r7, #4]
 8005bae:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005bb0:	4610      	mov	r0, r2
 8005bb2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005bb4:	e00e      	b.n	8005bd4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005bb6:	6878      	ldr	r0, [r7, #4]
 8005bb8:	f000 f994 	bl	8005ee4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005bbc:	e00a      	b.n	8005bd4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005bbe:	6878      	ldr	r0, [r7, #4]
 8005bc0:	f000 f990 	bl	8005ee4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005bc4:	e006      	b.n	8005bd4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005bc6:	6878      	ldr	r0, [r7, #4]
 8005bc8:	f000 f98c 	bl	8005ee4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	2200      	movs	r2, #0
 8005bd0:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8005bd2:	e175      	b.n	8005ec0 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005bd4:	bf00      	nop
    return;
 8005bd6:	e173      	b.n	8005ec0 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005bdc:	2b01      	cmp	r3, #1
 8005bde:	f040 814f 	bne.w	8005e80 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005be2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005be6:	f003 0310 	and.w	r3, r3, #16
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	f000 8148 	beq.w	8005e80 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005bf0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005bf4:	f003 0310 	and.w	r3, r3, #16
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	f000 8141 	beq.w	8005e80 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005bfe:	2300      	movs	r3, #0
 8005c00:	60bb      	str	r3, [r7, #8]
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	60bb      	str	r3, [r7, #8]
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	685b      	ldr	r3, [r3, #4]
 8005c10:	60bb      	str	r3, [r7, #8]
 8005c12:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	695b      	ldr	r3, [r3, #20]
 8005c1a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c1e:	2b40      	cmp	r3, #64	@ 0x40
 8005c20:	f040 80b6 	bne.w	8005d90 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	685b      	ldr	r3, [r3, #4]
 8005c2c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005c30:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	f000 8145 	beq.w	8005ec4 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005c3e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005c42:	429a      	cmp	r2, r3
 8005c44:	f080 813e 	bcs.w	8005ec4 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005c4e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c54:	69db      	ldr	r3, [r3, #28]
 8005c56:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005c5a:	f000 8088 	beq.w	8005d6e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	330c      	adds	r3, #12
 8005c64:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c68:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005c6c:	e853 3f00 	ldrex	r3, [r3]
 8005c70:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005c74:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005c78:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005c7c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	330c      	adds	r3, #12
 8005c86:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8005c8a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005c8e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c92:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005c96:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005c9a:	e841 2300 	strex	r3, r2, [r1]
 8005c9e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005ca2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d1d9      	bne.n	8005c5e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	3314      	adds	r3, #20
 8005cb0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cb2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005cb4:	e853 3f00 	ldrex	r3, [r3]
 8005cb8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005cba:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005cbc:	f023 0301 	bic.w	r3, r3, #1
 8005cc0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	3314      	adds	r3, #20
 8005cca:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005cce:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005cd2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cd4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005cd6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005cda:	e841 2300 	strex	r3, r2, [r1]
 8005cde:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005ce0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d1e1      	bne.n	8005caa <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	3314      	adds	r3, #20
 8005cec:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cee:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005cf0:	e853 3f00 	ldrex	r3, [r3]
 8005cf4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005cf6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005cf8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005cfc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	3314      	adds	r3, #20
 8005d06:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005d0a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005d0c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d0e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005d10:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005d12:	e841 2300 	strex	r3, r2, [r1]
 8005d16:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005d18:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d1e3      	bne.n	8005ce6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	2220      	movs	r2, #32
 8005d22:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	2200      	movs	r2, #0
 8005d2a:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	330c      	adds	r3, #12
 8005d32:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d34:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005d36:	e853 3f00 	ldrex	r3, [r3]
 8005d3a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005d3c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005d3e:	f023 0310 	bic.w	r3, r3, #16
 8005d42:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	330c      	adds	r3, #12
 8005d4c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8005d50:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005d52:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d54:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005d56:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005d58:	e841 2300 	strex	r3, r2, [r1]
 8005d5c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005d5e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d1e3      	bne.n	8005d2c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d68:	4618      	mov	r0, r3
 8005d6a:	f7fc fba7 	bl	80024bc <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	2202      	movs	r2, #2
 8005d72:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005d7c:	b29b      	uxth	r3, r3
 8005d7e:	1ad3      	subs	r3, r2, r3
 8005d80:	b29b      	uxth	r3, r3
 8005d82:	4619      	mov	r1, r3
 8005d84:	6878      	ldr	r0, [r7, #4]
 8005d86:	f000 f8b7 	bl	8005ef8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005d8a:	e09b      	b.n	8005ec4 <HAL_UART_IRQHandler+0x518>
 8005d8c:	080060fd 	.word	0x080060fd
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005d98:	b29b      	uxth	r3, r3
 8005d9a:	1ad3      	subs	r3, r2, r3
 8005d9c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005da4:	b29b      	uxth	r3, r3
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	f000 808e 	beq.w	8005ec8 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8005dac:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	f000 8089 	beq.w	8005ec8 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	330c      	adds	r3, #12
 8005dbc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005dc0:	e853 3f00 	ldrex	r3, [r3]
 8005dc4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005dc6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005dc8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005dcc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	330c      	adds	r3, #12
 8005dd6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8005dda:	647a      	str	r2, [r7, #68]	@ 0x44
 8005ddc:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dde:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005de0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005de2:	e841 2300 	strex	r3, r2, [r1]
 8005de6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005de8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d1e3      	bne.n	8005db6 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	3314      	adds	r3, #20
 8005df4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005df6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005df8:	e853 3f00 	ldrex	r3, [r3]
 8005dfc:	623b      	str	r3, [r7, #32]
   return(result);
 8005dfe:	6a3b      	ldr	r3, [r7, #32]
 8005e00:	f023 0301 	bic.w	r3, r3, #1
 8005e04:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	3314      	adds	r3, #20
 8005e0e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005e12:	633a      	str	r2, [r7, #48]	@ 0x30
 8005e14:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e16:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005e18:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005e1a:	e841 2300 	strex	r3, r2, [r1]
 8005e1e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005e20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d1e3      	bne.n	8005dee <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	2220      	movs	r2, #32
 8005e2a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	2200      	movs	r2, #0
 8005e32:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	330c      	adds	r3, #12
 8005e3a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e3c:	693b      	ldr	r3, [r7, #16]
 8005e3e:	e853 3f00 	ldrex	r3, [r3]
 8005e42:	60fb      	str	r3, [r7, #12]
   return(result);
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	f023 0310 	bic.w	r3, r3, #16
 8005e4a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	330c      	adds	r3, #12
 8005e54:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8005e58:	61fa      	str	r2, [r7, #28]
 8005e5a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e5c:	69b9      	ldr	r1, [r7, #24]
 8005e5e:	69fa      	ldr	r2, [r7, #28]
 8005e60:	e841 2300 	strex	r3, r2, [r1]
 8005e64:	617b      	str	r3, [r7, #20]
   return(result);
 8005e66:	697b      	ldr	r3, [r7, #20]
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d1e3      	bne.n	8005e34 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	2202      	movs	r2, #2
 8005e70:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005e72:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005e76:	4619      	mov	r1, r3
 8005e78:	6878      	ldr	r0, [r7, #4]
 8005e7a:	f000 f83d 	bl	8005ef8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005e7e:	e023      	b.n	8005ec8 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005e80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005e84:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d009      	beq.n	8005ea0 <HAL_UART_IRQHandler+0x4f4>
 8005e8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005e90:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d003      	beq.n	8005ea0 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8005e98:	6878      	ldr	r0, [r7, #4]
 8005e9a:	f000 f943 	bl	8006124 <UART_Transmit_IT>
    return;
 8005e9e:	e014      	b.n	8005eca <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005ea0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005ea4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d00e      	beq.n	8005eca <HAL_UART_IRQHandler+0x51e>
 8005eac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005eb0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d008      	beq.n	8005eca <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8005eb8:	6878      	ldr	r0, [r7, #4]
 8005eba:	f000 f983 	bl	80061c4 <UART_EndTransmit_IT>
    return;
 8005ebe:	e004      	b.n	8005eca <HAL_UART_IRQHandler+0x51e>
    return;
 8005ec0:	bf00      	nop
 8005ec2:	e002      	b.n	8005eca <HAL_UART_IRQHandler+0x51e>
      return;
 8005ec4:	bf00      	nop
 8005ec6:	e000      	b.n	8005eca <HAL_UART_IRQHandler+0x51e>
      return;
 8005ec8:	bf00      	nop
  }
}
 8005eca:	37e8      	adds	r7, #232	@ 0xe8
 8005ecc:	46bd      	mov	sp, r7
 8005ece:	bd80      	pop	{r7, pc}

08005ed0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005ed0:	b480      	push	{r7}
 8005ed2:	b083      	sub	sp, #12
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005ed8:	bf00      	nop
 8005eda:	370c      	adds	r7, #12
 8005edc:	46bd      	mov	sp, r7
 8005ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee2:	4770      	bx	lr

08005ee4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005ee4:	b480      	push	{r7}
 8005ee6:	b083      	sub	sp, #12
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005eec:	bf00      	nop
 8005eee:	370c      	adds	r7, #12
 8005ef0:	46bd      	mov	sp, r7
 8005ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef6:	4770      	bx	lr

08005ef8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005ef8:	b480      	push	{r7}
 8005efa:	b083      	sub	sp, #12
 8005efc:	af00      	add	r7, sp, #0
 8005efe:	6078      	str	r0, [r7, #4]
 8005f00:	460b      	mov	r3, r1
 8005f02:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005f04:	bf00      	nop
 8005f06:	370c      	adds	r7, #12
 8005f08:	46bd      	mov	sp, r7
 8005f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f0e:	4770      	bx	lr

08005f10 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005f10:	b580      	push	{r7, lr}
 8005f12:	b086      	sub	sp, #24
 8005f14:	af00      	add	r7, sp, #0
 8005f16:	60f8      	str	r0, [r7, #12]
 8005f18:	60b9      	str	r1, [r7, #8]
 8005f1a:	603b      	str	r3, [r7, #0]
 8005f1c:	4613      	mov	r3, r2
 8005f1e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005f20:	e03b      	b.n	8005f9a <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005f22:	6a3b      	ldr	r3, [r7, #32]
 8005f24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f28:	d037      	beq.n	8005f9a <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f2a:	f7fb ff43 	bl	8001db4 <HAL_GetTick>
 8005f2e:	4602      	mov	r2, r0
 8005f30:	683b      	ldr	r3, [r7, #0]
 8005f32:	1ad3      	subs	r3, r2, r3
 8005f34:	6a3a      	ldr	r2, [r7, #32]
 8005f36:	429a      	cmp	r2, r3
 8005f38:	d302      	bcc.n	8005f40 <UART_WaitOnFlagUntilTimeout+0x30>
 8005f3a:	6a3b      	ldr	r3, [r7, #32]
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d101      	bne.n	8005f44 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005f40:	2303      	movs	r3, #3
 8005f42:	e03a      	b.n	8005fba <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	68db      	ldr	r3, [r3, #12]
 8005f4a:	f003 0304 	and.w	r3, r3, #4
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d023      	beq.n	8005f9a <UART_WaitOnFlagUntilTimeout+0x8a>
 8005f52:	68bb      	ldr	r3, [r7, #8]
 8005f54:	2b80      	cmp	r3, #128	@ 0x80
 8005f56:	d020      	beq.n	8005f9a <UART_WaitOnFlagUntilTimeout+0x8a>
 8005f58:	68bb      	ldr	r3, [r7, #8]
 8005f5a:	2b40      	cmp	r3, #64	@ 0x40
 8005f5c:	d01d      	beq.n	8005f9a <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	f003 0308 	and.w	r3, r3, #8
 8005f68:	2b08      	cmp	r3, #8
 8005f6a:	d116      	bne.n	8005f9a <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005f6c:	2300      	movs	r3, #0
 8005f6e:	617b      	str	r3, [r7, #20]
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	617b      	str	r3, [r7, #20]
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	685b      	ldr	r3, [r3, #4]
 8005f7e:	617b      	str	r3, [r7, #20]
 8005f80:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005f82:	68f8      	ldr	r0, [r7, #12]
 8005f84:	f000 f857 	bl	8006036 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	2208      	movs	r2, #8
 8005f8c:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	2200      	movs	r2, #0
 8005f92:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005f96:	2301      	movs	r3, #1
 8005f98:	e00f      	b.n	8005fba <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	681a      	ldr	r2, [r3, #0]
 8005fa0:	68bb      	ldr	r3, [r7, #8]
 8005fa2:	4013      	ands	r3, r2
 8005fa4:	68ba      	ldr	r2, [r7, #8]
 8005fa6:	429a      	cmp	r2, r3
 8005fa8:	bf0c      	ite	eq
 8005faa:	2301      	moveq	r3, #1
 8005fac:	2300      	movne	r3, #0
 8005fae:	b2db      	uxtb	r3, r3
 8005fb0:	461a      	mov	r2, r3
 8005fb2:	79fb      	ldrb	r3, [r7, #7]
 8005fb4:	429a      	cmp	r2, r3
 8005fb6:	d0b4      	beq.n	8005f22 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005fb8:	2300      	movs	r3, #0
}
 8005fba:	4618      	mov	r0, r3
 8005fbc:	3718      	adds	r7, #24
 8005fbe:	46bd      	mov	sp, r7
 8005fc0:	bd80      	pop	{r7, pc}

08005fc2 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005fc2:	b480      	push	{r7}
 8005fc4:	b085      	sub	sp, #20
 8005fc6:	af00      	add	r7, sp, #0
 8005fc8:	60f8      	str	r0, [r7, #12]
 8005fca:	60b9      	str	r1, [r7, #8]
 8005fcc:	4613      	mov	r3, r2
 8005fce:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	68ba      	ldr	r2, [r7, #8]
 8005fd4:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	88fa      	ldrh	r2, [r7, #6]
 8005fda:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	88fa      	ldrh	r2, [r7, #6]
 8005fe0:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	2200      	movs	r2, #0
 8005fe6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	2222      	movs	r2, #34	@ 0x22
 8005fec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	691b      	ldr	r3, [r3, #16]
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d007      	beq.n	8006008 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	68da      	ldr	r2, [r3, #12]
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006006:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	695a      	ldr	r2, [r3, #20]
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	f042 0201 	orr.w	r2, r2, #1
 8006016:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	68da      	ldr	r2, [r3, #12]
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	f042 0220 	orr.w	r2, r2, #32
 8006026:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006028:	2300      	movs	r3, #0
}
 800602a:	4618      	mov	r0, r3
 800602c:	3714      	adds	r7, #20
 800602e:	46bd      	mov	sp, r7
 8006030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006034:	4770      	bx	lr

08006036 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006036:	b480      	push	{r7}
 8006038:	b095      	sub	sp, #84	@ 0x54
 800603a:	af00      	add	r7, sp, #0
 800603c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	330c      	adds	r3, #12
 8006044:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006046:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006048:	e853 3f00 	ldrex	r3, [r3]
 800604c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800604e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006050:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006054:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	330c      	adds	r3, #12
 800605c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800605e:	643a      	str	r2, [r7, #64]	@ 0x40
 8006060:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006062:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006064:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006066:	e841 2300 	strex	r3, r2, [r1]
 800606a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800606c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800606e:	2b00      	cmp	r3, #0
 8006070:	d1e5      	bne.n	800603e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	3314      	adds	r3, #20
 8006078:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800607a:	6a3b      	ldr	r3, [r7, #32]
 800607c:	e853 3f00 	ldrex	r3, [r3]
 8006080:	61fb      	str	r3, [r7, #28]
   return(result);
 8006082:	69fb      	ldr	r3, [r7, #28]
 8006084:	f023 0301 	bic.w	r3, r3, #1
 8006088:	64bb      	str	r3, [r7, #72]	@ 0x48
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	3314      	adds	r3, #20
 8006090:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006092:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006094:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006096:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006098:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800609a:	e841 2300 	strex	r3, r2, [r1]
 800609e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80060a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d1e5      	bne.n	8006072 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80060aa:	2b01      	cmp	r3, #1
 80060ac:	d119      	bne.n	80060e2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	330c      	adds	r3, #12
 80060b4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	e853 3f00 	ldrex	r3, [r3]
 80060bc:	60bb      	str	r3, [r7, #8]
   return(result);
 80060be:	68bb      	ldr	r3, [r7, #8]
 80060c0:	f023 0310 	bic.w	r3, r3, #16
 80060c4:	647b      	str	r3, [r7, #68]	@ 0x44
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	330c      	adds	r3, #12
 80060cc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80060ce:	61ba      	str	r2, [r7, #24]
 80060d0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060d2:	6979      	ldr	r1, [r7, #20]
 80060d4:	69ba      	ldr	r2, [r7, #24]
 80060d6:	e841 2300 	strex	r3, r2, [r1]
 80060da:	613b      	str	r3, [r7, #16]
   return(result);
 80060dc:	693b      	ldr	r3, [r7, #16]
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d1e5      	bne.n	80060ae <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	2220      	movs	r2, #32
 80060e6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	2200      	movs	r2, #0
 80060ee:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80060f0:	bf00      	nop
 80060f2:	3754      	adds	r7, #84	@ 0x54
 80060f4:	46bd      	mov	sp, r7
 80060f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060fa:	4770      	bx	lr

080060fc <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80060fc:	b580      	push	{r7, lr}
 80060fe:	b084      	sub	sp, #16
 8006100:	af00      	add	r7, sp, #0
 8006102:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006108:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	2200      	movs	r2, #0
 800610e:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	2200      	movs	r2, #0
 8006114:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006116:	68f8      	ldr	r0, [r7, #12]
 8006118:	f7ff fee4 	bl	8005ee4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800611c:	bf00      	nop
 800611e:	3710      	adds	r7, #16
 8006120:	46bd      	mov	sp, r7
 8006122:	bd80      	pop	{r7, pc}

08006124 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006124:	b480      	push	{r7}
 8006126:	b085      	sub	sp, #20
 8006128:	af00      	add	r7, sp, #0
 800612a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006132:	b2db      	uxtb	r3, r3
 8006134:	2b21      	cmp	r3, #33	@ 0x21
 8006136:	d13e      	bne.n	80061b6 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	689b      	ldr	r3, [r3, #8]
 800613c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006140:	d114      	bne.n	800616c <UART_Transmit_IT+0x48>
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	691b      	ldr	r3, [r3, #16]
 8006146:	2b00      	cmp	r3, #0
 8006148:	d110      	bne.n	800616c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	6a1b      	ldr	r3, [r3, #32]
 800614e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	881b      	ldrh	r3, [r3, #0]
 8006154:	461a      	mov	r2, r3
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800615e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	6a1b      	ldr	r3, [r3, #32]
 8006164:	1c9a      	adds	r2, r3, #2
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	621a      	str	r2, [r3, #32]
 800616a:	e008      	b.n	800617e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	6a1b      	ldr	r3, [r3, #32]
 8006170:	1c59      	adds	r1, r3, #1
 8006172:	687a      	ldr	r2, [r7, #4]
 8006174:	6211      	str	r1, [r2, #32]
 8006176:	781a      	ldrb	r2, [r3, #0]
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006182:	b29b      	uxth	r3, r3
 8006184:	3b01      	subs	r3, #1
 8006186:	b29b      	uxth	r3, r3
 8006188:	687a      	ldr	r2, [r7, #4]
 800618a:	4619      	mov	r1, r3
 800618c:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800618e:	2b00      	cmp	r3, #0
 8006190:	d10f      	bne.n	80061b2 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	68da      	ldr	r2, [r3, #12]
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80061a0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	68da      	ldr	r2, [r3, #12]
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80061b0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80061b2:	2300      	movs	r3, #0
 80061b4:	e000      	b.n	80061b8 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80061b6:	2302      	movs	r3, #2
  }
}
 80061b8:	4618      	mov	r0, r3
 80061ba:	3714      	adds	r7, #20
 80061bc:	46bd      	mov	sp, r7
 80061be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c2:	4770      	bx	lr

080061c4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80061c4:	b580      	push	{r7, lr}
 80061c6:	b082      	sub	sp, #8
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	68da      	ldr	r2, [r3, #12]
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80061da:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	2220      	movs	r2, #32
 80061e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80061e4:	6878      	ldr	r0, [r7, #4]
 80061e6:	f7ff fe73 	bl	8005ed0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80061ea:	2300      	movs	r3, #0
}
 80061ec:	4618      	mov	r0, r3
 80061ee:	3708      	adds	r7, #8
 80061f0:	46bd      	mov	sp, r7
 80061f2:	bd80      	pop	{r7, pc}

080061f4 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80061f4:	b580      	push	{r7, lr}
 80061f6:	b08c      	sub	sp, #48	@ 0x30
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006202:	b2db      	uxtb	r3, r3
 8006204:	2b22      	cmp	r3, #34	@ 0x22
 8006206:	f040 80ae 	bne.w	8006366 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	689b      	ldr	r3, [r3, #8]
 800620e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006212:	d117      	bne.n	8006244 <UART_Receive_IT+0x50>
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	691b      	ldr	r3, [r3, #16]
 8006218:	2b00      	cmp	r3, #0
 800621a:	d113      	bne.n	8006244 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800621c:	2300      	movs	r3, #0
 800621e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006224:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	685b      	ldr	r3, [r3, #4]
 800622c:	b29b      	uxth	r3, r3
 800622e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006232:	b29a      	uxth	r2, r3
 8006234:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006236:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800623c:	1c9a      	adds	r2, r3, #2
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	629a      	str	r2, [r3, #40]	@ 0x28
 8006242:	e026      	b.n	8006292 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006248:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800624a:	2300      	movs	r3, #0
 800624c:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	689b      	ldr	r3, [r3, #8]
 8006252:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006256:	d007      	beq.n	8006268 <UART_Receive_IT+0x74>
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	689b      	ldr	r3, [r3, #8]
 800625c:	2b00      	cmp	r3, #0
 800625e:	d10a      	bne.n	8006276 <UART_Receive_IT+0x82>
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	691b      	ldr	r3, [r3, #16]
 8006264:	2b00      	cmp	r3, #0
 8006266:	d106      	bne.n	8006276 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	685b      	ldr	r3, [r3, #4]
 800626e:	b2da      	uxtb	r2, r3
 8006270:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006272:	701a      	strb	r2, [r3, #0]
 8006274:	e008      	b.n	8006288 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	685b      	ldr	r3, [r3, #4]
 800627c:	b2db      	uxtb	r3, r3
 800627e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006282:	b2da      	uxtb	r2, r3
 8006284:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006286:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800628c:	1c5a      	adds	r2, r3, #1
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006296:	b29b      	uxth	r3, r3
 8006298:	3b01      	subs	r3, #1
 800629a:	b29b      	uxth	r3, r3
 800629c:	687a      	ldr	r2, [r7, #4]
 800629e:	4619      	mov	r1, r3
 80062a0:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d15d      	bne.n	8006362 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	68da      	ldr	r2, [r3, #12]
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	f022 0220 	bic.w	r2, r2, #32
 80062b4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	68da      	ldr	r2, [r3, #12]
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80062c4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	695a      	ldr	r2, [r3, #20]
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	f022 0201 	bic.w	r2, r2, #1
 80062d4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	2220      	movs	r2, #32
 80062da:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	2200      	movs	r2, #0
 80062e2:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80062e8:	2b01      	cmp	r3, #1
 80062ea:	d135      	bne.n	8006358 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	2200      	movs	r2, #0
 80062f0:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	330c      	adds	r3, #12
 80062f8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062fa:	697b      	ldr	r3, [r7, #20]
 80062fc:	e853 3f00 	ldrex	r3, [r3]
 8006300:	613b      	str	r3, [r7, #16]
   return(result);
 8006302:	693b      	ldr	r3, [r7, #16]
 8006304:	f023 0310 	bic.w	r3, r3, #16
 8006308:	627b      	str	r3, [r7, #36]	@ 0x24
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	330c      	adds	r3, #12
 8006310:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006312:	623a      	str	r2, [r7, #32]
 8006314:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006316:	69f9      	ldr	r1, [r7, #28]
 8006318:	6a3a      	ldr	r2, [r7, #32]
 800631a:	e841 2300 	strex	r3, r2, [r1]
 800631e:	61bb      	str	r3, [r7, #24]
   return(result);
 8006320:	69bb      	ldr	r3, [r7, #24]
 8006322:	2b00      	cmp	r3, #0
 8006324:	d1e5      	bne.n	80062f2 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	f003 0310 	and.w	r3, r3, #16
 8006330:	2b10      	cmp	r3, #16
 8006332:	d10a      	bne.n	800634a <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006334:	2300      	movs	r3, #0
 8006336:	60fb      	str	r3, [r7, #12]
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	60fb      	str	r3, [r7, #12]
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	685b      	ldr	r3, [r3, #4]
 8006346:	60fb      	str	r3, [r7, #12]
 8006348:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800634e:	4619      	mov	r1, r3
 8006350:	6878      	ldr	r0, [r7, #4]
 8006352:	f7ff fdd1 	bl	8005ef8 <HAL_UARTEx_RxEventCallback>
 8006356:	e002      	b.n	800635e <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006358:	6878      	ldr	r0, [r7, #4]
 800635a:	f7fa fc85 	bl	8000c68 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800635e:	2300      	movs	r3, #0
 8006360:	e002      	b.n	8006368 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8006362:	2300      	movs	r3, #0
 8006364:	e000      	b.n	8006368 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8006366:	2302      	movs	r3, #2
  }
}
 8006368:	4618      	mov	r0, r3
 800636a:	3730      	adds	r7, #48	@ 0x30
 800636c:	46bd      	mov	sp, r7
 800636e:	bd80      	pop	{r7, pc}

08006370 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006370:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006374:	b0c0      	sub	sp, #256	@ 0x100
 8006376:	af00      	add	r7, sp, #0
 8006378:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800637c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	691b      	ldr	r3, [r3, #16]
 8006384:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8006388:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800638c:	68d9      	ldr	r1, [r3, #12]
 800638e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006392:	681a      	ldr	r2, [r3, #0]
 8006394:	ea40 0301 	orr.w	r3, r0, r1
 8006398:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800639a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800639e:	689a      	ldr	r2, [r3, #8]
 80063a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80063a4:	691b      	ldr	r3, [r3, #16]
 80063a6:	431a      	orrs	r2, r3
 80063a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80063ac:	695b      	ldr	r3, [r3, #20]
 80063ae:	431a      	orrs	r2, r3
 80063b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80063b4:	69db      	ldr	r3, [r3, #28]
 80063b6:	4313      	orrs	r3, r2
 80063b8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80063bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	68db      	ldr	r3, [r3, #12]
 80063c4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80063c8:	f021 010c 	bic.w	r1, r1, #12
 80063cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80063d0:	681a      	ldr	r2, [r3, #0]
 80063d2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80063d6:	430b      	orrs	r3, r1
 80063d8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80063da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	695b      	ldr	r3, [r3, #20]
 80063e2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80063e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80063ea:	6999      	ldr	r1, [r3, #24]
 80063ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80063f0:	681a      	ldr	r2, [r3, #0]
 80063f2:	ea40 0301 	orr.w	r3, r0, r1
 80063f6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80063f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80063fc:	681a      	ldr	r2, [r3, #0]
 80063fe:	4b8f      	ldr	r3, [pc, #572]	@ (800663c <UART_SetConfig+0x2cc>)
 8006400:	429a      	cmp	r2, r3
 8006402:	d005      	beq.n	8006410 <UART_SetConfig+0xa0>
 8006404:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006408:	681a      	ldr	r2, [r3, #0]
 800640a:	4b8d      	ldr	r3, [pc, #564]	@ (8006640 <UART_SetConfig+0x2d0>)
 800640c:	429a      	cmp	r2, r3
 800640e:	d104      	bne.n	800641a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006410:	f7fe f91a 	bl	8004648 <HAL_RCC_GetPCLK2Freq>
 8006414:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8006418:	e003      	b.n	8006422 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800641a:	f7fe f901 	bl	8004620 <HAL_RCC_GetPCLK1Freq>
 800641e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006422:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006426:	69db      	ldr	r3, [r3, #28]
 8006428:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800642c:	f040 810c 	bne.w	8006648 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006430:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006434:	2200      	movs	r2, #0
 8006436:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800643a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800643e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8006442:	4622      	mov	r2, r4
 8006444:	462b      	mov	r3, r5
 8006446:	1891      	adds	r1, r2, r2
 8006448:	65b9      	str	r1, [r7, #88]	@ 0x58
 800644a:	415b      	adcs	r3, r3
 800644c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800644e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8006452:	4621      	mov	r1, r4
 8006454:	eb12 0801 	adds.w	r8, r2, r1
 8006458:	4629      	mov	r1, r5
 800645a:	eb43 0901 	adc.w	r9, r3, r1
 800645e:	f04f 0200 	mov.w	r2, #0
 8006462:	f04f 0300 	mov.w	r3, #0
 8006466:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800646a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800646e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006472:	4690      	mov	r8, r2
 8006474:	4699      	mov	r9, r3
 8006476:	4623      	mov	r3, r4
 8006478:	eb18 0303 	adds.w	r3, r8, r3
 800647c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006480:	462b      	mov	r3, r5
 8006482:	eb49 0303 	adc.w	r3, r9, r3
 8006486:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800648a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800648e:	685b      	ldr	r3, [r3, #4]
 8006490:	2200      	movs	r2, #0
 8006492:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006496:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800649a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800649e:	460b      	mov	r3, r1
 80064a0:	18db      	adds	r3, r3, r3
 80064a2:	653b      	str	r3, [r7, #80]	@ 0x50
 80064a4:	4613      	mov	r3, r2
 80064a6:	eb42 0303 	adc.w	r3, r2, r3
 80064aa:	657b      	str	r3, [r7, #84]	@ 0x54
 80064ac:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80064b0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80064b4:	f7f9 fee4 	bl	8000280 <__aeabi_uldivmod>
 80064b8:	4602      	mov	r2, r0
 80064ba:	460b      	mov	r3, r1
 80064bc:	4b61      	ldr	r3, [pc, #388]	@ (8006644 <UART_SetConfig+0x2d4>)
 80064be:	fba3 2302 	umull	r2, r3, r3, r2
 80064c2:	095b      	lsrs	r3, r3, #5
 80064c4:	011c      	lsls	r4, r3, #4
 80064c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80064ca:	2200      	movs	r2, #0
 80064cc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80064d0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80064d4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80064d8:	4642      	mov	r2, r8
 80064da:	464b      	mov	r3, r9
 80064dc:	1891      	adds	r1, r2, r2
 80064de:	64b9      	str	r1, [r7, #72]	@ 0x48
 80064e0:	415b      	adcs	r3, r3
 80064e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80064e4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80064e8:	4641      	mov	r1, r8
 80064ea:	eb12 0a01 	adds.w	sl, r2, r1
 80064ee:	4649      	mov	r1, r9
 80064f0:	eb43 0b01 	adc.w	fp, r3, r1
 80064f4:	f04f 0200 	mov.w	r2, #0
 80064f8:	f04f 0300 	mov.w	r3, #0
 80064fc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006500:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006504:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006508:	4692      	mov	sl, r2
 800650a:	469b      	mov	fp, r3
 800650c:	4643      	mov	r3, r8
 800650e:	eb1a 0303 	adds.w	r3, sl, r3
 8006512:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006516:	464b      	mov	r3, r9
 8006518:	eb4b 0303 	adc.w	r3, fp, r3
 800651c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006520:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006524:	685b      	ldr	r3, [r3, #4]
 8006526:	2200      	movs	r2, #0
 8006528:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800652c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8006530:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006534:	460b      	mov	r3, r1
 8006536:	18db      	adds	r3, r3, r3
 8006538:	643b      	str	r3, [r7, #64]	@ 0x40
 800653a:	4613      	mov	r3, r2
 800653c:	eb42 0303 	adc.w	r3, r2, r3
 8006540:	647b      	str	r3, [r7, #68]	@ 0x44
 8006542:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8006546:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800654a:	f7f9 fe99 	bl	8000280 <__aeabi_uldivmod>
 800654e:	4602      	mov	r2, r0
 8006550:	460b      	mov	r3, r1
 8006552:	4611      	mov	r1, r2
 8006554:	4b3b      	ldr	r3, [pc, #236]	@ (8006644 <UART_SetConfig+0x2d4>)
 8006556:	fba3 2301 	umull	r2, r3, r3, r1
 800655a:	095b      	lsrs	r3, r3, #5
 800655c:	2264      	movs	r2, #100	@ 0x64
 800655e:	fb02 f303 	mul.w	r3, r2, r3
 8006562:	1acb      	subs	r3, r1, r3
 8006564:	00db      	lsls	r3, r3, #3
 8006566:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800656a:	4b36      	ldr	r3, [pc, #216]	@ (8006644 <UART_SetConfig+0x2d4>)
 800656c:	fba3 2302 	umull	r2, r3, r3, r2
 8006570:	095b      	lsrs	r3, r3, #5
 8006572:	005b      	lsls	r3, r3, #1
 8006574:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8006578:	441c      	add	r4, r3
 800657a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800657e:	2200      	movs	r2, #0
 8006580:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006584:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8006588:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800658c:	4642      	mov	r2, r8
 800658e:	464b      	mov	r3, r9
 8006590:	1891      	adds	r1, r2, r2
 8006592:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006594:	415b      	adcs	r3, r3
 8006596:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006598:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800659c:	4641      	mov	r1, r8
 800659e:	1851      	adds	r1, r2, r1
 80065a0:	6339      	str	r1, [r7, #48]	@ 0x30
 80065a2:	4649      	mov	r1, r9
 80065a4:	414b      	adcs	r3, r1
 80065a6:	637b      	str	r3, [r7, #52]	@ 0x34
 80065a8:	f04f 0200 	mov.w	r2, #0
 80065ac:	f04f 0300 	mov.w	r3, #0
 80065b0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80065b4:	4659      	mov	r1, fp
 80065b6:	00cb      	lsls	r3, r1, #3
 80065b8:	4651      	mov	r1, sl
 80065ba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80065be:	4651      	mov	r1, sl
 80065c0:	00ca      	lsls	r2, r1, #3
 80065c2:	4610      	mov	r0, r2
 80065c4:	4619      	mov	r1, r3
 80065c6:	4603      	mov	r3, r0
 80065c8:	4642      	mov	r2, r8
 80065ca:	189b      	adds	r3, r3, r2
 80065cc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80065d0:	464b      	mov	r3, r9
 80065d2:	460a      	mov	r2, r1
 80065d4:	eb42 0303 	adc.w	r3, r2, r3
 80065d8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80065dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80065e0:	685b      	ldr	r3, [r3, #4]
 80065e2:	2200      	movs	r2, #0
 80065e4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80065e8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80065ec:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80065f0:	460b      	mov	r3, r1
 80065f2:	18db      	adds	r3, r3, r3
 80065f4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80065f6:	4613      	mov	r3, r2
 80065f8:	eb42 0303 	adc.w	r3, r2, r3
 80065fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80065fe:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006602:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8006606:	f7f9 fe3b 	bl	8000280 <__aeabi_uldivmod>
 800660a:	4602      	mov	r2, r0
 800660c:	460b      	mov	r3, r1
 800660e:	4b0d      	ldr	r3, [pc, #52]	@ (8006644 <UART_SetConfig+0x2d4>)
 8006610:	fba3 1302 	umull	r1, r3, r3, r2
 8006614:	095b      	lsrs	r3, r3, #5
 8006616:	2164      	movs	r1, #100	@ 0x64
 8006618:	fb01 f303 	mul.w	r3, r1, r3
 800661c:	1ad3      	subs	r3, r2, r3
 800661e:	00db      	lsls	r3, r3, #3
 8006620:	3332      	adds	r3, #50	@ 0x32
 8006622:	4a08      	ldr	r2, [pc, #32]	@ (8006644 <UART_SetConfig+0x2d4>)
 8006624:	fba2 2303 	umull	r2, r3, r2, r3
 8006628:	095b      	lsrs	r3, r3, #5
 800662a:	f003 0207 	and.w	r2, r3, #7
 800662e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	4422      	add	r2, r4
 8006636:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006638:	e106      	b.n	8006848 <UART_SetConfig+0x4d8>
 800663a:	bf00      	nop
 800663c:	40011000 	.word	0x40011000
 8006640:	40011400 	.word	0x40011400
 8006644:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006648:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800664c:	2200      	movs	r2, #0
 800664e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006652:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8006656:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800665a:	4642      	mov	r2, r8
 800665c:	464b      	mov	r3, r9
 800665e:	1891      	adds	r1, r2, r2
 8006660:	6239      	str	r1, [r7, #32]
 8006662:	415b      	adcs	r3, r3
 8006664:	627b      	str	r3, [r7, #36]	@ 0x24
 8006666:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800666a:	4641      	mov	r1, r8
 800666c:	1854      	adds	r4, r2, r1
 800666e:	4649      	mov	r1, r9
 8006670:	eb43 0501 	adc.w	r5, r3, r1
 8006674:	f04f 0200 	mov.w	r2, #0
 8006678:	f04f 0300 	mov.w	r3, #0
 800667c:	00eb      	lsls	r3, r5, #3
 800667e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006682:	00e2      	lsls	r2, r4, #3
 8006684:	4614      	mov	r4, r2
 8006686:	461d      	mov	r5, r3
 8006688:	4643      	mov	r3, r8
 800668a:	18e3      	adds	r3, r4, r3
 800668c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006690:	464b      	mov	r3, r9
 8006692:	eb45 0303 	adc.w	r3, r5, r3
 8006696:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800669a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800669e:	685b      	ldr	r3, [r3, #4]
 80066a0:	2200      	movs	r2, #0
 80066a2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80066a6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80066aa:	f04f 0200 	mov.w	r2, #0
 80066ae:	f04f 0300 	mov.w	r3, #0
 80066b2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80066b6:	4629      	mov	r1, r5
 80066b8:	008b      	lsls	r3, r1, #2
 80066ba:	4621      	mov	r1, r4
 80066bc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80066c0:	4621      	mov	r1, r4
 80066c2:	008a      	lsls	r2, r1, #2
 80066c4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80066c8:	f7f9 fdda 	bl	8000280 <__aeabi_uldivmod>
 80066cc:	4602      	mov	r2, r0
 80066ce:	460b      	mov	r3, r1
 80066d0:	4b60      	ldr	r3, [pc, #384]	@ (8006854 <UART_SetConfig+0x4e4>)
 80066d2:	fba3 2302 	umull	r2, r3, r3, r2
 80066d6:	095b      	lsrs	r3, r3, #5
 80066d8:	011c      	lsls	r4, r3, #4
 80066da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80066de:	2200      	movs	r2, #0
 80066e0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80066e4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80066e8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80066ec:	4642      	mov	r2, r8
 80066ee:	464b      	mov	r3, r9
 80066f0:	1891      	adds	r1, r2, r2
 80066f2:	61b9      	str	r1, [r7, #24]
 80066f4:	415b      	adcs	r3, r3
 80066f6:	61fb      	str	r3, [r7, #28]
 80066f8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80066fc:	4641      	mov	r1, r8
 80066fe:	1851      	adds	r1, r2, r1
 8006700:	6139      	str	r1, [r7, #16]
 8006702:	4649      	mov	r1, r9
 8006704:	414b      	adcs	r3, r1
 8006706:	617b      	str	r3, [r7, #20]
 8006708:	f04f 0200 	mov.w	r2, #0
 800670c:	f04f 0300 	mov.w	r3, #0
 8006710:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006714:	4659      	mov	r1, fp
 8006716:	00cb      	lsls	r3, r1, #3
 8006718:	4651      	mov	r1, sl
 800671a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800671e:	4651      	mov	r1, sl
 8006720:	00ca      	lsls	r2, r1, #3
 8006722:	4610      	mov	r0, r2
 8006724:	4619      	mov	r1, r3
 8006726:	4603      	mov	r3, r0
 8006728:	4642      	mov	r2, r8
 800672a:	189b      	adds	r3, r3, r2
 800672c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006730:	464b      	mov	r3, r9
 8006732:	460a      	mov	r2, r1
 8006734:	eb42 0303 	adc.w	r3, r2, r3
 8006738:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800673c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006740:	685b      	ldr	r3, [r3, #4]
 8006742:	2200      	movs	r2, #0
 8006744:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006746:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8006748:	f04f 0200 	mov.w	r2, #0
 800674c:	f04f 0300 	mov.w	r3, #0
 8006750:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8006754:	4649      	mov	r1, r9
 8006756:	008b      	lsls	r3, r1, #2
 8006758:	4641      	mov	r1, r8
 800675a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800675e:	4641      	mov	r1, r8
 8006760:	008a      	lsls	r2, r1, #2
 8006762:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8006766:	f7f9 fd8b 	bl	8000280 <__aeabi_uldivmod>
 800676a:	4602      	mov	r2, r0
 800676c:	460b      	mov	r3, r1
 800676e:	4611      	mov	r1, r2
 8006770:	4b38      	ldr	r3, [pc, #224]	@ (8006854 <UART_SetConfig+0x4e4>)
 8006772:	fba3 2301 	umull	r2, r3, r3, r1
 8006776:	095b      	lsrs	r3, r3, #5
 8006778:	2264      	movs	r2, #100	@ 0x64
 800677a:	fb02 f303 	mul.w	r3, r2, r3
 800677e:	1acb      	subs	r3, r1, r3
 8006780:	011b      	lsls	r3, r3, #4
 8006782:	3332      	adds	r3, #50	@ 0x32
 8006784:	4a33      	ldr	r2, [pc, #204]	@ (8006854 <UART_SetConfig+0x4e4>)
 8006786:	fba2 2303 	umull	r2, r3, r2, r3
 800678a:	095b      	lsrs	r3, r3, #5
 800678c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006790:	441c      	add	r4, r3
 8006792:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006796:	2200      	movs	r2, #0
 8006798:	673b      	str	r3, [r7, #112]	@ 0x70
 800679a:	677a      	str	r2, [r7, #116]	@ 0x74
 800679c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80067a0:	4642      	mov	r2, r8
 80067a2:	464b      	mov	r3, r9
 80067a4:	1891      	adds	r1, r2, r2
 80067a6:	60b9      	str	r1, [r7, #8]
 80067a8:	415b      	adcs	r3, r3
 80067aa:	60fb      	str	r3, [r7, #12]
 80067ac:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80067b0:	4641      	mov	r1, r8
 80067b2:	1851      	adds	r1, r2, r1
 80067b4:	6039      	str	r1, [r7, #0]
 80067b6:	4649      	mov	r1, r9
 80067b8:	414b      	adcs	r3, r1
 80067ba:	607b      	str	r3, [r7, #4]
 80067bc:	f04f 0200 	mov.w	r2, #0
 80067c0:	f04f 0300 	mov.w	r3, #0
 80067c4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80067c8:	4659      	mov	r1, fp
 80067ca:	00cb      	lsls	r3, r1, #3
 80067cc:	4651      	mov	r1, sl
 80067ce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80067d2:	4651      	mov	r1, sl
 80067d4:	00ca      	lsls	r2, r1, #3
 80067d6:	4610      	mov	r0, r2
 80067d8:	4619      	mov	r1, r3
 80067da:	4603      	mov	r3, r0
 80067dc:	4642      	mov	r2, r8
 80067de:	189b      	adds	r3, r3, r2
 80067e0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80067e2:	464b      	mov	r3, r9
 80067e4:	460a      	mov	r2, r1
 80067e6:	eb42 0303 	adc.w	r3, r2, r3
 80067ea:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80067ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80067f0:	685b      	ldr	r3, [r3, #4]
 80067f2:	2200      	movs	r2, #0
 80067f4:	663b      	str	r3, [r7, #96]	@ 0x60
 80067f6:	667a      	str	r2, [r7, #100]	@ 0x64
 80067f8:	f04f 0200 	mov.w	r2, #0
 80067fc:	f04f 0300 	mov.w	r3, #0
 8006800:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8006804:	4649      	mov	r1, r9
 8006806:	008b      	lsls	r3, r1, #2
 8006808:	4641      	mov	r1, r8
 800680a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800680e:	4641      	mov	r1, r8
 8006810:	008a      	lsls	r2, r1, #2
 8006812:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8006816:	f7f9 fd33 	bl	8000280 <__aeabi_uldivmod>
 800681a:	4602      	mov	r2, r0
 800681c:	460b      	mov	r3, r1
 800681e:	4b0d      	ldr	r3, [pc, #52]	@ (8006854 <UART_SetConfig+0x4e4>)
 8006820:	fba3 1302 	umull	r1, r3, r3, r2
 8006824:	095b      	lsrs	r3, r3, #5
 8006826:	2164      	movs	r1, #100	@ 0x64
 8006828:	fb01 f303 	mul.w	r3, r1, r3
 800682c:	1ad3      	subs	r3, r2, r3
 800682e:	011b      	lsls	r3, r3, #4
 8006830:	3332      	adds	r3, #50	@ 0x32
 8006832:	4a08      	ldr	r2, [pc, #32]	@ (8006854 <UART_SetConfig+0x4e4>)
 8006834:	fba2 2303 	umull	r2, r3, r2, r3
 8006838:	095b      	lsrs	r3, r3, #5
 800683a:	f003 020f 	and.w	r2, r3, #15
 800683e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	4422      	add	r2, r4
 8006846:	609a      	str	r2, [r3, #8]
}
 8006848:	bf00      	nop
 800684a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800684e:	46bd      	mov	sp, r7
 8006850:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006854:	51eb851f 	.word	0x51eb851f

08006858 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006858:	b084      	sub	sp, #16
 800685a:	b580      	push	{r7, lr}
 800685c:	b084      	sub	sp, #16
 800685e:	af00      	add	r7, sp, #0
 8006860:	6078      	str	r0, [r7, #4]
 8006862:	f107 001c 	add.w	r0, r7, #28
 8006866:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800686a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800686e:	2b01      	cmp	r3, #1
 8006870:	d123      	bne.n	80068ba <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006876:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	68db      	ldr	r3, [r3, #12]
 8006882:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8006886:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800688a:	687a      	ldr	r2, [r7, #4]
 800688c:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	68db      	ldr	r3, [r3, #12]
 8006892:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800689a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800689e:	2b01      	cmp	r3, #1
 80068a0:	d105      	bne.n	80068ae <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	68db      	ldr	r3, [r3, #12]
 80068a6:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80068ae:	6878      	ldr	r0, [r7, #4]
 80068b0:	f001 fae8 	bl	8007e84 <USB_CoreReset>
 80068b4:	4603      	mov	r3, r0
 80068b6:	73fb      	strb	r3, [r7, #15]
 80068b8:	e01b      	b.n	80068f2 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	68db      	ldr	r3, [r3, #12]
 80068be:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80068c6:	6878      	ldr	r0, [r7, #4]
 80068c8:	f001 fadc 	bl	8007e84 <USB_CoreReset>
 80068cc:	4603      	mov	r3, r0
 80068ce:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80068d0:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d106      	bne.n	80068e6 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80068dc:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	639a      	str	r2, [r3, #56]	@ 0x38
 80068e4:	e005      	b.n	80068f2 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80068ea:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80068f2:	7fbb      	ldrb	r3, [r7, #30]
 80068f4:	2b01      	cmp	r3, #1
 80068f6:	d10b      	bne.n	8006910 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	689b      	ldr	r3, [r3, #8]
 80068fc:	f043 0206 	orr.w	r2, r3, #6
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	689b      	ldr	r3, [r3, #8]
 8006908:	f043 0220 	orr.w	r2, r3, #32
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006910:	7bfb      	ldrb	r3, [r7, #15]
}
 8006912:	4618      	mov	r0, r3
 8006914:	3710      	adds	r7, #16
 8006916:	46bd      	mov	sp, r7
 8006918:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800691c:	b004      	add	sp, #16
 800691e:	4770      	bx	lr

08006920 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8006920:	b480      	push	{r7}
 8006922:	b087      	sub	sp, #28
 8006924:	af00      	add	r7, sp, #0
 8006926:	60f8      	str	r0, [r7, #12]
 8006928:	60b9      	str	r1, [r7, #8]
 800692a:	4613      	mov	r3, r2
 800692c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800692e:	79fb      	ldrb	r3, [r7, #7]
 8006930:	2b02      	cmp	r3, #2
 8006932:	d165      	bne.n	8006a00 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8006934:	68bb      	ldr	r3, [r7, #8]
 8006936:	4a41      	ldr	r2, [pc, #260]	@ (8006a3c <USB_SetTurnaroundTime+0x11c>)
 8006938:	4293      	cmp	r3, r2
 800693a:	d906      	bls.n	800694a <USB_SetTurnaroundTime+0x2a>
 800693c:	68bb      	ldr	r3, [r7, #8]
 800693e:	4a40      	ldr	r2, [pc, #256]	@ (8006a40 <USB_SetTurnaroundTime+0x120>)
 8006940:	4293      	cmp	r3, r2
 8006942:	d202      	bcs.n	800694a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8006944:	230f      	movs	r3, #15
 8006946:	617b      	str	r3, [r7, #20]
 8006948:	e062      	b.n	8006a10 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800694a:	68bb      	ldr	r3, [r7, #8]
 800694c:	4a3c      	ldr	r2, [pc, #240]	@ (8006a40 <USB_SetTurnaroundTime+0x120>)
 800694e:	4293      	cmp	r3, r2
 8006950:	d306      	bcc.n	8006960 <USB_SetTurnaroundTime+0x40>
 8006952:	68bb      	ldr	r3, [r7, #8]
 8006954:	4a3b      	ldr	r2, [pc, #236]	@ (8006a44 <USB_SetTurnaroundTime+0x124>)
 8006956:	4293      	cmp	r3, r2
 8006958:	d202      	bcs.n	8006960 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800695a:	230e      	movs	r3, #14
 800695c:	617b      	str	r3, [r7, #20]
 800695e:	e057      	b.n	8006a10 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8006960:	68bb      	ldr	r3, [r7, #8]
 8006962:	4a38      	ldr	r2, [pc, #224]	@ (8006a44 <USB_SetTurnaroundTime+0x124>)
 8006964:	4293      	cmp	r3, r2
 8006966:	d306      	bcc.n	8006976 <USB_SetTurnaroundTime+0x56>
 8006968:	68bb      	ldr	r3, [r7, #8]
 800696a:	4a37      	ldr	r2, [pc, #220]	@ (8006a48 <USB_SetTurnaroundTime+0x128>)
 800696c:	4293      	cmp	r3, r2
 800696e:	d202      	bcs.n	8006976 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8006970:	230d      	movs	r3, #13
 8006972:	617b      	str	r3, [r7, #20]
 8006974:	e04c      	b.n	8006a10 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8006976:	68bb      	ldr	r3, [r7, #8]
 8006978:	4a33      	ldr	r2, [pc, #204]	@ (8006a48 <USB_SetTurnaroundTime+0x128>)
 800697a:	4293      	cmp	r3, r2
 800697c:	d306      	bcc.n	800698c <USB_SetTurnaroundTime+0x6c>
 800697e:	68bb      	ldr	r3, [r7, #8]
 8006980:	4a32      	ldr	r2, [pc, #200]	@ (8006a4c <USB_SetTurnaroundTime+0x12c>)
 8006982:	4293      	cmp	r3, r2
 8006984:	d802      	bhi.n	800698c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8006986:	230c      	movs	r3, #12
 8006988:	617b      	str	r3, [r7, #20]
 800698a:	e041      	b.n	8006a10 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800698c:	68bb      	ldr	r3, [r7, #8]
 800698e:	4a2f      	ldr	r2, [pc, #188]	@ (8006a4c <USB_SetTurnaroundTime+0x12c>)
 8006990:	4293      	cmp	r3, r2
 8006992:	d906      	bls.n	80069a2 <USB_SetTurnaroundTime+0x82>
 8006994:	68bb      	ldr	r3, [r7, #8]
 8006996:	4a2e      	ldr	r2, [pc, #184]	@ (8006a50 <USB_SetTurnaroundTime+0x130>)
 8006998:	4293      	cmp	r3, r2
 800699a:	d802      	bhi.n	80069a2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800699c:	230b      	movs	r3, #11
 800699e:	617b      	str	r3, [r7, #20]
 80069a0:	e036      	b.n	8006a10 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80069a2:	68bb      	ldr	r3, [r7, #8]
 80069a4:	4a2a      	ldr	r2, [pc, #168]	@ (8006a50 <USB_SetTurnaroundTime+0x130>)
 80069a6:	4293      	cmp	r3, r2
 80069a8:	d906      	bls.n	80069b8 <USB_SetTurnaroundTime+0x98>
 80069aa:	68bb      	ldr	r3, [r7, #8]
 80069ac:	4a29      	ldr	r2, [pc, #164]	@ (8006a54 <USB_SetTurnaroundTime+0x134>)
 80069ae:	4293      	cmp	r3, r2
 80069b0:	d802      	bhi.n	80069b8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80069b2:	230a      	movs	r3, #10
 80069b4:	617b      	str	r3, [r7, #20]
 80069b6:	e02b      	b.n	8006a10 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80069b8:	68bb      	ldr	r3, [r7, #8]
 80069ba:	4a26      	ldr	r2, [pc, #152]	@ (8006a54 <USB_SetTurnaroundTime+0x134>)
 80069bc:	4293      	cmp	r3, r2
 80069be:	d906      	bls.n	80069ce <USB_SetTurnaroundTime+0xae>
 80069c0:	68bb      	ldr	r3, [r7, #8]
 80069c2:	4a25      	ldr	r2, [pc, #148]	@ (8006a58 <USB_SetTurnaroundTime+0x138>)
 80069c4:	4293      	cmp	r3, r2
 80069c6:	d202      	bcs.n	80069ce <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80069c8:	2309      	movs	r3, #9
 80069ca:	617b      	str	r3, [r7, #20]
 80069cc:	e020      	b.n	8006a10 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80069ce:	68bb      	ldr	r3, [r7, #8]
 80069d0:	4a21      	ldr	r2, [pc, #132]	@ (8006a58 <USB_SetTurnaroundTime+0x138>)
 80069d2:	4293      	cmp	r3, r2
 80069d4:	d306      	bcc.n	80069e4 <USB_SetTurnaroundTime+0xc4>
 80069d6:	68bb      	ldr	r3, [r7, #8]
 80069d8:	4a20      	ldr	r2, [pc, #128]	@ (8006a5c <USB_SetTurnaroundTime+0x13c>)
 80069da:	4293      	cmp	r3, r2
 80069dc:	d802      	bhi.n	80069e4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80069de:	2308      	movs	r3, #8
 80069e0:	617b      	str	r3, [r7, #20]
 80069e2:	e015      	b.n	8006a10 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80069e4:	68bb      	ldr	r3, [r7, #8]
 80069e6:	4a1d      	ldr	r2, [pc, #116]	@ (8006a5c <USB_SetTurnaroundTime+0x13c>)
 80069e8:	4293      	cmp	r3, r2
 80069ea:	d906      	bls.n	80069fa <USB_SetTurnaroundTime+0xda>
 80069ec:	68bb      	ldr	r3, [r7, #8]
 80069ee:	4a1c      	ldr	r2, [pc, #112]	@ (8006a60 <USB_SetTurnaroundTime+0x140>)
 80069f0:	4293      	cmp	r3, r2
 80069f2:	d202      	bcs.n	80069fa <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80069f4:	2307      	movs	r3, #7
 80069f6:	617b      	str	r3, [r7, #20]
 80069f8:	e00a      	b.n	8006a10 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80069fa:	2306      	movs	r3, #6
 80069fc:	617b      	str	r3, [r7, #20]
 80069fe:	e007      	b.n	8006a10 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8006a00:	79fb      	ldrb	r3, [r7, #7]
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d102      	bne.n	8006a0c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8006a06:	2309      	movs	r3, #9
 8006a08:	617b      	str	r3, [r7, #20]
 8006a0a:	e001      	b.n	8006a10 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8006a0c:	2309      	movs	r3, #9
 8006a0e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	68db      	ldr	r3, [r3, #12]
 8006a14:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	68da      	ldr	r2, [r3, #12]
 8006a20:	697b      	ldr	r3, [r7, #20]
 8006a22:	029b      	lsls	r3, r3, #10
 8006a24:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8006a28:	431a      	orrs	r2, r3
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006a2e:	2300      	movs	r3, #0
}
 8006a30:	4618      	mov	r0, r3
 8006a32:	371c      	adds	r7, #28
 8006a34:	46bd      	mov	sp, r7
 8006a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a3a:	4770      	bx	lr
 8006a3c:	00d8acbf 	.word	0x00d8acbf
 8006a40:	00e4e1c0 	.word	0x00e4e1c0
 8006a44:	00f42400 	.word	0x00f42400
 8006a48:	01067380 	.word	0x01067380
 8006a4c:	011a499f 	.word	0x011a499f
 8006a50:	01312cff 	.word	0x01312cff
 8006a54:	014ca43f 	.word	0x014ca43f
 8006a58:	016e3600 	.word	0x016e3600
 8006a5c:	01a6ab1f 	.word	0x01a6ab1f
 8006a60:	01e84800 	.word	0x01e84800

08006a64 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006a64:	b480      	push	{r7}
 8006a66:	b083      	sub	sp, #12
 8006a68:	af00      	add	r7, sp, #0
 8006a6a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	689b      	ldr	r3, [r3, #8]
 8006a70:	f043 0201 	orr.w	r2, r3, #1
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006a78:	2300      	movs	r3, #0
}
 8006a7a:	4618      	mov	r0, r3
 8006a7c:	370c      	adds	r7, #12
 8006a7e:	46bd      	mov	sp, r7
 8006a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a84:	4770      	bx	lr

08006a86 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006a86:	b480      	push	{r7}
 8006a88:	b083      	sub	sp, #12
 8006a8a:	af00      	add	r7, sp, #0
 8006a8c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	689b      	ldr	r3, [r3, #8]
 8006a92:	f023 0201 	bic.w	r2, r3, #1
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006a9a:	2300      	movs	r3, #0
}
 8006a9c:	4618      	mov	r0, r3
 8006a9e:	370c      	adds	r7, #12
 8006aa0:	46bd      	mov	sp, r7
 8006aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa6:	4770      	bx	lr

08006aa8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006aa8:	b580      	push	{r7, lr}
 8006aaa:	b084      	sub	sp, #16
 8006aac:	af00      	add	r7, sp, #0
 8006aae:	6078      	str	r0, [r7, #4]
 8006ab0:	460b      	mov	r3, r1
 8006ab2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006ab4:	2300      	movs	r3, #0
 8006ab6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	68db      	ldr	r3, [r3, #12]
 8006abc:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006ac4:	78fb      	ldrb	r3, [r7, #3]
 8006ac6:	2b01      	cmp	r3, #1
 8006ac8:	d115      	bne.n	8006af6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	68db      	ldr	r3, [r3, #12]
 8006ace:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006ad6:	200a      	movs	r0, #10
 8006ad8:	f7fb f978 	bl	8001dcc <HAL_Delay>
      ms += 10U;
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	330a      	adds	r3, #10
 8006ae0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006ae2:	6878      	ldr	r0, [r7, #4]
 8006ae4:	f001 f93f 	bl	8007d66 <USB_GetMode>
 8006ae8:	4603      	mov	r3, r0
 8006aea:	2b01      	cmp	r3, #1
 8006aec:	d01e      	beq.n	8006b2c <USB_SetCurrentMode+0x84>
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	2bc7      	cmp	r3, #199	@ 0xc7
 8006af2:	d9f0      	bls.n	8006ad6 <USB_SetCurrentMode+0x2e>
 8006af4:	e01a      	b.n	8006b2c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006af6:	78fb      	ldrb	r3, [r7, #3]
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d115      	bne.n	8006b28 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	68db      	ldr	r3, [r3, #12]
 8006b00:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006b08:	200a      	movs	r0, #10
 8006b0a:	f7fb f95f 	bl	8001dcc <HAL_Delay>
      ms += 10U;
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	330a      	adds	r3, #10
 8006b12:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006b14:	6878      	ldr	r0, [r7, #4]
 8006b16:	f001 f926 	bl	8007d66 <USB_GetMode>
 8006b1a:	4603      	mov	r3, r0
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d005      	beq.n	8006b2c <USB_SetCurrentMode+0x84>
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	2bc7      	cmp	r3, #199	@ 0xc7
 8006b24:	d9f0      	bls.n	8006b08 <USB_SetCurrentMode+0x60>
 8006b26:	e001      	b.n	8006b2c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006b28:	2301      	movs	r3, #1
 8006b2a:	e005      	b.n	8006b38 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	2bc8      	cmp	r3, #200	@ 0xc8
 8006b30:	d101      	bne.n	8006b36 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006b32:	2301      	movs	r3, #1
 8006b34:	e000      	b.n	8006b38 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006b36:	2300      	movs	r3, #0
}
 8006b38:	4618      	mov	r0, r3
 8006b3a:	3710      	adds	r7, #16
 8006b3c:	46bd      	mov	sp, r7
 8006b3e:	bd80      	pop	{r7, pc}

08006b40 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006b40:	b084      	sub	sp, #16
 8006b42:	b580      	push	{r7, lr}
 8006b44:	b086      	sub	sp, #24
 8006b46:	af00      	add	r7, sp, #0
 8006b48:	6078      	str	r0, [r7, #4]
 8006b4a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8006b4e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006b52:	2300      	movs	r3, #0
 8006b54:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006b5a:	2300      	movs	r3, #0
 8006b5c:	613b      	str	r3, [r7, #16]
 8006b5e:	e009      	b.n	8006b74 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006b60:	687a      	ldr	r2, [r7, #4]
 8006b62:	693b      	ldr	r3, [r7, #16]
 8006b64:	3340      	adds	r3, #64	@ 0x40
 8006b66:	009b      	lsls	r3, r3, #2
 8006b68:	4413      	add	r3, r2
 8006b6a:	2200      	movs	r2, #0
 8006b6c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006b6e:	693b      	ldr	r3, [r7, #16]
 8006b70:	3301      	adds	r3, #1
 8006b72:	613b      	str	r3, [r7, #16]
 8006b74:	693b      	ldr	r3, [r7, #16]
 8006b76:	2b0e      	cmp	r3, #14
 8006b78:	d9f2      	bls.n	8006b60 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006b7a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d11c      	bne.n	8006bbc <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006b88:	685b      	ldr	r3, [r3, #4]
 8006b8a:	68fa      	ldr	r2, [r7, #12]
 8006b8c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006b90:	f043 0302 	orr.w	r3, r3, #2
 8006b94:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b9a:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ba6:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006bb2:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	639a      	str	r2, [r3, #56]	@ 0x38
 8006bba:	e00b      	b.n	8006bd4 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006bc0:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006bcc:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006bda:	461a      	mov	r2, r3
 8006bdc:	2300      	movs	r3, #0
 8006bde:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006be0:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8006be4:	2b01      	cmp	r3, #1
 8006be6:	d10d      	bne.n	8006c04 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006be8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d104      	bne.n	8006bfa <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006bf0:	2100      	movs	r1, #0
 8006bf2:	6878      	ldr	r0, [r7, #4]
 8006bf4:	f000 f968 	bl	8006ec8 <USB_SetDevSpeed>
 8006bf8:	e008      	b.n	8006c0c <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006bfa:	2101      	movs	r1, #1
 8006bfc:	6878      	ldr	r0, [r7, #4]
 8006bfe:	f000 f963 	bl	8006ec8 <USB_SetDevSpeed>
 8006c02:	e003      	b.n	8006c0c <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006c04:	2103      	movs	r1, #3
 8006c06:	6878      	ldr	r0, [r7, #4]
 8006c08:	f000 f95e 	bl	8006ec8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006c0c:	2110      	movs	r1, #16
 8006c0e:	6878      	ldr	r0, [r7, #4]
 8006c10:	f000 f8fa 	bl	8006e08 <USB_FlushTxFifo>
 8006c14:	4603      	mov	r3, r0
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d001      	beq.n	8006c1e <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8006c1a:	2301      	movs	r3, #1
 8006c1c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006c1e:	6878      	ldr	r0, [r7, #4]
 8006c20:	f000 f924 	bl	8006e6c <USB_FlushRxFifo>
 8006c24:	4603      	mov	r3, r0
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d001      	beq.n	8006c2e <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8006c2a:	2301      	movs	r3, #1
 8006c2c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006c34:	461a      	mov	r2, r3
 8006c36:	2300      	movs	r3, #0
 8006c38:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006c40:	461a      	mov	r2, r3
 8006c42:	2300      	movs	r3, #0
 8006c44:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006c4c:	461a      	mov	r2, r3
 8006c4e:	2300      	movs	r3, #0
 8006c50:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006c52:	2300      	movs	r3, #0
 8006c54:	613b      	str	r3, [r7, #16]
 8006c56:	e043      	b.n	8006ce0 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006c58:	693b      	ldr	r3, [r7, #16]
 8006c5a:	015a      	lsls	r2, r3, #5
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	4413      	add	r3, r2
 8006c60:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006c6a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006c6e:	d118      	bne.n	8006ca2 <USB_DevInit+0x162>
    {
      if (i == 0U)
 8006c70:	693b      	ldr	r3, [r7, #16]
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d10a      	bne.n	8006c8c <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006c76:	693b      	ldr	r3, [r7, #16]
 8006c78:	015a      	lsls	r2, r3, #5
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	4413      	add	r3, r2
 8006c7e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006c82:	461a      	mov	r2, r3
 8006c84:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006c88:	6013      	str	r3, [r2, #0]
 8006c8a:	e013      	b.n	8006cb4 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006c8c:	693b      	ldr	r3, [r7, #16]
 8006c8e:	015a      	lsls	r2, r3, #5
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	4413      	add	r3, r2
 8006c94:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006c98:	461a      	mov	r2, r3
 8006c9a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8006c9e:	6013      	str	r3, [r2, #0]
 8006ca0:	e008      	b.n	8006cb4 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006ca2:	693b      	ldr	r3, [r7, #16]
 8006ca4:	015a      	lsls	r2, r3, #5
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	4413      	add	r3, r2
 8006caa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006cae:	461a      	mov	r2, r3
 8006cb0:	2300      	movs	r3, #0
 8006cb2:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006cb4:	693b      	ldr	r3, [r7, #16]
 8006cb6:	015a      	lsls	r2, r3, #5
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	4413      	add	r3, r2
 8006cbc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006cc0:	461a      	mov	r2, r3
 8006cc2:	2300      	movs	r3, #0
 8006cc4:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006cc6:	693b      	ldr	r3, [r7, #16]
 8006cc8:	015a      	lsls	r2, r3, #5
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	4413      	add	r3, r2
 8006cce:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006cd2:	461a      	mov	r2, r3
 8006cd4:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006cd8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006cda:	693b      	ldr	r3, [r7, #16]
 8006cdc:	3301      	adds	r3, #1
 8006cde:	613b      	str	r3, [r7, #16]
 8006ce0:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006ce4:	461a      	mov	r2, r3
 8006ce6:	693b      	ldr	r3, [r7, #16]
 8006ce8:	4293      	cmp	r3, r2
 8006cea:	d3b5      	bcc.n	8006c58 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006cec:	2300      	movs	r3, #0
 8006cee:	613b      	str	r3, [r7, #16]
 8006cf0:	e043      	b.n	8006d7a <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006cf2:	693b      	ldr	r3, [r7, #16]
 8006cf4:	015a      	lsls	r2, r3, #5
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	4413      	add	r3, r2
 8006cfa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006d04:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006d08:	d118      	bne.n	8006d3c <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8006d0a:	693b      	ldr	r3, [r7, #16]
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d10a      	bne.n	8006d26 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006d10:	693b      	ldr	r3, [r7, #16]
 8006d12:	015a      	lsls	r2, r3, #5
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	4413      	add	r3, r2
 8006d18:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006d1c:	461a      	mov	r2, r3
 8006d1e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006d22:	6013      	str	r3, [r2, #0]
 8006d24:	e013      	b.n	8006d4e <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006d26:	693b      	ldr	r3, [r7, #16]
 8006d28:	015a      	lsls	r2, r3, #5
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	4413      	add	r3, r2
 8006d2e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006d32:	461a      	mov	r2, r3
 8006d34:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8006d38:	6013      	str	r3, [r2, #0]
 8006d3a:	e008      	b.n	8006d4e <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006d3c:	693b      	ldr	r3, [r7, #16]
 8006d3e:	015a      	lsls	r2, r3, #5
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	4413      	add	r3, r2
 8006d44:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006d48:	461a      	mov	r2, r3
 8006d4a:	2300      	movs	r3, #0
 8006d4c:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006d4e:	693b      	ldr	r3, [r7, #16]
 8006d50:	015a      	lsls	r2, r3, #5
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	4413      	add	r3, r2
 8006d56:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006d5a:	461a      	mov	r2, r3
 8006d5c:	2300      	movs	r3, #0
 8006d5e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006d60:	693b      	ldr	r3, [r7, #16]
 8006d62:	015a      	lsls	r2, r3, #5
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	4413      	add	r3, r2
 8006d68:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006d6c:	461a      	mov	r2, r3
 8006d6e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006d72:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006d74:	693b      	ldr	r3, [r7, #16]
 8006d76:	3301      	adds	r3, #1
 8006d78:	613b      	str	r3, [r7, #16]
 8006d7a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006d7e:	461a      	mov	r2, r3
 8006d80:	693b      	ldr	r3, [r7, #16]
 8006d82:	4293      	cmp	r3, r2
 8006d84:	d3b5      	bcc.n	8006cf2 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006d8c:	691b      	ldr	r3, [r3, #16]
 8006d8e:	68fa      	ldr	r2, [r7, #12]
 8006d90:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006d94:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006d98:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	2200      	movs	r2, #0
 8006d9e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8006da6:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006da8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d105      	bne.n	8006dbc <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	699b      	ldr	r3, [r3, #24]
 8006db4:	f043 0210 	orr.w	r2, r3, #16
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	699a      	ldr	r2, [r3, #24]
 8006dc0:	4b10      	ldr	r3, [pc, #64]	@ (8006e04 <USB_DevInit+0x2c4>)
 8006dc2:	4313      	orrs	r3, r2
 8006dc4:	687a      	ldr	r2, [r7, #4]
 8006dc6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006dc8:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d005      	beq.n	8006ddc <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	699b      	ldr	r3, [r3, #24]
 8006dd4:	f043 0208 	orr.w	r2, r3, #8
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006ddc:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006de0:	2b01      	cmp	r3, #1
 8006de2:	d107      	bne.n	8006df4 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	699b      	ldr	r3, [r3, #24]
 8006de8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006dec:	f043 0304 	orr.w	r3, r3, #4
 8006df0:	687a      	ldr	r2, [r7, #4]
 8006df2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006df4:	7dfb      	ldrb	r3, [r7, #23]
}
 8006df6:	4618      	mov	r0, r3
 8006df8:	3718      	adds	r7, #24
 8006dfa:	46bd      	mov	sp, r7
 8006dfc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006e00:	b004      	add	sp, #16
 8006e02:	4770      	bx	lr
 8006e04:	803c3800 	.word	0x803c3800

08006e08 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006e08:	b480      	push	{r7}
 8006e0a:	b085      	sub	sp, #20
 8006e0c:	af00      	add	r7, sp, #0
 8006e0e:	6078      	str	r0, [r7, #4]
 8006e10:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006e12:	2300      	movs	r3, #0
 8006e14:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	3301      	adds	r3, #1
 8006e1a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006e22:	d901      	bls.n	8006e28 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006e24:	2303      	movs	r3, #3
 8006e26:	e01b      	b.n	8006e60 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	691b      	ldr	r3, [r3, #16]
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	daf2      	bge.n	8006e16 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006e30:	2300      	movs	r3, #0
 8006e32:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006e34:	683b      	ldr	r3, [r7, #0]
 8006e36:	019b      	lsls	r3, r3, #6
 8006e38:	f043 0220 	orr.w	r2, r3, #32
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	3301      	adds	r3, #1
 8006e44:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006e4c:	d901      	bls.n	8006e52 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006e4e:	2303      	movs	r3, #3
 8006e50:	e006      	b.n	8006e60 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	691b      	ldr	r3, [r3, #16]
 8006e56:	f003 0320 	and.w	r3, r3, #32
 8006e5a:	2b20      	cmp	r3, #32
 8006e5c:	d0f0      	beq.n	8006e40 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006e5e:	2300      	movs	r3, #0
}
 8006e60:	4618      	mov	r0, r3
 8006e62:	3714      	adds	r7, #20
 8006e64:	46bd      	mov	sp, r7
 8006e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e6a:	4770      	bx	lr

08006e6c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006e6c:	b480      	push	{r7}
 8006e6e:	b085      	sub	sp, #20
 8006e70:	af00      	add	r7, sp, #0
 8006e72:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006e74:	2300      	movs	r3, #0
 8006e76:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	3301      	adds	r3, #1
 8006e7c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006e84:	d901      	bls.n	8006e8a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006e86:	2303      	movs	r3, #3
 8006e88:	e018      	b.n	8006ebc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	691b      	ldr	r3, [r3, #16]
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	daf2      	bge.n	8006e78 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006e92:	2300      	movs	r3, #0
 8006e94:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	2210      	movs	r2, #16
 8006e9a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	3301      	adds	r3, #1
 8006ea0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006ea8:	d901      	bls.n	8006eae <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006eaa:	2303      	movs	r3, #3
 8006eac:	e006      	b.n	8006ebc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	691b      	ldr	r3, [r3, #16]
 8006eb2:	f003 0310 	and.w	r3, r3, #16
 8006eb6:	2b10      	cmp	r3, #16
 8006eb8:	d0f0      	beq.n	8006e9c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006eba:	2300      	movs	r3, #0
}
 8006ebc:	4618      	mov	r0, r3
 8006ebe:	3714      	adds	r7, #20
 8006ec0:	46bd      	mov	sp, r7
 8006ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec6:	4770      	bx	lr

08006ec8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006ec8:	b480      	push	{r7}
 8006eca:	b085      	sub	sp, #20
 8006ecc:	af00      	add	r7, sp, #0
 8006ece:	6078      	str	r0, [r7, #4]
 8006ed0:	460b      	mov	r3, r1
 8006ed2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006ede:	681a      	ldr	r2, [r3, #0]
 8006ee0:	78fb      	ldrb	r3, [r7, #3]
 8006ee2:	68f9      	ldr	r1, [r7, #12]
 8006ee4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006ee8:	4313      	orrs	r3, r2
 8006eea:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006eec:	2300      	movs	r3, #0
}
 8006eee:	4618      	mov	r0, r3
 8006ef0:	3714      	adds	r7, #20
 8006ef2:	46bd      	mov	sp, r7
 8006ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef8:	4770      	bx	lr

08006efa <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8006efa:	b480      	push	{r7}
 8006efc:	b087      	sub	sp, #28
 8006efe:	af00      	add	r7, sp, #0
 8006f00:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8006f06:	693b      	ldr	r3, [r7, #16]
 8006f08:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006f0c:	689b      	ldr	r3, [r3, #8]
 8006f0e:	f003 0306 	and.w	r3, r3, #6
 8006f12:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d102      	bne.n	8006f20 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8006f1a:	2300      	movs	r3, #0
 8006f1c:	75fb      	strb	r3, [r7, #23]
 8006f1e:	e00a      	b.n	8006f36 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	2b02      	cmp	r3, #2
 8006f24:	d002      	beq.n	8006f2c <USB_GetDevSpeed+0x32>
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	2b06      	cmp	r3, #6
 8006f2a:	d102      	bne.n	8006f32 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8006f2c:	2302      	movs	r3, #2
 8006f2e:	75fb      	strb	r3, [r7, #23]
 8006f30:	e001      	b.n	8006f36 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8006f32:	230f      	movs	r3, #15
 8006f34:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8006f36:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f38:	4618      	mov	r0, r3
 8006f3a:	371c      	adds	r7, #28
 8006f3c:	46bd      	mov	sp, r7
 8006f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f42:	4770      	bx	lr

08006f44 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006f44:	b480      	push	{r7}
 8006f46:	b085      	sub	sp, #20
 8006f48:	af00      	add	r7, sp, #0
 8006f4a:	6078      	str	r0, [r7, #4]
 8006f4c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006f52:	683b      	ldr	r3, [r7, #0]
 8006f54:	781b      	ldrb	r3, [r3, #0]
 8006f56:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006f58:	683b      	ldr	r3, [r7, #0]
 8006f5a:	785b      	ldrb	r3, [r3, #1]
 8006f5c:	2b01      	cmp	r3, #1
 8006f5e:	d13a      	bne.n	8006fd6 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006f66:	69da      	ldr	r2, [r3, #28]
 8006f68:	683b      	ldr	r3, [r7, #0]
 8006f6a:	781b      	ldrb	r3, [r3, #0]
 8006f6c:	f003 030f 	and.w	r3, r3, #15
 8006f70:	2101      	movs	r1, #1
 8006f72:	fa01 f303 	lsl.w	r3, r1, r3
 8006f76:	b29b      	uxth	r3, r3
 8006f78:	68f9      	ldr	r1, [r7, #12]
 8006f7a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006f7e:	4313      	orrs	r3, r2
 8006f80:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8006f82:	68bb      	ldr	r3, [r7, #8]
 8006f84:	015a      	lsls	r2, r3, #5
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	4413      	add	r3, r2
 8006f8a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d155      	bne.n	8007044 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006f98:	68bb      	ldr	r3, [r7, #8]
 8006f9a:	015a      	lsls	r2, r3, #5
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	4413      	add	r3, r2
 8006fa0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006fa4:	681a      	ldr	r2, [r3, #0]
 8006fa6:	683b      	ldr	r3, [r7, #0]
 8006fa8:	689b      	ldr	r3, [r3, #8]
 8006faa:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006fae:	683b      	ldr	r3, [r7, #0]
 8006fb0:	791b      	ldrb	r3, [r3, #4]
 8006fb2:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006fb4:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006fb6:	68bb      	ldr	r3, [r7, #8]
 8006fb8:	059b      	lsls	r3, r3, #22
 8006fba:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006fbc:	4313      	orrs	r3, r2
 8006fbe:	68ba      	ldr	r2, [r7, #8]
 8006fc0:	0151      	lsls	r1, r2, #5
 8006fc2:	68fa      	ldr	r2, [r7, #12]
 8006fc4:	440a      	add	r2, r1
 8006fc6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006fca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006fce:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006fd2:	6013      	str	r3, [r2, #0]
 8006fd4:	e036      	b.n	8007044 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006fdc:	69da      	ldr	r2, [r3, #28]
 8006fde:	683b      	ldr	r3, [r7, #0]
 8006fe0:	781b      	ldrb	r3, [r3, #0]
 8006fe2:	f003 030f 	and.w	r3, r3, #15
 8006fe6:	2101      	movs	r1, #1
 8006fe8:	fa01 f303 	lsl.w	r3, r1, r3
 8006fec:	041b      	lsls	r3, r3, #16
 8006fee:	68f9      	ldr	r1, [r7, #12]
 8006ff0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006ff4:	4313      	orrs	r3, r2
 8006ff6:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8006ff8:	68bb      	ldr	r3, [r7, #8]
 8006ffa:	015a      	lsls	r2, r3, #5
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	4413      	add	r3, r2
 8007000:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800700a:	2b00      	cmp	r3, #0
 800700c:	d11a      	bne.n	8007044 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800700e:	68bb      	ldr	r3, [r7, #8]
 8007010:	015a      	lsls	r2, r3, #5
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	4413      	add	r3, r2
 8007016:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800701a:	681a      	ldr	r2, [r3, #0]
 800701c:	683b      	ldr	r3, [r7, #0]
 800701e:	689b      	ldr	r3, [r3, #8]
 8007020:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8007024:	683b      	ldr	r3, [r7, #0]
 8007026:	791b      	ldrb	r3, [r3, #4]
 8007028:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800702a:	430b      	orrs	r3, r1
 800702c:	4313      	orrs	r3, r2
 800702e:	68ba      	ldr	r2, [r7, #8]
 8007030:	0151      	lsls	r1, r2, #5
 8007032:	68fa      	ldr	r2, [r7, #12]
 8007034:	440a      	add	r2, r1
 8007036:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800703a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800703e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007042:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8007044:	2300      	movs	r3, #0
}
 8007046:	4618      	mov	r0, r3
 8007048:	3714      	adds	r7, #20
 800704a:	46bd      	mov	sp, r7
 800704c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007050:	4770      	bx	lr
	...

08007054 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8007054:	b480      	push	{r7}
 8007056:	b085      	sub	sp, #20
 8007058:	af00      	add	r7, sp, #0
 800705a:	6078      	str	r0, [r7, #4]
 800705c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007062:	683b      	ldr	r3, [r7, #0]
 8007064:	781b      	ldrb	r3, [r3, #0]
 8007066:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8007068:	683b      	ldr	r3, [r7, #0]
 800706a:	785b      	ldrb	r3, [r3, #1]
 800706c:	2b01      	cmp	r3, #1
 800706e:	d161      	bne.n	8007134 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007070:	68bb      	ldr	r3, [r7, #8]
 8007072:	015a      	lsls	r2, r3, #5
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	4413      	add	r3, r2
 8007078:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007082:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007086:	d11f      	bne.n	80070c8 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8007088:	68bb      	ldr	r3, [r7, #8]
 800708a:	015a      	lsls	r2, r3, #5
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	4413      	add	r3, r2
 8007090:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	68ba      	ldr	r2, [r7, #8]
 8007098:	0151      	lsls	r1, r2, #5
 800709a:	68fa      	ldr	r2, [r7, #12]
 800709c:	440a      	add	r2, r1
 800709e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80070a2:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80070a6:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80070a8:	68bb      	ldr	r3, [r7, #8]
 80070aa:	015a      	lsls	r2, r3, #5
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	4413      	add	r3, r2
 80070b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	68ba      	ldr	r2, [r7, #8]
 80070b8:	0151      	lsls	r1, r2, #5
 80070ba:	68fa      	ldr	r2, [r7, #12]
 80070bc:	440a      	add	r2, r1
 80070be:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80070c2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80070c6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80070ce:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80070d0:	683b      	ldr	r3, [r7, #0]
 80070d2:	781b      	ldrb	r3, [r3, #0]
 80070d4:	f003 030f 	and.w	r3, r3, #15
 80070d8:	2101      	movs	r1, #1
 80070da:	fa01 f303 	lsl.w	r3, r1, r3
 80070de:	b29b      	uxth	r3, r3
 80070e0:	43db      	mvns	r3, r3
 80070e2:	68f9      	ldr	r1, [r7, #12]
 80070e4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80070e8:	4013      	ands	r3, r2
 80070ea:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80070f2:	69da      	ldr	r2, [r3, #28]
 80070f4:	683b      	ldr	r3, [r7, #0]
 80070f6:	781b      	ldrb	r3, [r3, #0]
 80070f8:	f003 030f 	and.w	r3, r3, #15
 80070fc:	2101      	movs	r1, #1
 80070fe:	fa01 f303 	lsl.w	r3, r1, r3
 8007102:	b29b      	uxth	r3, r3
 8007104:	43db      	mvns	r3, r3
 8007106:	68f9      	ldr	r1, [r7, #12]
 8007108:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800710c:	4013      	ands	r3, r2
 800710e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8007110:	68bb      	ldr	r3, [r7, #8]
 8007112:	015a      	lsls	r2, r3, #5
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	4413      	add	r3, r2
 8007118:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800711c:	681a      	ldr	r2, [r3, #0]
 800711e:	68bb      	ldr	r3, [r7, #8]
 8007120:	0159      	lsls	r1, r3, #5
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	440b      	add	r3, r1
 8007126:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800712a:	4619      	mov	r1, r3
 800712c:	4b35      	ldr	r3, [pc, #212]	@ (8007204 <USB_DeactivateEndpoint+0x1b0>)
 800712e:	4013      	ands	r3, r2
 8007130:	600b      	str	r3, [r1, #0]
 8007132:	e060      	b.n	80071f6 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007134:	68bb      	ldr	r3, [r7, #8]
 8007136:	015a      	lsls	r2, r3, #5
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	4413      	add	r3, r2
 800713c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007146:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800714a:	d11f      	bne.n	800718c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800714c:	68bb      	ldr	r3, [r7, #8]
 800714e:	015a      	lsls	r2, r3, #5
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	4413      	add	r3, r2
 8007154:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	68ba      	ldr	r2, [r7, #8]
 800715c:	0151      	lsls	r1, r2, #5
 800715e:	68fa      	ldr	r2, [r7, #12]
 8007160:	440a      	add	r2, r1
 8007162:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007166:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800716a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800716c:	68bb      	ldr	r3, [r7, #8]
 800716e:	015a      	lsls	r2, r3, #5
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	4413      	add	r3, r2
 8007174:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	68ba      	ldr	r2, [r7, #8]
 800717c:	0151      	lsls	r1, r2, #5
 800717e:	68fa      	ldr	r2, [r7, #12]
 8007180:	440a      	add	r2, r1
 8007182:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007186:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800718a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007192:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007194:	683b      	ldr	r3, [r7, #0]
 8007196:	781b      	ldrb	r3, [r3, #0]
 8007198:	f003 030f 	and.w	r3, r3, #15
 800719c:	2101      	movs	r1, #1
 800719e:	fa01 f303 	lsl.w	r3, r1, r3
 80071a2:	041b      	lsls	r3, r3, #16
 80071a4:	43db      	mvns	r3, r3
 80071a6:	68f9      	ldr	r1, [r7, #12]
 80071a8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80071ac:	4013      	ands	r3, r2
 80071ae:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80071b6:	69da      	ldr	r2, [r3, #28]
 80071b8:	683b      	ldr	r3, [r7, #0]
 80071ba:	781b      	ldrb	r3, [r3, #0]
 80071bc:	f003 030f 	and.w	r3, r3, #15
 80071c0:	2101      	movs	r1, #1
 80071c2:	fa01 f303 	lsl.w	r3, r1, r3
 80071c6:	041b      	lsls	r3, r3, #16
 80071c8:	43db      	mvns	r3, r3
 80071ca:	68f9      	ldr	r1, [r7, #12]
 80071cc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80071d0:	4013      	ands	r3, r2
 80071d2:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80071d4:	68bb      	ldr	r3, [r7, #8]
 80071d6:	015a      	lsls	r2, r3, #5
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	4413      	add	r3, r2
 80071dc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80071e0:	681a      	ldr	r2, [r3, #0]
 80071e2:	68bb      	ldr	r3, [r7, #8]
 80071e4:	0159      	lsls	r1, r3, #5
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	440b      	add	r3, r1
 80071ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80071ee:	4619      	mov	r1, r3
 80071f0:	4b05      	ldr	r3, [pc, #20]	@ (8007208 <USB_DeactivateEndpoint+0x1b4>)
 80071f2:	4013      	ands	r3, r2
 80071f4:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80071f6:	2300      	movs	r3, #0
}
 80071f8:	4618      	mov	r0, r3
 80071fa:	3714      	adds	r7, #20
 80071fc:	46bd      	mov	sp, r7
 80071fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007202:	4770      	bx	lr
 8007204:	ec337800 	.word	0xec337800
 8007208:	eff37800 	.word	0xeff37800

0800720c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800720c:	b580      	push	{r7, lr}
 800720e:	b08a      	sub	sp, #40	@ 0x28
 8007210:	af02      	add	r7, sp, #8
 8007212:	60f8      	str	r0, [r7, #12]
 8007214:	60b9      	str	r1, [r7, #8]
 8007216:	4613      	mov	r3, r2
 8007218:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800721e:	68bb      	ldr	r3, [r7, #8]
 8007220:	781b      	ldrb	r3, [r3, #0]
 8007222:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007224:	68bb      	ldr	r3, [r7, #8]
 8007226:	785b      	ldrb	r3, [r3, #1]
 8007228:	2b01      	cmp	r3, #1
 800722a:	f040 817f 	bne.w	800752c <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800722e:	68bb      	ldr	r3, [r7, #8]
 8007230:	691b      	ldr	r3, [r3, #16]
 8007232:	2b00      	cmp	r3, #0
 8007234:	d132      	bne.n	800729c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007236:	69bb      	ldr	r3, [r7, #24]
 8007238:	015a      	lsls	r2, r3, #5
 800723a:	69fb      	ldr	r3, [r7, #28]
 800723c:	4413      	add	r3, r2
 800723e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007242:	691b      	ldr	r3, [r3, #16]
 8007244:	69ba      	ldr	r2, [r7, #24]
 8007246:	0151      	lsls	r1, r2, #5
 8007248:	69fa      	ldr	r2, [r7, #28]
 800724a:	440a      	add	r2, r1
 800724c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007250:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8007254:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8007258:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800725a:	69bb      	ldr	r3, [r7, #24]
 800725c:	015a      	lsls	r2, r3, #5
 800725e:	69fb      	ldr	r3, [r7, #28]
 8007260:	4413      	add	r3, r2
 8007262:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007266:	691b      	ldr	r3, [r3, #16]
 8007268:	69ba      	ldr	r2, [r7, #24]
 800726a:	0151      	lsls	r1, r2, #5
 800726c:	69fa      	ldr	r2, [r7, #28]
 800726e:	440a      	add	r2, r1
 8007270:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007274:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007278:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800727a:	69bb      	ldr	r3, [r7, #24]
 800727c:	015a      	lsls	r2, r3, #5
 800727e:	69fb      	ldr	r3, [r7, #28]
 8007280:	4413      	add	r3, r2
 8007282:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007286:	691b      	ldr	r3, [r3, #16]
 8007288:	69ba      	ldr	r2, [r7, #24]
 800728a:	0151      	lsls	r1, r2, #5
 800728c:	69fa      	ldr	r2, [r7, #28]
 800728e:	440a      	add	r2, r1
 8007290:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007294:	0cdb      	lsrs	r3, r3, #19
 8007296:	04db      	lsls	r3, r3, #19
 8007298:	6113      	str	r3, [r2, #16]
 800729a:	e097      	b.n	80073cc <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800729c:	69bb      	ldr	r3, [r7, #24]
 800729e:	015a      	lsls	r2, r3, #5
 80072a0:	69fb      	ldr	r3, [r7, #28]
 80072a2:	4413      	add	r3, r2
 80072a4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80072a8:	691b      	ldr	r3, [r3, #16]
 80072aa:	69ba      	ldr	r2, [r7, #24]
 80072ac:	0151      	lsls	r1, r2, #5
 80072ae:	69fa      	ldr	r2, [r7, #28]
 80072b0:	440a      	add	r2, r1
 80072b2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80072b6:	0cdb      	lsrs	r3, r3, #19
 80072b8:	04db      	lsls	r3, r3, #19
 80072ba:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80072bc:	69bb      	ldr	r3, [r7, #24]
 80072be:	015a      	lsls	r2, r3, #5
 80072c0:	69fb      	ldr	r3, [r7, #28]
 80072c2:	4413      	add	r3, r2
 80072c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80072c8:	691b      	ldr	r3, [r3, #16]
 80072ca:	69ba      	ldr	r2, [r7, #24]
 80072cc:	0151      	lsls	r1, r2, #5
 80072ce:	69fa      	ldr	r2, [r7, #28]
 80072d0:	440a      	add	r2, r1
 80072d2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80072d6:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80072da:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80072de:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 80072e0:	69bb      	ldr	r3, [r7, #24]
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d11a      	bne.n	800731c <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 80072e6:	68bb      	ldr	r3, [r7, #8]
 80072e8:	691a      	ldr	r2, [r3, #16]
 80072ea:	68bb      	ldr	r3, [r7, #8]
 80072ec:	689b      	ldr	r3, [r3, #8]
 80072ee:	429a      	cmp	r2, r3
 80072f0:	d903      	bls.n	80072fa <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 80072f2:	68bb      	ldr	r3, [r7, #8]
 80072f4:	689a      	ldr	r2, [r3, #8]
 80072f6:	68bb      	ldr	r3, [r7, #8]
 80072f8:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80072fa:	69bb      	ldr	r3, [r7, #24]
 80072fc:	015a      	lsls	r2, r3, #5
 80072fe:	69fb      	ldr	r3, [r7, #28]
 8007300:	4413      	add	r3, r2
 8007302:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007306:	691b      	ldr	r3, [r3, #16]
 8007308:	69ba      	ldr	r2, [r7, #24]
 800730a:	0151      	lsls	r1, r2, #5
 800730c:	69fa      	ldr	r2, [r7, #28]
 800730e:	440a      	add	r2, r1
 8007310:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007314:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007318:	6113      	str	r3, [r2, #16]
 800731a:	e044      	b.n	80073a6 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800731c:	68bb      	ldr	r3, [r7, #8]
 800731e:	691a      	ldr	r2, [r3, #16]
 8007320:	68bb      	ldr	r3, [r7, #8]
 8007322:	689b      	ldr	r3, [r3, #8]
 8007324:	4413      	add	r3, r2
 8007326:	1e5a      	subs	r2, r3, #1
 8007328:	68bb      	ldr	r3, [r7, #8]
 800732a:	689b      	ldr	r3, [r3, #8]
 800732c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007330:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 8007332:	69bb      	ldr	r3, [r7, #24]
 8007334:	015a      	lsls	r2, r3, #5
 8007336:	69fb      	ldr	r3, [r7, #28]
 8007338:	4413      	add	r3, r2
 800733a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800733e:	691a      	ldr	r2, [r3, #16]
 8007340:	8afb      	ldrh	r3, [r7, #22]
 8007342:	04d9      	lsls	r1, r3, #19
 8007344:	4ba4      	ldr	r3, [pc, #656]	@ (80075d8 <USB_EPStartXfer+0x3cc>)
 8007346:	400b      	ands	r3, r1
 8007348:	69b9      	ldr	r1, [r7, #24]
 800734a:	0148      	lsls	r0, r1, #5
 800734c:	69f9      	ldr	r1, [r7, #28]
 800734e:	4401      	add	r1, r0
 8007350:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8007354:	4313      	orrs	r3, r2
 8007356:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8007358:	68bb      	ldr	r3, [r7, #8]
 800735a:	791b      	ldrb	r3, [r3, #4]
 800735c:	2b01      	cmp	r3, #1
 800735e:	d122      	bne.n	80073a6 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8007360:	69bb      	ldr	r3, [r7, #24]
 8007362:	015a      	lsls	r2, r3, #5
 8007364:	69fb      	ldr	r3, [r7, #28]
 8007366:	4413      	add	r3, r2
 8007368:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800736c:	691b      	ldr	r3, [r3, #16]
 800736e:	69ba      	ldr	r2, [r7, #24]
 8007370:	0151      	lsls	r1, r2, #5
 8007372:	69fa      	ldr	r2, [r7, #28]
 8007374:	440a      	add	r2, r1
 8007376:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800737a:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800737e:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 8007380:	69bb      	ldr	r3, [r7, #24]
 8007382:	015a      	lsls	r2, r3, #5
 8007384:	69fb      	ldr	r3, [r7, #28]
 8007386:	4413      	add	r3, r2
 8007388:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800738c:	691a      	ldr	r2, [r3, #16]
 800738e:	8afb      	ldrh	r3, [r7, #22]
 8007390:	075b      	lsls	r3, r3, #29
 8007392:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8007396:	69b9      	ldr	r1, [r7, #24]
 8007398:	0148      	lsls	r0, r1, #5
 800739a:	69f9      	ldr	r1, [r7, #28]
 800739c:	4401      	add	r1, r0
 800739e:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80073a2:	4313      	orrs	r3, r2
 80073a4:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80073a6:	69bb      	ldr	r3, [r7, #24]
 80073a8:	015a      	lsls	r2, r3, #5
 80073aa:	69fb      	ldr	r3, [r7, #28]
 80073ac:	4413      	add	r3, r2
 80073ae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80073b2:	691a      	ldr	r2, [r3, #16]
 80073b4:	68bb      	ldr	r3, [r7, #8]
 80073b6:	691b      	ldr	r3, [r3, #16]
 80073b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80073bc:	69b9      	ldr	r1, [r7, #24]
 80073be:	0148      	lsls	r0, r1, #5
 80073c0:	69f9      	ldr	r1, [r7, #28]
 80073c2:	4401      	add	r1, r0
 80073c4:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80073c8:	4313      	orrs	r3, r2
 80073ca:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80073cc:	79fb      	ldrb	r3, [r7, #7]
 80073ce:	2b01      	cmp	r3, #1
 80073d0:	d14b      	bne.n	800746a <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80073d2:	68bb      	ldr	r3, [r7, #8]
 80073d4:	69db      	ldr	r3, [r3, #28]
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d009      	beq.n	80073ee <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80073da:	69bb      	ldr	r3, [r7, #24]
 80073dc:	015a      	lsls	r2, r3, #5
 80073de:	69fb      	ldr	r3, [r7, #28]
 80073e0:	4413      	add	r3, r2
 80073e2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80073e6:	461a      	mov	r2, r3
 80073e8:	68bb      	ldr	r3, [r7, #8]
 80073ea:	69db      	ldr	r3, [r3, #28]
 80073ec:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80073ee:	68bb      	ldr	r3, [r7, #8]
 80073f0:	791b      	ldrb	r3, [r3, #4]
 80073f2:	2b01      	cmp	r3, #1
 80073f4:	d128      	bne.n	8007448 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80073f6:	69fb      	ldr	r3, [r7, #28]
 80073f8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80073fc:	689b      	ldr	r3, [r3, #8]
 80073fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007402:	2b00      	cmp	r3, #0
 8007404:	d110      	bne.n	8007428 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007406:	69bb      	ldr	r3, [r7, #24]
 8007408:	015a      	lsls	r2, r3, #5
 800740a:	69fb      	ldr	r3, [r7, #28]
 800740c:	4413      	add	r3, r2
 800740e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	69ba      	ldr	r2, [r7, #24]
 8007416:	0151      	lsls	r1, r2, #5
 8007418:	69fa      	ldr	r2, [r7, #28]
 800741a:	440a      	add	r2, r1
 800741c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007420:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007424:	6013      	str	r3, [r2, #0]
 8007426:	e00f      	b.n	8007448 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007428:	69bb      	ldr	r3, [r7, #24]
 800742a:	015a      	lsls	r2, r3, #5
 800742c:	69fb      	ldr	r3, [r7, #28]
 800742e:	4413      	add	r3, r2
 8007430:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	69ba      	ldr	r2, [r7, #24]
 8007438:	0151      	lsls	r1, r2, #5
 800743a:	69fa      	ldr	r2, [r7, #28]
 800743c:	440a      	add	r2, r1
 800743e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007442:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007446:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007448:	69bb      	ldr	r3, [r7, #24]
 800744a:	015a      	lsls	r2, r3, #5
 800744c:	69fb      	ldr	r3, [r7, #28]
 800744e:	4413      	add	r3, r2
 8007450:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	69ba      	ldr	r2, [r7, #24]
 8007458:	0151      	lsls	r1, r2, #5
 800745a:	69fa      	ldr	r2, [r7, #28]
 800745c:	440a      	add	r2, r1
 800745e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007462:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8007466:	6013      	str	r3, [r2, #0]
 8007468:	e166      	b.n	8007738 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800746a:	69bb      	ldr	r3, [r7, #24]
 800746c:	015a      	lsls	r2, r3, #5
 800746e:	69fb      	ldr	r3, [r7, #28]
 8007470:	4413      	add	r3, r2
 8007472:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	69ba      	ldr	r2, [r7, #24]
 800747a:	0151      	lsls	r1, r2, #5
 800747c:	69fa      	ldr	r2, [r7, #28]
 800747e:	440a      	add	r2, r1
 8007480:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007484:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8007488:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800748a:	68bb      	ldr	r3, [r7, #8]
 800748c:	791b      	ldrb	r3, [r3, #4]
 800748e:	2b01      	cmp	r3, #1
 8007490:	d015      	beq.n	80074be <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8007492:	68bb      	ldr	r3, [r7, #8]
 8007494:	691b      	ldr	r3, [r3, #16]
 8007496:	2b00      	cmp	r3, #0
 8007498:	f000 814e 	beq.w	8007738 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800749c:	69fb      	ldr	r3, [r7, #28]
 800749e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80074a2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80074a4:	68bb      	ldr	r3, [r7, #8]
 80074a6:	781b      	ldrb	r3, [r3, #0]
 80074a8:	f003 030f 	and.w	r3, r3, #15
 80074ac:	2101      	movs	r1, #1
 80074ae:	fa01 f303 	lsl.w	r3, r1, r3
 80074b2:	69f9      	ldr	r1, [r7, #28]
 80074b4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80074b8:	4313      	orrs	r3, r2
 80074ba:	634b      	str	r3, [r1, #52]	@ 0x34
 80074bc:	e13c      	b.n	8007738 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80074be:	69fb      	ldr	r3, [r7, #28]
 80074c0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80074c4:	689b      	ldr	r3, [r3, #8]
 80074c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d110      	bne.n	80074f0 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80074ce:	69bb      	ldr	r3, [r7, #24]
 80074d0:	015a      	lsls	r2, r3, #5
 80074d2:	69fb      	ldr	r3, [r7, #28]
 80074d4:	4413      	add	r3, r2
 80074d6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	69ba      	ldr	r2, [r7, #24]
 80074de:	0151      	lsls	r1, r2, #5
 80074e0:	69fa      	ldr	r2, [r7, #28]
 80074e2:	440a      	add	r2, r1
 80074e4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80074e8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80074ec:	6013      	str	r3, [r2, #0]
 80074ee:	e00f      	b.n	8007510 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80074f0:	69bb      	ldr	r3, [r7, #24]
 80074f2:	015a      	lsls	r2, r3, #5
 80074f4:	69fb      	ldr	r3, [r7, #28]
 80074f6:	4413      	add	r3, r2
 80074f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	69ba      	ldr	r2, [r7, #24]
 8007500:	0151      	lsls	r1, r2, #5
 8007502:	69fa      	ldr	r2, [r7, #28]
 8007504:	440a      	add	r2, r1
 8007506:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800750a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800750e:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8007510:	68bb      	ldr	r3, [r7, #8]
 8007512:	68d9      	ldr	r1, [r3, #12]
 8007514:	68bb      	ldr	r3, [r7, #8]
 8007516:	781a      	ldrb	r2, [r3, #0]
 8007518:	68bb      	ldr	r3, [r7, #8]
 800751a:	691b      	ldr	r3, [r3, #16]
 800751c:	b298      	uxth	r0, r3
 800751e:	79fb      	ldrb	r3, [r7, #7]
 8007520:	9300      	str	r3, [sp, #0]
 8007522:	4603      	mov	r3, r0
 8007524:	68f8      	ldr	r0, [r7, #12]
 8007526:	f000 f9b9 	bl	800789c <USB_WritePacket>
 800752a:	e105      	b.n	8007738 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800752c:	69bb      	ldr	r3, [r7, #24]
 800752e:	015a      	lsls	r2, r3, #5
 8007530:	69fb      	ldr	r3, [r7, #28]
 8007532:	4413      	add	r3, r2
 8007534:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007538:	691b      	ldr	r3, [r3, #16]
 800753a:	69ba      	ldr	r2, [r7, #24]
 800753c:	0151      	lsls	r1, r2, #5
 800753e:	69fa      	ldr	r2, [r7, #28]
 8007540:	440a      	add	r2, r1
 8007542:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007546:	0cdb      	lsrs	r3, r3, #19
 8007548:	04db      	lsls	r3, r3, #19
 800754a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800754c:	69bb      	ldr	r3, [r7, #24]
 800754e:	015a      	lsls	r2, r3, #5
 8007550:	69fb      	ldr	r3, [r7, #28]
 8007552:	4413      	add	r3, r2
 8007554:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007558:	691b      	ldr	r3, [r3, #16]
 800755a:	69ba      	ldr	r2, [r7, #24]
 800755c:	0151      	lsls	r1, r2, #5
 800755e:	69fa      	ldr	r2, [r7, #28]
 8007560:	440a      	add	r2, r1
 8007562:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007566:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800756a:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800756e:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8007570:	69bb      	ldr	r3, [r7, #24]
 8007572:	2b00      	cmp	r3, #0
 8007574:	d132      	bne.n	80075dc <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 8007576:	68bb      	ldr	r3, [r7, #8]
 8007578:	691b      	ldr	r3, [r3, #16]
 800757a:	2b00      	cmp	r3, #0
 800757c:	d003      	beq.n	8007586 <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 800757e:	68bb      	ldr	r3, [r7, #8]
 8007580:	689a      	ldr	r2, [r3, #8]
 8007582:	68bb      	ldr	r3, [r7, #8]
 8007584:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8007586:	68bb      	ldr	r3, [r7, #8]
 8007588:	689a      	ldr	r2, [r3, #8]
 800758a:	68bb      	ldr	r3, [r7, #8]
 800758c:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800758e:	69bb      	ldr	r3, [r7, #24]
 8007590:	015a      	lsls	r2, r3, #5
 8007592:	69fb      	ldr	r3, [r7, #28]
 8007594:	4413      	add	r3, r2
 8007596:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800759a:	691a      	ldr	r2, [r3, #16]
 800759c:	68bb      	ldr	r3, [r7, #8]
 800759e:	6a1b      	ldr	r3, [r3, #32]
 80075a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80075a4:	69b9      	ldr	r1, [r7, #24]
 80075a6:	0148      	lsls	r0, r1, #5
 80075a8:	69f9      	ldr	r1, [r7, #28]
 80075aa:	4401      	add	r1, r0
 80075ac:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80075b0:	4313      	orrs	r3, r2
 80075b2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80075b4:	69bb      	ldr	r3, [r7, #24]
 80075b6:	015a      	lsls	r2, r3, #5
 80075b8:	69fb      	ldr	r3, [r7, #28]
 80075ba:	4413      	add	r3, r2
 80075bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80075c0:	691b      	ldr	r3, [r3, #16]
 80075c2:	69ba      	ldr	r2, [r7, #24]
 80075c4:	0151      	lsls	r1, r2, #5
 80075c6:	69fa      	ldr	r2, [r7, #28]
 80075c8:	440a      	add	r2, r1
 80075ca:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80075ce:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80075d2:	6113      	str	r3, [r2, #16]
 80075d4:	e062      	b.n	800769c <USB_EPStartXfer+0x490>
 80075d6:	bf00      	nop
 80075d8:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 80075dc:	68bb      	ldr	r3, [r7, #8]
 80075de:	691b      	ldr	r3, [r3, #16]
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d123      	bne.n	800762c <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80075e4:	69bb      	ldr	r3, [r7, #24]
 80075e6:	015a      	lsls	r2, r3, #5
 80075e8:	69fb      	ldr	r3, [r7, #28]
 80075ea:	4413      	add	r3, r2
 80075ec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80075f0:	691a      	ldr	r2, [r3, #16]
 80075f2:	68bb      	ldr	r3, [r7, #8]
 80075f4:	689b      	ldr	r3, [r3, #8]
 80075f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80075fa:	69b9      	ldr	r1, [r7, #24]
 80075fc:	0148      	lsls	r0, r1, #5
 80075fe:	69f9      	ldr	r1, [r7, #28]
 8007600:	4401      	add	r1, r0
 8007602:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8007606:	4313      	orrs	r3, r2
 8007608:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800760a:	69bb      	ldr	r3, [r7, #24]
 800760c:	015a      	lsls	r2, r3, #5
 800760e:	69fb      	ldr	r3, [r7, #28]
 8007610:	4413      	add	r3, r2
 8007612:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007616:	691b      	ldr	r3, [r3, #16]
 8007618:	69ba      	ldr	r2, [r7, #24]
 800761a:	0151      	lsls	r1, r2, #5
 800761c:	69fa      	ldr	r2, [r7, #28]
 800761e:	440a      	add	r2, r1
 8007620:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007624:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007628:	6113      	str	r3, [r2, #16]
 800762a:	e037      	b.n	800769c <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800762c:	68bb      	ldr	r3, [r7, #8]
 800762e:	691a      	ldr	r2, [r3, #16]
 8007630:	68bb      	ldr	r3, [r7, #8]
 8007632:	689b      	ldr	r3, [r3, #8]
 8007634:	4413      	add	r3, r2
 8007636:	1e5a      	subs	r2, r3, #1
 8007638:	68bb      	ldr	r3, [r7, #8]
 800763a:	689b      	ldr	r3, [r3, #8]
 800763c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007640:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8007642:	68bb      	ldr	r3, [r7, #8]
 8007644:	689b      	ldr	r3, [r3, #8]
 8007646:	8afa      	ldrh	r2, [r7, #22]
 8007648:	fb03 f202 	mul.w	r2, r3, r2
 800764c:	68bb      	ldr	r3, [r7, #8]
 800764e:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8007650:	69bb      	ldr	r3, [r7, #24]
 8007652:	015a      	lsls	r2, r3, #5
 8007654:	69fb      	ldr	r3, [r7, #28]
 8007656:	4413      	add	r3, r2
 8007658:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800765c:	691a      	ldr	r2, [r3, #16]
 800765e:	8afb      	ldrh	r3, [r7, #22]
 8007660:	04d9      	lsls	r1, r3, #19
 8007662:	4b38      	ldr	r3, [pc, #224]	@ (8007744 <USB_EPStartXfer+0x538>)
 8007664:	400b      	ands	r3, r1
 8007666:	69b9      	ldr	r1, [r7, #24]
 8007668:	0148      	lsls	r0, r1, #5
 800766a:	69f9      	ldr	r1, [r7, #28]
 800766c:	4401      	add	r1, r0
 800766e:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8007672:	4313      	orrs	r3, r2
 8007674:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8007676:	69bb      	ldr	r3, [r7, #24]
 8007678:	015a      	lsls	r2, r3, #5
 800767a:	69fb      	ldr	r3, [r7, #28]
 800767c:	4413      	add	r3, r2
 800767e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007682:	691a      	ldr	r2, [r3, #16]
 8007684:	68bb      	ldr	r3, [r7, #8]
 8007686:	6a1b      	ldr	r3, [r3, #32]
 8007688:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800768c:	69b9      	ldr	r1, [r7, #24]
 800768e:	0148      	lsls	r0, r1, #5
 8007690:	69f9      	ldr	r1, [r7, #28]
 8007692:	4401      	add	r1, r0
 8007694:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8007698:	4313      	orrs	r3, r2
 800769a:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 800769c:	79fb      	ldrb	r3, [r7, #7]
 800769e:	2b01      	cmp	r3, #1
 80076a0:	d10d      	bne.n	80076be <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80076a2:	68bb      	ldr	r3, [r7, #8]
 80076a4:	68db      	ldr	r3, [r3, #12]
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d009      	beq.n	80076be <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80076aa:	68bb      	ldr	r3, [r7, #8]
 80076ac:	68d9      	ldr	r1, [r3, #12]
 80076ae:	69bb      	ldr	r3, [r7, #24]
 80076b0:	015a      	lsls	r2, r3, #5
 80076b2:	69fb      	ldr	r3, [r7, #28]
 80076b4:	4413      	add	r3, r2
 80076b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80076ba:	460a      	mov	r2, r1
 80076bc:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80076be:	68bb      	ldr	r3, [r7, #8]
 80076c0:	791b      	ldrb	r3, [r3, #4]
 80076c2:	2b01      	cmp	r3, #1
 80076c4:	d128      	bne.n	8007718 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80076c6:	69fb      	ldr	r3, [r7, #28]
 80076c8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80076cc:	689b      	ldr	r3, [r3, #8]
 80076ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d110      	bne.n	80076f8 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80076d6:	69bb      	ldr	r3, [r7, #24]
 80076d8:	015a      	lsls	r2, r3, #5
 80076da:	69fb      	ldr	r3, [r7, #28]
 80076dc:	4413      	add	r3, r2
 80076de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	69ba      	ldr	r2, [r7, #24]
 80076e6:	0151      	lsls	r1, r2, #5
 80076e8:	69fa      	ldr	r2, [r7, #28]
 80076ea:	440a      	add	r2, r1
 80076ec:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80076f0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80076f4:	6013      	str	r3, [r2, #0]
 80076f6:	e00f      	b.n	8007718 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80076f8:	69bb      	ldr	r3, [r7, #24]
 80076fa:	015a      	lsls	r2, r3, #5
 80076fc:	69fb      	ldr	r3, [r7, #28]
 80076fe:	4413      	add	r3, r2
 8007700:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	69ba      	ldr	r2, [r7, #24]
 8007708:	0151      	lsls	r1, r2, #5
 800770a:	69fa      	ldr	r2, [r7, #28]
 800770c:	440a      	add	r2, r1
 800770e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007712:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007716:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007718:	69bb      	ldr	r3, [r7, #24]
 800771a:	015a      	lsls	r2, r3, #5
 800771c:	69fb      	ldr	r3, [r7, #28]
 800771e:	4413      	add	r3, r2
 8007720:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	69ba      	ldr	r2, [r7, #24]
 8007728:	0151      	lsls	r1, r2, #5
 800772a:	69fa      	ldr	r2, [r7, #28]
 800772c:	440a      	add	r2, r1
 800772e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007732:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8007736:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007738:	2300      	movs	r3, #0
}
 800773a:	4618      	mov	r0, r3
 800773c:	3720      	adds	r7, #32
 800773e:	46bd      	mov	sp, r7
 8007740:	bd80      	pop	{r7, pc}
 8007742:	bf00      	nop
 8007744:	1ff80000 	.word	0x1ff80000

08007748 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007748:	b480      	push	{r7}
 800774a:	b087      	sub	sp, #28
 800774c:	af00      	add	r7, sp, #0
 800774e:	6078      	str	r0, [r7, #4]
 8007750:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007752:	2300      	movs	r3, #0
 8007754:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8007756:	2300      	movs	r3, #0
 8007758:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800775e:	683b      	ldr	r3, [r7, #0]
 8007760:	785b      	ldrb	r3, [r3, #1]
 8007762:	2b01      	cmp	r3, #1
 8007764:	d14a      	bne.n	80077fc <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007766:	683b      	ldr	r3, [r7, #0]
 8007768:	781b      	ldrb	r3, [r3, #0]
 800776a:	015a      	lsls	r2, r3, #5
 800776c:	693b      	ldr	r3, [r7, #16]
 800776e:	4413      	add	r3, r2
 8007770:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800777a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800777e:	f040 8086 	bne.w	800788e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8007782:	683b      	ldr	r3, [r7, #0]
 8007784:	781b      	ldrb	r3, [r3, #0]
 8007786:	015a      	lsls	r2, r3, #5
 8007788:	693b      	ldr	r3, [r7, #16]
 800778a:	4413      	add	r3, r2
 800778c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	683a      	ldr	r2, [r7, #0]
 8007794:	7812      	ldrb	r2, [r2, #0]
 8007796:	0151      	lsls	r1, r2, #5
 8007798:	693a      	ldr	r2, [r7, #16]
 800779a:	440a      	add	r2, r1
 800779c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80077a0:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80077a4:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80077a6:	683b      	ldr	r3, [r7, #0]
 80077a8:	781b      	ldrb	r3, [r3, #0]
 80077aa:	015a      	lsls	r2, r3, #5
 80077ac:	693b      	ldr	r3, [r7, #16]
 80077ae:	4413      	add	r3, r2
 80077b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	683a      	ldr	r2, [r7, #0]
 80077b8:	7812      	ldrb	r2, [r2, #0]
 80077ba:	0151      	lsls	r1, r2, #5
 80077bc:	693a      	ldr	r2, [r7, #16]
 80077be:	440a      	add	r2, r1
 80077c0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80077c4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80077c8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	3301      	adds	r3, #1
 80077ce:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	f242 7210 	movw	r2, #10000	@ 0x2710
 80077d6:	4293      	cmp	r3, r2
 80077d8:	d902      	bls.n	80077e0 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80077da:	2301      	movs	r3, #1
 80077dc:	75fb      	strb	r3, [r7, #23]
          break;
 80077de:	e056      	b.n	800788e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80077e0:	683b      	ldr	r3, [r7, #0]
 80077e2:	781b      	ldrb	r3, [r3, #0]
 80077e4:	015a      	lsls	r2, r3, #5
 80077e6:	693b      	ldr	r3, [r7, #16]
 80077e8:	4413      	add	r3, r2
 80077ea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80077f4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80077f8:	d0e7      	beq.n	80077ca <USB_EPStopXfer+0x82>
 80077fa:	e048      	b.n	800788e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80077fc:	683b      	ldr	r3, [r7, #0]
 80077fe:	781b      	ldrb	r3, [r3, #0]
 8007800:	015a      	lsls	r2, r3, #5
 8007802:	693b      	ldr	r3, [r7, #16]
 8007804:	4413      	add	r3, r2
 8007806:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007810:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007814:	d13b      	bne.n	800788e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8007816:	683b      	ldr	r3, [r7, #0]
 8007818:	781b      	ldrb	r3, [r3, #0]
 800781a:	015a      	lsls	r2, r3, #5
 800781c:	693b      	ldr	r3, [r7, #16]
 800781e:	4413      	add	r3, r2
 8007820:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	683a      	ldr	r2, [r7, #0]
 8007828:	7812      	ldrb	r2, [r2, #0]
 800782a:	0151      	lsls	r1, r2, #5
 800782c:	693a      	ldr	r2, [r7, #16]
 800782e:	440a      	add	r2, r1
 8007830:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007834:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007838:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800783a:	683b      	ldr	r3, [r7, #0]
 800783c:	781b      	ldrb	r3, [r3, #0]
 800783e:	015a      	lsls	r2, r3, #5
 8007840:	693b      	ldr	r3, [r7, #16]
 8007842:	4413      	add	r3, r2
 8007844:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	683a      	ldr	r2, [r7, #0]
 800784c:	7812      	ldrb	r2, [r2, #0]
 800784e:	0151      	lsls	r1, r2, #5
 8007850:	693a      	ldr	r2, [r7, #16]
 8007852:	440a      	add	r2, r1
 8007854:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007858:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800785c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	3301      	adds	r3, #1
 8007862:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	f242 7210 	movw	r2, #10000	@ 0x2710
 800786a:	4293      	cmp	r3, r2
 800786c:	d902      	bls.n	8007874 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800786e:	2301      	movs	r3, #1
 8007870:	75fb      	strb	r3, [r7, #23]
          break;
 8007872:	e00c      	b.n	800788e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8007874:	683b      	ldr	r3, [r7, #0]
 8007876:	781b      	ldrb	r3, [r3, #0]
 8007878:	015a      	lsls	r2, r3, #5
 800787a:	693b      	ldr	r3, [r7, #16]
 800787c:	4413      	add	r3, r2
 800787e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007888:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800788c:	d0e7      	beq.n	800785e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800788e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007890:	4618      	mov	r0, r3
 8007892:	371c      	adds	r7, #28
 8007894:	46bd      	mov	sp, r7
 8007896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800789a:	4770      	bx	lr

0800789c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800789c:	b480      	push	{r7}
 800789e:	b089      	sub	sp, #36	@ 0x24
 80078a0:	af00      	add	r7, sp, #0
 80078a2:	60f8      	str	r0, [r7, #12]
 80078a4:	60b9      	str	r1, [r7, #8]
 80078a6:	4611      	mov	r1, r2
 80078a8:	461a      	mov	r2, r3
 80078aa:	460b      	mov	r3, r1
 80078ac:	71fb      	strb	r3, [r7, #7]
 80078ae:	4613      	mov	r3, r2
 80078b0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80078b6:	68bb      	ldr	r3, [r7, #8]
 80078b8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80078ba:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d123      	bne.n	800790a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80078c2:	88bb      	ldrh	r3, [r7, #4]
 80078c4:	3303      	adds	r3, #3
 80078c6:	089b      	lsrs	r3, r3, #2
 80078c8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80078ca:	2300      	movs	r3, #0
 80078cc:	61bb      	str	r3, [r7, #24]
 80078ce:	e018      	b.n	8007902 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80078d0:	79fb      	ldrb	r3, [r7, #7]
 80078d2:	031a      	lsls	r2, r3, #12
 80078d4:	697b      	ldr	r3, [r7, #20]
 80078d6:	4413      	add	r3, r2
 80078d8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80078dc:	461a      	mov	r2, r3
 80078de:	69fb      	ldr	r3, [r7, #28]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	6013      	str	r3, [r2, #0]
      pSrc++;
 80078e4:	69fb      	ldr	r3, [r7, #28]
 80078e6:	3301      	adds	r3, #1
 80078e8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80078ea:	69fb      	ldr	r3, [r7, #28]
 80078ec:	3301      	adds	r3, #1
 80078ee:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80078f0:	69fb      	ldr	r3, [r7, #28]
 80078f2:	3301      	adds	r3, #1
 80078f4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80078f6:	69fb      	ldr	r3, [r7, #28]
 80078f8:	3301      	adds	r3, #1
 80078fa:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80078fc:	69bb      	ldr	r3, [r7, #24]
 80078fe:	3301      	adds	r3, #1
 8007900:	61bb      	str	r3, [r7, #24]
 8007902:	69ba      	ldr	r2, [r7, #24]
 8007904:	693b      	ldr	r3, [r7, #16]
 8007906:	429a      	cmp	r2, r3
 8007908:	d3e2      	bcc.n	80078d0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800790a:	2300      	movs	r3, #0
}
 800790c:	4618      	mov	r0, r3
 800790e:	3724      	adds	r7, #36	@ 0x24
 8007910:	46bd      	mov	sp, r7
 8007912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007916:	4770      	bx	lr

08007918 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007918:	b480      	push	{r7}
 800791a:	b08b      	sub	sp, #44	@ 0x2c
 800791c:	af00      	add	r7, sp, #0
 800791e:	60f8      	str	r0, [r7, #12]
 8007920:	60b9      	str	r1, [r7, #8]
 8007922:	4613      	mov	r3, r2
 8007924:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800792a:	68bb      	ldr	r3, [r7, #8]
 800792c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800792e:	88fb      	ldrh	r3, [r7, #6]
 8007930:	089b      	lsrs	r3, r3, #2
 8007932:	b29b      	uxth	r3, r3
 8007934:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8007936:	88fb      	ldrh	r3, [r7, #6]
 8007938:	f003 0303 	and.w	r3, r3, #3
 800793c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800793e:	2300      	movs	r3, #0
 8007940:	623b      	str	r3, [r7, #32]
 8007942:	e014      	b.n	800796e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007944:	69bb      	ldr	r3, [r7, #24]
 8007946:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800794a:	681a      	ldr	r2, [r3, #0]
 800794c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800794e:	601a      	str	r2, [r3, #0]
    pDest++;
 8007950:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007952:	3301      	adds	r3, #1
 8007954:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007956:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007958:	3301      	adds	r3, #1
 800795a:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800795c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800795e:	3301      	adds	r3, #1
 8007960:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007962:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007964:	3301      	adds	r3, #1
 8007966:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8007968:	6a3b      	ldr	r3, [r7, #32]
 800796a:	3301      	adds	r3, #1
 800796c:	623b      	str	r3, [r7, #32]
 800796e:	6a3a      	ldr	r2, [r7, #32]
 8007970:	697b      	ldr	r3, [r7, #20]
 8007972:	429a      	cmp	r2, r3
 8007974:	d3e6      	bcc.n	8007944 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8007976:	8bfb      	ldrh	r3, [r7, #30]
 8007978:	2b00      	cmp	r3, #0
 800797a:	d01e      	beq.n	80079ba <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800797c:	2300      	movs	r3, #0
 800797e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8007980:	69bb      	ldr	r3, [r7, #24]
 8007982:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007986:	461a      	mov	r2, r3
 8007988:	f107 0310 	add.w	r3, r7, #16
 800798c:	6812      	ldr	r2, [r2, #0]
 800798e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8007990:	693a      	ldr	r2, [r7, #16]
 8007992:	6a3b      	ldr	r3, [r7, #32]
 8007994:	b2db      	uxtb	r3, r3
 8007996:	00db      	lsls	r3, r3, #3
 8007998:	fa22 f303 	lsr.w	r3, r2, r3
 800799c:	b2da      	uxtb	r2, r3
 800799e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079a0:	701a      	strb	r2, [r3, #0]
      i++;
 80079a2:	6a3b      	ldr	r3, [r7, #32]
 80079a4:	3301      	adds	r3, #1
 80079a6:	623b      	str	r3, [r7, #32]
      pDest++;
 80079a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079aa:	3301      	adds	r3, #1
 80079ac:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 80079ae:	8bfb      	ldrh	r3, [r7, #30]
 80079b0:	3b01      	subs	r3, #1
 80079b2:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80079b4:	8bfb      	ldrh	r3, [r7, #30]
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d1ea      	bne.n	8007990 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80079ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80079bc:	4618      	mov	r0, r3
 80079be:	372c      	adds	r7, #44	@ 0x2c
 80079c0:	46bd      	mov	sp, r7
 80079c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c6:	4770      	bx	lr

080079c8 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80079c8:	b480      	push	{r7}
 80079ca:	b085      	sub	sp, #20
 80079cc:	af00      	add	r7, sp, #0
 80079ce:	6078      	str	r0, [r7, #4]
 80079d0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80079d6:	683b      	ldr	r3, [r7, #0]
 80079d8:	781b      	ldrb	r3, [r3, #0]
 80079da:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80079dc:	683b      	ldr	r3, [r7, #0]
 80079de:	785b      	ldrb	r3, [r3, #1]
 80079e0:	2b01      	cmp	r3, #1
 80079e2:	d12c      	bne.n	8007a3e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80079e4:	68bb      	ldr	r3, [r7, #8]
 80079e6:	015a      	lsls	r2, r3, #5
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	4413      	add	r3, r2
 80079ec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	db12      	blt.n	8007a1c <USB_EPSetStall+0x54>
 80079f6:	68bb      	ldr	r3, [r7, #8]
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d00f      	beq.n	8007a1c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80079fc:	68bb      	ldr	r3, [r7, #8]
 80079fe:	015a      	lsls	r2, r3, #5
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	4413      	add	r3, r2
 8007a04:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	68ba      	ldr	r2, [r7, #8]
 8007a0c:	0151      	lsls	r1, r2, #5
 8007a0e:	68fa      	ldr	r2, [r7, #12]
 8007a10:	440a      	add	r2, r1
 8007a12:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007a16:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8007a1a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8007a1c:	68bb      	ldr	r3, [r7, #8]
 8007a1e:	015a      	lsls	r2, r3, #5
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	4413      	add	r3, r2
 8007a24:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	68ba      	ldr	r2, [r7, #8]
 8007a2c:	0151      	lsls	r1, r2, #5
 8007a2e:	68fa      	ldr	r2, [r7, #12]
 8007a30:	440a      	add	r2, r1
 8007a32:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007a36:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8007a3a:	6013      	str	r3, [r2, #0]
 8007a3c:	e02b      	b.n	8007a96 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007a3e:	68bb      	ldr	r3, [r7, #8]
 8007a40:	015a      	lsls	r2, r3, #5
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	4413      	add	r3, r2
 8007a46:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	db12      	blt.n	8007a76 <USB_EPSetStall+0xae>
 8007a50:	68bb      	ldr	r3, [r7, #8]
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d00f      	beq.n	8007a76 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8007a56:	68bb      	ldr	r3, [r7, #8]
 8007a58:	015a      	lsls	r2, r3, #5
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	4413      	add	r3, r2
 8007a5e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	68ba      	ldr	r2, [r7, #8]
 8007a66:	0151      	lsls	r1, r2, #5
 8007a68:	68fa      	ldr	r2, [r7, #12]
 8007a6a:	440a      	add	r2, r1
 8007a6c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007a70:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8007a74:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8007a76:	68bb      	ldr	r3, [r7, #8]
 8007a78:	015a      	lsls	r2, r3, #5
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	4413      	add	r3, r2
 8007a7e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	68ba      	ldr	r2, [r7, #8]
 8007a86:	0151      	lsls	r1, r2, #5
 8007a88:	68fa      	ldr	r2, [r7, #12]
 8007a8a:	440a      	add	r2, r1
 8007a8c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007a90:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8007a94:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007a96:	2300      	movs	r3, #0
}
 8007a98:	4618      	mov	r0, r3
 8007a9a:	3714      	adds	r7, #20
 8007a9c:	46bd      	mov	sp, r7
 8007a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa2:	4770      	bx	lr

08007aa4 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8007aa4:	b480      	push	{r7}
 8007aa6:	b085      	sub	sp, #20
 8007aa8:	af00      	add	r7, sp, #0
 8007aaa:	6078      	str	r0, [r7, #4]
 8007aac:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007ab2:	683b      	ldr	r3, [r7, #0]
 8007ab4:	781b      	ldrb	r3, [r3, #0]
 8007ab6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007ab8:	683b      	ldr	r3, [r7, #0]
 8007aba:	785b      	ldrb	r3, [r3, #1]
 8007abc:	2b01      	cmp	r3, #1
 8007abe:	d128      	bne.n	8007b12 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007ac0:	68bb      	ldr	r3, [r7, #8]
 8007ac2:	015a      	lsls	r2, r3, #5
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	4413      	add	r3, r2
 8007ac8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	68ba      	ldr	r2, [r7, #8]
 8007ad0:	0151      	lsls	r1, r2, #5
 8007ad2:	68fa      	ldr	r2, [r7, #12]
 8007ad4:	440a      	add	r2, r1
 8007ad6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007ada:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007ade:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007ae0:	683b      	ldr	r3, [r7, #0]
 8007ae2:	791b      	ldrb	r3, [r3, #4]
 8007ae4:	2b03      	cmp	r3, #3
 8007ae6:	d003      	beq.n	8007af0 <USB_EPClearStall+0x4c>
 8007ae8:	683b      	ldr	r3, [r7, #0]
 8007aea:	791b      	ldrb	r3, [r3, #4]
 8007aec:	2b02      	cmp	r3, #2
 8007aee:	d138      	bne.n	8007b62 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007af0:	68bb      	ldr	r3, [r7, #8]
 8007af2:	015a      	lsls	r2, r3, #5
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	4413      	add	r3, r2
 8007af8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	68ba      	ldr	r2, [r7, #8]
 8007b00:	0151      	lsls	r1, r2, #5
 8007b02:	68fa      	ldr	r2, [r7, #12]
 8007b04:	440a      	add	r2, r1
 8007b06:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007b0a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007b0e:	6013      	str	r3, [r2, #0]
 8007b10:	e027      	b.n	8007b62 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007b12:	68bb      	ldr	r3, [r7, #8]
 8007b14:	015a      	lsls	r2, r3, #5
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	4413      	add	r3, r2
 8007b1a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	68ba      	ldr	r2, [r7, #8]
 8007b22:	0151      	lsls	r1, r2, #5
 8007b24:	68fa      	ldr	r2, [r7, #12]
 8007b26:	440a      	add	r2, r1
 8007b28:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007b2c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007b30:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007b32:	683b      	ldr	r3, [r7, #0]
 8007b34:	791b      	ldrb	r3, [r3, #4]
 8007b36:	2b03      	cmp	r3, #3
 8007b38:	d003      	beq.n	8007b42 <USB_EPClearStall+0x9e>
 8007b3a:	683b      	ldr	r3, [r7, #0]
 8007b3c:	791b      	ldrb	r3, [r3, #4]
 8007b3e:	2b02      	cmp	r3, #2
 8007b40:	d10f      	bne.n	8007b62 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007b42:	68bb      	ldr	r3, [r7, #8]
 8007b44:	015a      	lsls	r2, r3, #5
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	4413      	add	r3, r2
 8007b4a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	68ba      	ldr	r2, [r7, #8]
 8007b52:	0151      	lsls	r1, r2, #5
 8007b54:	68fa      	ldr	r2, [r7, #12]
 8007b56:	440a      	add	r2, r1
 8007b58:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007b5c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007b60:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8007b62:	2300      	movs	r3, #0
}
 8007b64:	4618      	mov	r0, r3
 8007b66:	3714      	adds	r7, #20
 8007b68:	46bd      	mov	sp, r7
 8007b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b6e:	4770      	bx	lr

08007b70 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8007b70:	b480      	push	{r7}
 8007b72:	b085      	sub	sp, #20
 8007b74:	af00      	add	r7, sp, #0
 8007b76:	6078      	str	r0, [r7, #4]
 8007b78:	460b      	mov	r3, r1
 8007b7a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	68fa      	ldr	r2, [r7, #12]
 8007b8a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007b8e:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8007b92:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007b9a:	681a      	ldr	r2, [r3, #0]
 8007b9c:	78fb      	ldrb	r3, [r7, #3]
 8007b9e:	011b      	lsls	r3, r3, #4
 8007ba0:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8007ba4:	68f9      	ldr	r1, [r7, #12]
 8007ba6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007baa:	4313      	orrs	r3, r2
 8007bac:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8007bae:	2300      	movs	r3, #0
}
 8007bb0:	4618      	mov	r0, r3
 8007bb2:	3714      	adds	r7, #20
 8007bb4:	46bd      	mov	sp, r7
 8007bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bba:	4770      	bx	lr

08007bbc <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8007bbc:	b480      	push	{r7}
 8007bbe:	b085      	sub	sp, #20
 8007bc0:	af00      	add	r7, sp, #0
 8007bc2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	68fa      	ldr	r2, [r7, #12]
 8007bd2:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8007bd6:	f023 0303 	bic.w	r3, r3, #3
 8007bda:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007be2:	685b      	ldr	r3, [r3, #4]
 8007be4:	68fa      	ldr	r2, [r7, #12]
 8007be6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007bea:	f023 0302 	bic.w	r3, r3, #2
 8007bee:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007bf0:	2300      	movs	r3, #0
}
 8007bf2:	4618      	mov	r0, r3
 8007bf4:	3714      	adds	r7, #20
 8007bf6:	46bd      	mov	sp, r7
 8007bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bfc:	4770      	bx	lr

08007bfe <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8007bfe:	b480      	push	{r7}
 8007c00:	b085      	sub	sp, #20
 8007c02:	af00      	add	r7, sp, #0
 8007c04:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	68fa      	ldr	r2, [r7, #12]
 8007c14:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8007c18:	f023 0303 	bic.w	r3, r3, #3
 8007c1c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007c24:	685b      	ldr	r3, [r3, #4]
 8007c26:	68fa      	ldr	r2, [r7, #12]
 8007c28:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007c2c:	f043 0302 	orr.w	r3, r3, #2
 8007c30:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007c32:	2300      	movs	r3, #0
}
 8007c34:	4618      	mov	r0, r3
 8007c36:	3714      	adds	r7, #20
 8007c38:	46bd      	mov	sp, r7
 8007c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c3e:	4770      	bx	lr

08007c40 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8007c40:	b480      	push	{r7}
 8007c42:	b085      	sub	sp, #20
 8007c44:	af00      	add	r7, sp, #0
 8007c46:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	695b      	ldr	r3, [r3, #20]
 8007c4c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	699b      	ldr	r3, [r3, #24]
 8007c52:	68fa      	ldr	r2, [r7, #12]
 8007c54:	4013      	ands	r3, r2
 8007c56:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007c58:	68fb      	ldr	r3, [r7, #12]
}
 8007c5a:	4618      	mov	r0, r3
 8007c5c:	3714      	adds	r7, #20
 8007c5e:	46bd      	mov	sp, r7
 8007c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c64:	4770      	bx	lr

08007c66 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8007c66:	b480      	push	{r7}
 8007c68:	b085      	sub	sp, #20
 8007c6a:	af00      	add	r7, sp, #0
 8007c6c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007c78:	699b      	ldr	r3, [r3, #24]
 8007c7a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007c82:	69db      	ldr	r3, [r3, #28]
 8007c84:	68ba      	ldr	r2, [r7, #8]
 8007c86:	4013      	ands	r3, r2
 8007c88:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8007c8a:	68bb      	ldr	r3, [r7, #8]
 8007c8c:	0c1b      	lsrs	r3, r3, #16
}
 8007c8e:	4618      	mov	r0, r3
 8007c90:	3714      	adds	r7, #20
 8007c92:	46bd      	mov	sp, r7
 8007c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c98:	4770      	bx	lr

08007c9a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8007c9a:	b480      	push	{r7}
 8007c9c:	b085      	sub	sp, #20
 8007c9e:	af00      	add	r7, sp, #0
 8007ca0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007cac:	699b      	ldr	r3, [r3, #24]
 8007cae:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007cb6:	69db      	ldr	r3, [r3, #28]
 8007cb8:	68ba      	ldr	r2, [r7, #8]
 8007cba:	4013      	ands	r3, r2
 8007cbc:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8007cbe:	68bb      	ldr	r3, [r7, #8]
 8007cc0:	b29b      	uxth	r3, r3
}
 8007cc2:	4618      	mov	r0, r3
 8007cc4:	3714      	adds	r7, #20
 8007cc6:	46bd      	mov	sp, r7
 8007cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ccc:	4770      	bx	lr

08007cce <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007cce:	b480      	push	{r7}
 8007cd0:	b085      	sub	sp, #20
 8007cd2:	af00      	add	r7, sp, #0
 8007cd4:	6078      	str	r0, [r7, #4]
 8007cd6:	460b      	mov	r3, r1
 8007cd8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8007cde:	78fb      	ldrb	r3, [r7, #3]
 8007ce0:	015a      	lsls	r2, r3, #5
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	4413      	add	r3, r2
 8007ce6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007cea:	689b      	ldr	r3, [r3, #8]
 8007cec:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007cf4:	695b      	ldr	r3, [r3, #20]
 8007cf6:	68ba      	ldr	r2, [r7, #8]
 8007cf8:	4013      	ands	r3, r2
 8007cfa:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007cfc:	68bb      	ldr	r3, [r7, #8]
}
 8007cfe:	4618      	mov	r0, r3
 8007d00:	3714      	adds	r7, #20
 8007d02:	46bd      	mov	sp, r7
 8007d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d08:	4770      	bx	lr

08007d0a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007d0a:	b480      	push	{r7}
 8007d0c:	b087      	sub	sp, #28
 8007d0e:	af00      	add	r7, sp, #0
 8007d10:	6078      	str	r0, [r7, #4]
 8007d12:	460b      	mov	r3, r1
 8007d14:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8007d1a:	697b      	ldr	r3, [r7, #20]
 8007d1c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007d20:	691b      	ldr	r3, [r3, #16]
 8007d22:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8007d24:	697b      	ldr	r3, [r7, #20]
 8007d26:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007d2a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007d2c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8007d2e:	78fb      	ldrb	r3, [r7, #3]
 8007d30:	f003 030f 	and.w	r3, r3, #15
 8007d34:	68fa      	ldr	r2, [r7, #12]
 8007d36:	fa22 f303 	lsr.w	r3, r2, r3
 8007d3a:	01db      	lsls	r3, r3, #7
 8007d3c:	b2db      	uxtb	r3, r3
 8007d3e:	693a      	ldr	r2, [r7, #16]
 8007d40:	4313      	orrs	r3, r2
 8007d42:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8007d44:	78fb      	ldrb	r3, [r7, #3]
 8007d46:	015a      	lsls	r2, r3, #5
 8007d48:	697b      	ldr	r3, [r7, #20]
 8007d4a:	4413      	add	r3, r2
 8007d4c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007d50:	689b      	ldr	r3, [r3, #8]
 8007d52:	693a      	ldr	r2, [r7, #16]
 8007d54:	4013      	ands	r3, r2
 8007d56:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007d58:	68bb      	ldr	r3, [r7, #8]
}
 8007d5a:	4618      	mov	r0, r3
 8007d5c:	371c      	adds	r7, #28
 8007d5e:	46bd      	mov	sp, r7
 8007d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d64:	4770      	bx	lr

08007d66 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8007d66:	b480      	push	{r7}
 8007d68:	b083      	sub	sp, #12
 8007d6a:	af00      	add	r7, sp, #0
 8007d6c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	695b      	ldr	r3, [r3, #20]
 8007d72:	f003 0301 	and.w	r3, r3, #1
}
 8007d76:	4618      	mov	r0, r3
 8007d78:	370c      	adds	r7, #12
 8007d7a:	46bd      	mov	sp, r7
 8007d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d80:	4770      	bx	lr

08007d82 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8007d82:	b480      	push	{r7}
 8007d84:	b085      	sub	sp, #20
 8007d86:	af00      	add	r7, sp, #0
 8007d88:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	68fa      	ldr	r2, [r7, #12]
 8007d98:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007d9c:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8007da0:	f023 0307 	bic.w	r3, r3, #7
 8007da4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007dac:	685b      	ldr	r3, [r3, #4]
 8007dae:	68fa      	ldr	r2, [r7, #12]
 8007db0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007db4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007db8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007dba:	2300      	movs	r3, #0
}
 8007dbc:	4618      	mov	r0, r3
 8007dbe:	3714      	adds	r7, #20
 8007dc0:	46bd      	mov	sp, r7
 8007dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc6:	4770      	bx	lr

08007dc8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8007dc8:	b480      	push	{r7}
 8007dca:	b087      	sub	sp, #28
 8007dcc:	af00      	add	r7, sp, #0
 8007dce:	60f8      	str	r0, [r7, #12]
 8007dd0:	460b      	mov	r3, r1
 8007dd2:	607a      	str	r2, [r7, #4]
 8007dd4:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	333c      	adds	r3, #60	@ 0x3c
 8007dde:	3304      	adds	r3, #4
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8007de4:	693b      	ldr	r3, [r7, #16]
 8007de6:	4a26      	ldr	r2, [pc, #152]	@ (8007e80 <USB_EP0_OutStart+0xb8>)
 8007de8:	4293      	cmp	r3, r2
 8007dea:	d90a      	bls.n	8007e02 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007dec:	697b      	ldr	r3, [r7, #20]
 8007dee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007df8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007dfc:	d101      	bne.n	8007e02 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8007dfe:	2300      	movs	r3, #0
 8007e00:	e037      	b.n	8007e72 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8007e02:	697b      	ldr	r3, [r7, #20]
 8007e04:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007e08:	461a      	mov	r2, r3
 8007e0a:	2300      	movs	r3, #0
 8007e0c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007e0e:	697b      	ldr	r3, [r7, #20]
 8007e10:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007e14:	691b      	ldr	r3, [r3, #16]
 8007e16:	697a      	ldr	r2, [r7, #20]
 8007e18:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007e1c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007e20:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8007e22:	697b      	ldr	r3, [r7, #20]
 8007e24:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007e28:	691b      	ldr	r3, [r3, #16]
 8007e2a:	697a      	ldr	r2, [r7, #20]
 8007e2c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007e30:	f043 0318 	orr.w	r3, r3, #24
 8007e34:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8007e36:	697b      	ldr	r3, [r7, #20]
 8007e38:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007e3c:	691b      	ldr	r3, [r3, #16]
 8007e3e:	697a      	ldr	r2, [r7, #20]
 8007e40:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007e44:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8007e48:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8007e4a:	7afb      	ldrb	r3, [r7, #11]
 8007e4c:	2b01      	cmp	r3, #1
 8007e4e:	d10f      	bne.n	8007e70 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8007e50:	697b      	ldr	r3, [r7, #20]
 8007e52:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007e56:	461a      	mov	r2, r3
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8007e5c:	697b      	ldr	r3, [r7, #20]
 8007e5e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	697a      	ldr	r2, [r7, #20]
 8007e66:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007e6a:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8007e6e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007e70:	2300      	movs	r3, #0
}
 8007e72:	4618      	mov	r0, r3
 8007e74:	371c      	adds	r7, #28
 8007e76:	46bd      	mov	sp, r7
 8007e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e7c:	4770      	bx	lr
 8007e7e:	bf00      	nop
 8007e80:	4f54300a 	.word	0x4f54300a

08007e84 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007e84:	b480      	push	{r7}
 8007e86:	b085      	sub	sp, #20
 8007e88:	af00      	add	r7, sp, #0
 8007e8a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007e8c:	2300      	movs	r3, #0
 8007e8e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	3301      	adds	r3, #1
 8007e94:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007e9c:	d901      	bls.n	8007ea2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007e9e:	2303      	movs	r3, #3
 8007ea0:	e01b      	b.n	8007eda <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	691b      	ldr	r3, [r3, #16]
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	daf2      	bge.n	8007e90 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007eaa:	2300      	movs	r3, #0
 8007eac:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	691b      	ldr	r3, [r3, #16]
 8007eb2:	f043 0201 	orr.w	r2, r3, #1
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	3301      	adds	r3, #1
 8007ebe:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007ec6:	d901      	bls.n	8007ecc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007ec8:	2303      	movs	r3, #3
 8007eca:	e006      	b.n	8007eda <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	691b      	ldr	r3, [r3, #16]
 8007ed0:	f003 0301 	and.w	r3, r3, #1
 8007ed4:	2b01      	cmp	r3, #1
 8007ed6:	d0f0      	beq.n	8007eba <USB_CoreReset+0x36>

  return HAL_OK;
 8007ed8:	2300      	movs	r3, #0
}
 8007eda:	4618      	mov	r0, r3
 8007edc:	3714      	adds	r7, #20
 8007ede:	46bd      	mov	sp, r7
 8007ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee4:	4770      	bx	lr
	...

08007ee8 <__NVIC_SetPriority>:
{
 8007ee8:	b480      	push	{r7}
 8007eea:	b083      	sub	sp, #12
 8007eec:	af00      	add	r7, sp, #0
 8007eee:	4603      	mov	r3, r0
 8007ef0:	6039      	str	r1, [r7, #0]
 8007ef2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007ef4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	db0a      	blt.n	8007f12 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007efc:	683b      	ldr	r3, [r7, #0]
 8007efe:	b2da      	uxtb	r2, r3
 8007f00:	490c      	ldr	r1, [pc, #48]	@ (8007f34 <__NVIC_SetPriority+0x4c>)
 8007f02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007f06:	0112      	lsls	r2, r2, #4
 8007f08:	b2d2      	uxtb	r2, r2
 8007f0a:	440b      	add	r3, r1
 8007f0c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8007f10:	e00a      	b.n	8007f28 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007f12:	683b      	ldr	r3, [r7, #0]
 8007f14:	b2da      	uxtb	r2, r3
 8007f16:	4908      	ldr	r1, [pc, #32]	@ (8007f38 <__NVIC_SetPriority+0x50>)
 8007f18:	79fb      	ldrb	r3, [r7, #7]
 8007f1a:	f003 030f 	and.w	r3, r3, #15
 8007f1e:	3b04      	subs	r3, #4
 8007f20:	0112      	lsls	r2, r2, #4
 8007f22:	b2d2      	uxtb	r2, r2
 8007f24:	440b      	add	r3, r1
 8007f26:	761a      	strb	r2, [r3, #24]
}
 8007f28:	bf00      	nop
 8007f2a:	370c      	adds	r7, #12
 8007f2c:	46bd      	mov	sp, r7
 8007f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f32:	4770      	bx	lr
 8007f34:	e000e100 	.word	0xe000e100
 8007f38:	e000ed00 	.word	0xe000ed00

08007f3c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8007f3c:	b580      	push	{r7, lr}
 8007f3e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8007f40:	4b05      	ldr	r3, [pc, #20]	@ (8007f58 <SysTick_Handler+0x1c>)
 8007f42:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8007f44:	f002 f984 	bl	800a250 <xTaskGetSchedulerState>
 8007f48:	4603      	mov	r3, r0
 8007f4a:	2b01      	cmp	r3, #1
 8007f4c:	d001      	beq.n	8007f52 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8007f4e:	f000 fd9b 	bl	8008a88 <xPortSysTickHandler>
  }
}
 8007f52:	bf00      	nop
 8007f54:	bd80      	pop	{r7, pc}
 8007f56:	bf00      	nop
 8007f58:	e000e010 	.word	0xe000e010

08007f5c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8007f5c:	b580      	push	{r7, lr}
 8007f5e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8007f60:	2100      	movs	r1, #0
 8007f62:	f06f 0004 	mvn.w	r0, #4
 8007f66:	f7ff ffbf 	bl	8007ee8 <__NVIC_SetPriority>
#endif
}
 8007f6a:	bf00      	nop
 8007f6c:	bd80      	pop	{r7, pc}
	...

08007f70 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8007f70:	b480      	push	{r7}
 8007f72:	b083      	sub	sp, #12
 8007f74:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007f76:	f3ef 8305 	mrs	r3, IPSR
 8007f7a:	603b      	str	r3, [r7, #0]
  return(result);
 8007f7c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d003      	beq.n	8007f8a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8007f82:	f06f 0305 	mvn.w	r3, #5
 8007f86:	607b      	str	r3, [r7, #4]
 8007f88:	e00c      	b.n	8007fa4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8007f8a:	4b0a      	ldr	r3, [pc, #40]	@ (8007fb4 <osKernelInitialize+0x44>)
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d105      	bne.n	8007f9e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8007f92:	4b08      	ldr	r3, [pc, #32]	@ (8007fb4 <osKernelInitialize+0x44>)
 8007f94:	2201      	movs	r2, #1
 8007f96:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8007f98:	2300      	movs	r3, #0
 8007f9a:	607b      	str	r3, [r7, #4]
 8007f9c:	e002      	b.n	8007fa4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8007f9e:	f04f 33ff 	mov.w	r3, #4294967295
 8007fa2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007fa4:	687b      	ldr	r3, [r7, #4]
}
 8007fa6:	4618      	mov	r0, r3
 8007fa8:	370c      	adds	r7, #12
 8007faa:	46bd      	mov	sp, r7
 8007fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb0:	4770      	bx	lr
 8007fb2:	bf00      	nop
 8007fb4:	20000c0c 	.word	0x20000c0c

08007fb8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8007fb8:	b580      	push	{r7, lr}
 8007fba:	b082      	sub	sp, #8
 8007fbc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007fbe:	f3ef 8305 	mrs	r3, IPSR
 8007fc2:	603b      	str	r3, [r7, #0]
  return(result);
 8007fc4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d003      	beq.n	8007fd2 <osKernelStart+0x1a>
    stat = osErrorISR;
 8007fca:	f06f 0305 	mvn.w	r3, #5
 8007fce:	607b      	str	r3, [r7, #4]
 8007fd0:	e010      	b.n	8007ff4 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8007fd2:	4b0b      	ldr	r3, [pc, #44]	@ (8008000 <osKernelStart+0x48>)
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	2b01      	cmp	r3, #1
 8007fd8:	d109      	bne.n	8007fee <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8007fda:	f7ff ffbf 	bl	8007f5c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8007fde:	4b08      	ldr	r3, [pc, #32]	@ (8008000 <osKernelStart+0x48>)
 8007fe0:	2202      	movs	r2, #2
 8007fe2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8007fe4:	f001 fcd0 	bl	8009988 <vTaskStartScheduler>
      stat = osOK;
 8007fe8:	2300      	movs	r3, #0
 8007fea:	607b      	str	r3, [r7, #4]
 8007fec:	e002      	b.n	8007ff4 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8007fee:	f04f 33ff 	mov.w	r3, #4294967295
 8007ff2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007ff4:	687b      	ldr	r3, [r7, #4]
}
 8007ff6:	4618      	mov	r0, r3
 8007ff8:	3708      	adds	r7, #8
 8007ffa:	46bd      	mov	sp, r7
 8007ffc:	bd80      	pop	{r7, pc}
 8007ffe:	bf00      	nop
 8008000:	20000c0c 	.word	0x20000c0c

08008004 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8008004:	b580      	push	{r7, lr}
 8008006:	b08e      	sub	sp, #56	@ 0x38
 8008008:	af04      	add	r7, sp, #16
 800800a:	60f8      	str	r0, [r7, #12]
 800800c:	60b9      	str	r1, [r7, #8]
 800800e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8008010:	2300      	movs	r3, #0
 8008012:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008014:	f3ef 8305 	mrs	r3, IPSR
 8008018:	617b      	str	r3, [r7, #20]
  return(result);
 800801a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800801c:	2b00      	cmp	r3, #0
 800801e:	d17e      	bne.n	800811e <osThreadNew+0x11a>
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	2b00      	cmp	r3, #0
 8008024:	d07b      	beq.n	800811e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8008026:	2380      	movs	r3, #128	@ 0x80
 8008028:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800802a:	2318      	movs	r3, #24
 800802c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800802e:	2300      	movs	r3, #0
 8008030:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8008032:	f04f 33ff 	mov.w	r3, #4294967295
 8008036:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	2b00      	cmp	r3, #0
 800803c:	d045      	beq.n	80080ca <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	2b00      	cmp	r3, #0
 8008044:	d002      	beq.n	800804c <osThreadNew+0x48>
        name = attr->name;
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	699b      	ldr	r3, [r3, #24]
 8008050:	2b00      	cmp	r3, #0
 8008052:	d002      	beq.n	800805a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	699b      	ldr	r3, [r3, #24]
 8008058:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800805a:	69fb      	ldr	r3, [r7, #28]
 800805c:	2b00      	cmp	r3, #0
 800805e:	d008      	beq.n	8008072 <osThreadNew+0x6e>
 8008060:	69fb      	ldr	r3, [r7, #28]
 8008062:	2b38      	cmp	r3, #56	@ 0x38
 8008064:	d805      	bhi.n	8008072 <osThreadNew+0x6e>
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	685b      	ldr	r3, [r3, #4]
 800806a:	f003 0301 	and.w	r3, r3, #1
 800806e:	2b00      	cmp	r3, #0
 8008070:	d001      	beq.n	8008076 <osThreadNew+0x72>
        return (NULL);
 8008072:	2300      	movs	r3, #0
 8008074:	e054      	b.n	8008120 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	695b      	ldr	r3, [r3, #20]
 800807a:	2b00      	cmp	r3, #0
 800807c:	d003      	beq.n	8008086 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	695b      	ldr	r3, [r3, #20]
 8008082:	089b      	lsrs	r3, r3, #2
 8008084:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	689b      	ldr	r3, [r3, #8]
 800808a:	2b00      	cmp	r3, #0
 800808c:	d00e      	beq.n	80080ac <osThreadNew+0xa8>
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	68db      	ldr	r3, [r3, #12]
 8008092:	2ba7      	cmp	r3, #167	@ 0xa7
 8008094:	d90a      	bls.n	80080ac <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800809a:	2b00      	cmp	r3, #0
 800809c:	d006      	beq.n	80080ac <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	695b      	ldr	r3, [r3, #20]
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d002      	beq.n	80080ac <osThreadNew+0xa8>
        mem = 1;
 80080a6:	2301      	movs	r3, #1
 80080a8:	61bb      	str	r3, [r7, #24]
 80080aa:	e010      	b.n	80080ce <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	689b      	ldr	r3, [r3, #8]
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d10c      	bne.n	80080ce <osThreadNew+0xca>
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	68db      	ldr	r3, [r3, #12]
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d108      	bne.n	80080ce <osThreadNew+0xca>
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	691b      	ldr	r3, [r3, #16]
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d104      	bne.n	80080ce <osThreadNew+0xca>
          mem = 0;
 80080c4:	2300      	movs	r3, #0
 80080c6:	61bb      	str	r3, [r7, #24]
 80080c8:	e001      	b.n	80080ce <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80080ca:	2300      	movs	r3, #0
 80080cc:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80080ce:	69bb      	ldr	r3, [r7, #24]
 80080d0:	2b01      	cmp	r3, #1
 80080d2:	d110      	bne.n	80080f6 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80080d8:	687a      	ldr	r2, [r7, #4]
 80080da:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80080dc:	9202      	str	r2, [sp, #8]
 80080de:	9301      	str	r3, [sp, #4]
 80080e0:	69fb      	ldr	r3, [r7, #28]
 80080e2:	9300      	str	r3, [sp, #0]
 80080e4:	68bb      	ldr	r3, [r7, #8]
 80080e6:	6a3a      	ldr	r2, [r7, #32]
 80080e8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80080ea:	68f8      	ldr	r0, [r7, #12]
 80080ec:	f001 fa58 	bl	80095a0 <xTaskCreateStatic>
 80080f0:	4603      	mov	r3, r0
 80080f2:	613b      	str	r3, [r7, #16]
 80080f4:	e013      	b.n	800811e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80080f6:	69bb      	ldr	r3, [r7, #24]
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d110      	bne.n	800811e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80080fc:	6a3b      	ldr	r3, [r7, #32]
 80080fe:	b29a      	uxth	r2, r3
 8008100:	f107 0310 	add.w	r3, r7, #16
 8008104:	9301      	str	r3, [sp, #4]
 8008106:	69fb      	ldr	r3, [r7, #28]
 8008108:	9300      	str	r3, [sp, #0]
 800810a:	68bb      	ldr	r3, [r7, #8]
 800810c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800810e:	68f8      	ldr	r0, [r7, #12]
 8008110:	f001 faa6 	bl	8009660 <xTaskCreate>
 8008114:	4603      	mov	r3, r0
 8008116:	2b01      	cmp	r3, #1
 8008118:	d001      	beq.n	800811e <osThreadNew+0x11a>
            hTask = NULL;
 800811a:	2300      	movs	r3, #0
 800811c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800811e:	693b      	ldr	r3, [r7, #16]
}
 8008120:	4618      	mov	r0, r3
 8008122:	3728      	adds	r7, #40	@ 0x28
 8008124:	46bd      	mov	sp, r7
 8008126:	bd80      	pop	{r7, pc}

08008128 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8008128:	b580      	push	{r7, lr}
 800812a:	b084      	sub	sp, #16
 800812c:	af00      	add	r7, sp, #0
 800812e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008130:	f3ef 8305 	mrs	r3, IPSR
 8008134:	60bb      	str	r3, [r7, #8]
  return(result);
 8008136:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008138:	2b00      	cmp	r3, #0
 800813a:	d003      	beq.n	8008144 <osDelay+0x1c>
    stat = osErrorISR;
 800813c:	f06f 0305 	mvn.w	r3, #5
 8008140:	60fb      	str	r3, [r7, #12]
 8008142:	e007      	b.n	8008154 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8008144:	2300      	movs	r3, #0
 8008146:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	2b00      	cmp	r3, #0
 800814c:	d002      	beq.n	8008154 <osDelay+0x2c>
      vTaskDelay(ticks);
 800814e:	6878      	ldr	r0, [r7, #4]
 8008150:	f001 fbe4 	bl	800991c <vTaskDelay>
    }
  }

  return (stat);
 8008154:	68fb      	ldr	r3, [r7, #12]
}
 8008156:	4618      	mov	r0, r3
 8008158:	3710      	adds	r7, #16
 800815a:	46bd      	mov	sp, r7
 800815c:	bd80      	pop	{r7, pc}
	...

08008160 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8008160:	b480      	push	{r7}
 8008162:	b085      	sub	sp, #20
 8008164:	af00      	add	r7, sp, #0
 8008166:	60f8      	str	r0, [r7, #12]
 8008168:	60b9      	str	r1, [r7, #8]
 800816a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	4a07      	ldr	r2, [pc, #28]	@ (800818c <vApplicationGetIdleTaskMemory+0x2c>)
 8008170:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8008172:	68bb      	ldr	r3, [r7, #8]
 8008174:	4a06      	ldr	r2, [pc, #24]	@ (8008190 <vApplicationGetIdleTaskMemory+0x30>)
 8008176:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	2280      	movs	r2, #128	@ 0x80
 800817c:	601a      	str	r2, [r3, #0]
}
 800817e:	bf00      	nop
 8008180:	3714      	adds	r7, #20
 8008182:	46bd      	mov	sp, r7
 8008184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008188:	4770      	bx	lr
 800818a:	bf00      	nop
 800818c:	20000c10 	.word	0x20000c10
 8008190:	20000cb8 	.word	0x20000cb8

08008194 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8008194:	b480      	push	{r7}
 8008196:	b085      	sub	sp, #20
 8008198:	af00      	add	r7, sp, #0
 800819a:	60f8      	str	r0, [r7, #12]
 800819c:	60b9      	str	r1, [r7, #8]
 800819e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	4a07      	ldr	r2, [pc, #28]	@ (80081c0 <vApplicationGetTimerTaskMemory+0x2c>)
 80081a4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80081a6:	68bb      	ldr	r3, [r7, #8]
 80081a8:	4a06      	ldr	r2, [pc, #24]	@ (80081c4 <vApplicationGetTimerTaskMemory+0x30>)
 80081aa:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80081b2:	601a      	str	r2, [r3, #0]
}
 80081b4:	bf00      	nop
 80081b6:	3714      	adds	r7, #20
 80081b8:	46bd      	mov	sp, r7
 80081ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081be:	4770      	bx	lr
 80081c0:	20000eb8 	.word	0x20000eb8
 80081c4:	20000f60 	.word	0x20000f60

080081c8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80081c8:	b580      	push	{r7, lr}
 80081ca:	b08a      	sub	sp, #40	@ 0x28
 80081cc:	af00      	add	r7, sp, #0
 80081ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80081d0:	2300      	movs	r3, #0
 80081d2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80081d4:	f001 fc48 	bl	8009a68 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80081d8:	4b5c      	ldr	r3, [pc, #368]	@ (800834c <pvPortMalloc+0x184>)
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d101      	bne.n	80081e4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80081e0:	f000 f924 	bl	800842c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80081e4:	4b5a      	ldr	r3, [pc, #360]	@ (8008350 <pvPortMalloc+0x188>)
 80081e6:	681a      	ldr	r2, [r3, #0]
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	4013      	ands	r3, r2
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	f040 8095 	bne.w	800831c <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d01e      	beq.n	8008236 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80081f8:	2208      	movs	r2, #8
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	4413      	add	r3, r2
 80081fe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	f003 0307 	and.w	r3, r3, #7
 8008206:	2b00      	cmp	r3, #0
 8008208:	d015      	beq.n	8008236 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	f023 0307 	bic.w	r3, r3, #7
 8008210:	3308      	adds	r3, #8
 8008212:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	f003 0307 	and.w	r3, r3, #7
 800821a:	2b00      	cmp	r3, #0
 800821c:	d00b      	beq.n	8008236 <pvPortMalloc+0x6e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800821e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008222:	f383 8811 	msr	BASEPRI, r3
 8008226:	f3bf 8f6f 	isb	sy
 800822a:	f3bf 8f4f 	dsb	sy
 800822e:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8008230:	bf00      	nop
 8008232:	bf00      	nop
 8008234:	e7fd      	b.n	8008232 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	2b00      	cmp	r3, #0
 800823a:	d06f      	beq.n	800831c <pvPortMalloc+0x154>
 800823c:	4b45      	ldr	r3, [pc, #276]	@ (8008354 <pvPortMalloc+0x18c>)
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	687a      	ldr	r2, [r7, #4]
 8008242:	429a      	cmp	r2, r3
 8008244:	d86a      	bhi.n	800831c <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008246:	4b44      	ldr	r3, [pc, #272]	@ (8008358 <pvPortMalloc+0x190>)
 8008248:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800824a:	4b43      	ldr	r3, [pc, #268]	@ (8008358 <pvPortMalloc+0x190>)
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008250:	e004      	b.n	800825c <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8008252:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008254:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008256:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800825c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800825e:	685b      	ldr	r3, [r3, #4]
 8008260:	687a      	ldr	r2, [r7, #4]
 8008262:	429a      	cmp	r2, r3
 8008264:	d903      	bls.n	800826e <pvPortMalloc+0xa6>
 8008266:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	2b00      	cmp	r3, #0
 800826c:	d1f1      	bne.n	8008252 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800826e:	4b37      	ldr	r3, [pc, #220]	@ (800834c <pvPortMalloc+0x184>)
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008274:	429a      	cmp	r2, r3
 8008276:	d051      	beq.n	800831c <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008278:	6a3b      	ldr	r3, [r7, #32]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	2208      	movs	r2, #8
 800827e:	4413      	add	r3, r2
 8008280:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008282:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008284:	681a      	ldr	r2, [r3, #0]
 8008286:	6a3b      	ldr	r3, [r7, #32]
 8008288:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800828a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800828c:	685a      	ldr	r2, [r3, #4]
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	1ad2      	subs	r2, r2, r3
 8008292:	2308      	movs	r3, #8
 8008294:	005b      	lsls	r3, r3, #1
 8008296:	429a      	cmp	r2, r3
 8008298:	d920      	bls.n	80082dc <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800829a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	4413      	add	r3, r2
 80082a0:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80082a2:	69bb      	ldr	r3, [r7, #24]
 80082a4:	f003 0307 	and.w	r3, r3, #7
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d00b      	beq.n	80082c4 <pvPortMalloc+0xfc>
	__asm volatile
 80082ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082b0:	f383 8811 	msr	BASEPRI, r3
 80082b4:	f3bf 8f6f 	isb	sy
 80082b8:	f3bf 8f4f 	dsb	sy
 80082bc:	613b      	str	r3, [r7, #16]
}
 80082be:	bf00      	nop
 80082c0:	bf00      	nop
 80082c2:	e7fd      	b.n	80082c0 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80082c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082c6:	685a      	ldr	r2, [r3, #4]
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	1ad2      	subs	r2, r2, r3
 80082cc:	69bb      	ldr	r3, [r7, #24]
 80082ce:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80082d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082d2:	687a      	ldr	r2, [r7, #4]
 80082d4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80082d6:	69b8      	ldr	r0, [r7, #24]
 80082d8:	f000 f90a 	bl	80084f0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80082dc:	4b1d      	ldr	r3, [pc, #116]	@ (8008354 <pvPortMalloc+0x18c>)
 80082de:	681a      	ldr	r2, [r3, #0]
 80082e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082e2:	685b      	ldr	r3, [r3, #4]
 80082e4:	1ad3      	subs	r3, r2, r3
 80082e6:	4a1b      	ldr	r2, [pc, #108]	@ (8008354 <pvPortMalloc+0x18c>)
 80082e8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80082ea:	4b1a      	ldr	r3, [pc, #104]	@ (8008354 <pvPortMalloc+0x18c>)
 80082ec:	681a      	ldr	r2, [r3, #0]
 80082ee:	4b1b      	ldr	r3, [pc, #108]	@ (800835c <pvPortMalloc+0x194>)
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	429a      	cmp	r2, r3
 80082f4:	d203      	bcs.n	80082fe <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80082f6:	4b17      	ldr	r3, [pc, #92]	@ (8008354 <pvPortMalloc+0x18c>)
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	4a18      	ldr	r2, [pc, #96]	@ (800835c <pvPortMalloc+0x194>)
 80082fc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80082fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008300:	685a      	ldr	r2, [r3, #4]
 8008302:	4b13      	ldr	r3, [pc, #76]	@ (8008350 <pvPortMalloc+0x188>)
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	431a      	orrs	r2, r3
 8008308:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800830a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800830c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800830e:	2200      	movs	r2, #0
 8008310:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8008312:	4b13      	ldr	r3, [pc, #76]	@ (8008360 <pvPortMalloc+0x198>)
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	3301      	adds	r3, #1
 8008318:	4a11      	ldr	r2, [pc, #68]	@ (8008360 <pvPortMalloc+0x198>)
 800831a:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800831c:	f001 fbb2 	bl	8009a84 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008320:	69fb      	ldr	r3, [r7, #28]
 8008322:	f003 0307 	and.w	r3, r3, #7
 8008326:	2b00      	cmp	r3, #0
 8008328:	d00b      	beq.n	8008342 <pvPortMalloc+0x17a>
	__asm volatile
 800832a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800832e:	f383 8811 	msr	BASEPRI, r3
 8008332:	f3bf 8f6f 	isb	sy
 8008336:	f3bf 8f4f 	dsb	sy
 800833a:	60fb      	str	r3, [r7, #12]
}
 800833c:	bf00      	nop
 800833e:	bf00      	nop
 8008340:	e7fd      	b.n	800833e <pvPortMalloc+0x176>
	return pvReturn;
 8008342:	69fb      	ldr	r3, [r7, #28]
}
 8008344:	4618      	mov	r0, r3
 8008346:	3728      	adds	r7, #40	@ 0x28
 8008348:	46bd      	mov	sp, r7
 800834a:	bd80      	pop	{r7, pc}
 800834c:	20004f68 	.word	0x20004f68
 8008350:	20004f7c 	.word	0x20004f7c
 8008354:	20004f6c 	.word	0x20004f6c
 8008358:	20004f60 	.word	0x20004f60
 800835c:	20004f70 	.word	0x20004f70
 8008360:	20004f74 	.word	0x20004f74

08008364 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008364:	b580      	push	{r7, lr}
 8008366:	b086      	sub	sp, #24
 8008368:	af00      	add	r7, sp, #0
 800836a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	2b00      	cmp	r3, #0
 8008374:	d04f      	beq.n	8008416 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008376:	2308      	movs	r3, #8
 8008378:	425b      	negs	r3, r3
 800837a:	697a      	ldr	r2, [r7, #20]
 800837c:	4413      	add	r3, r2
 800837e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008380:	697b      	ldr	r3, [r7, #20]
 8008382:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008384:	693b      	ldr	r3, [r7, #16]
 8008386:	685a      	ldr	r2, [r3, #4]
 8008388:	4b25      	ldr	r3, [pc, #148]	@ (8008420 <vPortFree+0xbc>)
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	4013      	ands	r3, r2
 800838e:	2b00      	cmp	r3, #0
 8008390:	d10b      	bne.n	80083aa <vPortFree+0x46>
	__asm volatile
 8008392:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008396:	f383 8811 	msr	BASEPRI, r3
 800839a:	f3bf 8f6f 	isb	sy
 800839e:	f3bf 8f4f 	dsb	sy
 80083a2:	60fb      	str	r3, [r7, #12]
}
 80083a4:	bf00      	nop
 80083a6:	bf00      	nop
 80083a8:	e7fd      	b.n	80083a6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80083aa:	693b      	ldr	r3, [r7, #16]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d00b      	beq.n	80083ca <vPortFree+0x66>
	__asm volatile
 80083b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083b6:	f383 8811 	msr	BASEPRI, r3
 80083ba:	f3bf 8f6f 	isb	sy
 80083be:	f3bf 8f4f 	dsb	sy
 80083c2:	60bb      	str	r3, [r7, #8]
}
 80083c4:	bf00      	nop
 80083c6:	bf00      	nop
 80083c8:	e7fd      	b.n	80083c6 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80083ca:	693b      	ldr	r3, [r7, #16]
 80083cc:	685a      	ldr	r2, [r3, #4]
 80083ce:	4b14      	ldr	r3, [pc, #80]	@ (8008420 <vPortFree+0xbc>)
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	4013      	ands	r3, r2
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d01e      	beq.n	8008416 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80083d8:	693b      	ldr	r3, [r7, #16]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d11a      	bne.n	8008416 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80083e0:	693b      	ldr	r3, [r7, #16]
 80083e2:	685a      	ldr	r2, [r3, #4]
 80083e4:	4b0e      	ldr	r3, [pc, #56]	@ (8008420 <vPortFree+0xbc>)
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	43db      	mvns	r3, r3
 80083ea:	401a      	ands	r2, r3
 80083ec:	693b      	ldr	r3, [r7, #16]
 80083ee:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80083f0:	f001 fb3a 	bl	8009a68 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80083f4:	693b      	ldr	r3, [r7, #16]
 80083f6:	685a      	ldr	r2, [r3, #4]
 80083f8:	4b0a      	ldr	r3, [pc, #40]	@ (8008424 <vPortFree+0xc0>)
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	4413      	add	r3, r2
 80083fe:	4a09      	ldr	r2, [pc, #36]	@ (8008424 <vPortFree+0xc0>)
 8008400:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008402:	6938      	ldr	r0, [r7, #16]
 8008404:	f000 f874 	bl	80084f0 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008408:	4b07      	ldr	r3, [pc, #28]	@ (8008428 <vPortFree+0xc4>)
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	3301      	adds	r3, #1
 800840e:	4a06      	ldr	r2, [pc, #24]	@ (8008428 <vPortFree+0xc4>)
 8008410:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8008412:	f001 fb37 	bl	8009a84 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008416:	bf00      	nop
 8008418:	3718      	adds	r7, #24
 800841a:	46bd      	mov	sp, r7
 800841c:	bd80      	pop	{r7, pc}
 800841e:	bf00      	nop
 8008420:	20004f7c 	.word	0x20004f7c
 8008424:	20004f6c 	.word	0x20004f6c
 8008428:	20004f78 	.word	0x20004f78

0800842c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800842c:	b480      	push	{r7}
 800842e:	b085      	sub	sp, #20
 8008430:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008432:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8008436:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008438:	4b27      	ldr	r3, [pc, #156]	@ (80084d8 <prvHeapInit+0xac>)
 800843a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	f003 0307 	and.w	r3, r3, #7
 8008442:	2b00      	cmp	r3, #0
 8008444:	d00c      	beq.n	8008460 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	3307      	adds	r3, #7
 800844a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	f023 0307 	bic.w	r3, r3, #7
 8008452:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008454:	68ba      	ldr	r2, [r7, #8]
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	1ad3      	subs	r3, r2, r3
 800845a:	4a1f      	ldr	r2, [pc, #124]	@ (80084d8 <prvHeapInit+0xac>)
 800845c:	4413      	add	r3, r2
 800845e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008464:	4a1d      	ldr	r2, [pc, #116]	@ (80084dc <prvHeapInit+0xb0>)
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800846a:	4b1c      	ldr	r3, [pc, #112]	@ (80084dc <prvHeapInit+0xb0>)
 800846c:	2200      	movs	r2, #0
 800846e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	68ba      	ldr	r2, [r7, #8]
 8008474:	4413      	add	r3, r2
 8008476:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008478:	2208      	movs	r2, #8
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	1a9b      	subs	r3, r3, r2
 800847e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	f023 0307 	bic.w	r3, r3, #7
 8008486:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	4a15      	ldr	r2, [pc, #84]	@ (80084e0 <prvHeapInit+0xb4>)
 800848c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800848e:	4b14      	ldr	r3, [pc, #80]	@ (80084e0 <prvHeapInit+0xb4>)
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	2200      	movs	r2, #0
 8008494:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008496:	4b12      	ldr	r3, [pc, #72]	@ (80084e0 <prvHeapInit+0xb4>)
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	2200      	movs	r2, #0
 800849c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80084a2:	683b      	ldr	r3, [r7, #0]
 80084a4:	68fa      	ldr	r2, [r7, #12]
 80084a6:	1ad2      	subs	r2, r2, r3
 80084a8:	683b      	ldr	r3, [r7, #0]
 80084aa:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80084ac:	4b0c      	ldr	r3, [pc, #48]	@ (80084e0 <prvHeapInit+0xb4>)
 80084ae:	681a      	ldr	r2, [r3, #0]
 80084b0:	683b      	ldr	r3, [r7, #0]
 80084b2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80084b4:	683b      	ldr	r3, [r7, #0]
 80084b6:	685b      	ldr	r3, [r3, #4]
 80084b8:	4a0a      	ldr	r2, [pc, #40]	@ (80084e4 <prvHeapInit+0xb8>)
 80084ba:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80084bc:	683b      	ldr	r3, [r7, #0]
 80084be:	685b      	ldr	r3, [r3, #4]
 80084c0:	4a09      	ldr	r2, [pc, #36]	@ (80084e8 <prvHeapInit+0xbc>)
 80084c2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80084c4:	4b09      	ldr	r3, [pc, #36]	@ (80084ec <prvHeapInit+0xc0>)
 80084c6:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80084ca:	601a      	str	r2, [r3, #0]
}
 80084cc:	bf00      	nop
 80084ce:	3714      	adds	r7, #20
 80084d0:	46bd      	mov	sp, r7
 80084d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084d6:	4770      	bx	lr
 80084d8:	20001360 	.word	0x20001360
 80084dc:	20004f60 	.word	0x20004f60
 80084e0:	20004f68 	.word	0x20004f68
 80084e4:	20004f70 	.word	0x20004f70
 80084e8:	20004f6c 	.word	0x20004f6c
 80084ec:	20004f7c 	.word	0x20004f7c

080084f0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80084f0:	b480      	push	{r7}
 80084f2:	b085      	sub	sp, #20
 80084f4:	af00      	add	r7, sp, #0
 80084f6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80084f8:	4b28      	ldr	r3, [pc, #160]	@ (800859c <prvInsertBlockIntoFreeList+0xac>)
 80084fa:	60fb      	str	r3, [r7, #12]
 80084fc:	e002      	b.n	8008504 <prvInsertBlockIntoFreeList+0x14>
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	60fb      	str	r3, [r7, #12]
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	687a      	ldr	r2, [r7, #4]
 800850a:	429a      	cmp	r2, r3
 800850c:	d8f7      	bhi.n	80084fe <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	685b      	ldr	r3, [r3, #4]
 8008516:	68ba      	ldr	r2, [r7, #8]
 8008518:	4413      	add	r3, r2
 800851a:	687a      	ldr	r2, [r7, #4]
 800851c:	429a      	cmp	r2, r3
 800851e:	d108      	bne.n	8008532 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	685a      	ldr	r2, [r3, #4]
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	685b      	ldr	r3, [r3, #4]
 8008528:	441a      	add	r2, r3
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	685b      	ldr	r3, [r3, #4]
 800853a:	68ba      	ldr	r2, [r7, #8]
 800853c:	441a      	add	r2, r3
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	429a      	cmp	r2, r3
 8008544:	d118      	bne.n	8008578 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	681a      	ldr	r2, [r3, #0]
 800854a:	4b15      	ldr	r3, [pc, #84]	@ (80085a0 <prvInsertBlockIntoFreeList+0xb0>)
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	429a      	cmp	r2, r3
 8008550:	d00d      	beq.n	800856e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	685a      	ldr	r2, [r3, #4]
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	685b      	ldr	r3, [r3, #4]
 800855c:	441a      	add	r2, r3
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	681a      	ldr	r2, [r3, #0]
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	601a      	str	r2, [r3, #0]
 800856c:	e008      	b.n	8008580 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800856e:	4b0c      	ldr	r3, [pc, #48]	@ (80085a0 <prvInsertBlockIntoFreeList+0xb0>)
 8008570:	681a      	ldr	r2, [r3, #0]
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	601a      	str	r2, [r3, #0]
 8008576:	e003      	b.n	8008580 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	681a      	ldr	r2, [r3, #0]
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008580:	68fa      	ldr	r2, [r7, #12]
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	429a      	cmp	r2, r3
 8008586:	d002      	beq.n	800858e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	687a      	ldr	r2, [r7, #4]
 800858c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800858e:	bf00      	nop
 8008590:	3714      	adds	r7, #20
 8008592:	46bd      	mov	sp, r7
 8008594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008598:	4770      	bx	lr
 800859a:	bf00      	nop
 800859c:	20004f60 	.word	0x20004f60
 80085a0:	20004f68 	.word	0x20004f68

080085a4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80085a4:	b480      	push	{r7}
 80085a6:	b083      	sub	sp, #12
 80085a8:	af00      	add	r7, sp, #0
 80085aa:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	f103 0208 	add.w	r2, r3, #8
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	f04f 32ff 	mov.w	r2, #4294967295
 80085bc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	f103 0208 	add.w	r2, r3, #8
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	f103 0208 	add.w	r2, r3, #8
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	2200      	movs	r2, #0
 80085d6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80085d8:	bf00      	nop
 80085da:	370c      	adds	r7, #12
 80085dc:	46bd      	mov	sp, r7
 80085de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085e2:	4770      	bx	lr

080085e4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80085e4:	b480      	push	{r7}
 80085e6:	b083      	sub	sp, #12
 80085e8:	af00      	add	r7, sp, #0
 80085ea:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	2200      	movs	r2, #0
 80085f0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80085f2:	bf00      	nop
 80085f4:	370c      	adds	r7, #12
 80085f6:	46bd      	mov	sp, r7
 80085f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085fc:	4770      	bx	lr

080085fe <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80085fe:	b480      	push	{r7}
 8008600:	b085      	sub	sp, #20
 8008602:	af00      	add	r7, sp, #0
 8008604:	6078      	str	r0, [r7, #4]
 8008606:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	685b      	ldr	r3, [r3, #4]
 800860c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800860e:	683b      	ldr	r3, [r7, #0]
 8008610:	68fa      	ldr	r2, [r7, #12]
 8008612:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	689a      	ldr	r2, [r3, #8]
 8008618:	683b      	ldr	r3, [r7, #0]
 800861a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	689b      	ldr	r3, [r3, #8]
 8008620:	683a      	ldr	r2, [r7, #0]
 8008622:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	683a      	ldr	r2, [r7, #0]
 8008628:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800862a:	683b      	ldr	r3, [r7, #0]
 800862c:	687a      	ldr	r2, [r7, #4]
 800862e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	1c5a      	adds	r2, r3, #1
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	601a      	str	r2, [r3, #0]
}
 800863a:	bf00      	nop
 800863c:	3714      	adds	r7, #20
 800863e:	46bd      	mov	sp, r7
 8008640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008644:	4770      	bx	lr

08008646 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008646:	b480      	push	{r7}
 8008648:	b085      	sub	sp, #20
 800864a:	af00      	add	r7, sp, #0
 800864c:	6078      	str	r0, [r7, #4]
 800864e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008650:	683b      	ldr	r3, [r7, #0]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008656:	68bb      	ldr	r3, [r7, #8]
 8008658:	f1b3 3fff 	cmp.w	r3, #4294967295
 800865c:	d103      	bne.n	8008666 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	691b      	ldr	r3, [r3, #16]
 8008662:	60fb      	str	r3, [r7, #12]
 8008664:	e00c      	b.n	8008680 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	3308      	adds	r3, #8
 800866a:	60fb      	str	r3, [r7, #12]
 800866c:	e002      	b.n	8008674 <vListInsert+0x2e>
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	685b      	ldr	r3, [r3, #4]
 8008672:	60fb      	str	r3, [r7, #12]
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	685b      	ldr	r3, [r3, #4]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	68ba      	ldr	r2, [r7, #8]
 800867c:	429a      	cmp	r2, r3
 800867e:	d2f6      	bcs.n	800866e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	685a      	ldr	r2, [r3, #4]
 8008684:	683b      	ldr	r3, [r7, #0]
 8008686:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008688:	683b      	ldr	r3, [r7, #0]
 800868a:	685b      	ldr	r3, [r3, #4]
 800868c:	683a      	ldr	r2, [r7, #0]
 800868e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008690:	683b      	ldr	r3, [r7, #0]
 8008692:	68fa      	ldr	r2, [r7, #12]
 8008694:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	683a      	ldr	r2, [r7, #0]
 800869a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800869c:	683b      	ldr	r3, [r7, #0]
 800869e:	687a      	ldr	r2, [r7, #4]
 80086a0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	1c5a      	adds	r2, r3, #1
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	601a      	str	r2, [r3, #0]
}
 80086ac:	bf00      	nop
 80086ae:	3714      	adds	r7, #20
 80086b0:	46bd      	mov	sp, r7
 80086b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086b6:	4770      	bx	lr

080086b8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80086b8:	b480      	push	{r7}
 80086ba:	b085      	sub	sp, #20
 80086bc:	af00      	add	r7, sp, #0
 80086be:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	691b      	ldr	r3, [r3, #16]
 80086c4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	685b      	ldr	r3, [r3, #4]
 80086ca:	687a      	ldr	r2, [r7, #4]
 80086cc:	6892      	ldr	r2, [r2, #8]
 80086ce:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	689b      	ldr	r3, [r3, #8]
 80086d4:	687a      	ldr	r2, [r7, #4]
 80086d6:	6852      	ldr	r2, [r2, #4]
 80086d8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	685b      	ldr	r3, [r3, #4]
 80086de:	687a      	ldr	r2, [r7, #4]
 80086e0:	429a      	cmp	r2, r3
 80086e2:	d103      	bne.n	80086ec <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	689a      	ldr	r2, [r3, #8]
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	2200      	movs	r2, #0
 80086f0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	1e5a      	subs	r2, r3, #1
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	681b      	ldr	r3, [r3, #0]
}
 8008700:	4618      	mov	r0, r3
 8008702:	3714      	adds	r7, #20
 8008704:	46bd      	mov	sp, r7
 8008706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800870a:	4770      	bx	lr

0800870c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800870c:	b480      	push	{r7}
 800870e:	b085      	sub	sp, #20
 8008710:	af00      	add	r7, sp, #0
 8008712:	60f8      	str	r0, [r7, #12]
 8008714:	60b9      	str	r1, [r7, #8]
 8008716:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	3b04      	subs	r3, #4
 800871c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8008724:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	3b04      	subs	r3, #4
 800872a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800872c:	68bb      	ldr	r3, [r7, #8]
 800872e:	f023 0201 	bic.w	r2, r3, #1
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	3b04      	subs	r3, #4
 800873a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800873c:	4a0c      	ldr	r2, [pc, #48]	@ (8008770 <pxPortInitialiseStack+0x64>)
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	3b14      	subs	r3, #20
 8008746:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008748:	687a      	ldr	r2, [r7, #4]
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	3b04      	subs	r3, #4
 8008752:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	f06f 0202 	mvn.w	r2, #2
 800875a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	3b20      	subs	r3, #32
 8008760:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008762:	68fb      	ldr	r3, [r7, #12]
}
 8008764:	4618      	mov	r0, r3
 8008766:	3714      	adds	r7, #20
 8008768:	46bd      	mov	sp, r7
 800876a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800876e:	4770      	bx	lr
 8008770:	08008775 	.word	0x08008775

08008774 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008774:	b480      	push	{r7}
 8008776:	b085      	sub	sp, #20
 8008778:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800877a:	2300      	movs	r3, #0
 800877c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800877e:	4b13      	ldr	r3, [pc, #76]	@ (80087cc <prvTaskExitError+0x58>)
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008786:	d00b      	beq.n	80087a0 <prvTaskExitError+0x2c>
	__asm volatile
 8008788:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800878c:	f383 8811 	msr	BASEPRI, r3
 8008790:	f3bf 8f6f 	isb	sy
 8008794:	f3bf 8f4f 	dsb	sy
 8008798:	60fb      	str	r3, [r7, #12]
}
 800879a:	bf00      	nop
 800879c:	bf00      	nop
 800879e:	e7fd      	b.n	800879c <prvTaskExitError+0x28>
	__asm volatile
 80087a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087a4:	f383 8811 	msr	BASEPRI, r3
 80087a8:	f3bf 8f6f 	isb	sy
 80087ac:	f3bf 8f4f 	dsb	sy
 80087b0:	60bb      	str	r3, [r7, #8]
}
 80087b2:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80087b4:	bf00      	nop
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d0fc      	beq.n	80087b6 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80087bc:	bf00      	nop
 80087be:	bf00      	nop
 80087c0:	3714      	adds	r7, #20
 80087c2:	46bd      	mov	sp, r7
 80087c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087c8:	4770      	bx	lr
 80087ca:	bf00      	nop
 80087cc:	20000020 	.word	0x20000020

080087d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80087d0:	4b07      	ldr	r3, [pc, #28]	@ (80087f0 <pxCurrentTCBConst2>)
 80087d2:	6819      	ldr	r1, [r3, #0]
 80087d4:	6808      	ldr	r0, [r1, #0]
 80087d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087da:	f380 8809 	msr	PSP, r0
 80087de:	f3bf 8f6f 	isb	sy
 80087e2:	f04f 0000 	mov.w	r0, #0
 80087e6:	f380 8811 	msr	BASEPRI, r0
 80087ea:	4770      	bx	lr
 80087ec:	f3af 8000 	nop.w

080087f0 <pxCurrentTCBConst2>:
 80087f0:	20004fc8 	.word	0x20004fc8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80087f4:	bf00      	nop
 80087f6:	bf00      	nop

080087f8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80087f8:	4808      	ldr	r0, [pc, #32]	@ (800881c <prvPortStartFirstTask+0x24>)
 80087fa:	6800      	ldr	r0, [r0, #0]
 80087fc:	6800      	ldr	r0, [r0, #0]
 80087fe:	f380 8808 	msr	MSP, r0
 8008802:	f04f 0000 	mov.w	r0, #0
 8008806:	f380 8814 	msr	CONTROL, r0
 800880a:	b662      	cpsie	i
 800880c:	b661      	cpsie	f
 800880e:	f3bf 8f4f 	dsb	sy
 8008812:	f3bf 8f6f 	isb	sy
 8008816:	df00      	svc	0
 8008818:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800881a:	bf00      	nop
 800881c:	e000ed08 	.word	0xe000ed08

08008820 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008820:	b580      	push	{r7, lr}
 8008822:	b086      	sub	sp, #24
 8008824:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008826:	4b47      	ldr	r3, [pc, #284]	@ (8008944 <xPortStartScheduler+0x124>)
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	4a47      	ldr	r2, [pc, #284]	@ (8008948 <xPortStartScheduler+0x128>)
 800882c:	4293      	cmp	r3, r2
 800882e:	d10b      	bne.n	8008848 <xPortStartScheduler+0x28>
	__asm volatile
 8008830:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008834:	f383 8811 	msr	BASEPRI, r3
 8008838:	f3bf 8f6f 	isb	sy
 800883c:	f3bf 8f4f 	dsb	sy
 8008840:	60fb      	str	r3, [r7, #12]
}
 8008842:	bf00      	nop
 8008844:	bf00      	nop
 8008846:	e7fd      	b.n	8008844 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008848:	4b3e      	ldr	r3, [pc, #248]	@ (8008944 <xPortStartScheduler+0x124>)
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	4a3f      	ldr	r2, [pc, #252]	@ (800894c <xPortStartScheduler+0x12c>)
 800884e:	4293      	cmp	r3, r2
 8008850:	d10b      	bne.n	800886a <xPortStartScheduler+0x4a>
	__asm volatile
 8008852:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008856:	f383 8811 	msr	BASEPRI, r3
 800885a:	f3bf 8f6f 	isb	sy
 800885e:	f3bf 8f4f 	dsb	sy
 8008862:	613b      	str	r3, [r7, #16]
}
 8008864:	bf00      	nop
 8008866:	bf00      	nop
 8008868:	e7fd      	b.n	8008866 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800886a:	4b39      	ldr	r3, [pc, #228]	@ (8008950 <xPortStartScheduler+0x130>)
 800886c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800886e:	697b      	ldr	r3, [r7, #20]
 8008870:	781b      	ldrb	r3, [r3, #0]
 8008872:	b2db      	uxtb	r3, r3
 8008874:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008876:	697b      	ldr	r3, [r7, #20]
 8008878:	22ff      	movs	r2, #255	@ 0xff
 800887a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800887c:	697b      	ldr	r3, [r7, #20]
 800887e:	781b      	ldrb	r3, [r3, #0]
 8008880:	b2db      	uxtb	r3, r3
 8008882:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008884:	78fb      	ldrb	r3, [r7, #3]
 8008886:	b2db      	uxtb	r3, r3
 8008888:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800888c:	b2da      	uxtb	r2, r3
 800888e:	4b31      	ldr	r3, [pc, #196]	@ (8008954 <xPortStartScheduler+0x134>)
 8008890:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008892:	4b31      	ldr	r3, [pc, #196]	@ (8008958 <xPortStartScheduler+0x138>)
 8008894:	2207      	movs	r2, #7
 8008896:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008898:	e009      	b.n	80088ae <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800889a:	4b2f      	ldr	r3, [pc, #188]	@ (8008958 <xPortStartScheduler+0x138>)
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	3b01      	subs	r3, #1
 80088a0:	4a2d      	ldr	r2, [pc, #180]	@ (8008958 <xPortStartScheduler+0x138>)
 80088a2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80088a4:	78fb      	ldrb	r3, [r7, #3]
 80088a6:	b2db      	uxtb	r3, r3
 80088a8:	005b      	lsls	r3, r3, #1
 80088aa:	b2db      	uxtb	r3, r3
 80088ac:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80088ae:	78fb      	ldrb	r3, [r7, #3]
 80088b0:	b2db      	uxtb	r3, r3
 80088b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80088b6:	2b80      	cmp	r3, #128	@ 0x80
 80088b8:	d0ef      	beq.n	800889a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80088ba:	4b27      	ldr	r3, [pc, #156]	@ (8008958 <xPortStartScheduler+0x138>)
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	f1c3 0307 	rsb	r3, r3, #7
 80088c2:	2b04      	cmp	r3, #4
 80088c4:	d00b      	beq.n	80088de <xPortStartScheduler+0xbe>
	__asm volatile
 80088c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088ca:	f383 8811 	msr	BASEPRI, r3
 80088ce:	f3bf 8f6f 	isb	sy
 80088d2:	f3bf 8f4f 	dsb	sy
 80088d6:	60bb      	str	r3, [r7, #8]
}
 80088d8:	bf00      	nop
 80088da:	bf00      	nop
 80088dc:	e7fd      	b.n	80088da <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80088de:	4b1e      	ldr	r3, [pc, #120]	@ (8008958 <xPortStartScheduler+0x138>)
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	021b      	lsls	r3, r3, #8
 80088e4:	4a1c      	ldr	r2, [pc, #112]	@ (8008958 <xPortStartScheduler+0x138>)
 80088e6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80088e8:	4b1b      	ldr	r3, [pc, #108]	@ (8008958 <xPortStartScheduler+0x138>)
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80088f0:	4a19      	ldr	r2, [pc, #100]	@ (8008958 <xPortStartScheduler+0x138>)
 80088f2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	b2da      	uxtb	r2, r3
 80088f8:	697b      	ldr	r3, [r7, #20]
 80088fa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80088fc:	4b17      	ldr	r3, [pc, #92]	@ (800895c <xPortStartScheduler+0x13c>)
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	4a16      	ldr	r2, [pc, #88]	@ (800895c <xPortStartScheduler+0x13c>)
 8008902:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8008906:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008908:	4b14      	ldr	r3, [pc, #80]	@ (800895c <xPortStartScheduler+0x13c>)
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	4a13      	ldr	r2, [pc, #76]	@ (800895c <xPortStartScheduler+0x13c>)
 800890e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8008912:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008914:	f000 f8da 	bl	8008acc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008918:	4b11      	ldr	r3, [pc, #68]	@ (8008960 <xPortStartScheduler+0x140>)
 800891a:	2200      	movs	r2, #0
 800891c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800891e:	f000 f8f9 	bl	8008b14 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008922:	4b10      	ldr	r3, [pc, #64]	@ (8008964 <xPortStartScheduler+0x144>)
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	4a0f      	ldr	r2, [pc, #60]	@ (8008964 <xPortStartScheduler+0x144>)
 8008928:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800892c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800892e:	f7ff ff63 	bl	80087f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008932:	f001 fa0f 	bl	8009d54 <vTaskSwitchContext>
	prvTaskExitError();
 8008936:	f7ff ff1d 	bl	8008774 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800893a:	2300      	movs	r3, #0
}
 800893c:	4618      	mov	r0, r3
 800893e:	3718      	adds	r7, #24
 8008940:	46bd      	mov	sp, r7
 8008942:	bd80      	pop	{r7, pc}
 8008944:	e000ed00 	.word	0xe000ed00
 8008948:	410fc271 	.word	0x410fc271
 800894c:	410fc270 	.word	0x410fc270
 8008950:	e000e400 	.word	0xe000e400
 8008954:	20004f80 	.word	0x20004f80
 8008958:	20004f84 	.word	0x20004f84
 800895c:	e000ed20 	.word	0xe000ed20
 8008960:	20000020 	.word	0x20000020
 8008964:	e000ef34 	.word	0xe000ef34

08008968 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008968:	b480      	push	{r7}
 800896a:	b083      	sub	sp, #12
 800896c:	af00      	add	r7, sp, #0
	__asm volatile
 800896e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008972:	f383 8811 	msr	BASEPRI, r3
 8008976:	f3bf 8f6f 	isb	sy
 800897a:	f3bf 8f4f 	dsb	sy
 800897e:	607b      	str	r3, [r7, #4]
}
 8008980:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008982:	4b10      	ldr	r3, [pc, #64]	@ (80089c4 <vPortEnterCritical+0x5c>)
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	3301      	adds	r3, #1
 8008988:	4a0e      	ldr	r2, [pc, #56]	@ (80089c4 <vPortEnterCritical+0x5c>)
 800898a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800898c:	4b0d      	ldr	r3, [pc, #52]	@ (80089c4 <vPortEnterCritical+0x5c>)
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	2b01      	cmp	r3, #1
 8008992:	d110      	bne.n	80089b6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008994:	4b0c      	ldr	r3, [pc, #48]	@ (80089c8 <vPortEnterCritical+0x60>)
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	b2db      	uxtb	r3, r3
 800899a:	2b00      	cmp	r3, #0
 800899c:	d00b      	beq.n	80089b6 <vPortEnterCritical+0x4e>
	__asm volatile
 800899e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089a2:	f383 8811 	msr	BASEPRI, r3
 80089a6:	f3bf 8f6f 	isb	sy
 80089aa:	f3bf 8f4f 	dsb	sy
 80089ae:	603b      	str	r3, [r7, #0]
}
 80089b0:	bf00      	nop
 80089b2:	bf00      	nop
 80089b4:	e7fd      	b.n	80089b2 <vPortEnterCritical+0x4a>
	}
}
 80089b6:	bf00      	nop
 80089b8:	370c      	adds	r7, #12
 80089ba:	46bd      	mov	sp, r7
 80089bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089c0:	4770      	bx	lr
 80089c2:	bf00      	nop
 80089c4:	20000020 	.word	0x20000020
 80089c8:	e000ed04 	.word	0xe000ed04

080089cc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80089cc:	b480      	push	{r7}
 80089ce:	b083      	sub	sp, #12
 80089d0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80089d2:	4b12      	ldr	r3, [pc, #72]	@ (8008a1c <vPortExitCritical+0x50>)
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d10b      	bne.n	80089f2 <vPortExitCritical+0x26>
	__asm volatile
 80089da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089de:	f383 8811 	msr	BASEPRI, r3
 80089e2:	f3bf 8f6f 	isb	sy
 80089e6:	f3bf 8f4f 	dsb	sy
 80089ea:	607b      	str	r3, [r7, #4]
}
 80089ec:	bf00      	nop
 80089ee:	bf00      	nop
 80089f0:	e7fd      	b.n	80089ee <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80089f2:	4b0a      	ldr	r3, [pc, #40]	@ (8008a1c <vPortExitCritical+0x50>)
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	3b01      	subs	r3, #1
 80089f8:	4a08      	ldr	r2, [pc, #32]	@ (8008a1c <vPortExitCritical+0x50>)
 80089fa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80089fc:	4b07      	ldr	r3, [pc, #28]	@ (8008a1c <vPortExitCritical+0x50>)
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d105      	bne.n	8008a10 <vPortExitCritical+0x44>
 8008a04:	2300      	movs	r3, #0
 8008a06:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008a08:	683b      	ldr	r3, [r7, #0]
 8008a0a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008a0e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008a10:	bf00      	nop
 8008a12:	370c      	adds	r7, #12
 8008a14:	46bd      	mov	sp, r7
 8008a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a1a:	4770      	bx	lr
 8008a1c:	20000020 	.word	0x20000020

08008a20 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008a20:	f3ef 8009 	mrs	r0, PSP
 8008a24:	f3bf 8f6f 	isb	sy
 8008a28:	4b15      	ldr	r3, [pc, #84]	@ (8008a80 <pxCurrentTCBConst>)
 8008a2a:	681a      	ldr	r2, [r3, #0]
 8008a2c:	f01e 0f10 	tst.w	lr, #16
 8008a30:	bf08      	it	eq
 8008a32:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008a36:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a3a:	6010      	str	r0, [r2, #0]
 8008a3c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008a40:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8008a44:	f380 8811 	msr	BASEPRI, r0
 8008a48:	f3bf 8f4f 	dsb	sy
 8008a4c:	f3bf 8f6f 	isb	sy
 8008a50:	f001 f980 	bl	8009d54 <vTaskSwitchContext>
 8008a54:	f04f 0000 	mov.w	r0, #0
 8008a58:	f380 8811 	msr	BASEPRI, r0
 8008a5c:	bc09      	pop	{r0, r3}
 8008a5e:	6819      	ldr	r1, [r3, #0]
 8008a60:	6808      	ldr	r0, [r1, #0]
 8008a62:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a66:	f01e 0f10 	tst.w	lr, #16
 8008a6a:	bf08      	it	eq
 8008a6c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008a70:	f380 8809 	msr	PSP, r0
 8008a74:	f3bf 8f6f 	isb	sy
 8008a78:	4770      	bx	lr
 8008a7a:	bf00      	nop
 8008a7c:	f3af 8000 	nop.w

08008a80 <pxCurrentTCBConst>:
 8008a80:	20004fc8 	.word	0x20004fc8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008a84:	bf00      	nop
 8008a86:	bf00      	nop

08008a88 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008a88:	b580      	push	{r7, lr}
 8008a8a:	b082      	sub	sp, #8
 8008a8c:	af00      	add	r7, sp, #0
	__asm volatile
 8008a8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a92:	f383 8811 	msr	BASEPRI, r3
 8008a96:	f3bf 8f6f 	isb	sy
 8008a9a:	f3bf 8f4f 	dsb	sy
 8008a9e:	607b      	str	r3, [r7, #4]
}
 8008aa0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008aa2:	f001 f89d 	bl	8009be0 <xTaskIncrementTick>
 8008aa6:	4603      	mov	r3, r0
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d003      	beq.n	8008ab4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008aac:	4b06      	ldr	r3, [pc, #24]	@ (8008ac8 <xPortSysTickHandler+0x40>)
 8008aae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008ab2:	601a      	str	r2, [r3, #0]
 8008ab4:	2300      	movs	r3, #0
 8008ab6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008ab8:	683b      	ldr	r3, [r7, #0]
 8008aba:	f383 8811 	msr	BASEPRI, r3
}
 8008abe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008ac0:	bf00      	nop
 8008ac2:	3708      	adds	r7, #8
 8008ac4:	46bd      	mov	sp, r7
 8008ac6:	bd80      	pop	{r7, pc}
 8008ac8:	e000ed04 	.word	0xe000ed04

08008acc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008acc:	b480      	push	{r7}
 8008ace:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008ad0:	4b0b      	ldr	r3, [pc, #44]	@ (8008b00 <vPortSetupTimerInterrupt+0x34>)
 8008ad2:	2200      	movs	r2, #0
 8008ad4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008ad6:	4b0b      	ldr	r3, [pc, #44]	@ (8008b04 <vPortSetupTimerInterrupt+0x38>)
 8008ad8:	2200      	movs	r2, #0
 8008ada:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008adc:	4b0a      	ldr	r3, [pc, #40]	@ (8008b08 <vPortSetupTimerInterrupt+0x3c>)
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	4a0a      	ldr	r2, [pc, #40]	@ (8008b0c <vPortSetupTimerInterrupt+0x40>)
 8008ae2:	fba2 2303 	umull	r2, r3, r2, r3
 8008ae6:	099b      	lsrs	r3, r3, #6
 8008ae8:	4a09      	ldr	r2, [pc, #36]	@ (8008b10 <vPortSetupTimerInterrupt+0x44>)
 8008aea:	3b01      	subs	r3, #1
 8008aec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008aee:	4b04      	ldr	r3, [pc, #16]	@ (8008b00 <vPortSetupTimerInterrupt+0x34>)
 8008af0:	2207      	movs	r2, #7
 8008af2:	601a      	str	r2, [r3, #0]
}
 8008af4:	bf00      	nop
 8008af6:	46bd      	mov	sp, r7
 8008af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008afc:	4770      	bx	lr
 8008afe:	bf00      	nop
 8008b00:	e000e010 	.word	0xe000e010
 8008b04:	e000e018 	.word	0xe000e018
 8008b08:	20000014 	.word	0x20000014
 8008b0c:	10624dd3 	.word	0x10624dd3
 8008b10:	e000e014 	.word	0xe000e014

08008b14 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008b14:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8008b24 <vPortEnableVFP+0x10>
 8008b18:	6801      	ldr	r1, [r0, #0]
 8008b1a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8008b1e:	6001      	str	r1, [r0, #0]
 8008b20:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008b22:	bf00      	nop
 8008b24:	e000ed88 	.word	0xe000ed88

08008b28 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008b28:	b480      	push	{r7}
 8008b2a:	b085      	sub	sp, #20
 8008b2c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008b2e:	f3ef 8305 	mrs	r3, IPSR
 8008b32:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	2b0f      	cmp	r3, #15
 8008b38:	d915      	bls.n	8008b66 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008b3a:	4a18      	ldr	r2, [pc, #96]	@ (8008b9c <vPortValidateInterruptPriority+0x74>)
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	4413      	add	r3, r2
 8008b40:	781b      	ldrb	r3, [r3, #0]
 8008b42:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008b44:	4b16      	ldr	r3, [pc, #88]	@ (8008ba0 <vPortValidateInterruptPriority+0x78>)
 8008b46:	781b      	ldrb	r3, [r3, #0]
 8008b48:	7afa      	ldrb	r2, [r7, #11]
 8008b4a:	429a      	cmp	r2, r3
 8008b4c:	d20b      	bcs.n	8008b66 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8008b4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b52:	f383 8811 	msr	BASEPRI, r3
 8008b56:	f3bf 8f6f 	isb	sy
 8008b5a:	f3bf 8f4f 	dsb	sy
 8008b5e:	607b      	str	r3, [r7, #4]
}
 8008b60:	bf00      	nop
 8008b62:	bf00      	nop
 8008b64:	e7fd      	b.n	8008b62 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008b66:	4b0f      	ldr	r3, [pc, #60]	@ (8008ba4 <vPortValidateInterruptPriority+0x7c>)
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8008b6e:	4b0e      	ldr	r3, [pc, #56]	@ (8008ba8 <vPortValidateInterruptPriority+0x80>)
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	429a      	cmp	r2, r3
 8008b74:	d90b      	bls.n	8008b8e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8008b76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b7a:	f383 8811 	msr	BASEPRI, r3
 8008b7e:	f3bf 8f6f 	isb	sy
 8008b82:	f3bf 8f4f 	dsb	sy
 8008b86:	603b      	str	r3, [r7, #0]
}
 8008b88:	bf00      	nop
 8008b8a:	bf00      	nop
 8008b8c:	e7fd      	b.n	8008b8a <vPortValidateInterruptPriority+0x62>
	}
 8008b8e:	bf00      	nop
 8008b90:	3714      	adds	r7, #20
 8008b92:	46bd      	mov	sp, r7
 8008b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b98:	4770      	bx	lr
 8008b9a:	bf00      	nop
 8008b9c:	e000e3f0 	.word	0xe000e3f0
 8008ba0:	20004f80 	.word	0x20004f80
 8008ba4:	e000ed0c 	.word	0xe000ed0c
 8008ba8:	20004f84 	.word	0x20004f84

08008bac <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008bac:	b580      	push	{r7, lr}
 8008bae:	b084      	sub	sp, #16
 8008bb0:	af00      	add	r7, sp, #0
 8008bb2:	6078      	str	r0, [r7, #4]
 8008bb4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d10b      	bne.n	8008bd8 <xQueueGenericReset+0x2c>
	__asm volatile
 8008bc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008bc4:	f383 8811 	msr	BASEPRI, r3
 8008bc8:	f3bf 8f6f 	isb	sy
 8008bcc:	f3bf 8f4f 	dsb	sy
 8008bd0:	60bb      	str	r3, [r7, #8]
}
 8008bd2:	bf00      	nop
 8008bd4:	bf00      	nop
 8008bd6:	e7fd      	b.n	8008bd4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8008bd8:	f7ff fec6 	bl	8008968 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	681a      	ldr	r2, [r3, #0]
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008be4:	68f9      	ldr	r1, [r7, #12]
 8008be6:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8008be8:	fb01 f303 	mul.w	r3, r1, r3
 8008bec:	441a      	add	r2, r3
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	2200      	movs	r2, #0
 8008bf6:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	681a      	ldr	r2, [r3, #0]
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	681a      	ldr	r2, [r3, #0]
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008c08:	3b01      	subs	r3, #1
 8008c0a:	68f9      	ldr	r1, [r7, #12]
 8008c0c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8008c0e:	fb01 f303 	mul.w	r3, r1, r3
 8008c12:	441a      	add	r2, r3
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	22ff      	movs	r2, #255	@ 0xff
 8008c1c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	22ff      	movs	r2, #255	@ 0xff
 8008c24:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8008c28:	683b      	ldr	r3, [r7, #0]
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d114      	bne.n	8008c58 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	691b      	ldr	r3, [r3, #16]
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d01a      	beq.n	8008c6c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	3310      	adds	r3, #16
 8008c3a:	4618      	mov	r0, r3
 8008c3c:	f001 f942 	bl	8009ec4 <xTaskRemoveFromEventList>
 8008c40:	4603      	mov	r3, r0
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d012      	beq.n	8008c6c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008c46:	4b0d      	ldr	r3, [pc, #52]	@ (8008c7c <xQueueGenericReset+0xd0>)
 8008c48:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008c4c:	601a      	str	r2, [r3, #0]
 8008c4e:	f3bf 8f4f 	dsb	sy
 8008c52:	f3bf 8f6f 	isb	sy
 8008c56:	e009      	b.n	8008c6c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	3310      	adds	r3, #16
 8008c5c:	4618      	mov	r0, r3
 8008c5e:	f7ff fca1 	bl	80085a4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	3324      	adds	r3, #36	@ 0x24
 8008c66:	4618      	mov	r0, r3
 8008c68:	f7ff fc9c 	bl	80085a4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008c6c:	f7ff feae 	bl	80089cc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008c70:	2301      	movs	r3, #1
}
 8008c72:	4618      	mov	r0, r3
 8008c74:	3710      	adds	r7, #16
 8008c76:	46bd      	mov	sp, r7
 8008c78:	bd80      	pop	{r7, pc}
 8008c7a:	bf00      	nop
 8008c7c:	e000ed04 	.word	0xe000ed04

08008c80 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008c80:	b580      	push	{r7, lr}
 8008c82:	b08e      	sub	sp, #56	@ 0x38
 8008c84:	af02      	add	r7, sp, #8
 8008c86:	60f8      	str	r0, [r7, #12]
 8008c88:	60b9      	str	r1, [r7, #8]
 8008c8a:	607a      	str	r2, [r7, #4]
 8008c8c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d10b      	bne.n	8008cac <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8008c94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c98:	f383 8811 	msr	BASEPRI, r3
 8008c9c:	f3bf 8f6f 	isb	sy
 8008ca0:	f3bf 8f4f 	dsb	sy
 8008ca4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8008ca6:	bf00      	nop
 8008ca8:	bf00      	nop
 8008caa:	e7fd      	b.n	8008ca8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008cac:	683b      	ldr	r3, [r7, #0]
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d10b      	bne.n	8008cca <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8008cb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008cb6:	f383 8811 	msr	BASEPRI, r3
 8008cba:	f3bf 8f6f 	isb	sy
 8008cbe:	f3bf 8f4f 	dsb	sy
 8008cc2:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8008cc4:	bf00      	nop
 8008cc6:	bf00      	nop
 8008cc8:	e7fd      	b.n	8008cc6 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d002      	beq.n	8008cd6 <xQueueGenericCreateStatic+0x56>
 8008cd0:	68bb      	ldr	r3, [r7, #8]
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d001      	beq.n	8008cda <xQueueGenericCreateStatic+0x5a>
 8008cd6:	2301      	movs	r3, #1
 8008cd8:	e000      	b.n	8008cdc <xQueueGenericCreateStatic+0x5c>
 8008cda:	2300      	movs	r3, #0
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d10b      	bne.n	8008cf8 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8008ce0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ce4:	f383 8811 	msr	BASEPRI, r3
 8008ce8:	f3bf 8f6f 	isb	sy
 8008cec:	f3bf 8f4f 	dsb	sy
 8008cf0:	623b      	str	r3, [r7, #32]
}
 8008cf2:	bf00      	nop
 8008cf4:	bf00      	nop
 8008cf6:	e7fd      	b.n	8008cf4 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d102      	bne.n	8008d04 <xQueueGenericCreateStatic+0x84>
 8008cfe:	68bb      	ldr	r3, [r7, #8]
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d101      	bne.n	8008d08 <xQueueGenericCreateStatic+0x88>
 8008d04:	2301      	movs	r3, #1
 8008d06:	e000      	b.n	8008d0a <xQueueGenericCreateStatic+0x8a>
 8008d08:	2300      	movs	r3, #0
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d10b      	bne.n	8008d26 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8008d0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d12:	f383 8811 	msr	BASEPRI, r3
 8008d16:	f3bf 8f6f 	isb	sy
 8008d1a:	f3bf 8f4f 	dsb	sy
 8008d1e:	61fb      	str	r3, [r7, #28]
}
 8008d20:	bf00      	nop
 8008d22:	bf00      	nop
 8008d24:	e7fd      	b.n	8008d22 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8008d26:	2350      	movs	r3, #80	@ 0x50
 8008d28:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8008d2a:	697b      	ldr	r3, [r7, #20]
 8008d2c:	2b50      	cmp	r3, #80	@ 0x50
 8008d2e:	d00b      	beq.n	8008d48 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8008d30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d34:	f383 8811 	msr	BASEPRI, r3
 8008d38:	f3bf 8f6f 	isb	sy
 8008d3c:	f3bf 8f4f 	dsb	sy
 8008d40:	61bb      	str	r3, [r7, #24]
}
 8008d42:	bf00      	nop
 8008d44:	bf00      	nop
 8008d46:	e7fd      	b.n	8008d44 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8008d48:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008d4a:	683b      	ldr	r3, [r7, #0]
 8008d4c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8008d4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	d00d      	beq.n	8008d70 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008d54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d56:	2201      	movs	r2, #1
 8008d58:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008d5c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8008d60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d62:	9300      	str	r3, [sp, #0]
 8008d64:	4613      	mov	r3, r2
 8008d66:	687a      	ldr	r2, [r7, #4]
 8008d68:	68b9      	ldr	r1, [r7, #8]
 8008d6a:	68f8      	ldr	r0, [r7, #12]
 8008d6c:	f000 f805 	bl	8008d7a <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008d70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8008d72:	4618      	mov	r0, r3
 8008d74:	3730      	adds	r7, #48	@ 0x30
 8008d76:	46bd      	mov	sp, r7
 8008d78:	bd80      	pop	{r7, pc}

08008d7a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008d7a:	b580      	push	{r7, lr}
 8008d7c:	b084      	sub	sp, #16
 8008d7e:	af00      	add	r7, sp, #0
 8008d80:	60f8      	str	r0, [r7, #12]
 8008d82:	60b9      	str	r1, [r7, #8]
 8008d84:	607a      	str	r2, [r7, #4]
 8008d86:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8008d88:	68bb      	ldr	r3, [r7, #8]
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d103      	bne.n	8008d96 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008d8e:	69bb      	ldr	r3, [r7, #24]
 8008d90:	69ba      	ldr	r2, [r7, #24]
 8008d92:	601a      	str	r2, [r3, #0]
 8008d94:	e002      	b.n	8008d9c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008d96:	69bb      	ldr	r3, [r7, #24]
 8008d98:	687a      	ldr	r2, [r7, #4]
 8008d9a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008d9c:	69bb      	ldr	r3, [r7, #24]
 8008d9e:	68fa      	ldr	r2, [r7, #12]
 8008da0:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008da2:	69bb      	ldr	r3, [r7, #24]
 8008da4:	68ba      	ldr	r2, [r7, #8]
 8008da6:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008da8:	2101      	movs	r1, #1
 8008daa:	69b8      	ldr	r0, [r7, #24]
 8008dac:	f7ff fefe 	bl	8008bac <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8008db0:	69bb      	ldr	r3, [r7, #24]
 8008db2:	78fa      	ldrb	r2, [r7, #3]
 8008db4:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8008db8:	bf00      	nop
 8008dba:	3710      	adds	r7, #16
 8008dbc:	46bd      	mov	sp, r7
 8008dbe:	bd80      	pop	{r7, pc}

08008dc0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008dc0:	b580      	push	{r7, lr}
 8008dc2:	b08e      	sub	sp, #56	@ 0x38
 8008dc4:	af00      	add	r7, sp, #0
 8008dc6:	60f8      	str	r0, [r7, #12]
 8008dc8:	60b9      	str	r1, [r7, #8]
 8008dca:	607a      	str	r2, [r7, #4]
 8008dcc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008dce:	2300      	movs	r3, #0
 8008dd0:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8008dd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d10b      	bne.n	8008df4 <xQueueGenericSend+0x34>
	__asm volatile
 8008ddc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008de0:	f383 8811 	msr	BASEPRI, r3
 8008de4:	f3bf 8f6f 	isb	sy
 8008de8:	f3bf 8f4f 	dsb	sy
 8008dec:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8008dee:	bf00      	nop
 8008df0:	bf00      	nop
 8008df2:	e7fd      	b.n	8008df0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008df4:	68bb      	ldr	r3, [r7, #8]
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d103      	bne.n	8008e02 <xQueueGenericSend+0x42>
 8008dfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008dfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d101      	bne.n	8008e06 <xQueueGenericSend+0x46>
 8008e02:	2301      	movs	r3, #1
 8008e04:	e000      	b.n	8008e08 <xQueueGenericSend+0x48>
 8008e06:	2300      	movs	r3, #0
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d10b      	bne.n	8008e24 <xQueueGenericSend+0x64>
	__asm volatile
 8008e0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e10:	f383 8811 	msr	BASEPRI, r3
 8008e14:	f3bf 8f6f 	isb	sy
 8008e18:	f3bf 8f4f 	dsb	sy
 8008e1c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8008e1e:	bf00      	nop
 8008e20:	bf00      	nop
 8008e22:	e7fd      	b.n	8008e20 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008e24:	683b      	ldr	r3, [r7, #0]
 8008e26:	2b02      	cmp	r3, #2
 8008e28:	d103      	bne.n	8008e32 <xQueueGenericSend+0x72>
 8008e2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e2c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008e2e:	2b01      	cmp	r3, #1
 8008e30:	d101      	bne.n	8008e36 <xQueueGenericSend+0x76>
 8008e32:	2301      	movs	r3, #1
 8008e34:	e000      	b.n	8008e38 <xQueueGenericSend+0x78>
 8008e36:	2300      	movs	r3, #0
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d10b      	bne.n	8008e54 <xQueueGenericSend+0x94>
	__asm volatile
 8008e3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e40:	f383 8811 	msr	BASEPRI, r3
 8008e44:	f3bf 8f6f 	isb	sy
 8008e48:	f3bf 8f4f 	dsb	sy
 8008e4c:	623b      	str	r3, [r7, #32]
}
 8008e4e:	bf00      	nop
 8008e50:	bf00      	nop
 8008e52:	e7fd      	b.n	8008e50 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008e54:	f001 f9fc 	bl	800a250 <xTaskGetSchedulerState>
 8008e58:	4603      	mov	r3, r0
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d102      	bne.n	8008e64 <xQueueGenericSend+0xa4>
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d101      	bne.n	8008e68 <xQueueGenericSend+0xa8>
 8008e64:	2301      	movs	r3, #1
 8008e66:	e000      	b.n	8008e6a <xQueueGenericSend+0xaa>
 8008e68:	2300      	movs	r3, #0
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d10b      	bne.n	8008e86 <xQueueGenericSend+0xc6>
	__asm volatile
 8008e6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e72:	f383 8811 	msr	BASEPRI, r3
 8008e76:	f3bf 8f6f 	isb	sy
 8008e7a:	f3bf 8f4f 	dsb	sy
 8008e7e:	61fb      	str	r3, [r7, #28]
}
 8008e80:	bf00      	nop
 8008e82:	bf00      	nop
 8008e84:	e7fd      	b.n	8008e82 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008e86:	f7ff fd6f 	bl	8008968 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008e8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e8c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008e8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e90:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008e92:	429a      	cmp	r2, r3
 8008e94:	d302      	bcc.n	8008e9c <xQueueGenericSend+0xdc>
 8008e96:	683b      	ldr	r3, [r7, #0]
 8008e98:	2b02      	cmp	r3, #2
 8008e9a:	d129      	bne.n	8008ef0 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008e9c:	683a      	ldr	r2, [r7, #0]
 8008e9e:	68b9      	ldr	r1, [r7, #8]
 8008ea0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008ea2:	f000 fa0f 	bl	80092c4 <prvCopyDataToQueue>
 8008ea6:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008ea8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008eaa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d010      	beq.n	8008ed2 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008eb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008eb2:	3324      	adds	r3, #36	@ 0x24
 8008eb4:	4618      	mov	r0, r3
 8008eb6:	f001 f805 	bl	8009ec4 <xTaskRemoveFromEventList>
 8008eba:	4603      	mov	r3, r0
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d013      	beq.n	8008ee8 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008ec0:	4b3f      	ldr	r3, [pc, #252]	@ (8008fc0 <xQueueGenericSend+0x200>)
 8008ec2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008ec6:	601a      	str	r2, [r3, #0]
 8008ec8:	f3bf 8f4f 	dsb	sy
 8008ecc:	f3bf 8f6f 	isb	sy
 8008ed0:	e00a      	b.n	8008ee8 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8008ed2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d007      	beq.n	8008ee8 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008ed8:	4b39      	ldr	r3, [pc, #228]	@ (8008fc0 <xQueueGenericSend+0x200>)
 8008eda:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008ede:	601a      	str	r2, [r3, #0]
 8008ee0:	f3bf 8f4f 	dsb	sy
 8008ee4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008ee8:	f7ff fd70 	bl	80089cc <vPortExitCritical>
				return pdPASS;
 8008eec:	2301      	movs	r3, #1
 8008eee:	e063      	b.n	8008fb8 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d103      	bne.n	8008efe <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008ef6:	f7ff fd69 	bl	80089cc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8008efa:	2300      	movs	r3, #0
 8008efc:	e05c      	b.n	8008fb8 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008efe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d106      	bne.n	8008f12 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008f04:	f107 0314 	add.w	r3, r7, #20
 8008f08:	4618      	mov	r0, r3
 8008f0a:	f001 f83f 	bl	8009f8c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008f0e:	2301      	movs	r3, #1
 8008f10:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008f12:	f7ff fd5b 	bl	80089cc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008f16:	f000 fda7 	bl	8009a68 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008f1a:	f7ff fd25 	bl	8008968 <vPortEnterCritical>
 8008f1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f20:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008f24:	b25b      	sxtb	r3, r3
 8008f26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f2a:	d103      	bne.n	8008f34 <xQueueGenericSend+0x174>
 8008f2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f2e:	2200      	movs	r2, #0
 8008f30:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008f34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f36:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008f3a:	b25b      	sxtb	r3, r3
 8008f3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f40:	d103      	bne.n	8008f4a <xQueueGenericSend+0x18a>
 8008f42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f44:	2200      	movs	r2, #0
 8008f46:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008f4a:	f7ff fd3f 	bl	80089cc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008f4e:	1d3a      	adds	r2, r7, #4
 8008f50:	f107 0314 	add.w	r3, r7, #20
 8008f54:	4611      	mov	r1, r2
 8008f56:	4618      	mov	r0, r3
 8008f58:	f001 f82e 	bl	8009fb8 <xTaskCheckForTimeOut>
 8008f5c:	4603      	mov	r3, r0
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d124      	bne.n	8008fac <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008f62:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008f64:	f000 faa6 	bl	80094b4 <prvIsQueueFull>
 8008f68:	4603      	mov	r3, r0
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d018      	beq.n	8008fa0 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008f6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f70:	3310      	adds	r3, #16
 8008f72:	687a      	ldr	r2, [r7, #4]
 8008f74:	4611      	mov	r1, r2
 8008f76:	4618      	mov	r0, r3
 8008f78:	f000 ff52 	bl	8009e20 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008f7c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008f7e:	f000 fa31 	bl	80093e4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8008f82:	f000 fd7f 	bl	8009a84 <xTaskResumeAll>
 8008f86:	4603      	mov	r3, r0
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	f47f af7c 	bne.w	8008e86 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8008f8e:	4b0c      	ldr	r3, [pc, #48]	@ (8008fc0 <xQueueGenericSend+0x200>)
 8008f90:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008f94:	601a      	str	r2, [r3, #0]
 8008f96:	f3bf 8f4f 	dsb	sy
 8008f9a:	f3bf 8f6f 	isb	sy
 8008f9e:	e772      	b.n	8008e86 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008fa0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008fa2:	f000 fa1f 	bl	80093e4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008fa6:	f000 fd6d 	bl	8009a84 <xTaskResumeAll>
 8008faa:	e76c      	b.n	8008e86 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008fac:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008fae:	f000 fa19 	bl	80093e4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008fb2:	f000 fd67 	bl	8009a84 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8008fb6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008fb8:	4618      	mov	r0, r3
 8008fba:	3738      	adds	r7, #56	@ 0x38
 8008fbc:	46bd      	mov	sp, r7
 8008fbe:	bd80      	pop	{r7, pc}
 8008fc0:	e000ed04 	.word	0xe000ed04

08008fc4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008fc4:	b580      	push	{r7, lr}
 8008fc6:	b090      	sub	sp, #64	@ 0x40
 8008fc8:	af00      	add	r7, sp, #0
 8008fca:	60f8      	str	r0, [r7, #12]
 8008fcc:	60b9      	str	r1, [r7, #8]
 8008fce:	607a      	str	r2, [r7, #4]
 8008fd0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8008fd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d10b      	bne.n	8008ff4 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8008fdc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008fe0:	f383 8811 	msr	BASEPRI, r3
 8008fe4:	f3bf 8f6f 	isb	sy
 8008fe8:	f3bf 8f4f 	dsb	sy
 8008fec:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8008fee:	bf00      	nop
 8008ff0:	bf00      	nop
 8008ff2:	e7fd      	b.n	8008ff0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008ff4:	68bb      	ldr	r3, [r7, #8]
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d103      	bne.n	8009002 <xQueueGenericSendFromISR+0x3e>
 8008ffa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ffc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d101      	bne.n	8009006 <xQueueGenericSendFromISR+0x42>
 8009002:	2301      	movs	r3, #1
 8009004:	e000      	b.n	8009008 <xQueueGenericSendFromISR+0x44>
 8009006:	2300      	movs	r3, #0
 8009008:	2b00      	cmp	r3, #0
 800900a:	d10b      	bne.n	8009024 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800900c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009010:	f383 8811 	msr	BASEPRI, r3
 8009014:	f3bf 8f6f 	isb	sy
 8009018:	f3bf 8f4f 	dsb	sy
 800901c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800901e:	bf00      	nop
 8009020:	bf00      	nop
 8009022:	e7fd      	b.n	8009020 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009024:	683b      	ldr	r3, [r7, #0]
 8009026:	2b02      	cmp	r3, #2
 8009028:	d103      	bne.n	8009032 <xQueueGenericSendFromISR+0x6e>
 800902a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800902c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800902e:	2b01      	cmp	r3, #1
 8009030:	d101      	bne.n	8009036 <xQueueGenericSendFromISR+0x72>
 8009032:	2301      	movs	r3, #1
 8009034:	e000      	b.n	8009038 <xQueueGenericSendFromISR+0x74>
 8009036:	2300      	movs	r3, #0
 8009038:	2b00      	cmp	r3, #0
 800903a:	d10b      	bne.n	8009054 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800903c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009040:	f383 8811 	msr	BASEPRI, r3
 8009044:	f3bf 8f6f 	isb	sy
 8009048:	f3bf 8f4f 	dsb	sy
 800904c:	623b      	str	r3, [r7, #32]
}
 800904e:	bf00      	nop
 8009050:	bf00      	nop
 8009052:	e7fd      	b.n	8009050 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009054:	f7ff fd68 	bl	8008b28 <vPortValidateInterruptPriority>
	__asm volatile
 8009058:	f3ef 8211 	mrs	r2, BASEPRI
 800905c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009060:	f383 8811 	msr	BASEPRI, r3
 8009064:	f3bf 8f6f 	isb	sy
 8009068:	f3bf 8f4f 	dsb	sy
 800906c:	61fa      	str	r2, [r7, #28]
 800906e:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 8009070:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009072:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009074:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009076:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009078:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800907a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800907c:	429a      	cmp	r2, r3
 800907e:	d302      	bcc.n	8009086 <xQueueGenericSendFromISR+0xc2>
 8009080:	683b      	ldr	r3, [r7, #0]
 8009082:	2b02      	cmp	r3, #2
 8009084:	d12f      	bne.n	80090e6 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009086:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009088:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800908c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009090:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009092:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009094:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009096:	683a      	ldr	r2, [r7, #0]
 8009098:	68b9      	ldr	r1, [r7, #8]
 800909a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800909c:	f000 f912 	bl	80092c4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80090a0:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80090a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80090a8:	d112      	bne.n	80090d0 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80090aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80090ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d016      	beq.n	80090e0 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80090b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80090b4:	3324      	adds	r3, #36	@ 0x24
 80090b6:	4618      	mov	r0, r3
 80090b8:	f000 ff04 	bl	8009ec4 <xTaskRemoveFromEventList>
 80090bc:	4603      	mov	r3, r0
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d00e      	beq.n	80090e0 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d00b      	beq.n	80090e0 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	2201      	movs	r2, #1
 80090cc:	601a      	str	r2, [r3, #0]
 80090ce:	e007      	b.n	80090e0 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80090d0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80090d4:	3301      	adds	r3, #1
 80090d6:	b2db      	uxtb	r3, r3
 80090d8:	b25a      	sxtb	r2, r3
 80090da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80090dc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80090e0:	2301      	movs	r3, #1
 80090e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 80090e4:	e001      	b.n	80090ea <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80090e6:	2300      	movs	r3, #0
 80090e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80090ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80090ec:	617b      	str	r3, [r7, #20]
	__asm volatile
 80090ee:	697b      	ldr	r3, [r7, #20]
 80090f0:	f383 8811 	msr	BASEPRI, r3
}
 80090f4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80090f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80090f8:	4618      	mov	r0, r3
 80090fa:	3740      	adds	r7, #64	@ 0x40
 80090fc:	46bd      	mov	sp, r7
 80090fe:	bd80      	pop	{r7, pc}

08009100 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8009100:	b580      	push	{r7, lr}
 8009102:	b08c      	sub	sp, #48	@ 0x30
 8009104:	af00      	add	r7, sp, #0
 8009106:	60f8      	str	r0, [r7, #12]
 8009108:	60b9      	str	r1, [r7, #8]
 800910a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800910c:	2300      	movs	r3, #0
 800910e:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009114:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009116:	2b00      	cmp	r3, #0
 8009118:	d10b      	bne.n	8009132 <xQueueReceive+0x32>
	__asm volatile
 800911a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800911e:	f383 8811 	msr	BASEPRI, r3
 8009122:	f3bf 8f6f 	isb	sy
 8009126:	f3bf 8f4f 	dsb	sy
 800912a:	623b      	str	r3, [r7, #32]
}
 800912c:	bf00      	nop
 800912e:	bf00      	nop
 8009130:	e7fd      	b.n	800912e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009132:	68bb      	ldr	r3, [r7, #8]
 8009134:	2b00      	cmp	r3, #0
 8009136:	d103      	bne.n	8009140 <xQueueReceive+0x40>
 8009138:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800913a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800913c:	2b00      	cmp	r3, #0
 800913e:	d101      	bne.n	8009144 <xQueueReceive+0x44>
 8009140:	2301      	movs	r3, #1
 8009142:	e000      	b.n	8009146 <xQueueReceive+0x46>
 8009144:	2300      	movs	r3, #0
 8009146:	2b00      	cmp	r3, #0
 8009148:	d10b      	bne.n	8009162 <xQueueReceive+0x62>
	__asm volatile
 800914a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800914e:	f383 8811 	msr	BASEPRI, r3
 8009152:	f3bf 8f6f 	isb	sy
 8009156:	f3bf 8f4f 	dsb	sy
 800915a:	61fb      	str	r3, [r7, #28]
}
 800915c:	bf00      	nop
 800915e:	bf00      	nop
 8009160:	e7fd      	b.n	800915e <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009162:	f001 f875 	bl	800a250 <xTaskGetSchedulerState>
 8009166:	4603      	mov	r3, r0
 8009168:	2b00      	cmp	r3, #0
 800916a:	d102      	bne.n	8009172 <xQueueReceive+0x72>
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	2b00      	cmp	r3, #0
 8009170:	d101      	bne.n	8009176 <xQueueReceive+0x76>
 8009172:	2301      	movs	r3, #1
 8009174:	e000      	b.n	8009178 <xQueueReceive+0x78>
 8009176:	2300      	movs	r3, #0
 8009178:	2b00      	cmp	r3, #0
 800917a:	d10b      	bne.n	8009194 <xQueueReceive+0x94>
	__asm volatile
 800917c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009180:	f383 8811 	msr	BASEPRI, r3
 8009184:	f3bf 8f6f 	isb	sy
 8009188:	f3bf 8f4f 	dsb	sy
 800918c:	61bb      	str	r3, [r7, #24]
}
 800918e:	bf00      	nop
 8009190:	bf00      	nop
 8009192:	e7fd      	b.n	8009190 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009194:	f7ff fbe8 	bl	8008968 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009198:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800919a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800919c:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800919e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d01f      	beq.n	80091e4 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80091a4:	68b9      	ldr	r1, [r7, #8]
 80091a6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80091a8:	f000 f8f6 	bl	8009398 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80091ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091ae:	1e5a      	subs	r2, r3, #1
 80091b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80091b2:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80091b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80091b6:	691b      	ldr	r3, [r3, #16]
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d00f      	beq.n	80091dc <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80091bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80091be:	3310      	adds	r3, #16
 80091c0:	4618      	mov	r0, r3
 80091c2:	f000 fe7f 	bl	8009ec4 <xTaskRemoveFromEventList>
 80091c6:	4603      	mov	r3, r0
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d007      	beq.n	80091dc <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80091cc:	4b3c      	ldr	r3, [pc, #240]	@ (80092c0 <xQueueReceive+0x1c0>)
 80091ce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80091d2:	601a      	str	r2, [r3, #0]
 80091d4:	f3bf 8f4f 	dsb	sy
 80091d8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80091dc:	f7ff fbf6 	bl	80089cc <vPortExitCritical>
				return pdPASS;
 80091e0:	2301      	movs	r3, #1
 80091e2:	e069      	b.n	80092b8 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d103      	bne.n	80091f2 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80091ea:	f7ff fbef 	bl	80089cc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80091ee:	2300      	movs	r3, #0
 80091f0:	e062      	b.n	80092b8 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80091f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d106      	bne.n	8009206 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80091f8:	f107 0310 	add.w	r3, r7, #16
 80091fc:	4618      	mov	r0, r3
 80091fe:	f000 fec5 	bl	8009f8c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009202:	2301      	movs	r3, #1
 8009204:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009206:	f7ff fbe1 	bl	80089cc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800920a:	f000 fc2d 	bl	8009a68 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800920e:	f7ff fbab 	bl	8008968 <vPortEnterCritical>
 8009212:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009214:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009218:	b25b      	sxtb	r3, r3
 800921a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800921e:	d103      	bne.n	8009228 <xQueueReceive+0x128>
 8009220:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009222:	2200      	movs	r2, #0
 8009224:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009228:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800922a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800922e:	b25b      	sxtb	r3, r3
 8009230:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009234:	d103      	bne.n	800923e <xQueueReceive+0x13e>
 8009236:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009238:	2200      	movs	r2, #0
 800923a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800923e:	f7ff fbc5 	bl	80089cc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009242:	1d3a      	adds	r2, r7, #4
 8009244:	f107 0310 	add.w	r3, r7, #16
 8009248:	4611      	mov	r1, r2
 800924a:	4618      	mov	r0, r3
 800924c:	f000 feb4 	bl	8009fb8 <xTaskCheckForTimeOut>
 8009250:	4603      	mov	r3, r0
 8009252:	2b00      	cmp	r3, #0
 8009254:	d123      	bne.n	800929e <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009256:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009258:	f000 f916 	bl	8009488 <prvIsQueueEmpty>
 800925c:	4603      	mov	r3, r0
 800925e:	2b00      	cmp	r3, #0
 8009260:	d017      	beq.n	8009292 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009262:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009264:	3324      	adds	r3, #36	@ 0x24
 8009266:	687a      	ldr	r2, [r7, #4]
 8009268:	4611      	mov	r1, r2
 800926a:	4618      	mov	r0, r3
 800926c:	f000 fdd8 	bl	8009e20 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009270:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009272:	f000 f8b7 	bl	80093e4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009276:	f000 fc05 	bl	8009a84 <xTaskResumeAll>
 800927a:	4603      	mov	r3, r0
 800927c:	2b00      	cmp	r3, #0
 800927e:	d189      	bne.n	8009194 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8009280:	4b0f      	ldr	r3, [pc, #60]	@ (80092c0 <xQueueReceive+0x1c0>)
 8009282:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009286:	601a      	str	r2, [r3, #0]
 8009288:	f3bf 8f4f 	dsb	sy
 800928c:	f3bf 8f6f 	isb	sy
 8009290:	e780      	b.n	8009194 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8009292:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009294:	f000 f8a6 	bl	80093e4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009298:	f000 fbf4 	bl	8009a84 <xTaskResumeAll>
 800929c:	e77a      	b.n	8009194 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800929e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80092a0:	f000 f8a0 	bl	80093e4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80092a4:	f000 fbee 	bl	8009a84 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80092a8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80092aa:	f000 f8ed 	bl	8009488 <prvIsQueueEmpty>
 80092ae:	4603      	mov	r3, r0
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	f43f af6f 	beq.w	8009194 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80092b6:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80092b8:	4618      	mov	r0, r3
 80092ba:	3730      	adds	r7, #48	@ 0x30
 80092bc:	46bd      	mov	sp, r7
 80092be:	bd80      	pop	{r7, pc}
 80092c0:	e000ed04 	.word	0xe000ed04

080092c4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80092c4:	b580      	push	{r7, lr}
 80092c6:	b086      	sub	sp, #24
 80092c8:	af00      	add	r7, sp, #0
 80092ca:	60f8      	str	r0, [r7, #12]
 80092cc:	60b9      	str	r1, [r7, #8]
 80092ce:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80092d0:	2300      	movs	r3, #0
 80092d2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80092d8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d10d      	bne.n	80092fe <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d14d      	bne.n	8009386 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	689b      	ldr	r3, [r3, #8]
 80092ee:	4618      	mov	r0, r3
 80092f0:	f000 ffcc 	bl	800a28c <xTaskPriorityDisinherit>
 80092f4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	2200      	movs	r2, #0
 80092fa:	609a      	str	r2, [r3, #8]
 80092fc:	e043      	b.n	8009386 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	2b00      	cmp	r3, #0
 8009302:	d119      	bne.n	8009338 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	6858      	ldr	r0, [r3, #4]
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800930c:	461a      	mov	r2, r3
 800930e:	68b9      	ldr	r1, [r7, #8]
 8009310:	f003 fe5e 	bl	800cfd0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	685a      	ldr	r2, [r3, #4]
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800931c:	441a      	add	r2, r3
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	685a      	ldr	r2, [r3, #4]
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	689b      	ldr	r3, [r3, #8]
 800932a:	429a      	cmp	r2, r3
 800932c:	d32b      	bcc.n	8009386 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	681a      	ldr	r2, [r3, #0]
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	605a      	str	r2, [r3, #4]
 8009336:	e026      	b.n	8009386 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	68d8      	ldr	r0, [r3, #12]
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009340:	461a      	mov	r2, r3
 8009342:	68b9      	ldr	r1, [r7, #8]
 8009344:	f003 fe44 	bl	800cfd0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	68da      	ldr	r2, [r3, #12]
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009350:	425b      	negs	r3, r3
 8009352:	441a      	add	r2, r3
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	68da      	ldr	r2, [r3, #12]
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	429a      	cmp	r2, r3
 8009362:	d207      	bcs.n	8009374 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	689a      	ldr	r2, [r3, #8]
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800936c:	425b      	negs	r3, r3
 800936e:	441a      	add	r2, r3
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	2b02      	cmp	r3, #2
 8009378:	d105      	bne.n	8009386 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800937a:	693b      	ldr	r3, [r7, #16]
 800937c:	2b00      	cmp	r3, #0
 800937e:	d002      	beq.n	8009386 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8009380:	693b      	ldr	r3, [r7, #16]
 8009382:	3b01      	subs	r3, #1
 8009384:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009386:	693b      	ldr	r3, [r7, #16]
 8009388:	1c5a      	adds	r2, r3, #1
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800938e:	697b      	ldr	r3, [r7, #20]
}
 8009390:	4618      	mov	r0, r3
 8009392:	3718      	adds	r7, #24
 8009394:	46bd      	mov	sp, r7
 8009396:	bd80      	pop	{r7, pc}

08009398 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8009398:	b580      	push	{r7, lr}
 800939a:	b082      	sub	sp, #8
 800939c:	af00      	add	r7, sp, #0
 800939e:	6078      	str	r0, [r7, #4]
 80093a0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d018      	beq.n	80093dc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	68da      	ldr	r2, [r3, #12]
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80093b2:	441a      	add	r2, r3
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	68da      	ldr	r2, [r3, #12]
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	689b      	ldr	r3, [r3, #8]
 80093c0:	429a      	cmp	r2, r3
 80093c2:	d303      	bcc.n	80093cc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	681a      	ldr	r2, [r3, #0]
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	68d9      	ldr	r1, [r3, #12]
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80093d4:	461a      	mov	r2, r3
 80093d6:	6838      	ldr	r0, [r7, #0]
 80093d8:	f003 fdfa 	bl	800cfd0 <memcpy>
	}
}
 80093dc:	bf00      	nop
 80093de:	3708      	adds	r7, #8
 80093e0:	46bd      	mov	sp, r7
 80093e2:	bd80      	pop	{r7, pc}

080093e4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80093e4:	b580      	push	{r7, lr}
 80093e6:	b084      	sub	sp, #16
 80093e8:	af00      	add	r7, sp, #0
 80093ea:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80093ec:	f7ff fabc 	bl	8008968 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80093f6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80093f8:	e011      	b.n	800941e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d012      	beq.n	8009428 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	3324      	adds	r3, #36	@ 0x24
 8009406:	4618      	mov	r0, r3
 8009408:	f000 fd5c 	bl	8009ec4 <xTaskRemoveFromEventList>
 800940c:	4603      	mov	r3, r0
 800940e:	2b00      	cmp	r3, #0
 8009410:	d001      	beq.n	8009416 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8009412:	f000 fe35 	bl	800a080 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8009416:	7bfb      	ldrb	r3, [r7, #15]
 8009418:	3b01      	subs	r3, #1
 800941a:	b2db      	uxtb	r3, r3
 800941c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800941e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009422:	2b00      	cmp	r3, #0
 8009424:	dce9      	bgt.n	80093fa <prvUnlockQueue+0x16>
 8009426:	e000      	b.n	800942a <prvUnlockQueue+0x46>
					break;
 8009428:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	22ff      	movs	r2, #255	@ 0xff
 800942e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8009432:	f7ff facb 	bl	80089cc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8009436:	f7ff fa97 	bl	8008968 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009440:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009442:	e011      	b.n	8009468 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	691b      	ldr	r3, [r3, #16]
 8009448:	2b00      	cmp	r3, #0
 800944a:	d012      	beq.n	8009472 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	3310      	adds	r3, #16
 8009450:	4618      	mov	r0, r3
 8009452:	f000 fd37 	bl	8009ec4 <xTaskRemoveFromEventList>
 8009456:	4603      	mov	r3, r0
 8009458:	2b00      	cmp	r3, #0
 800945a:	d001      	beq.n	8009460 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800945c:	f000 fe10 	bl	800a080 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8009460:	7bbb      	ldrb	r3, [r7, #14]
 8009462:	3b01      	subs	r3, #1
 8009464:	b2db      	uxtb	r3, r3
 8009466:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009468:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800946c:	2b00      	cmp	r3, #0
 800946e:	dce9      	bgt.n	8009444 <prvUnlockQueue+0x60>
 8009470:	e000      	b.n	8009474 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8009472:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	22ff      	movs	r2, #255	@ 0xff
 8009478:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800947c:	f7ff faa6 	bl	80089cc <vPortExitCritical>
}
 8009480:	bf00      	nop
 8009482:	3710      	adds	r7, #16
 8009484:	46bd      	mov	sp, r7
 8009486:	bd80      	pop	{r7, pc}

08009488 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009488:	b580      	push	{r7, lr}
 800948a:	b084      	sub	sp, #16
 800948c:	af00      	add	r7, sp, #0
 800948e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009490:	f7ff fa6a 	bl	8008968 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009498:	2b00      	cmp	r3, #0
 800949a:	d102      	bne.n	80094a2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800949c:	2301      	movs	r3, #1
 800949e:	60fb      	str	r3, [r7, #12]
 80094a0:	e001      	b.n	80094a6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80094a2:	2300      	movs	r3, #0
 80094a4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80094a6:	f7ff fa91 	bl	80089cc <vPortExitCritical>

	return xReturn;
 80094aa:	68fb      	ldr	r3, [r7, #12]
}
 80094ac:	4618      	mov	r0, r3
 80094ae:	3710      	adds	r7, #16
 80094b0:	46bd      	mov	sp, r7
 80094b2:	bd80      	pop	{r7, pc}

080094b4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80094b4:	b580      	push	{r7, lr}
 80094b6:	b084      	sub	sp, #16
 80094b8:	af00      	add	r7, sp, #0
 80094ba:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80094bc:	f7ff fa54 	bl	8008968 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80094c8:	429a      	cmp	r2, r3
 80094ca:	d102      	bne.n	80094d2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80094cc:	2301      	movs	r3, #1
 80094ce:	60fb      	str	r3, [r7, #12]
 80094d0:	e001      	b.n	80094d6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80094d2:	2300      	movs	r3, #0
 80094d4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80094d6:	f7ff fa79 	bl	80089cc <vPortExitCritical>

	return xReturn;
 80094da:	68fb      	ldr	r3, [r7, #12]
}
 80094dc:	4618      	mov	r0, r3
 80094de:	3710      	adds	r7, #16
 80094e0:	46bd      	mov	sp, r7
 80094e2:	bd80      	pop	{r7, pc}

080094e4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80094e4:	b480      	push	{r7}
 80094e6:	b085      	sub	sp, #20
 80094e8:	af00      	add	r7, sp, #0
 80094ea:	6078      	str	r0, [r7, #4]
 80094ec:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80094ee:	2300      	movs	r3, #0
 80094f0:	60fb      	str	r3, [r7, #12]
 80094f2:	e014      	b.n	800951e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80094f4:	4a0f      	ldr	r2, [pc, #60]	@ (8009534 <vQueueAddToRegistry+0x50>)
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d10b      	bne.n	8009518 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8009500:	490c      	ldr	r1, [pc, #48]	@ (8009534 <vQueueAddToRegistry+0x50>)
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	683a      	ldr	r2, [r7, #0]
 8009506:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800950a:	4a0a      	ldr	r2, [pc, #40]	@ (8009534 <vQueueAddToRegistry+0x50>)
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	00db      	lsls	r3, r3, #3
 8009510:	4413      	add	r3, r2
 8009512:	687a      	ldr	r2, [r7, #4]
 8009514:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8009516:	e006      	b.n	8009526 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	3301      	adds	r3, #1
 800951c:	60fb      	str	r3, [r7, #12]
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	2b07      	cmp	r3, #7
 8009522:	d9e7      	bls.n	80094f4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8009524:	bf00      	nop
 8009526:	bf00      	nop
 8009528:	3714      	adds	r7, #20
 800952a:	46bd      	mov	sp, r7
 800952c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009530:	4770      	bx	lr
 8009532:	bf00      	nop
 8009534:	20004f88 	.word	0x20004f88

08009538 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009538:	b580      	push	{r7, lr}
 800953a:	b086      	sub	sp, #24
 800953c:	af00      	add	r7, sp, #0
 800953e:	60f8      	str	r0, [r7, #12]
 8009540:	60b9      	str	r1, [r7, #8]
 8009542:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8009548:	f7ff fa0e 	bl	8008968 <vPortEnterCritical>
 800954c:	697b      	ldr	r3, [r7, #20]
 800954e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009552:	b25b      	sxtb	r3, r3
 8009554:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009558:	d103      	bne.n	8009562 <vQueueWaitForMessageRestricted+0x2a>
 800955a:	697b      	ldr	r3, [r7, #20]
 800955c:	2200      	movs	r2, #0
 800955e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009562:	697b      	ldr	r3, [r7, #20]
 8009564:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009568:	b25b      	sxtb	r3, r3
 800956a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800956e:	d103      	bne.n	8009578 <vQueueWaitForMessageRestricted+0x40>
 8009570:	697b      	ldr	r3, [r7, #20]
 8009572:	2200      	movs	r2, #0
 8009574:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009578:	f7ff fa28 	bl	80089cc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800957c:	697b      	ldr	r3, [r7, #20]
 800957e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009580:	2b00      	cmp	r3, #0
 8009582:	d106      	bne.n	8009592 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8009584:	697b      	ldr	r3, [r7, #20]
 8009586:	3324      	adds	r3, #36	@ 0x24
 8009588:	687a      	ldr	r2, [r7, #4]
 800958a:	68b9      	ldr	r1, [r7, #8]
 800958c:	4618      	mov	r0, r3
 800958e:	f000 fc6d 	bl	8009e6c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8009592:	6978      	ldr	r0, [r7, #20]
 8009594:	f7ff ff26 	bl	80093e4 <prvUnlockQueue>
	}
 8009598:	bf00      	nop
 800959a:	3718      	adds	r7, #24
 800959c:	46bd      	mov	sp, r7
 800959e:	bd80      	pop	{r7, pc}

080095a0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80095a0:	b580      	push	{r7, lr}
 80095a2:	b08e      	sub	sp, #56	@ 0x38
 80095a4:	af04      	add	r7, sp, #16
 80095a6:	60f8      	str	r0, [r7, #12]
 80095a8:	60b9      	str	r1, [r7, #8]
 80095aa:	607a      	str	r2, [r7, #4]
 80095ac:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80095ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	d10b      	bne.n	80095cc <xTaskCreateStatic+0x2c>
	__asm volatile
 80095b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80095b8:	f383 8811 	msr	BASEPRI, r3
 80095bc:	f3bf 8f6f 	isb	sy
 80095c0:	f3bf 8f4f 	dsb	sy
 80095c4:	623b      	str	r3, [r7, #32]
}
 80095c6:	bf00      	nop
 80095c8:	bf00      	nop
 80095ca:	e7fd      	b.n	80095c8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80095cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d10b      	bne.n	80095ea <xTaskCreateStatic+0x4a>
	__asm volatile
 80095d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80095d6:	f383 8811 	msr	BASEPRI, r3
 80095da:	f3bf 8f6f 	isb	sy
 80095de:	f3bf 8f4f 	dsb	sy
 80095e2:	61fb      	str	r3, [r7, #28]
}
 80095e4:	bf00      	nop
 80095e6:	bf00      	nop
 80095e8:	e7fd      	b.n	80095e6 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80095ea:	23a8      	movs	r3, #168	@ 0xa8
 80095ec:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80095ee:	693b      	ldr	r3, [r7, #16]
 80095f0:	2ba8      	cmp	r3, #168	@ 0xa8
 80095f2:	d00b      	beq.n	800960c <xTaskCreateStatic+0x6c>
	__asm volatile
 80095f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80095f8:	f383 8811 	msr	BASEPRI, r3
 80095fc:	f3bf 8f6f 	isb	sy
 8009600:	f3bf 8f4f 	dsb	sy
 8009604:	61bb      	str	r3, [r7, #24]
}
 8009606:	bf00      	nop
 8009608:	bf00      	nop
 800960a:	e7fd      	b.n	8009608 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800960c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800960e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009610:	2b00      	cmp	r3, #0
 8009612:	d01e      	beq.n	8009652 <xTaskCreateStatic+0xb2>
 8009614:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009616:	2b00      	cmp	r3, #0
 8009618:	d01b      	beq.n	8009652 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800961a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800961c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800961e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009620:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009622:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009624:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009626:	2202      	movs	r2, #2
 8009628:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800962c:	2300      	movs	r3, #0
 800962e:	9303      	str	r3, [sp, #12]
 8009630:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009632:	9302      	str	r3, [sp, #8]
 8009634:	f107 0314 	add.w	r3, r7, #20
 8009638:	9301      	str	r3, [sp, #4]
 800963a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800963c:	9300      	str	r3, [sp, #0]
 800963e:	683b      	ldr	r3, [r7, #0]
 8009640:	687a      	ldr	r2, [r7, #4]
 8009642:	68b9      	ldr	r1, [r7, #8]
 8009644:	68f8      	ldr	r0, [r7, #12]
 8009646:	f000 f851 	bl	80096ec <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800964a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800964c:	f000 f8f6 	bl	800983c <prvAddNewTaskToReadyList>
 8009650:	e001      	b.n	8009656 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8009652:	2300      	movs	r3, #0
 8009654:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8009656:	697b      	ldr	r3, [r7, #20]
	}
 8009658:	4618      	mov	r0, r3
 800965a:	3728      	adds	r7, #40	@ 0x28
 800965c:	46bd      	mov	sp, r7
 800965e:	bd80      	pop	{r7, pc}

08009660 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009660:	b580      	push	{r7, lr}
 8009662:	b08c      	sub	sp, #48	@ 0x30
 8009664:	af04      	add	r7, sp, #16
 8009666:	60f8      	str	r0, [r7, #12]
 8009668:	60b9      	str	r1, [r7, #8]
 800966a:	603b      	str	r3, [r7, #0]
 800966c:	4613      	mov	r3, r2
 800966e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009670:	88fb      	ldrh	r3, [r7, #6]
 8009672:	009b      	lsls	r3, r3, #2
 8009674:	4618      	mov	r0, r3
 8009676:	f7fe fda7 	bl	80081c8 <pvPortMalloc>
 800967a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800967c:	697b      	ldr	r3, [r7, #20]
 800967e:	2b00      	cmp	r3, #0
 8009680:	d00e      	beq.n	80096a0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009682:	20a8      	movs	r0, #168	@ 0xa8
 8009684:	f7fe fda0 	bl	80081c8 <pvPortMalloc>
 8009688:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800968a:	69fb      	ldr	r3, [r7, #28]
 800968c:	2b00      	cmp	r3, #0
 800968e:	d003      	beq.n	8009698 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009690:	69fb      	ldr	r3, [r7, #28]
 8009692:	697a      	ldr	r2, [r7, #20]
 8009694:	631a      	str	r2, [r3, #48]	@ 0x30
 8009696:	e005      	b.n	80096a4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009698:	6978      	ldr	r0, [r7, #20]
 800969a:	f7fe fe63 	bl	8008364 <vPortFree>
 800969e:	e001      	b.n	80096a4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80096a0:	2300      	movs	r3, #0
 80096a2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80096a4:	69fb      	ldr	r3, [r7, #28]
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d017      	beq.n	80096da <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80096aa:	69fb      	ldr	r3, [r7, #28]
 80096ac:	2200      	movs	r2, #0
 80096ae:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80096b2:	88fa      	ldrh	r2, [r7, #6]
 80096b4:	2300      	movs	r3, #0
 80096b6:	9303      	str	r3, [sp, #12]
 80096b8:	69fb      	ldr	r3, [r7, #28]
 80096ba:	9302      	str	r3, [sp, #8]
 80096bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80096be:	9301      	str	r3, [sp, #4]
 80096c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80096c2:	9300      	str	r3, [sp, #0]
 80096c4:	683b      	ldr	r3, [r7, #0]
 80096c6:	68b9      	ldr	r1, [r7, #8]
 80096c8:	68f8      	ldr	r0, [r7, #12]
 80096ca:	f000 f80f 	bl	80096ec <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80096ce:	69f8      	ldr	r0, [r7, #28]
 80096d0:	f000 f8b4 	bl	800983c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80096d4:	2301      	movs	r3, #1
 80096d6:	61bb      	str	r3, [r7, #24]
 80096d8:	e002      	b.n	80096e0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80096da:	f04f 33ff 	mov.w	r3, #4294967295
 80096de:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80096e0:	69bb      	ldr	r3, [r7, #24]
	}
 80096e2:	4618      	mov	r0, r3
 80096e4:	3720      	adds	r7, #32
 80096e6:	46bd      	mov	sp, r7
 80096e8:	bd80      	pop	{r7, pc}
	...

080096ec <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80096ec:	b580      	push	{r7, lr}
 80096ee:	b088      	sub	sp, #32
 80096f0:	af00      	add	r7, sp, #0
 80096f2:	60f8      	str	r0, [r7, #12]
 80096f4:	60b9      	str	r1, [r7, #8]
 80096f6:	607a      	str	r2, [r7, #4]
 80096f8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80096fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096fc:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	009b      	lsls	r3, r3, #2
 8009702:	461a      	mov	r2, r3
 8009704:	21a5      	movs	r1, #165	@ 0xa5
 8009706:	f003 fbd1 	bl	800ceac <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800970a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800970c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8009714:	3b01      	subs	r3, #1
 8009716:	009b      	lsls	r3, r3, #2
 8009718:	4413      	add	r3, r2
 800971a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800971c:	69bb      	ldr	r3, [r7, #24]
 800971e:	f023 0307 	bic.w	r3, r3, #7
 8009722:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009724:	69bb      	ldr	r3, [r7, #24]
 8009726:	f003 0307 	and.w	r3, r3, #7
 800972a:	2b00      	cmp	r3, #0
 800972c:	d00b      	beq.n	8009746 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800972e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009732:	f383 8811 	msr	BASEPRI, r3
 8009736:	f3bf 8f6f 	isb	sy
 800973a:	f3bf 8f4f 	dsb	sy
 800973e:	617b      	str	r3, [r7, #20]
}
 8009740:	bf00      	nop
 8009742:	bf00      	nop
 8009744:	e7fd      	b.n	8009742 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8009746:	68bb      	ldr	r3, [r7, #8]
 8009748:	2b00      	cmp	r3, #0
 800974a:	d01f      	beq.n	800978c <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800974c:	2300      	movs	r3, #0
 800974e:	61fb      	str	r3, [r7, #28]
 8009750:	e012      	b.n	8009778 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009752:	68ba      	ldr	r2, [r7, #8]
 8009754:	69fb      	ldr	r3, [r7, #28]
 8009756:	4413      	add	r3, r2
 8009758:	7819      	ldrb	r1, [r3, #0]
 800975a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800975c:	69fb      	ldr	r3, [r7, #28]
 800975e:	4413      	add	r3, r2
 8009760:	3334      	adds	r3, #52	@ 0x34
 8009762:	460a      	mov	r2, r1
 8009764:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8009766:	68ba      	ldr	r2, [r7, #8]
 8009768:	69fb      	ldr	r3, [r7, #28]
 800976a:	4413      	add	r3, r2
 800976c:	781b      	ldrb	r3, [r3, #0]
 800976e:	2b00      	cmp	r3, #0
 8009770:	d006      	beq.n	8009780 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009772:	69fb      	ldr	r3, [r7, #28]
 8009774:	3301      	adds	r3, #1
 8009776:	61fb      	str	r3, [r7, #28]
 8009778:	69fb      	ldr	r3, [r7, #28]
 800977a:	2b0f      	cmp	r3, #15
 800977c:	d9e9      	bls.n	8009752 <prvInitialiseNewTask+0x66>
 800977e:	e000      	b.n	8009782 <prvInitialiseNewTask+0x96>
			{
				break;
 8009780:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009782:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009784:	2200      	movs	r2, #0
 8009786:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800978a:	e003      	b.n	8009794 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800978c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800978e:	2200      	movs	r2, #0
 8009790:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009794:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009796:	2b37      	cmp	r3, #55	@ 0x37
 8009798:	d901      	bls.n	800979e <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800979a:	2337      	movs	r3, #55	@ 0x37
 800979c:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800979e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097a0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80097a2:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80097a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097a6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80097a8:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80097aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097ac:	2200      	movs	r2, #0
 80097ae:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80097b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097b2:	3304      	adds	r3, #4
 80097b4:	4618      	mov	r0, r3
 80097b6:	f7fe ff15 	bl	80085e4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80097ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097bc:	3318      	adds	r3, #24
 80097be:	4618      	mov	r0, r3
 80097c0:	f7fe ff10 	bl	80085e4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80097c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097c6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80097c8:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80097ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80097cc:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80097d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097d2:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80097d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097d6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80097d8:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80097da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097dc:	2200      	movs	r2, #0
 80097de:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80097e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097e4:	2200      	movs	r2, #0
 80097e6:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80097ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097ec:	3354      	adds	r3, #84	@ 0x54
 80097ee:	224c      	movs	r2, #76	@ 0x4c
 80097f0:	2100      	movs	r1, #0
 80097f2:	4618      	mov	r0, r3
 80097f4:	f003 fb5a 	bl	800ceac <memset>
 80097f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097fa:	4a0d      	ldr	r2, [pc, #52]	@ (8009830 <prvInitialiseNewTask+0x144>)
 80097fc:	659a      	str	r2, [r3, #88]	@ 0x58
 80097fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009800:	4a0c      	ldr	r2, [pc, #48]	@ (8009834 <prvInitialiseNewTask+0x148>)
 8009802:	65da      	str	r2, [r3, #92]	@ 0x5c
 8009804:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009806:	4a0c      	ldr	r2, [pc, #48]	@ (8009838 <prvInitialiseNewTask+0x14c>)
 8009808:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800980a:	683a      	ldr	r2, [r7, #0]
 800980c:	68f9      	ldr	r1, [r7, #12]
 800980e:	69b8      	ldr	r0, [r7, #24]
 8009810:	f7fe ff7c 	bl	800870c <pxPortInitialiseStack>
 8009814:	4602      	mov	r2, r0
 8009816:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009818:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800981a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800981c:	2b00      	cmp	r3, #0
 800981e:	d002      	beq.n	8009826 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009820:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009822:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009824:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009826:	bf00      	nop
 8009828:	3720      	adds	r7, #32
 800982a:	46bd      	mov	sp, r7
 800982c:	bd80      	pop	{r7, pc}
 800982e:	bf00      	nop
 8009830:	20005fcc 	.word	0x20005fcc
 8009834:	20006034 	.word	0x20006034
 8009838:	2000609c 	.word	0x2000609c

0800983c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800983c:	b580      	push	{r7, lr}
 800983e:	b082      	sub	sp, #8
 8009840:	af00      	add	r7, sp, #0
 8009842:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009844:	f7ff f890 	bl	8008968 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009848:	4b2d      	ldr	r3, [pc, #180]	@ (8009900 <prvAddNewTaskToReadyList+0xc4>)
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	3301      	adds	r3, #1
 800984e:	4a2c      	ldr	r2, [pc, #176]	@ (8009900 <prvAddNewTaskToReadyList+0xc4>)
 8009850:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8009852:	4b2c      	ldr	r3, [pc, #176]	@ (8009904 <prvAddNewTaskToReadyList+0xc8>)
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	2b00      	cmp	r3, #0
 8009858:	d109      	bne.n	800986e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800985a:	4a2a      	ldr	r2, [pc, #168]	@ (8009904 <prvAddNewTaskToReadyList+0xc8>)
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009860:	4b27      	ldr	r3, [pc, #156]	@ (8009900 <prvAddNewTaskToReadyList+0xc4>)
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	2b01      	cmp	r3, #1
 8009866:	d110      	bne.n	800988a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009868:	f000 fc2e 	bl	800a0c8 <prvInitialiseTaskLists>
 800986c:	e00d      	b.n	800988a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800986e:	4b26      	ldr	r3, [pc, #152]	@ (8009908 <prvAddNewTaskToReadyList+0xcc>)
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	2b00      	cmp	r3, #0
 8009874:	d109      	bne.n	800988a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009876:	4b23      	ldr	r3, [pc, #140]	@ (8009904 <prvAddNewTaskToReadyList+0xc8>)
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009880:	429a      	cmp	r2, r3
 8009882:	d802      	bhi.n	800988a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009884:	4a1f      	ldr	r2, [pc, #124]	@ (8009904 <prvAddNewTaskToReadyList+0xc8>)
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800988a:	4b20      	ldr	r3, [pc, #128]	@ (800990c <prvAddNewTaskToReadyList+0xd0>)
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	3301      	adds	r3, #1
 8009890:	4a1e      	ldr	r2, [pc, #120]	@ (800990c <prvAddNewTaskToReadyList+0xd0>)
 8009892:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8009894:	4b1d      	ldr	r3, [pc, #116]	@ (800990c <prvAddNewTaskToReadyList+0xd0>)
 8009896:	681a      	ldr	r2, [r3, #0]
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80098a0:	4b1b      	ldr	r3, [pc, #108]	@ (8009910 <prvAddNewTaskToReadyList+0xd4>)
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	429a      	cmp	r2, r3
 80098a6:	d903      	bls.n	80098b0 <prvAddNewTaskToReadyList+0x74>
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80098ac:	4a18      	ldr	r2, [pc, #96]	@ (8009910 <prvAddNewTaskToReadyList+0xd4>)
 80098ae:	6013      	str	r3, [r2, #0]
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80098b4:	4613      	mov	r3, r2
 80098b6:	009b      	lsls	r3, r3, #2
 80098b8:	4413      	add	r3, r2
 80098ba:	009b      	lsls	r3, r3, #2
 80098bc:	4a15      	ldr	r2, [pc, #84]	@ (8009914 <prvAddNewTaskToReadyList+0xd8>)
 80098be:	441a      	add	r2, r3
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	3304      	adds	r3, #4
 80098c4:	4619      	mov	r1, r3
 80098c6:	4610      	mov	r0, r2
 80098c8:	f7fe fe99 	bl	80085fe <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80098cc:	f7ff f87e 	bl	80089cc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80098d0:	4b0d      	ldr	r3, [pc, #52]	@ (8009908 <prvAddNewTaskToReadyList+0xcc>)
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	d00e      	beq.n	80098f6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80098d8:	4b0a      	ldr	r3, [pc, #40]	@ (8009904 <prvAddNewTaskToReadyList+0xc8>)
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80098e2:	429a      	cmp	r2, r3
 80098e4:	d207      	bcs.n	80098f6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80098e6:	4b0c      	ldr	r3, [pc, #48]	@ (8009918 <prvAddNewTaskToReadyList+0xdc>)
 80098e8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80098ec:	601a      	str	r2, [r3, #0]
 80098ee:	f3bf 8f4f 	dsb	sy
 80098f2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80098f6:	bf00      	nop
 80098f8:	3708      	adds	r7, #8
 80098fa:	46bd      	mov	sp, r7
 80098fc:	bd80      	pop	{r7, pc}
 80098fe:	bf00      	nop
 8009900:	2000549c 	.word	0x2000549c
 8009904:	20004fc8 	.word	0x20004fc8
 8009908:	200054a8 	.word	0x200054a8
 800990c:	200054b8 	.word	0x200054b8
 8009910:	200054a4 	.word	0x200054a4
 8009914:	20004fcc 	.word	0x20004fcc
 8009918:	e000ed04 	.word	0xe000ed04

0800991c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800991c:	b580      	push	{r7, lr}
 800991e:	b084      	sub	sp, #16
 8009920:	af00      	add	r7, sp, #0
 8009922:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009924:	2300      	movs	r3, #0
 8009926:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	2b00      	cmp	r3, #0
 800992c:	d018      	beq.n	8009960 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800992e:	4b14      	ldr	r3, [pc, #80]	@ (8009980 <vTaskDelay+0x64>)
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	2b00      	cmp	r3, #0
 8009934:	d00b      	beq.n	800994e <vTaskDelay+0x32>
	__asm volatile
 8009936:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800993a:	f383 8811 	msr	BASEPRI, r3
 800993e:	f3bf 8f6f 	isb	sy
 8009942:	f3bf 8f4f 	dsb	sy
 8009946:	60bb      	str	r3, [r7, #8]
}
 8009948:	bf00      	nop
 800994a:	bf00      	nop
 800994c:	e7fd      	b.n	800994a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800994e:	f000 f88b 	bl	8009a68 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009952:	2100      	movs	r1, #0
 8009954:	6878      	ldr	r0, [r7, #4]
 8009956:	f000 fd09 	bl	800a36c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800995a:	f000 f893 	bl	8009a84 <xTaskResumeAll>
 800995e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	2b00      	cmp	r3, #0
 8009964:	d107      	bne.n	8009976 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8009966:	4b07      	ldr	r3, [pc, #28]	@ (8009984 <vTaskDelay+0x68>)
 8009968:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800996c:	601a      	str	r2, [r3, #0]
 800996e:	f3bf 8f4f 	dsb	sy
 8009972:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009976:	bf00      	nop
 8009978:	3710      	adds	r7, #16
 800997a:	46bd      	mov	sp, r7
 800997c:	bd80      	pop	{r7, pc}
 800997e:	bf00      	nop
 8009980:	200054c4 	.word	0x200054c4
 8009984:	e000ed04 	.word	0xe000ed04

08009988 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009988:	b580      	push	{r7, lr}
 800998a:	b08a      	sub	sp, #40	@ 0x28
 800998c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800998e:	2300      	movs	r3, #0
 8009990:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8009992:	2300      	movs	r3, #0
 8009994:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8009996:	463a      	mov	r2, r7
 8009998:	1d39      	adds	r1, r7, #4
 800999a:	f107 0308 	add.w	r3, r7, #8
 800999e:	4618      	mov	r0, r3
 80099a0:	f7fe fbde 	bl	8008160 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80099a4:	6839      	ldr	r1, [r7, #0]
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	68ba      	ldr	r2, [r7, #8]
 80099aa:	9202      	str	r2, [sp, #8]
 80099ac:	9301      	str	r3, [sp, #4]
 80099ae:	2300      	movs	r3, #0
 80099b0:	9300      	str	r3, [sp, #0]
 80099b2:	2300      	movs	r3, #0
 80099b4:	460a      	mov	r2, r1
 80099b6:	4924      	ldr	r1, [pc, #144]	@ (8009a48 <vTaskStartScheduler+0xc0>)
 80099b8:	4824      	ldr	r0, [pc, #144]	@ (8009a4c <vTaskStartScheduler+0xc4>)
 80099ba:	f7ff fdf1 	bl	80095a0 <xTaskCreateStatic>
 80099be:	4603      	mov	r3, r0
 80099c0:	4a23      	ldr	r2, [pc, #140]	@ (8009a50 <vTaskStartScheduler+0xc8>)
 80099c2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80099c4:	4b22      	ldr	r3, [pc, #136]	@ (8009a50 <vTaskStartScheduler+0xc8>)
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	d002      	beq.n	80099d2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80099cc:	2301      	movs	r3, #1
 80099ce:	617b      	str	r3, [r7, #20]
 80099d0:	e001      	b.n	80099d6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80099d2:	2300      	movs	r3, #0
 80099d4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80099d6:	697b      	ldr	r3, [r7, #20]
 80099d8:	2b01      	cmp	r3, #1
 80099da:	d102      	bne.n	80099e2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80099dc:	f000 fd1a 	bl	800a414 <xTimerCreateTimerTask>
 80099e0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80099e2:	697b      	ldr	r3, [r7, #20]
 80099e4:	2b01      	cmp	r3, #1
 80099e6:	d11b      	bne.n	8009a20 <vTaskStartScheduler+0x98>
	__asm volatile
 80099e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80099ec:	f383 8811 	msr	BASEPRI, r3
 80099f0:	f3bf 8f6f 	isb	sy
 80099f4:	f3bf 8f4f 	dsb	sy
 80099f8:	613b      	str	r3, [r7, #16]
}
 80099fa:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80099fc:	4b15      	ldr	r3, [pc, #84]	@ (8009a54 <vTaskStartScheduler+0xcc>)
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	3354      	adds	r3, #84	@ 0x54
 8009a02:	4a15      	ldr	r2, [pc, #84]	@ (8009a58 <vTaskStartScheduler+0xd0>)
 8009a04:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009a06:	4b15      	ldr	r3, [pc, #84]	@ (8009a5c <vTaskStartScheduler+0xd4>)
 8009a08:	f04f 32ff 	mov.w	r2, #4294967295
 8009a0c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009a0e:	4b14      	ldr	r3, [pc, #80]	@ (8009a60 <vTaskStartScheduler+0xd8>)
 8009a10:	2201      	movs	r2, #1
 8009a12:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009a14:	4b13      	ldr	r3, [pc, #76]	@ (8009a64 <vTaskStartScheduler+0xdc>)
 8009a16:	2200      	movs	r2, #0
 8009a18:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8009a1a:	f7fe ff01 	bl	8008820 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009a1e:	e00f      	b.n	8009a40 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009a20:	697b      	ldr	r3, [r7, #20]
 8009a22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a26:	d10b      	bne.n	8009a40 <vTaskStartScheduler+0xb8>
	__asm volatile
 8009a28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a2c:	f383 8811 	msr	BASEPRI, r3
 8009a30:	f3bf 8f6f 	isb	sy
 8009a34:	f3bf 8f4f 	dsb	sy
 8009a38:	60fb      	str	r3, [r7, #12]
}
 8009a3a:	bf00      	nop
 8009a3c:	bf00      	nop
 8009a3e:	e7fd      	b.n	8009a3c <vTaskStartScheduler+0xb4>
}
 8009a40:	bf00      	nop
 8009a42:	3718      	adds	r7, #24
 8009a44:	46bd      	mov	sp, r7
 8009a46:	bd80      	pop	{r7, pc}
 8009a48:	0800d914 	.word	0x0800d914
 8009a4c:	0800a099 	.word	0x0800a099
 8009a50:	200054c0 	.word	0x200054c0
 8009a54:	20004fc8 	.word	0x20004fc8
 8009a58:	20000134 	.word	0x20000134
 8009a5c:	200054bc 	.word	0x200054bc
 8009a60:	200054a8 	.word	0x200054a8
 8009a64:	200054a0 	.word	0x200054a0

08009a68 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009a68:	b480      	push	{r7}
 8009a6a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8009a6c:	4b04      	ldr	r3, [pc, #16]	@ (8009a80 <vTaskSuspendAll+0x18>)
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	3301      	adds	r3, #1
 8009a72:	4a03      	ldr	r2, [pc, #12]	@ (8009a80 <vTaskSuspendAll+0x18>)
 8009a74:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8009a76:	bf00      	nop
 8009a78:	46bd      	mov	sp, r7
 8009a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a7e:	4770      	bx	lr
 8009a80:	200054c4 	.word	0x200054c4

08009a84 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009a84:	b580      	push	{r7, lr}
 8009a86:	b084      	sub	sp, #16
 8009a88:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8009a8a:	2300      	movs	r3, #0
 8009a8c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009a8e:	2300      	movs	r3, #0
 8009a90:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009a92:	4b42      	ldr	r3, [pc, #264]	@ (8009b9c <xTaskResumeAll+0x118>)
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d10b      	bne.n	8009ab2 <xTaskResumeAll+0x2e>
	__asm volatile
 8009a9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a9e:	f383 8811 	msr	BASEPRI, r3
 8009aa2:	f3bf 8f6f 	isb	sy
 8009aa6:	f3bf 8f4f 	dsb	sy
 8009aaa:	603b      	str	r3, [r7, #0]
}
 8009aac:	bf00      	nop
 8009aae:	bf00      	nop
 8009ab0:	e7fd      	b.n	8009aae <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009ab2:	f7fe ff59 	bl	8008968 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009ab6:	4b39      	ldr	r3, [pc, #228]	@ (8009b9c <xTaskResumeAll+0x118>)
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	3b01      	subs	r3, #1
 8009abc:	4a37      	ldr	r2, [pc, #220]	@ (8009b9c <xTaskResumeAll+0x118>)
 8009abe:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009ac0:	4b36      	ldr	r3, [pc, #216]	@ (8009b9c <xTaskResumeAll+0x118>)
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	d162      	bne.n	8009b8e <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009ac8:	4b35      	ldr	r3, [pc, #212]	@ (8009ba0 <xTaskResumeAll+0x11c>)
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	d05e      	beq.n	8009b8e <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009ad0:	e02f      	b.n	8009b32 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009ad2:	4b34      	ldr	r3, [pc, #208]	@ (8009ba4 <xTaskResumeAll+0x120>)
 8009ad4:	68db      	ldr	r3, [r3, #12]
 8009ad6:	68db      	ldr	r3, [r3, #12]
 8009ad8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	3318      	adds	r3, #24
 8009ade:	4618      	mov	r0, r3
 8009ae0:	f7fe fdea 	bl	80086b8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009ae4:	68fb      	ldr	r3, [r7, #12]
 8009ae6:	3304      	adds	r3, #4
 8009ae8:	4618      	mov	r0, r3
 8009aea:	f7fe fde5 	bl	80086b8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009aee:	68fb      	ldr	r3, [r7, #12]
 8009af0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009af2:	4b2d      	ldr	r3, [pc, #180]	@ (8009ba8 <xTaskResumeAll+0x124>)
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	429a      	cmp	r2, r3
 8009af8:	d903      	bls.n	8009b02 <xTaskResumeAll+0x7e>
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009afe:	4a2a      	ldr	r2, [pc, #168]	@ (8009ba8 <xTaskResumeAll+0x124>)
 8009b00:	6013      	str	r3, [r2, #0]
 8009b02:	68fb      	ldr	r3, [r7, #12]
 8009b04:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009b06:	4613      	mov	r3, r2
 8009b08:	009b      	lsls	r3, r3, #2
 8009b0a:	4413      	add	r3, r2
 8009b0c:	009b      	lsls	r3, r3, #2
 8009b0e:	4a27      	ldr	r2, [pc, #156]	@ (8009bac <xTaskResumeAll+0x128>)
 8009b10:	441a      	add	r2, r3
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	3304      	adds	r3, #4
 8009b16:	4619      	mov	r1, r3
 8009b18:	4610      	mov	r0, r2
 8009b1a:	f7fe fd70 	bl	80085fe <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009b1e:	68fb      	ldr	r3, [r7, #12]
 8009b20:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009b22:	4b23      	ldr	r3, [pc, #140]	@ (8009bb0 <xTaskResumeAll+0x12c>)
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b28:	429a      	cmp	r2, r3
 8009b2a:	d302      	bcc.n	8009b32 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8009b2c:	4b21      	ldr	r3, [pc, #132]	@ (8009bb4 <xTaskResumeAll+0x130>)
 8009b2e:	2201      	movs	r2, #1
 8009b30:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009b32:	4b1c      	ldr	r3, [pc, #112]	@ (8009ba4 <xTaskResumeAll+0x120>)
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	d1cb      	bne.n	8009ad2 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009b3a:	68fb      	ldr	r3, [r7, #12]
 8009b3c:	2b00      	cmp	r3, #0
 8009b3e:	d001      	beq.n	8009b44 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009b40:	f000 fb66 	bl	800a210 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8009b44:	4b1c      	ldr	r3, [pc, #112]	@ (8009bb8 <xTaskResumeAll+0x134>)
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	d010      	beq.n	8009b72 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009b50:	f000 f846 	bl	8009be0 <xTaskIncrementTick>
 8009b54:	4603      	mov	r3, r0
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	d002      	beq.n	8009b60 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8009b5a:	4b16      	ldr	r3, [pc, #88]	@ (8009bb4 <xTaskResumeAll+0x130>)
 8009b5c:	2201      	movs	r2, #1
 8009b5e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	3b01      	subs	r3, #1
 8009b64:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	2b00      	cmp	r3, #0
 8009b6a:	d1f1      	bne.n	8009b50 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8009b6c:	4b12      	ldr	r3, [pc, #72]	@ (8009bb8 <xTaskResumeAll+0x134>)
 8009b6e:	2200      	movs	r2, #0
 8009b70:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009b72:	4b10      	ldr	r3, [pc, #64]	@ (8009bb4 <xTaskResumeAll+0x130>)
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	d009      	beq.n	8009b8e <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009b7a:	2301      	movs	r3, #1
 8009b7c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009b7e:	4b0f      	ldr	r3, [pc, #60]	@ (8009bbc <xTaskResumeAll+0x138>)
 8009b80:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009b84:	601a      	str	r2, [r3, #0]
 8009b86:	f3bf 8f4f 	dsb	sy
 8009b8a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009b8e:	f7fe ff1d 	bl	80089cc <vPortExitCritical>

	return xAlreadyYielded;
 8009b92:	68bb      	ldr	r3, [r7, #8]
}
 8009b94:	4618      	mov	r0, r3
 8009b96:	3710      	adds	r7, #16
 8009b98:	46bd      	mov	sp, r7
 8009b9a:	bd80      	pop	{r7, pc}
 8009b9c:	200054c4 	.word	0x200054c4
 8009ba0:	2000549c 	.word	0x2000549c
 8009ba4:	2000545c 	.word	0x2000545c
 8009ba8:	200054a4 	.word	0x200054a4
 8009bac:	20004fcc 	.word	0x20004fcc
 8009bb0:	20004fc8 	.word	0x20004fc8
 8009bb4:	200054b0 	.word	0x200054b0
 8009bb8:	200054ac 	.word	0x200054ac
 8009bbc:	e000ed04 	.word	0xe000ed04

08009bc0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009bc0:	b480      	push	{r7}
 8009bc2:	b083      	sub	sp, #12
 8009bc4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8009bc6:	4b05      	ldr	r3, [pc, #20]	@ (8009bdc <xTaskGetTickCount+0x1c>)
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009bcc:	687b      	ldr	r3, [r7, #4]
}
 8009bce:	4618      	mov	r0, r3
 8009bd0:	370c      	adds	r7, #12
 8009bd2:	46bd      	mov	sp, r7
 8009bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bd8:	4770      	bx	lr
 8009bda:	bf00      	nop
 8009bdc:	200054a0 	.word	0x200054a0

08009be0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009be0:	b580      	push	{r7, lr}
 8009be2:	b086      	sub	sp, #24
 8009be4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009be6:	2300      	movs	r3, #0
 8009be8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009bea:	4b4f      	ldr	r3, [pc, #316]	@ (8009d28 <xTaskIncrementTick+0x148>)
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	f040 8090 	bne.w	8009d14 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009bf4:	4b4d      	ldr	r3, [pc, #308]	@ (8009d2c <xTaskIncrementTick+0x14c>)
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	3301      	adds	r3, #1
 8009bfa:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009bfc:	4a4b      	ldr	r2, [pc, #300]	@ (8009d2c <xTaskIncrementTick+0x14c>)
 8009bfe:	693b      	ldr	r3, [r7, #16]
 8009c00:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009c02:	693b      	ldr	r3, [r7, #16]
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	d121      	bne.n	8009c4c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8009c08:	4b49      	ldr	r3, [pc, #292]	@ (8009d30 <xTaskIncrementTick+0x150>)
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	d00b      	beq.n	8009c2a <xTaskIncrementTick+0x4a>
	__asm volatile
 8009c12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c16:	f383 8811 	msr	BASEPRI, r3
 8009c1a:	f3bf 8f6f 	isb	sy
 8009c1e:	f3bf 8f4f 	dsb	sy
 8009c22:	603b      	str	r3, [r7, #0]
}
 8009c24:	bf00      	nop
 8009c26:	bf00      	nop
 8009c28:	e7fd      	b.n	8009c26 <xTaskIncrementTick+0x46>
 8009c2a:	4b41      	ldr	r3, [pc, #260]	@ (8009d30 <xTaskIncrementTick+0x150>)
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	60fb      	str	r3, [r7, #12]
 8009c30:	4b40      	ldr	r3, [pc, #256]	@ (8009d34 <xTaskIncrementTick+0x154>)
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	4a3e      	ldr	r2, [pc, #248]	@ (8009d30 <xTaskIncrementTick+0x150>)
 8009c36:	6013      	str	r3, [r2, #0]
 8009c38:	4a3e      	ldr	r2, [pc, #248]	@ (8009d34 <xTaskIncrementTick+0x154>)
 8009c3a:	68fb      	ldr	r3, [r7, #12]
 8009c3c:	6013      	str	r3, [r2, #0]
 8009c3e:	4b3e      	ldr	r3, [pc, #248]	@ (8009d38 <xTaskIncrementTick+0x158>)
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	3301      	adds	r3, #1
 8009c44:	4a3c      	ldr	r2, [pc, #240]	@ (8009d38 <xTaskIncrementTick+0x158>)
 8009c46:	6013      	str	r3, [r2, #0]
 8009c48:	f000 fae2 	bl	800a210 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009c4c:	4b3b      	ldr	r3, [pc, #236]	@ (8009d3c <xTaskIncrementTick+0x15c>)
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	693a      	ldr	r2, [r7, #16]
 8009c52:	429a      	cmp	r2, r3
 8009c54:	d349      	bcc.n	8009cea <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009c56:	4b36      	ldr	r3, [pc, #216]	@ (8009d30 <xTaskIncrementTick+0x150>)
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	d104      	bne.n	8009c6a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009c60:	4b36      	ldr	r3, [pc, #216]	@ (8009d3c <xTaskIncrementTick+0x15c>)
 8009c62:	f04f 32ff 	mov.w	r2, #4294967295
 8009c66:	601a      	str	r2, [r3, #0]
					break;
 8009c68:	e03f      	b.n	8009cea <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009c6a:	4b31      	ldr	r3, [pc, #196]	@ (8009d30 <xTaskIncrementTick+0x150>)
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	68db      	ldr	r3, [r3, #12]
 8009c70:	68db      	ldr	r3, [r3, #12]
 8009c72:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009c74:	68bb      	ldr	r3, [r7, #8]
 8009c76:	685b      	ldr	r3, [r3, #4]
 8009c78:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009c7a:	693a      	ldr	r2, [r7, #16]
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	429a      	cmp	r2, r3
 8009c80:	d203      	bcs.n	8009c8a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009c82:	4a2e      	ldr	r2, [pc, #184]	@ (8009d3c <xTaskIncrementTick+0x15c>)
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009c88:	e02f      	b.n	8009cea <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009c8a:	68bb      	ldr	r3, [r7, #8]
 8009c8c:	3304      	adds	r3, #4
 8009c8e:	4618      	mov	r0, r3
 8009c90:	f7fe fd12 	bl	80086b8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009c94:	68bb      	ldr	r3, [r7, #8]
 8009c96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	d004      	beq.n	8009ca6 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009c9c:	68bb      	ldr	r3, [r7, #8]
 8009c9e:	3318      	adds	r3, #24
 8009ca0:	4618      	mov	r0, r3
 8009ca2:	f7fe fd09 	bl	80086b8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009ca6:	68bb      	ldr	r3, [r7, #8]
 8009ca8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009caa:	4b25      	ldr	r3, [pc, #148]	@ (8009d40 <xTaskIncrementTick+0x160>)
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	429a      	cmp	r2, r3
 8009cb0:	d903      	bls.n	8009cba <xTaskIncrementTick+0xda>
 8009cb2:	68bb      	ldr	r3, [r7, #8]
 8009cb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009cb6:	4a22      	ldr	r2, [pc, #136]	@ (8009d40 <xTaskIncrementTick+0x160>)
 8009cb8:	6013      	str	r3, [r2, #0]
 8009cba:	68bb      	ldr	r3, [r7, #8]
 8009cbc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009cbe:	4613      	mov	r3, r2
 8009cc0:	009b      	lsls	r3, r3, #2
 8009cc2:	4413      	add	r3, r2
 8009cc4:	009b      	lsls	r3, r3, #2
 8009cc6:	4a1f      	ldr	r2, [pc, #124]	@ (8009d44 <xTaskIncrementTick+0x164>)
 8009cc8:	441a      	add	r2, r3
 8009cca:	68bb      	ldr	r3, [r7, #8]
 8009ccc:	3304      	adds	r3, #4
 8009cce:	4619      	mov	r1, r3
 8009cd0:	4610      	mov	r0, r2
 8009cd2:	f7fe fc94 	bl	80085fe <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009cd6:	68bb      	ldr	r3, [r7, #8]
 8009cd8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009cda:	4b1b      	ldr	r3, [pc, #108]	@ (8009d48 <xTaskIncrementTick+0x168>)
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ce0:	429a      	cmp	r2, r3
 8009ce2:	d3b8      	bcc.n	8009c56 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8009ce4:	2301      	movs	r3, #1
 8009ce6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009ce8:	e7b5      	b.n	8009c56 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009cea:	4b17      	ldr	r3, [pc, #92]	@ (8009d48 <xTaskIncrementTick+0x168>)
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009cf0:	4914      	ldr	r1, [pc, #80]	@ (8009d44 <xTaskIncrementTick+0x164>)
 8009cf2:	4613      	mov	r3, r2
 8009cf4:	009b      	lsls	r3, r3, #2
 8009cf6:	4413      	add	r3, r2
 8009cf8:	009b      	lsls	r3, r3, #2
 8009cfa:	440b      	add	r3, r1
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	2b01      	cmp	r3, #1
 8009d00:	d901      	bls.n	8009d06 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8009d02:	2301      	movs	r3, #1
 8009d04:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8009d06:	4b11      	ldr	r3, [pc, #68]	@ (8009d4c <xTaskIncrementTick+0x16c>)
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	d007      	beq.n	8009d1e <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8009d0e:	2301      	movs	r3, #1
 8009d10:	617b      	str	r3, [r7, #20]
 8009d12:	e004      	b.n	8009d1e <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8009d14:	4b0e      	ldr	r3, [pc, #56]	@ (8009d50 <xTaskIncrementTick+0x170>)
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	3301      	adds	r3, #1
 8009d1a:	4a0d      	ldr	r2, [pc, #52]	@ (8009d50 <xTaskIncrementTick+0x170>)
 8009d1c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8009d1e:	697b      	ldr	r3, [r7, #20]
}
 8009d20:	4618      	mov	r0, r3
 8009d22:	3718      	adds	r7, #24
 8009d24:	46bd      	mov	sp, r7
 8009d26:	bd80      	pop	{r7, pc}
 8009d28:	200054c4 	.word	0x200054c4
 8009d2c:	200054a0 	.word	0x200054a0
 8009d30:	20005454 	.word	0x20005454
 8009d34:	20005458 	.word	0x20005458
 8009d38:	200054b4 	.word	0x200054b4
 8009d3c:	200054bc 	.word	0x200054bc
 8009d40:	200054a4 	.word	0x200054a4
 8009d44:	20004fcc 	.word	0x20004fcc
 8009d48:	20004fc8 	.word	0x20004fc8
 8009d4c:	200054b0 	.word	0x200054b0
 8009d50:	200054ac 	.word	0x200054ac

08009d54 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009d54:	b480      	push	{r7}
 8009d56:	b085      	sub	sp, #20
 8009d58:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009d5a:	4b2b      	ldr	r3, [pc, #172]	@ (8009e08 <vTaskSwitchContext+0xb4>)
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	d003      	beq.n	8009d6a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009d62:	4b2a      	ldr	r3, [pc, #168]	@ (8009e0c <vTaskSwitchContext+0xb8>)
 8009d64:	2201      	movs	r2, #1
 8009d66:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009d68:	e047      	b.n	8009dfa <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8009d6a:	4b28      	ldr	r3, [pc, #160]	@ (8009e0c <vTaskSwitchContext+0xb8>)
 8009d6c:	2200      	movs	r2, #0
 8009d6e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009d70:	4b27      	ldr	r3, [pc, #156]	@ (8009e10 <vTaskSwitchContext+0xbc>)
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	60fb      	str	r3, [r7, #12]
 8009d76:	e011      	b.n	8009d9c <vTaskSwitchContext+0x48>
 8009d78:	68fb      	ldr	r3, [r7, #12]
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	d10b      	bne.n	8009d96 <vTaskSwitchContext+0x42>
	__asm volatile
 8009d7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d82:	f383 8811 	msr	BASEPRI, r3
 8009d86:	f3bf 8f6f 	isb	sy
 8009d8a:	f3bf 8f4f 	dsb	sy
 8009d8e:	607b      	str	r3, [r7, #4]
}
 8009d90:	bf00      	nop
 8009d92:	bf00      	nop
 8009d94:	e7fd      	b.n	8009d92 <vTaskSwitchContext+0x3e>
 8009d96:	68fb      	ldr	r3, [r7, #12]
 8009d98:	3b01      	subs	r3, #1
 8009d9a:	60fb      	str	r3, [r7, #12]
 8009d9c:	491d      	ldr	r1, [pc, #116]	@ (8009e14 <vTaskSwitchContext+0xc0>)
 8009d9e:	68fa      	ldr	r2, [r7, #12]
 8009da0:	4613      	mov	r3, r2
 8009da2:	009b      	lsls	r3, r3, #2
 8009da4:	4413      	add	r3, r2
 8009da6:	009b      	lsls	r3, r3, #2
 8009da8:	440b      	add	r3, r1
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	d0e3      	beq.n	8009d78 <vTaskSwitchContext+0x24>
 8009db0:	68fa      	ldr	r2, [r7, #12]
 8009db2:	4613      	mov	r3, r2
 8009db4:	009b      	lsls	r3, r3, #2
 8009db6:	4413      	add	r3, r2
 8009db8:	009b      	lsls	r3, r3, #2
 8009dba:	4a16      	ldr	r2, [pc, #88]	@ (8009e14 <vTaskSwitchContext+0xc0>)
 8009dbc:	4413      	add	r3, r2
 8009dbe:	60bb      	str	r3, [r7, #8]
 8009dc0:	68bb      	ldr	r3, [r7, #8]
 8009dc2:	685b      	ldr	r3, [r3, #4]
 8009dc4:	685a      	ldr	r2, [r3, #4]
 8009dc6:	68bb      	ldr	r3, [r7, #8]
 8009dc8:	605a      	str	r2, [r3, #4]
 8009dca:	68bb      	ldr	r3, [r7, #8]
 8009dcc:	685a      	ldr	r2, [r3, #4]
 8009dce:	68bb      	ldr	r3, [r7, #8]
 8009dd0:	3308      	adds	r3, #8
 8009dd2:	429a      	cmp	r2, r3
 8009dd4:	d104      	bne.n	8009de0 <vTaskSwitchContext+0x8c>
 8009dd6:	68bb      	ldr	r3, [r7, #8]
 8009dd8:	685b      	ldr	r3, [r3, #4]
 8009dda:	685a      	ldr	r2, [r3, #4]
 8009ddc:	68bb      	ldr	r3, [r7, #8]
 8009dde:	605a      	str	r2, [r3, #4]
 8009de0:	68bb      	ldr	r3, [r7, #8]
 8009de2:	685b      	ldr	r3, [r3, #4]
 8009de4:	68db      	ldr	r3, [r3, #12]
 8009de6:	4a0c      	ldr	r2, [pc, #48]	@ (8009e18 <vTaskSwitchContext+0xc4>)
 8009de8:	6013      	str	r3, [r2, #0]
 8009dea:	4a09      	ldr	r2, [pc, #36]	@ (8009e10 <vTaskSwitchContext+0xbc>)
 8009dec:	68fb      	ldr	r3, [r7, #12]
 8009dee:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009df0:	4b09      	ldr	r3, [pc, #36]	@ (8009e18 <vTaskSwitchContext+0xc4>)
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	3354      	adds	r3, #84	@ 0x54
 8009df6:	4a09      	ldr	r2, [pc, #36]	@ (8009e1c <vTaskSwitchContext+0xc8>)
 8009df8:	6013      	str	r3, [r2, #0]
}
 8009dfa:	bf00      	nop
 8009dfc:	3714      	adds	r7, #20
 8009dfe:	46bd      	mov	sp, r7
 8009e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e04:	4770      	bx	lr
 8009e06:	bf00      	nop
 8009e08:	200054c4 	.word	0x200054c4
 8009e0c:	200054b0 	.word	0x200054b0
 8009e10:	200054a4 	.word	0x200054a4
 8009e14:	20004fcc 	.word	0x20004fcc
 8009e18:	20004fc8 	.word	0x20004fc8
 8009e1c:	20000134 	.word	0x20000134

08009e20 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009e20:	b580      	push	{r7, lr}
 8009e22:	b084      	sub	sp, #16
 8009e24:	af00      	add	r7, sp, #0
 8009e26:	6078      	str	r0, [r7, #4]
 8009e28:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	d10b      	bne.n	8009e48 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8009e30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e34:	f383 8811 	msr	BASEPRI, r3
 8009e38:	f3bf 8f6f 	isb	sy
 8009e3c:	f3bf 8f4f 	dsb	sy
 8009e40:	60fb      	str	r3, [r7, #12]
}
 8009e42:	bf00      	nop
 8009e44:	bf00      	nop
 8009e46:	e7fd      	b.n	8009e44 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009e48:	4b07      	ldr	r3, [pc, #28]	@ (8009e68 <vTaskPlaceOnEventList+0x48>)
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	3318      	adds	r3, #24
 8009e4e:	4619      	mov	r1, r3
 8009e50:	6878      	ldr	r0, [r7, #4]
 8009e52:	f7fe fbf8 	bl	8008646 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009e56:	2101      	movs	r1, #1
 8009e58:	6838      	ldr	r0, [r7, #0]
 8009e5a:	f000 fa87 	bl	800a36c <prvAddCurrentTaskToDelayedList>
}
 8009e5e:	bf00      	nop
 8009e60:	3710      	adds	r7, #16
 8009e62:	46bd      	mov	sp, r7
 8009e64:	bd80      	pop	{r7, pc}
 8009e66:	bf00      	nop
 8009e68:	20004fc8 	.word	0x20004fc8

08009e6c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009e6c:	b580      	push	{r7, lr}
 8009e6e:	b086      	sub	sp, #24
 8009e70:	af00      	add	r7, sp, #0
 8009e72:	60f8      	str	r0, [r7, #12]
 8009e74:	60b9      	str	r1, [r7, #8]
 8009e76:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8009e78:	68fb      	ldr	r3, [r7, #12]
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	d10b      	bne.n	8009e96 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8009e7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e82:	f383 8811 	msr	BASEPRI, r3
 8009e86:	f3bf 8f6f 	isb	sy
 8009e8a:	f3bf 8f4f 	dsb	sy
 8009e8e:	617b      	str	r3, [r7, #20]
}
 8009e90:	bf00      	nop
 8009e92:	bf00      	nop
 8009e94:	e7fd      	b.n	8009e92 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009e96:	4b0a      	ldr	r3, [pc, #40]	@ (8009ec0 <vTaskPlaceOnEventListRestricted+0x54>)
 8009e98:	681b      	ldr	r3, [r3, #0]
 8009e9a:	3318      	adds	r3, #24
 8009e9c:	4619      	mov	r1, r3
 8009e9e:	68f8      	ldr	r0, [r7, #12]
 8009ea0:	f7fe fbad 	bl	80085fe <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	d002      	beq.n	8009eb0 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8009eaa:	f04f 33ff 	mov.w	r3, #4294967295
 8009eae:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8009eb0:	6879      	ldr	r1, [r7, #4]
 8009eb2:	68b8      	ldr	r0, [r7, #8]
 8009eb4:	f000 fa5a 	bl	800a36c <prvAddCurrentTaskToDelayedList>
	}
 8009eb8:	bf00      	nop
 8009eba:	3718      	adds	r7, #24
 8009ebc:	46bd      	mov	sp, r7
 8009ebe:	bd80      	pop	{r7, pc}
 8009ec0:	20004fc8 	.word	0x20004fc8

08009ec4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009ec4:	b580      	push	{r7, lr}
 8009ec6:	b086      	sub	sp, #24
 8009ec8:	af00      	add	r7, sp, #0
 8009eca:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	68db      	ldr	r3, [r3, #12]
 8009ed0:	68db      	ldr	r3, [r3, #12]
 8009ed2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009ed4:	693b      	ldr	r3, [r7, #16]
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	d10b      	bne.n	8009ef2 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8009eda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ede:	f383 8811 	msr	BASEPRI, r3
 8009ee2:	f3bf 8f6f 	isb	sy
 8009ee6:	f3bf 8f4f 	dsb	sy
 8009eea:	60fb      	str	r3, [r7, #12]
}
 8009eec:	bf00      	nop
 8009eee:	bf00      	nop
 8009ef0:	e7fd      	b.n	8009eee <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009ef2:	693b      	ldr	r3, [r7, #16]
 8009ef4:	3318      	adds	r3, #24
 8009ef6:	4618      	mov	r0, r3
 8009ef8:	f7fe fbde 	bl	80086b8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009efc:	4b1d      	ldr	r3, [pc, #116]	@ (8009f74 <xTaskRemoveFromEventList+0xb0>)
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	d11d      	bne.n	8009f40 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009f04:	693b      	ldr	r3, [r7, #16]
 8009f06:	3304      	adds	r3, #4
 8009f08:	4618      	mov	r0, r3
 8009f0a:	f7fe fbd5 	bl	80086b8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009f0e:	693b      	ldr	r3, [r7, #16]
 8009f10:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009f12:	4b19      	ldr	r3, [pc, #100]	@ (8009f78 <xTaskRemoveFromEventList+0xb4>)
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	429a      	cmp	r2, r3
 8009f18:	d903      	bls.n	8009f22 <xTaskRemoveFromEventList+0x5e>
 8009f1a:	693b      	ldr	r3, [r7, #16]
 8009f1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f1e:	4a16      	ldr	r2, [pc, #88]	@ (8009f78 <xTaskRemoveFromEventList+0xb4>)
 8009f20:	6013      	str	r3, [r2, #0]
 8009f22:	693b      	ldr	r3, [r7, #16]
 8009f24:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009f26:	4613      	mov	r3, r2
 8009f28:	009b      	lsls	r3, r3, #2
 8009f2a:	4413      	add	r3, r2
 8009f2c:	009b      	lsls	r3, r3, #2
 8009f2e:	4a13      	ldr	r2, [pc, #76]	@ (8009f7c <xTaskRemoveFromEventList+0xb8>)
 8009f30:	441a      	add	r2, r3
 8009f32:	693b      	ldr	r3, [r7, #16]
 8009f34:	3304      	adds	r3, #4
 8009f36:	4619      	mov	r1, r3
 8009f38:	4610      	mov	r0, r2
 8009f3a:	f7fe fb60 	bl	80085fe <vListInsertEnd>
 8009f3e:	e005      	b.n	8009f4c <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009f40:	693b      	ldr	r3, [r7, #16]
 8009f42:	3318      	adds	r3, #24
 8009f44:	4619      	mov	r1, r3
 8009f46:	480e      	ldr	r0, [pc, #56]	@ (8009f80 <xTaskRemoveFromEventList+0xbc>)
 8009f48:	f7fe fb59 	bl	80085fe <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009f4c:	693b      	ldr	r3, [r7, #16]
 8009f4e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009f50:	4b0c      	ldr	r3, [pc, #48]	@ (8009f84 <xTaskRemoveFromEventList+0xc0>)
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f56:	429a      	cmp	r2, r3
 8009f58:	d905      	bls.n	8009f66 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009f5a:	2301      	movs	r3, #1
 8009f5c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009f5e:	4b0a      	ldr	r3, [pc, #40]	@ (8009f88 <xTaskRemoveFromEventList+0xc4>)
 8009f60:	2201      	movs	r2, #1
 8009f62:	601a      	str	r2, [r3, #0]
 8009f64:	e001      	b.n	8009f6a <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8009f66:	2300      	movs	r3, #0
 8009f68:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8009f6a:	697b      	ldr	r3, [r7, #20]
}
 8009f6c:	4618      	mov	r0, r3
 8009f6e:	3718      	adds	r7, #24
 8009f70:	46bd      	mov	sp, r7
 8009f72:	bd80      	pop	{r7, pc}
 8009f74:	200054c4 	.word	0x200054c4
 8009f78:	200054a4 	.word	0x200054a4
 8009f7c:	20004fcc 	.word	0x20004fcc
 8009f80:	2000545c 	.word	0x2000545c
 8009f84:	20004fc8 	.word	0x20004fc8
 8009f88:	200054b0 	.word	0x200054b0

08009f8c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009f8c:	b480      	push	{r7}
 8009f8e:	b083      	sub	sp, #12
 8009f90:	af00      	add	r7, sp, #0
 8009f92:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009f94:	4b06      	ldr	r3, [pc, #24]	@ (8009fb0 <vTaskInternalSetTimeOutState+0x24>)
 8009f96:	681a      	ldr	r2, [r3, #0]
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009f9c:	4b05      	ldr	r3, [pc, #20]	@ (8009fb4 <vTaskInternalSetTimeOutState+0x28>)
 8009f9e:	681a      	ldr	r2, [r3, #0]
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	605a      	str	r2, [r3, #4]
}
 8009fa4:	bf00      	nop
 8009fa6:	370c      	adds	r7, #12
 8009fa8:	46bd      	mov	sp, r7
 8009faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fae:	4770      	bx	lr
 8009fb0:	200054b4 	.word	0x200054b4
 8009fb4:	200054a0 	.word	0x200054a0

08009fb8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009fb8:	b580      	push	{r7, lr}
 8009fba:	b088      	sub	sp, #32
 8009fbc:	af00      	add	r7, sp, #0
 8009fbe:	6078      	str	r0, [r7, #4]
 8009fc0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	d10b      	bne.n	8009fe0 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8009fc8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009fcc:	f383 8811 	msr	BASEPRI, r3
 8009fd0:	f3bf 8f6f 	isb	sy
 8009fd4:	f3bf 8f4f 	dsb	sy
 8009fd8:	613b      	str	r3, [r7, #16]
}
 8009fda:	bf00      	nop
 8009fdc:	bf00      	nop
 8009fde:	e7fd      	b.n	8009fdc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8009fe0:	683b      	ldr	r3, [r7, #0]
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	d10b      	bne.n	8009ffe <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8009fe6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009fea:	f383 8811 	msr	BASEPRI, r3
 8009fee:	f3bf 8f6f 	isb	sy
 8009ff2:	f3bf 8f4f 	dsb	sy
 8009ff6:	60fb      	str	r3, [r7, #12]
}
 8009ff8:	bf00      	nop
 8009ffa:	bf00      	nop
 8009ffc:	e7fd      	b.n	8009ffa <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8009ffe:	f7fe fcb3 	bl	8008968 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800a002:	4b1d      	ldr	r3, [pc, #116]	@ (800a078 <xTaskCheckForTimeOut+0xc0>)
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	685b      	ldr	r3, [r3, #4]
 800a00c:	69ba      	ldr	r2, [r7, #24]
 800a00e:	1ad3      	subs	r3, r2, r3
 800a010:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800a012:	683b      	ldr	r3, [r7, #0]
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a01a:	d102      	bne.n	800a022 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800a01c:	2300      	movs	r3, #0
 800a01e:	61fb      	str	r3, [r7, #28]
 800a020:	e023      	b.n	800a06a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	681a      	ldr	r2, [r3, #0]
 800a026:	4b15      	ldr	r3, [pc, #84]	@ (800a07c <xTaskCheckForTimeOut+0xc4>)
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	429a      	cmp	r2, r3
 800a02c:	d007      	beq.n	800a03e <xTaskCheckForTimeOut+0x86>
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	685b      	ldr	r3, [r3, #4]
 800a032:	69ba      	ldr	r2, [r7, #24]
 800a034:	429a      	cmp	r2, r3
 800a036:	d302      	bcc.n	800a03e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800a038:	2301      	movs	r3, #1
 800a03a:	61fb      	str	r3, [r7, #28]
 800a03c:	e015      	b.n	800a06a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a03e:	683b      	ldr	r3, [r7, #0]
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	697a      	ldr	r2, [r7, #20]
 800a044:	429a      	cmp	r2, r3
 800a046:	d20b      	bcs.n	800a060 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800a048:	683b      	ldr	r3, [r7, #0]
 800a04a:	681a      	ldr	r2, [r3, #0]
 800a04c:	697b      	ldr	r3, [r7, #20]
 800a04e:	1ad2      	subs	r2, r2, r3
 800a050:	683b      	ldr	r3, [r7, #0]
 800a052:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a054:	6878      	ldr	r0, [r7, #4]
 800a056:	f7ff ff99 	bl	8009f8c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800a05a:	2300      	movs	r3, #0
 800a05c:	61fb      	str	r3, [r7, #28]
 800a05e:	e004      	b.n	800a06a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800a060:	683b      	ldr	r3, [r7, #0]
 800a062:	2200      	movs	r2, #0
 800a064:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800a066:	2301      	movs	r3, #1
 800a068:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800a06a:	f7fe fcaf 	bl	80089cc <vPortExitCritical>

	return xReturn;
 800a06e:	69fb      	ldr	r3, [r7, #28]
}
 800a070:	4618      	mov	r0, r3
 800a072:	3720      	adds	r7, #32
 800a074:	46bd      	mov	sp, r7
 800a076:	bd80      	pop	{r7, pc}
 800a078:	200054a0 	.word	0x200054a0
 800a07c:	200054b4 	.word	0x200054b4

0800a080 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800a080:	b480      	push	{r7}
 800a082:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800a084:	4b03      	ldr	r3, [pc, #12]	@ (800a094 <vTaskMissedYield+0x14>)
 800a086:	2201      	movs	r2, #1
 800a088:	601a      	str	r2, [r3, #0]
}
 800a08a:	bf00      	nop
 800a08c:	46bd      	mov	sp, r7
 800a08e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a092:	4770      	bx	lr
 800a094:	200054b0 	.word	0x200054b0

0800a098 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a098:	b580      	push	{r7, lr}
 800a09a:	b082      	sub	sp, #8
 800a09c:	af00      	add	r7, sp, #0
 800a09e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a0a0:	f000 f852 	bl	800a148 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a0a4:	4b06      	ldr	r3, [pc, #24]	@ (800a0c0 <prvIdleTask+0x28>)
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	2b01      	cmp	r3, #1
 800a0aa:	d9f9      	bls.n	800a0a0 <prvIdleTask+0x8>
			{
				taskYIELD();
 800a0ac:	4b05      	ldr	r3, [pc, #20]	@ (800a0c4 <prvIdleTask+0x2c>)
 800a0ae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a0b2:	601a      	str	r2, [r3, #0]
 800a0b4:	f3bf 8f4f 	dsb	sy
 800a0b8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800a0bc:	e7f0      	b.n	800a0a0 <prvIdleTask+0x8>
 800a0be:	bf00      	nop
 800a0c0:	20004fcc 	.word	0x20004fcc
 800a0c4:	e000ed04 	.word	0xe000ed04

0800a0c8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a0c8:	b580      	push	{r7, lr}
 800a0ca:	b082      	sub	sp, #8
 800a0cc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a0ce:	2300      	movs	r3, #0
 800a0d0:	607b      	str	r3, [r7, #4]
 800a0d2:	e00c      	b.n	800a0ee <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a0d4:	687a      	ldr	r2, [r7, #4]
 800a0d6:	4613      	mov	r3, r2
 800a0d8:	009b      	lsls	r3, r3, #2
 800a0da:	4413      	add	r3, r2
 800a0dc:	009b      	lsls	r3, r3, #2
 800a0de:	4a12      	ldr	r2, [pc, #72]	@ (800a128 <prvInitialiseTaskLists+0x60>)
 800a0e0:	4413      	add	r3, r2
 800a0e2:	4618      	mov	r0, r3
 800a0e4:	f7fe fa5e 	bl	80085a4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	3301      	adds	r3, #1
 800a0ec:	607b      	str	r3, [r7, #4]
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	2b37      	cmp	r3, #55	@ 0x37
 800a0f2:	d9ef      	bls.n	800a0d4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a0f4:	480d      	ldr	r0, [pc, #52]	@ (800a12c <prvInitialiseTaskLists+0x64>)
 800a0f6:	f7fe fa55 	bl	80085a4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a0fa:	480d      	ldr	r0, [pc, #52]	@ (800a130 <prvInitialiseTaskLists+0x68>)
 800a0fc:	f7fe fa52 	bl	80085a4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a100:	480c      	ldr	r0, [pc, #48]	@ (800a134 <prvInitialiseTaskLists+0x6c>)
 800a102:	f7fe fa4f 	bl	80085a4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a106:	480c      	ldr	r0, [pc, #48]	@ (800a138 <prvInitialiseTaskLists+0x70>)
 800a108:	f7fe fa4c 	bl	80085a4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a10c:	480b      	ldr	r0, [pc, #44]	@ (800a13c <prvInitialiseTaskLists+0x74>)
 800a10e:	f7fe fa49 	bl	80085a4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a112:	4b0b      	ldr	r3, [pc, #44]	@ (800a140 <prvInitialiseTaskLists+0x78>)
 800a114:	4a05      	ldr	r2, [pc, #20]	@ (800a12c <prvInitialiseTaskLists+0x64>)
 800a116:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a118:	4b0a      	ldr	r3, [pc, #40]	@ (800a144 <prvInitialiseTaskLists+0x7c>)
 800a11a:	4a05      	ldr	r2, [pc, #20]	@ (800a130 <prvInitialiseTaskLists+0x68>)
 800a11c:	601a      	str	r2, [r3, #0]
}
 800a11e:	bf00      	nop
 800a120:	3708      	adds	r7, #8
 800a122:	46bd      	mov	sp, r7
 800a124:	bd80      	pop	{r7, pc}
 800a126:	bf00      	nop
 800a128:	20004fcc 	.word	0x20004fcc
 800a12c:	2000542c 	.word	0x2000542c
 800a130:	20005440 	.word	0x20005440
 800a134:	2000545c 	.word	0x2000545c
 800a138:	20005470 	.word	0x20005470
 800a13c:	20005488 	.word	0x20005488
 800a140:	20005454 	.word	0x20005454
 800a144:	20005458 	.word	0x20005458

0800a148 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a148:	b580      	push	{r7, lr}
 800a14a:	b082      	sub	sp, #8
 800a14c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a14e:	e019      	b.n	800a184 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a150:	f7fe fc0a 	bl	8008968 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a154:	4b10      	ldr	r3, [pc, #64]	@ (800a198 <prvCheckTasksWaitingTermination+0x50>)
 800a156:	68db      	ldr	r3, [r3, #12]
 800a158:	68db      	ldr	r3, [r3, #12]
 800a15a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	3304      	adds	r3, #4
 800a160:	4618      	mov	r0, r3
 800a162:	f7fe faa9 	bl	80086b8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a166:	4b0d      	ldr	r3, [pc, #52]	@ (800a19c <prvCheckTasksWaitingTermination+0x54>)
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	3b01      	subs	r3, #1
 800a16c:	4a0b      	ldr	r2, [pc, #44]	@ (800a19c <prvCheckTasksWaitingTermination+0x54>)
 800a16e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a170:	4b0b      	ldr	r3, [pc, #44]	@ (800a1a0 <prvCheckTasksWaitingTermination+0x58>)
 800a172:	681b      	ldr	r3, [r3, #0]
 800a174:	3b01      	subs	r3, #1
 800a176:	4a0a      	ldr	r2, [pc, #40]	@ (800a1a0 <prvCheckTasksWaitingTermination+0x58>)
 800a178:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a17a:	f7fe fc27 	bl	80089cc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a17e:	6878      	ldr	r0, [r7, #4]
 800a180:	f000 f810 	bl	800a1a4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a184:	4b06      	ldr	r3, [pc, #24]	@ (800a1a0 <prvCheckTasksWaitingTermination+0x58>)
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	2b00      	cmp	r3, #0
 800a18a:	d1e1      	bne.n	800a150 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a18c:	bf00      	nop
 800a18e:	bf00      	nop
 800a190:	3708      	adds	r7, #8
 800a192:	46bd      	mov	sp, r7
 800a194:	bd80      	pop	{r7, pc}
 800a196:	bf00      	nop
 800a198:	20005470 	.word	0x20005470
 800a19c:	2000549c 	.word	0x2000549c
 800a1a0:	20005484 	.word	0x20005484

0800a1a4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a1a4:	b580      	push	{r7, lr}
 800a1a6:	b084      	sub	sp, #16
 800a1a8:	af00      	add	r7, sp, #0
 800a1aa:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	3354      	adds	r3, #84	@ 0x54
 800a1b0:	4618      	mov	r0, r3
 800a1b2:	f002 fe83 	bl	800cebc <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	d108      	bne.n	800a1d2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a1c4:	4618      	mov	r0, r3
 800a1c6:	f7fe f8cd 	bl	8008364 <vPortFree>
				vPortFree( pxTCB );
 800a1ca:	6878      	ldr	r0, [r7, #4]
 800a1cc:	f7fe f8ca 	bl	8008364 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a1d0:	e019      	b.n	800a206 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800a1d8:	2b01      	cmp	r3, #1
 800a1da:	d103      	bne.n	800a1e4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800a1dc:	6878      	ldr	r0, [r7, #4]
 800a1de:	f7fe f8c1 	bl	8008364 <vPortFree>
	}
 800a1e2:	e010      	b.n	800a206 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800a1ea:	2b02      	cmp	r3, #2
 800a1ec:	d00b      	beq.n	800a206 <prvDeleteTCB+0x62>
	__asm volatile
 800a1ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a1f2:	f383 8811 	msr	BASEPRI, r3
 800a1f6:	f3bf 8f6f 	isb	sy
 800a1fa:	f3bf 8f4f 	dsb	sy
 800a1fe:	60fb      	str	r3, [r7, #12]
}
 800a200:	bf00      	nop
 800a202:	bf00      	nop
 800a204:	e7fd      	b.n	800a202 <prvDeleteTCB+0x5e>
	}
 800a206:	bf00      	nop
 800a208:	3710      	adds	r7, #16
 800a20a:	46bd      	mov	sp, r7
 800a20c:	bd80      	pop	{r7, pc}
	...

0800a210 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a210:	b480      	push	{r7}
 800a212:	b083      	sub	sp, #12
 800a214:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a216:	4b0c      	ldr	r3, [pc, #48]	@ (800a248 <prvResetNextTaskUnblockTime+0x38>)
 800a218:	681b      	ldr	r3, [r3, #0]
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	2b00      	cmp	r3, #0
 800a21e:	d104      	bne.n	800a22a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a220:	4b0a      	ldr	r3, [pc, #40]	@ (800a24c <prvResetNextTaskUnblockTime+0x3c>)
 800a222:	f04f 32ff 	mov.w	r2, #4294967295
 800a226:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a228:	e008      	b.n	800a23c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a22a:	4b07      	ldr	r3, [pc, #28]	@ (800a248 <prvResetNextTaskUnblockTime+0x38>)
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	68db      	ldr	r3, [r3, #12]
 800a230:	68db      	ldr	r3, [r3, #12]
 800a232:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	685b      	ldr	r3, [r3, #4]
 800a238:	4a04      	ldr	r2, [pc, #16]	@ (800a24c <prvResetNextTaskUnblockTime+0x3c>)
 800a23a:	6013      	str	r3, [r2, #0]
}
 800a23c:	bf00      	nop
 800a23e:	370c      	adds	r7, #12
 800a240:	46bd      	mov	sp, r7
 800a242:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a246:	4770      	bx	lr
 800a248:	20005454 	.word	0x20005454
 800a24c:	200054bc 	.word	0x200054bc

0800a250 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800a250:	b480      	push	{r7}
 800a252:	b083      	sub	sp, #12
 800a254:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800a256:	4b0b      	ldr	r3, [pc, #44]	@ (800a284 <xTaskGetSchedulerState+0x34>)
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	d102      	bne.n	800a264 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a25e:	2301      	movs	r3, #1
 800a260:	607b      	str	r3, [r7, #4]
 800a262:	e008      	b.n	800a276 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a264:	4b08      	ldr	r3, [pc, #32]	@ (800a288 <xTaskGetSchedulerState+0x38>)
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	2b00      	cmp	r3, #0
 800a26a:	d102      	bne.n	800a272 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800a26c:	2302      	movs	r3, #2
 800a26e:	607b      	str	r3, [r7, #4]
 800a270:	e001      	b.n	800a276 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800a272:	2300      	movs	r3, #0
 800a274:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800a276:	687b      	ldr	r3, [r7, #4]
	}
 800a278:	4618      	mov	r0, r3
 800a27a:	370c      	adds	r7, #12
 800a27c:	46bd      	mov	sp, r7
 800a27e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a282:	4770      	bx	lr
 800a284:	200054a8 	.word	0x200054a8
 800a288:	200054c4 	.word	0x200054c4

0800a28c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800a28c:	b580      	push	{r7, lr}
 800a28e:	b086      	sub	sp, #24
 800a290:	af00      	add	r7, sp, #0
 800a292:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800a298:	2300      	movs	r3, #0
 800a29a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	d058      	beq.n	800a354 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800a2a2:	4b2f      	ldr	r3, [pc, #188]	@ (800a360 <xTaskPriorityDisinherit+0xd4>)
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	693a      	ldr	r2, [r7, #16]
 800a2a8:	429a      	cmp	r2, r3
 800a2aa:	d00b      	beq.n	800a2c4 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800a2ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a2b0:	f383 8811 	msr	BASEPRI, r3
 800a2b4:	f3bf 8f6f 	isb	sy
 800a2b8:	f3bf 8f4f 	dsb	sy
 800a2bc:	60fb      	str	r3, [r7, #12]
}
 800a2be:	bf00      	nop
 800a2c0:	bf00      	nop
 800a2c2:	e7fd      	b.n	800a2c0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800a2c4:	693b      	ldr	r3, [r7, #16]
 800a2c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	d10b      	bne.n	800a2e4 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800a2cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a2d0:	f383 8811 	msr	BASEPRI, r3
 800a2d4:	f3bf 8f6f 	isb	sy
 800a2d8:	f3bf 8f4f 	dsb	sy
 800a2dc:	60bb      	str	r3, [r7, #8]
}
 800a2de:	bf00      	nop
 800a2e0:	bf00      	nop
 800a2e2:	e7fd      	b.n	800a2e0 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800a2e4:	693b      	ldr	r3, [r7, #16]
 800a2e6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a2e8:	1e5a      	subs	r2, r3, #1
 800a2ea:	693b      	ldr	r3, [r7, #16]
 800a2ec:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a2ee:	693b      	ldr	r3, [r7, #16]
 800a2f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a2f2:	693b      	ldr	r3, [r7, #16]
 800a2f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a2f6:	429a      	cmp	r2, r3
 800a2f8:	d02c      	beq.n	800a354 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a2fa:	693b      	ldr	r3, [r7, #16]
 800a2fc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a2fe:	2b00      	cmp	r3, #0
 800a300:	d128      	bne.n	800a354 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a302:	693b      	ldr	r3, [r7, #16]
 800a304:	3304      	adds	r3, #4
 800a306:	4618      	mov	r0, r3
 800a308:	f7fe f9d6 	bl	80086b8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a30c:	693b      	ldr	r3, [r7, #16]
 800a30e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a310:	693b      	ldr	r3, [r7, #16]
 800a312:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a314:	693b      	ldr	r3, [r7, #16]
 800a316:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a318:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800a31c:	693b      	ldr	r3, [r7, #16]
 800a31e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800a320:	693b      	ldr	r3, [r7, #16]
 800a322:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a324:	4b0f      	ldr	r3, [pc, #60]	@ (800a364 <xTaskPriorityDisinherit+0xd8>)
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	429a      	cmp	r2, r3
 800a32a:	d903      	bls.n	800a334 <xTaskPriorityDisinherit+0xa8>
 800a32c:	693b      	ldr	r3, [r7, #16]
 800a32e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a330:	4a0c      	ldr	r2, [pc, #48]	@ (800a364 <xTaskPriorityDisinherit+0xd8>)
 800a332:	6013      	str	r3, [r2, #0]
 800a334:	693b      	ldr	r3, [r7, #16]
 800a336:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a338:	4613      	mov	r3, r2
 800a33a:	009b      	lsls	r3, r3, #2
 800a33c:	4413      	add	r3, r2
 800a33e:	009b      	lsls	r3, r3, #2
 800a340:	4a09      	ldr	r2, [pc, #36]	@ (800a368 <xTaskPriorityDisinherit+0xdc>)
 800a342:	441a      	add	r2, r3
 800a344:	693b      	ldr	r3, [r7, #16]
 800a346:	3304      	adds	r3, #4
 800a348:	4619      	mov	r1, r3
 800a34a:	4610      	mov	r0, r2
 800a34c:	f7fe f957 	bl	80085fe <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800a350:	2301      	movs	r3, #1
 800a352:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a354:	697b      	ldr	r3, [r7, #20]
	}
 800a356:	4618      	mov	r0, r3
 800a358:	3718      	adds	r7, #24
 800a35a:	46bd      	mov	sp, r7
 800a35c:	bd80      	pop	{r7, pc}
 800a35e:	bf00      	nop
 800a360:	20004fc8 	.word	0x20004fc8
 800a364:	200054a4 	.word	0x200054a4
 800a368:	20004fcc 	.word	0x20004fcc

0800a36c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a36c:	b580      	push	{r7, lr}
 800a36e:	b084      	sub	sp, #16
 800a370:	af00      	add	r7, sp, #0
 800a372:	6078      	str	r0, [r7, #4]
 800a374:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a376:	4b21      	ldr	r3, [pc, #132]	@ (800a3fc <prvAddCurrentTaskToDelayedList+0x90>)
 800a378:	681b      	ldr	r3, [r3, #0]
 800a37a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a37c:	4b20      	ldr	r3, [pc, #128]	@ (800a400 <prvAddCurrentTaskToDelayedList+0x94>)
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	3304      	adds	r3, #4
 800a382:	4618      	mov	r0, r3
 800a384:	f7fe f998 	bl	80086b8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a38e:	d10a      	bne.n	800a3a6 <prvAddCurrentTaskToDelayedList+0x3a>
 800a390:	683b      	ldr	r3, [r7, #0]
 800a392:	2b00      	cmp	r3, #0
 800a394:	d007      	beq.n	800a3a6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a396:	4b1a      	ldr	r3, [pc, #104]	@ (800a400 <prvAddCurrentTaskToDelayedList+0x94>)
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	3304      	adds	r3, #4
 800a39c:	4619      	mov	r1, r3
 800a39e:	4819      	ldr	r0, [pc, #100]	@ (800a404 <prvAddCurrentTaskToDelayedList+0x98>)
 800a3a0:	f7fe f92d 	bl	80085fe <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a3a4:	e026      	b.n	800a3f4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a3a6:	68fa      	ldr	r2, [r7, #12]
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	4413      	add	r3, r2
 800a3ac:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a3ae:	4b14      	ldr	r3, [pc, #80]	@ (800a400 <prvAddCurrentTaskToDelayedList+0x94>)
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	68ba      	ldr	r2, [r7, #8]
 800a3b4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a3b6:	68ba      	ldr	r2, [r7, #8]
 800a3b8:	68fb      	ldr	r3, [r7, #12]
 800a3ba:	429a      	cmp	r2, r3
 800a3bc:	d209      	bcs.n	800a3d2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a3be:	4b12      	ldr	r3, [pc, #72]	@ (800a408 <prvAddCurrentTaskToDelayedList+0x9c>)
 800a3c0:	681a      	ldr	r2, [r3, #0]
 800a3c2:	4b0f      	ldr	r3, [pc, #60]	@ (800a400 <prvAddCurrentTaskToDelayedList+0x94>)
 800a3c4:	681b      	ldr	r3, [r3, #0]
 800a3c6:	3304      	adds	r3, #4
 800a3c8:	4619      	mov	r1, r3
 800a3ca:	4610      	mov	r0, r2
 800a3cc:	f7fe f93b 	bl	8008646 <vListInsert>
}
 800a3d0:	e010      	b.n	800a3f4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a3d2:	4b0e      	ldr	r3, [pc, #56]	@ (800a40c <prvAddCurrentTaskToDelayedList+0xa0>)
 800a3d4:	681a      	ldr	r2, [r3, #0]
 800a3d6:	4b0a      	ldr	r3, [pc, #40]	@ (800a400 <prvAddCurrentTaskToDelayedList+0x94>)
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	3304      	adds	r3, #4
 800a3dc:	4619      	mov	r1, r3
 800a3de:	4610      	mov	r0, r2
 800a3e0:	f7fe f931 	bl	8008646 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a3e4:	4b0a      	ldr	r3, [pc, #40]	@ (800a410 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	68ba      	ldr	r2, [r7, #8]
 800a3ea:	429a      	cmp	r2, r3
 800a3ec:	d202      	bcs.n	800a3f4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800a3ee:	4a08      	ldr	r2, [pc, #32]	@ (800a410 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a3f0:	68bb      	ldr	r3, [r7, #8]
 800a3f2:	6013      	str	r3, [r2, #0]
}
 800a3f4:	bf00      	nop
 800a3f6:	3710      	adds	r7, #16
 800a3f8:	46bd      	mov	sp, r7
 800a3fa:	bd80      	pop	{r7, pc}
 800a3fc:	200054a0 	.word	0x200054a0
 800a400:	20004fc8 	.word	0x20004fc8
 800a404:	20005488 	.word	0x20005488
 800a408:	20005458 	.word	0x20005458
 800a40c:	20005454 	.word	0x20005454
 800a410:	200054bc 	.word	0x200054bc

0800a414 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800a414:	b580      	push	{r7, lr}
 800a416:	b08a      	sub	sp, #40	@ 0x28
 800a418:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800a41a:	2300      	movs	r3, #0
 800a41c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800a41e:	f000 fb13 	bl	800aa48 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800a422:	4b1d      	ldr	r3, [pc, #116]	@ (800a498 <xTimerCreateTimerTask+0x84>)
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	2b00      	cmp	r3, #0
 800a428:	d021      	beq.n	800a46e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800a42a:	2300      	movs	r3, #0
 800a42c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800a42e:	2300      	movs	r3, #0
 800a430:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800a432:	1d3a      	adds	r2, r7, #4
 800a434:	f107 0108 	add.w	r1, r7, #8
 800a438:	f107 030c 	add.w	r3, r7, #12
 800a43c:	4618      	mov	r0, r3
 800a43e:	f7fd fea9 	bl	8008194 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800a442:	6879      	ldr	r1, [r7, #4]
 800a444:	68bb      	ldr	r3, [r7, #8]
 800a446:	68fa      	ldr	r2, [r7, #12]
 800a448:	9202      	str	r2, [sp, #8]
 800a44a:	9301      	str	r3, [sp, #4]
 800a44c:	2302      	movs	r3, #2
 800a44e:	9300      	str	r3, [sp, #0]
 800a450:	2300      	movs	r3, #0
 800a452:	460a      	mov	r2, r1
 800a454:	4911      	ldr	r1, [pc, #68]	@ (800a49c <xTimerCreateTimerTask+0x88>)
 800a456:	4812      	ldr	r0, [pc, #72]	@ (800a4a0 <xTimerCreateTimerTask+0x8c>)
 800a458:	f7ff f8a2 	bl	80095a0 <xTaskCreateStatic>
 800a45c:	4603      	mov	r3, r0
 800a45e:	4a11      	ldr	r2, [pc, #68]	@ (800a4a4 <xTimerCreateTimerTask+0x90>)
 800a460:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800a462:	4b10      	ldr	r3, [pc, #64]	@ (800a4a4 <xTimerCreateTimerTask+0x90>)
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	2b00      	cmp	r3, #0
 800a468:	d001      	beq.n	800a46e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800a46a:	2301      	movs	r3, #1
 800a46c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800a46e:	697b      	ldr	r3, [r7, #20]
 800a470:	2b00      	cmp	r3, #0
 800a472:	d10b      	bne.n	800a48c <xTimerCreateTimerTask+0x78>
	__asm volatile
 800a474:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a478:	f383 8811 	msr	BASEPRI, r3
 800a47c:	f3bf 8f6f 	isb	sy
 800a480:	f3bf 8f4f 	dsb	sy
 800a484:	613b      	str	r3, [r7, #16]
}
 800a486:	bf00      	nop
 800a488:	bf00      	nop
 800a48a:	e7fd      	b.n	800a488 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800a48c:	697b      	ldr	r3, [r7, #20]
}
 800a48e:	4618      	mov	r0, r3
 800a490:	3718      	adds	r7, #24
 800a492:	46bd      	mov	sp, r7
 800a494:	bd80      	pop	{r7, pc}
 800a496:	bf00      	nop
 800a498:	200054f8 	.word	0x200054f8
 800a49c:	0800d91c 	.word	0x0800d91c
 800a4a0:	0800a5e1 	.word	0x0800a5e1
 800a4a4:	200054fc 	.word	0x200054fc

0800a4a8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800a4a8:	b580      	push	{r7, lr}
 800a4aa:	b08a      	sub	sp, #40	@ 0x28
 800a4ac:	af00      	add	r7, sp, #0
 800a4ae:	60f8      	str	r0, [r7, #12]
 800a4b0:	60b9      	str	r1, [r7, #8]
 800a4b2:	607a      	str	r2, [r7, #4]
 800a4b4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800a4b6:	2300      	movs	r3, #0
 800a4b8:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800a4ba:	68fb      	ldr	r3, [r7, #12]
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	d10b      	bne.n	800a4d8 <xTimerGenericCommand+0x30>
	__asm volatile
 800a4c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a4c4:	f383 8811 	msr	BASEPRI, r3
 800a4c8:	f3bf 8f6f 	isb	sy
 800a4cc:	f3bf 8f4f 	dsb	sy
 800a4d0:	623b      	str	r3, [r7, #32]
}
 800a4d2:	bf00      	nop
 800a4d4:	bf00      	nop
 800a4d6:	e7fd      	b.n	800a4d4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800a4d8:	4b19      	ldr	r3, [pc, #100]	@ (800a540 <xTimerGenericCommand+0x98>)
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	2b00      	cmp	r3, #0
 800a4de:	d02a      	beq.n	800a536 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800a4e0:	68bb      	ldr	r3, [r7, #8]
 800a4e2:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800a4e8:	68fb      	ldr	r3, [r7, #12]
 800a4ea:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800a4ec:	68bb      	ldr	r3, [r7, #8]
 800a4ee:	2b05      	cmp	r3, #5
 800a4f0:	dc18      	bgt.n	800a524 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800a4f2:	f7ff fead 	bl	800a250 <xTaskGetSchedulerState>
 800a4f6:	4603      	mov	r3, r0
 800a4f8:	2b02      	cmp	r3, #2
 800a4fa:	d109      	bne.n	800a510 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800a4fc:	4b10      	ldr	r3, [pc, #64]	@ (800a540 <xTimerGenericCommand+0x98>)
 800a4fe:	6818      	ldr	r0, [r3, #0]
 800a500:	f107 0110 	add.w	r1, r7, #16
 800a504:	2300      	movs	r3, #0
 800a506:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a508:	f7fe fc5a 	bl	8008dc0 <xQueueGenericSend>
 800a50c:	6278      	str	r0, [r7, #36]	@ 0x24
 800a50e:	e012      	b.n	800a536 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800a510:	4b0b      	ldr	r3, [pc, #44]	@ (800a540 <xTimerGenericCommand+0x98>)
 800a512:	6818      	ldr	r0, [r3, #0]
 800a514:	f107 0110 	add.w	r1, r7, #16
 800a518:	2300      	movs	r3, #0
 800a51a:	2200      	movs	r2, #0
 800a51c:	f7fe fc50 	bl	8008dc0 <xQueueGenericSend>
 800a520:	6278      	str	r0, [r7, #36]	@ 0x24
 800a522:	e008      	b.n	800a536 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800a524:	4b06      	ldr	r3, [pc, #24]	@ (800a540 <xTimerGenericCommand+0x98>)
 800a526:	6818      	ldr	r0, [r3, #0]
 800a528:	f107 0110 	add.w	r1, r7, #16
 800a52c:	2300      	movs	r3, #0
 800a52e:	683a      	ldr	r2, [r7, #0]
 800a530:	f7fe fd48 	bl	8008fc4 <xQueueGenericSendFromISR>
 800a534:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800a536:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800a538:	4618      	mov	r0, r3
 800a53a:	3728      	adds	r7, #40	@ 0x28
 800a53c:	46bd      	mov	sp, r7
 800a53e:	bd80      	pop	{r7, pc}
 800a540:	200054f8 	.word	0x200054f8

0800a544 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800a544:	b580      	push	{r7, lr}
 800a546:	b088      	sub	sp, #32
 800a548:	af02      	add	r7, sp, #8
 800a54a:	6078      	str	r0, [r7, #4]
 800a54c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a54e:	4b23      	ldr	r3, [pc, #140]	@ (800a5dc <prvProcessExpiredTimer+0x98>)
 800a550:	681b      	ldr	r3, [r3, #0]
 800a552:	68db      	ldr	r3, [r3, #12]
 800a554:	68db      	ldr	r3, [r3, #12]
 800a556:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a558:	697b      	ldr	r3, [r7, #20]
 800a55a:	3304      	adds	r3, #4
 800a55c:	4618      	mov	r0, r3
 800a55e:	f7fe f8ab 	bl	80086b8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a562:	697b      	ldr	r3, [r7, #20]
 800a564:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a568:	f003 0304 	and.w	r3, r3, #4
 800a56c:	2b00      	cmp	r3, #0
 800a56e:	d023      	beq.n	800a5b8 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800a570:	697b      	ldr	r3, [r7, #20]
 800a572:	699a      	ldr	r2, [r3, #24]
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	18d1      	adds	r1, r2, r3
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	683a      	ldr	r2, [r7, #0]
 800a57c:	6978      	ldr	r0, [r7, #20]
 800a57e:	f000 f8d5 	bl	800a72c <prvInsertTimerInActiveList>
 800a582:	4603      	mov	r3, r0
 800a584:	2b00      	cmp	r3, #0
 800a586:	d020      	beq.n	800a5ca <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a588:	2300      	movs	r3, #0
 800a58a:	9300      	str	r3, [sp, #0]
 800a58c:	2300      	movs	r3, #0
 800a58e:	687a      	ldr	r2, [r7, #4]
 800a590:	2100      	movs	r1, #0
 800a592:	6978      	ldr	r0, [r7, #20]
 800a594:	f7ff ff88 	bl	800a4a8 <xTimerGenericCommand>
 800a598:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800a59a:	693b      	ldr	r3, [r7, #16]
 800a59c:	2b00      	cmp	r3, #0
 800a59e:	d114      	bne.n	800a5ca <prvProcessExpiredTimer+0x86>
	__asm volatile
 800a5a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a5a4:	f383 8811 	msr	BASEPRI, r3
 800a5a8:	f3bf 8f6f 	isb	sy
 800a5ac:	f3bf 8f4f 	dsb	sy
 800a5b0:	60fb      	str	r3, [r7, #12]
}
 800a5b2:	bf00      	nop
 800a5b4:	bf00      	nop
 800a5b6:	e7fd      	b.n	800a5b4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a5b8:	697b      	ldr	r3, [r7, #20]
 800a5ba:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a5be:	f023 0301 	bic.w	r3, r3, #1
 800a5c2:	b2da      	uxtb	r2, r3
 800a5c4:	697b      	ldr	r3, [r7, #20]
 800a5c6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a5ca:	697b      	ldr	r3, [r7, #20]
 800a5cc:	6a1b      	ldr	r3, [r3, #32]
 800a5ce:	6978      	ldr	r0, [r7, #20]
 800a5d0:	4798      	blx	r3
}
 800a5d2:	bf00      	nop
 800a5d4:	3718      	adds	r7, #24
 800a5d6:	46bd      	mov	sp, r7
 800a5d8:	bd80      	pop	{r7, pc}
 800a5da:	bf00      	nop
 800a5dc:	200054f0 	.word	0x200054f0

0800a5e0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800a5e0:	b580      	push	{r7, lr}
 800a5e2:	b084      	sub	sp, #16
 800a5e4:	af00      	add	r7, sp, #0
 800a5e6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a5e8:	f107 0308 	add.w	r3, r7, #8
 800a5ec:	4618      	mov	r0, r3
 800a5ee:	f000 f859 	bl	800a6a4 <prvGetNextExpireTime>
 800a5f2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800a5f4:	68bb      	ldr	r3, [r7, #8]
 800a5f6:	4619      	mov	r1, r3
 800a5f8:	68f8      	ldr	r0, [r7, #12]
 800a5fa:	f000 f805 	bl	800a608 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800a5fe:	f000 f8d7 	bl	800a7b0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a602:	bf00      	nop
 800a604:	e7f0      	b.n	800a5e8 <prvTimerTask+0x8>
	...

0800a608 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800a608:	b580      	push	{r7, lr}
 800a60a:	b084      	sub	sp, #16
 800a60c:	af00      	add	r7, sp, #0
 800a60e:	6078      	str	r0, [r7, #4]
 800a610:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800a612:	f7ff fa29 	bl	8009a68 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a616:	f107 0308 	add.w	r3, r7, #8
 800a61a:	4618      	mov	r0, r3
 800a61c:	f000 f866 	bl	800a6ec <prvSampleTimeNow>
 800a620:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800a622:	68bb      	ldr	r3, [r7, #8]
 800a624:	2b00      	cmp	r3, #0
 800a626:	d130      	bne.n	800a68a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800a628:	683b      	ldr	r3, [r7, #0]
 800a62a:	2b00      	cmp	r3, #0
 800a62c:	d10a      	bne.n	800a644 <prvProcessTimerOrBlockTask+0x3c>
 800a62e:	687a      	ldr	r2, [r7, #4]
 800a630:	68fb      	ldr	r3, [r7, #12]
 800a632:	429a      	cmp	r2, r3
 800a634:	d806      	bhi.n	800a644 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800a636:	f7ff fa25 	bl	8009a84 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800a63a:	68f9      	ldr	r1, [r7, #12]
 800a63c:	6878      	ldr	r0, [r7, #4]
 800a63e:	f7ff ff81 	bl	800a544 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800a642:	e024      	b.n	800a68e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800a644:	683b      	ldr	r3, [r7, #0]
 800a646:	2b00      	cmp	r3, #0
 800a648:	d008      	beq.n	800a65c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800a64a:	4b13      	ldr	r3, [pc, #76]	@ (800a698 <prvProcessTimerOrBlockTask+0x90>)
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	681b      	ldr	r3, [r3, #0]
 800a650:	2b00      	cmp	r3, #0
 800a652:	d101      	bne.n	800a658 <prvProcessTimerOrBlockTask+0x50>
 800a654:	2301      	movs	r3, #1
 800a656:	e000      	b.n	800a65a <prvProcessTimerOrBlockTask+0x52>
 800a658:	2300      	movs	r3, #0
 800a65a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800a65c:	4b0f      	ldr	r3, [pc, #60]	@ (800a69c <prvProcessTimerOrBlockTask+0x94>)
 800a65e:	6818      	ldr	r0, [r3, #0]
 800a660:	687a      	ldr	r2, [r7, #4]
 800a662:	68fb      	ldr	r3, [r7, #12]
 800a664:	1ad3      	subs	r3, r2, r3
 800a666:	683a      	ldr	r2, [r7, #0]
 800a668:	4619      	mov	r1, r3
 800a66a:	f7fe ff65 	bl	8009538 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800a66e:	f7ff fa09 	bl	8009a84 <xTaskResumeAll>
 800a672:	4603      	mov	r3, r0
 800a674:	2b00      	cmp	r3, #0
 800a676:	d10a      	bne.n	800a68e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800a678:	4b09      	ldr	r3, [pc, #36]	@ (800a6a0 <prvProcessTimerOrBlockTask+0x98>)
 800a67a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a67e:	601a      	str	r2, [r3, #0]
 800a680:	f3bf 8f4f 	dsb	sy
 800a684:	f3bf 8f6f 	isb	sy
}
 800a688:	e001      	b.n	800a68e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800a68a:	f7ff f9fb 	bl	8009a84 <xTaskResumeAll>
}
 800a68e:	bf00      	nop
 800a690:	3710      	adds	r7, #16
 800a692:	46bd      	mov	sp, r7
 800a694:	bd80      	pop	{r7, pc}
 800a696:	bf00      	nop
 800a698:	200054f4 	.word	0x200054f4
 800a69c:	200054f8 	.word	0x200054f8
 800a6a0:	e000ed04 	.word	0xe000ed04

0800a6a4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800a6a4:	b480      	push	{r7}
 800a6a6:	b085      	sub	sp, #20
 800a6a8:	af00      	add	r7, sp, #0
 800a6aa:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800a6ac:	4b0e      	ldr	r3, [pc, #56]	@ (800a6e8 <prvGetNextExpireTime+0x44>)
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	d101      	bne.n	800a6ba <prvGetNextExpireTime+0x16>
 800a6b6:	2201      	movs	r2, #1
 800a6b8:	e000      	b.n	800a6bc <prvGetNextExpireTime+0x18>
 800a6ba:	2200      	movs	r2, #0
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	2b00      	cmp	r3, #0
 800a6c6:	d105      	bne.n	800a6d4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a6c8:	4b07      	ldr	r3, [pc, #28]	@ (800a6e8 <prvGetNextExpireTime+0x44>)
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	68db      	ldr	r3, [r3, #12]
 800a6ce:	681b      	ldr	r3, [r3, #0]
 800a6d0:	60fb      	str	r3, [r7, #12]
 800a6d2:	e001      	b.n	800a6d8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800a6d4:	2300      	movs	r3, #0
 800a6d6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800a6d8:	68fb      	ldr	r3, [r7, #12]
}
 800a6da:	4618      	mov	r0, r3
 800a6dc:	3714      	adds	r7, #20
 800a6de:	46bd      	mov	sp, r7
 800a6e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6e4:	4770      	bx	lr
 800a6e6:	bf00      	nop
 800a6e8:	200054f0 	.word	0x200054f0

0800a6ec <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800a6ec:	b580      	push	{r7, lr}
 800a6ee:	b084      	sub	sp, #16
 800a6f0:	af00      	add	r7, sp, #0
 800a6f2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800a6f4:	f7ff fa64 	bl	8009bc0 <xTaskGetTickCount>
 800a6f8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800a6fa:	4b0b      	ldr	r3, [pc, #44]	@ (800a728 <prvSampleTimeNow+0x3c>)
 800a6fc:	681b      	ldr	r3, [r3, #0]
 800a6fe:	68fa      	ldr	r2, [r7, #12]
 800a700:	429a      	cmp	r2, r3
 800a702:	d205      	bcs.n	800a710 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800a704:	f000 f93a 	bl	800a97c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	2201      	movs	r2, #1
 800a70c:	601a      	str	r2, [r3, #0]
 800a70e:	e002      	b.n	800a716 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	2200      	movs	r2, #0
 800a714:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800a716:	4a04      	ldr	r2, [pc, #16]	@ (800a728 <prvSampleTimeNow+0x3c>)
 800a718:	68fb      	ldr	r3, [r7, #12]
 800a71a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800a71c:	68fb      	ldr	r3, [r7, #12]
}
 800a71e:	4618      	mov	r0, r3
 800a720:	3710      	adds	r7, #16
 800a722:	46bd      	mov	sp, r7
 800a724:	bd80      	pop	{r7, pc}
 800a726:	bf00      	nop
 800a728:	20005500 	.word	0x20005500

0800a72c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800a72c:	b580      	push	{r7, lr}
 800a72e:	b086      	sub	sp, #24
 800a730:	af00      	add	r7, sp, #0
 800a732:	60f8      	str	r0, [r7, #12]
 800a734:	60b9      	str	r1, [r7, #8]
 800a736:	607a      	str	r2, [r7, #4]
 800a738:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800a73a:	2300      	movs	r3, #0
 800a73c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800a73e:	68fb      	ldr	r3, [r7, #12]
 800a740:	68ba      	ldr	r2, [r7, #8]
 800a742:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a744:	68fb      	ldr	r3, [r7, #12]
 800a746:	68fa      	ldr	r2, [r7, #12]
 800a748:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800a74a:	68ba      	ldr	r2, [r7, #8]
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	429a      	cmp	r2, r3
 800a750:	d812      	bhi.n	800a778 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a752:	687a      	ldr	r2, [r7, #4]
 800a754:	683b      	ldr	r3, [r7, #0]
 800a756:	1ad2      	subs	r2, r2, r3
 800a758:	68fb      	ldr	r3, [r7, #12]
 800a75a:	699b      	ldr	r3, [r3, #24]
 800a75c:	429a      	cmp	r2, r3
 800a75e:	d302      	bcc.n	800a766 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800a760:	2301      	movs	r3, #1
 800a762:	617b      	str	r3, [r7, #20]
 800a764:	e01b      	b.n	800a79e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800a766:	4b10      	ldr	r3, [pc, #64]	@ (800a7a8 <prvInsertTimerInActiveList+0x7c>)
 800a768:	681a      	ldr	r2, [r3, #0]
 800a76a:	68fb      	ldr	r3, [r7, #12]
 800a76c:	3304      	adds	r3, #4
 800a76e:	4619      	mov	r1, r3
 800a770:	4610      	mov	r0, r2
 800a772:	f7fd ff68 	bl	8008646 <vListInsert>
 800a776:	e012      	b.n	800a79e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800a778:	687a      	ldr	r2, [r7, #4]
 800a77a:	683b      	ldr	r3, [r7, #0]
 800a77c:	429a      	cmp	r2, r3
 800a77e:	d206      	bcs.n	800a78e <prvInsertTimerInActiveList+0x62>
 800a780:	68ba      	ldr	r2, [r7, #8]
 800a782:	683b      	ldr	r3, [r7, #0]
 800a784:	429a      	cmp	r2, r3
 800a786:	d302      	bcc.n	800a78e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800a788:	2301      	movs	r3, #1
 800a78a:	617b      	str	r3, [r7, #20]
 800a78c:	e007      	b.n	800a79e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a78e:	4b07      	ldr	r3, [pc, #28]	@ (800a7ac <prvInsertTimerInActiveList+0x80>)
 800a790:	681a      	ldr	r2, [r3, #0]
 800a792:	68fb      	ldr	r3, [r7, #12]
 800a794:	3304      	adds	r3, #4
 800a796:	4619      	mov	r1, r3
 800a798:	4610      	mov	r0, r2
 800a79a:	f7fd ff54 	bl	8008646 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800a79e:	697b      	ldr	r3, [r7, #20]
}
 800a7a0:	4618      	mov	r0, r3
 800a7a2:	3718      	adds	r7, #24
 800a7a4:	46bd      	mov	sp, r7
 800a7a6:	bd80      	pop	{r7, pc}
 800a7a8:	200054f4 	.word	0x200054f4
 800a7ac:	200054f0 	.word	0x200054f0

0800a7b0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800a7b0:	b580      	push	{r7, lr}
 800a7b2:	b08e      	sub	sp, #56	@ 0x38
 800a7b4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a7b6:	e0ce      	b.n	800a956 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	2b00      	cmp	r3, #0
 800a7bc:	da19      	bge.n	800a7f2 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800a7be:	1d3b      	adds	r3, r7, #4
 800a7c0:	3304      	adds	r3, #4
 800a7c2:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800a7c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a7c6:	2b00      	cmp	r3, #0
 800a7c8:	d10b      	bne.n	800a7e2 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800a7ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a7ce:	f383 8811 	msr	BASEPRI, r3
 800a7d2:	f3bf 8f6f 	isb	sy
 800a7d6:	f3bf 8f4f 	dsb	sy
 800a7da:	61fb      	str	r3, [r7, #28]
}
 800a7dc:	bf00      	nop
 800a7de:	bf00      	nop
 800a7e0:	e7fd      	b.n	800a7de <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800a7e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a7e4:	681b      	ldr	r3, [r3, #0]
 800a7e6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a7e8:	6850      	ldr	r0, [r2, #4]
 800a7ea:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a7ec:	6892      	ldr	r2, [r2, #8]
 800a7ee:	4611      	mov	r1, r2
 800a7f0:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	2b00      	cmp	r3, #0
 800a7f6:	f2c0 80ae 	blt.w	800a956 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800a7fa:	68fb      	ldr	r3, [r7, #12]
 800a7fc:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800a7fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a800:	695b      	ldr	r3, [r3, #20]
 800a802:	2b00      	cmp	r3, #0
 800a804:	d004      	beq.n	800a810 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a806:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a808:	3304      	adds	r3, #4
 800a80a:	4618      	mov	r0, r3
 800a80c:	f7fd ff54 	bl	80086b8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a810:	463b      	mov	r3, r7
 800a812:	4618      	mov	r0, r3
 800a814:	f7ff ff6a 	bl	800a6ec <prvSampleTimeNow>
 800a818:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	2b09      	cmp	r3, #9
 800a81e:	f200 8097 	bhi.w	800a950 <prvProcessReceivedCommands+0x1a0>
 800a822:	a201      	add	r2, pc, #4	@ (adr r2, 800a828 <prvProcessReceivedCommands+0x78>)
 800a824:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a828:	0800a851 	.word	0x0800a851
 800a82c:	0800a851 	.word	0x0800a851
 800a830:	0800a851 	.word	0x0800a851
 800a834:	0800a8c7 	.word	0x0800a8c7
 800a838:	0800a8db 	.word	0x0800a8db
 800a83c:	0800a927 	.word	0x0800a927
 800a840:	0800a851 	.word	0x0800a851
 800a844:	0800a851 	.word	0x0800a851
 800a848:	0800a8c7 	.word	0x0800a8c7
 800a84c:	0800a8db 	.word	0x0800a8db
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a850:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a852:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a856:	f043 0301 	orr.w	r3, r3, #1
 800a85a:	b2da      	uxtb	r2, r3
 800a85c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a85e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800a862:	68ba      	ldr	r2, [r7, #8]
 800a864:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a866:	699b      	ldr	r3, [r3, #24]
 800a868:	18d1      	adds	r1, r2, r3
 800a86a:	68bb      	ldr	r3, [r7, #8]
 800a86c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a86e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a870:	f7ff ff5c 	bl	800a72c <prvInsertTimerInActiveList>
 800a874:	4603      	mov	r3, r0
 800a876:	2b00      	cmp	r3, #0
 800a878:	d06c      	beq.n	800a954 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a87a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a87c:	6a1b      	ldr	r3, [r3, #32]
 800a87e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a880:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a882:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a884:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a888:	f003 0304 	and.w	r3, r3, #4
 800a88c:	2b00      	cmp	r3, #0
 800a88e:	d061      	beq.n	800a954 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800a890:	68ba      	ldr	r2, [r7, #8]
 800a892:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a894:	699b      	ldr	r3, [r3, #24]
 800a896:	441a      	add	r2, r3
 800a898:	2300      	movs	r3, #0
 800a89a:	9300      	str	r3, [sp, #0]
 800a89c:	2300      	movs	r3, #0
 800a89e:	2100      	movs	r1, #0
 800a8a0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a8a2:	f7ff fe01 	bl	800a4a8 <xTimerGenericCommand>
 800a8a6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800a8a8:	6a3b      	ldr	r3, [r7, #32]
 800a8aa:	2b00      	cmp	r3, #0
 800a8ac:	d152      	bne.n	800a954 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800a8ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a8b2:	f383 8811 	msr	BASEPRI, r3
 800a8b6:	f3bf 8f6f 	isb	sy
 800a8ba:	f3bf 8f4f 	dsb	sy
 800a8be:	61bb      	str	r3, [r7, #24]
}
 800a8c0:	bf00      	nop
 800a8c2:	bf00      	nop
 800a8c4:	e7fd      	b.n	800a8c2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a8c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a8c8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a8cc:	f023 0301 	bic.w	r3, r3, #1
 800a8d0:	b2da      	uxtb	r2, r3
 800a8d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a8d4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800a8d8:	e03d      	b.n	800a956 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a8da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a8dc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a8e0:	f043 0301 	orr.w	r3, r3, #1
 800a8e4:	b2da      	uxtb	r2, r3
 800a8e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a8e8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800a8ec:	68ba      	ldr	r2, [r7, #8]
 800a8ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a8f0:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800a8f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a8f4:	699b      	ldr	r3, [r3, #24]
 800a8f6:	2b00      	cmp	r3, #0
 800a8f8:	d10b      	bne.n	800a912 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800a8fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a8fe:	f383 8811 	msr	BASEPRI, r3
 800a902:	f3bf 8f6f 	isb	sy
 800a906:	f3bf 8f4f 	dsb	sy
 800a90a:	617b      	str	r3, [r7, #20]
}
 800a90c:	bf00      	nop
 800a90e:	bf00      	nop
 800a910:	e7fd      	b.n	800a90e <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800a912:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a914:	699a      	ldr	r2, [r3, #24]
 800a916:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a918:	18d1      	adds	r1, r2, r3
 800a91a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a91c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a91e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a920:	f7ff ff04 	bl	800a72c <prvInsertTimerInActiveList>
					break;
 800a924:	e017      	b.n	800a956 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800a926:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a928:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a92c:	f003 0302 	and.w	r3, r3, #2
 800a930:	2b00      	cmp	r3, #0
 800a932:	d103      	bne.n	800a93c <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800a934:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a936:	f7fd fd15 	bl	8008364 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800a93a:	e00c      	b.n	800a956 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a93c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a93e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a942:	f023 0301 	bic.w	r3, r3, #1
 800a946:	b2da      	uxtb	r2, r3
 800a948:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a94a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800a94e:	e002      	b.n	800a956 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800a950:	bf00      	nop
 800a952:	e000      	b.n	800a956 <prvProcessReceivedCommands+0x1a6>
					break;
 800a954:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a956:	4b08      	ldr	r3, [pc, #32]	@ (800a978 <prvProcessReceivedCommands+0x1c8>)
 800a958:	681b      	ldr	r3, [r3, #0]
 800a95a:	1d39      	adds	r1, r7, #4
 800a95c:	2200      	movs	r2, #0
 800a95e:	4618      	mov	r0, r3
 800a960:	f7fe fbce 	bl	8009100 <xQueueReceive>
 800a964:	4603      	mov	r3, r0
 800a966:	2b00      	cmp	r3, #0
 800a968:	f47f af26 	bne.w	800a7b8 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800a96c:	bf00      	nop
 800a96e:	bf00      	nop
 800a970:	3730      	adds	r7, #48	@ 0x30
 800a972:	46bd      	mov	sp, r7
 800a974:	bd80      	pop	{r7, pc}
 800a976:	bf00      	nop
 800a978:	200054f8 	.word	0x200054f8

0800a97c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800a97c:	b580      	push	{r7, lr}
 800a97e:	b088      	sub	sp, #32
 800a980:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a982:	e049      	b.n	800aa18 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a984:	4b2e      	ldr	r3, [pc, #184]	@ (800aa40 <prvSwitchTimerLists+0xc4>)
 800a986:	681b      	ldr	r3, [r3, #0]
 800a988:	68db      	ldr	r3, [r3, #12]
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a98e:	4b2c      	ldr	r3, [pc, #176]	@ (800aa40 <prvSwitchTimerLists+0xc4>)
 800a990:	681b      	ldr	r3, [r3, #0]
 800a992:	68db      	ldr	r3, [r3, #12]
 800a994:	68db      	ldr	r3, [r3, #12]
 800a996:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a998:	68fb      	ldr	r3, [r7, #12]
 800a99a:	3304      	adds	r3, #4
 800a99c:	4618      	mov	r0, r3
 800a99e:	f7fd fe8b 	bl	80086b8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a9a2:	68fb      	ldr	r3, [r7, #12]
 800a9a4:	6a1b      	ldr	r3, [r3, #32]
 800a9a6:	68f8      	ldr	r0, [r7, #12]
 800a9a8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a9aa:	68fb      	ldr	r3, [r7, #12]
 800a9ac:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a9b0:	f003 0304 	and.w	r3, r3, #4
 800a9b4:	2b00      	cmp	r3, #0
 800a9b6:	d02f      	beq.n	800aa18 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800a9b8:	68fb      	ldr	r3, [r7, #12]
 800a9ba:	699b      	ldr	r3, [r3, #24]
 800a9bc:	693a      	ldr	r2, [r7, #16]
 800a9be:	4413      	add	r3, r2
 800a9c0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800a9c2:	68ba      	ldr	r2, [r7, #8]
 800a9c4:	693b      	ldr	r3, [r7, #16]
 800a9c6:	429a      	cmp	r2, r3
 800a9c8:	d90e      	bls.n	800a9e8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800a9ca:	68fb      	ldr	r3, [r7, #12]
 800a9cc:	68ba      	ldr	r2, [r7, #8]
 800a9ce:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a9d0:	68fb      	ldr	r3, [r7, #12]
 800a9d2:	68fa      	ldr	r2, [r7, #12]
 800a9d4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a9d6:	4b1a      	ldr	r3, [pc, #104]	@ (800aa40 <prvSwitchTimerLists+0xc4>)
 800a9d8:	681a      	ldr	r2, [r3, #0]
 800a9da:	68fb      	ldr	r3, [r7, #12]
 800a9dc:	3304      	adds	r3, #4
 800a9de:	4619      	mov	r1, r3
 800a9e0:	4610      	mov	r0, r2
 800a9e2:	f7fd fe30 	bl	8008646 <vListInsert>
 800a9e6:	e017      	b.n	800aa18 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a9e8:	2300      	movs	r3, #0
 800a9ea:	9300      	str	r3, [sp, #0]
 800a9ec:	2300      	movs	r3, #0
 800a9ee:	693a      	ldr	r2, [r7, #16]
 800a9f0:	2100      	movs	r1, #0
 800a9f2:	68f8      	ldr	r0, [r7, #12]
 800a9f4:	f7ff fd58 	bl	800a4a8 <xTimerGenericCommand>
 800a9f8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	d10b      	bne.n	800aa18 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800aa00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa04:	f383 8811 	msr	BASEPRI, r3
 800aa08:	f3bf 8f6f 	isb	sy
 800aa0c:	f3bf 8f4f 	dsb	sy
 800aa10:	603b      	str	r3, [r7, #0]
}
 800aa12:	bf00      	nop
 800aa14:	bf00      	nop
 800aa16:	e7fd      	b.n	800aa14 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800aa18:	4b09      	ldr	r3, [pc, #36]	@ (800aa40 <prvSwitchTimerLists+0xc4>)
 800aa1a:	681b      	ldr	r3, [r3, #0]
 800aa1c:	681b      	ldr	r3, [r3, #0]
 800aa1e:	2b00      	cmp	r3, #0
 800aa20:	d1b0      	bne.n	800a984 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800aa22:	4b07      	ldr	r3, [pc, #28]	@ (800aa40 <prvSwitchTimerLists+0xc4>)
 800aa24:	681b      	ldr	r3, [r3, #0]
 800aa26:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800aa28:	4b06      	ldr	r3, [pc, #24]	@ (800aa44 <prvSwitchTimerLists+0xc8>)
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	4a04      	ldr	r2, [pc, #16]	@ (800aa40 <prvSwitchTimerLists+0xc4>)
 800aa2e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800aa30:	4a04      	ldr	r2, [pc, #16]	@ (800aa44 <prvSwitchTimerLists+0xc8>)
 800aa32:	697b      	ldr	r3, [r7, #20]
 800aa34:	6013      	str	r3, [r2, #0]
}
 800aa36:	bf00      	nop
 800aa38:	3718      	adds	r7, #24
 800aa3a:	46bd      	mov	sp, r7
 800aa3c:	bd80      	pop	{r7, pc}
 800aa3e:	bf00      	nop
 800aa40:	200054f0 	.word	0x200054f0
 800aa44:	200054f4 	.word	0x200054f4

0800aa48 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800aa48:	b580      	push	{r7, lr}
 800aa4a:	b082      	sub	sp, #8
 800aa4c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800aa4e:	f7fd ff8b 	bl	8008968 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800aa52:	4b15      	ldr	r3, [pc, #84]	@ (800aaa8 <prvCheckForValidListAndQueue+0x60>)
 800aa54:	681b      	ldr	r3, [r3, #0]
 800aa56:	2b00      	cmp	r3, #0
 800aa58:	d120      	bne.n	800aa9c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800aa5a:	4814      	ldr	r0, [pc, #80]	@ (800aaac <prvCheckForValidListAndQueue+0x64>)
 800aa5c:	f7fd fda2 	bl	80085a4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800aa60:	4813      	ldr	r0, [pc, #76]	@ (800aab0 <prvCheckForValidListAndQueue+0x68>)
 800aa62:	f7fd fd9f 	bl	80085a4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800aa66:	4b13      	ldr	r3, [pc, #76]	@ (800aab4 <prvCheckForValidListAndQueue+0x6c>)
 800aa68:	4a10      	ldr	r2, [pc, #64]	@ (800aaac <prvCheckForValidListAndQueue+0x64>)
 800aa6a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800aa6c:	4b12      	ldr	r3, [pc, #72]	@ (800aab8 <prvCheckForValidListAndQueue+0x70>)
 800aa6e:	4a10      	ldr	r2, [pc, #64]	@ (800aab0 <prvCheckForValidListAndQueue+0x68>)
 800aa70:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800aa72:	2300      	movs	r3, #0
 800aa74:	9300      	str	r3, [sp, #0]
 800aa76:	4b11      	ldr	r3, [pc, #68]	@ (800aabc <prvCheckForValidListAndQueue+0x74>)
 800aa78:	4a11      	ldr	r2, [pc, #68]	@ (800aac0 <prvCheckForValidListAndQueue+0x78>)
 800aa7a:	2110      	movs	r1, #16
 800aa7c:	200a      	movs	r0, #10
 800aa7e:	f7fe f8ff 	bl	8008c80 <xQueueGenericCreateStatic>
 800aa82:	4603      	mov	r3, r0
 800aa84:	4a08      	ldr	r2, [pc, #32]	@ (800aaa8 <prvCheckForValidListAndQueue+0x60>)
 800aa86:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800aa88:	4b07      	ldr	r3, [pc, #28]	@ (800aaa8 <prvCheckForValidListAndQueue+0x60>)
 800aa8a:	681b      	ldr	r3, [r3, #0]
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	d005      	beq.n	800aa9c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800aa90:	4b05      	ldr	r3, [pc, #20]	@ (800aaa8 <prvCheckForValidListAndQueue+0x60>)
 800aa92:	681b      	ldr	r3, [r3, #0]
 800aa94:	490b      	ldr	r1, [pc, #44]	@ (800aac4 <prvCheckForValidListAndQueue+0x7c>)
 800aa96:	4618      	mov	r0, r3
 800aa98:	f7fe fd24 	bl	80094e4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800aa9c:	f7fd ff96 	bl	80089cc <vPortExitCritical>
}
 800aaa0:	bf00      	nop
 800aaa2:	46bd      	mov	sp, r7
 800aaa4:	bd80      	pop	{r7, pc}
 800aaa6:	bf00      	nop
 800aaa8:	200054f8 	.word	0x200054f8
 800aaac:	200054c8 	.word	0x200054c8
 800aab0:	200054dc 	.word	0x200054dc
 800aab4:	200054f0 	.word	0x200054f0
 800aab8:	200054f4 	.word	0x200054f4
 800aabc:	200055a4 	.word	0x200055a4
 800aac0:	20005504 	.word	0x20005504
 800aac4:	0800d924 	.word	0x0800d924

0800aac8 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800aac8:	b580      	push	{r7, lr}
 800aaca:	b086      	sub	sp, #24
 800aacc:	af00      	add	r7, sp, #0
 800aace:	60f8      	str	r0, [r7, #12]
 800aad0:	60b9      	str	r1, [r7, #8]
 800aad2:	4613      	mov	r3, r2
 800aad4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800aad6:	68fb      	ldr	r3, [r7, #12]
 800aad8:	2b00      	cmp	r3, #0
 800aada:	d101      	bne.n	800aae0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800aadc:	2303      	movs	r3, #3
 800aade:	e01f      	b.n	800ab20 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800aae0:	68fb      	ldr	r3, [r7, #12]
 800aae2:	2200      	movs	r2, #0
 800aae4:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800aae8:	68fb      	ldr	r3, [r7, #12]
 800aaea:	2200      	movs	r2, #0
 800aaec:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800aaf0:	68fb      	ldr	r3, [r7, #12]
 800aaf2:	2200      	movs	r2, #0
 800aaf4:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800aaf8:	68bb      	ldr	r3, [r7, #8]
 800aafa:	2b00      	cmp	r3, #0
 800aafc:	d003      	beq.n	800ab06 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800aafe:	68fb      	ldr	r3, [r7, #12]
 800ab00:	68ba      	ldr	r2, [r7, #8]
 800ab02:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ab06:	68fb      	ldr	r3, [r7, #12]
 800ab08:	2201      	movs	r2, #1
 800ab0a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800ab0e:	68fb      	ldr	r3, [r7, #12]
 800ab10:	79fa      	ldrb	r2, [r7, #7]
 800ab12:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800ab14:	68f8      	ldr	r0, [r7, #12]
 800ab16:	f001 ff59 	bl	800c9cc <USBD_LL_Init>
 800ab1a:	4603      	mov	r3, r0
 800ab1c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800ab1e:	7dfb      	ldrb	r3, [r7, #23]
}
 800ab20:	4618      	mov	r0, r3
 800ab22:	3718      	adds	r7, #24
 800ab24:	46bd      	mov	sp, r7
 800ab26:	bd80      	pop	{r7, pc}

0800ab28 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800ab28:	b580      	push	{r7, lr}
 800ab2a:	b084      	sub	sp, #16
 800ab2c:	af00      	add	r7, sp, #0
 800ab2e:	6078      	str	r0, [r7, #4]
 800ab30:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800ab32:	2300      	movs	r3, #0
 800ab34:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800ab36:	683b      	ldr	r3, [r7, #0]
 800ab38:	2b00      	cmp	r3, #0
 800ab3a:	d101      	bne.n	800ab40 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800ab3c:	2303      	movs	r3, #3
 800ab3e:	e025      	b.n	800ab8c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	683a      	ldr	r2, [r7, #0]
 800ab44:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	32ae      	adds	r2, #174	@ 0xae
 800ab52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ab58:	2b00      	cmp	r3, #0
 800ab5a:	d00f      	beq.n	800ab7c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	32ae      	adds	r2, #174	@ 0xae
 800ab66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ab6c:	f107 020e 	add.w	r2, r7, #14
 800ab70:	4610      	mov	r0, r2
 800ab72:	4798      	blx	r3
 800ab74:	4602      	mov	r2, r0
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800ab82:	1c5a      	adds	r2, r3, #1
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800ab8a:	2300      	movs	r3, #0
}
 800ab8c:	4618      	mov	r0, r3
 800ab8e:	3710      	adds	r7, #16
 800ab90:	46bd      	mov	sp, r7
 800ab92:	bd80      	pop	{r7, pc}

0800ab94 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800ab94:	b580      	push	{r7, lr}
 800ab96:	b082      	sub	sp, #8
 800ab98:	af00      	add	r7, sp, #0
 800ab9a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800ab9c:	6878      	ldr	r0, [r7, #4]
 800ab9e:	f001 ff61 	bl	800ca64 <USBD_LL_Start>
 800aba2:	4603      	mov	r3, r0
}
 800aba4:	4618      	mov	r0, r3
 800aba6:	3708      	adds	r7, #8
 800aba8:	46bd      	mov	sp, r7
 800abaa:	bd80      	pop	{r7, pc}

0800abac <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800abac:	b480      	push	{r7}
 800abae:	b083      	sub	sp, #12
 800abb0:	af00      	add	r7, sp, #0
 800abb2:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800abb4:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800abb6:	4618      	mov	r0, r3
 800abb8:	370c      	adds	r7, #12
 800abba:	46bd      	mov	sp, r7
 800abbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abc0:	4770      	bx	lr

0800abc2 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800abc2:	b580      	push	{r7, lr}
 800abc4:	b084      	sub	sp, #16
 800abc6:	af00      	add	r7, sp, #0
 800abc8:	6078      	str	r0, [r7, #4]
 800abca:	460b      	mov	r3, r1
 800abcc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800abce:	2300      	movs	r3, #0
 800abd0:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800abd8:	2b00      	cmp	r3, #0
 800abda:	d009      	beq.n	800abf0 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800abe2:	681b      	ldr	r3, [r3, #0]
 800abe4:	78fa      	ldrb	r2, [r7, #3]
 800abe6:	4611      	mov	r1, r2
 800abe8:	6878      	ldr	r0, [r7, #4]
 800abea:	4798      	blx	r3
 800abec:	4603      	mov	r3, r0
 800abee:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800abf0:	7bfb      	ldrb	r3, [r7, #15]
}
 800abf2:	4618      	mov	r0, r3
 800abf4:	3710      	adds	r7, #16
 800abf6:	46bd      	mov	sp, r7
 800abf8:	bd80      	pop	{r7, pc}

0800abfa <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800abfa:	b580      	push	{r7, lr}
 800abfc:	b084      	sub	sp, #16
 800abfe:	af00      	add	r7, sp, #0
 800ac00:	6078      	str	r0, [r7, #4]
 800ac02:	460b      	mov	r3, r1
 800ac04:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800ac06:	2300      	movs	r3, #0
 800ac08:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ac10:	685b      	ldr	r3, [r3, #4]
 800ac12:	78fa      	ldrb	r2, [r7, #3]
 800ac14:	4611      	mov	r1, r2
 800ac16:	6878      	ldr	r0, [r7, #4]
 800ac18:	4798      	blx	r3
 800ac1a:	4603      	mov	r3, r0
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	d001      	beq.n	800ac24 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800ac20:	2303      	movs	r3, #3
 800ac22:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800ac24:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac26:	4618      	mov	r0, r3
 800ac28:	3710      	adds	r7, #16
 800ac2a:	46bd      	mov	sp, r7
 800ac2c:	bd80      	pop	{r7, pc}

0800ac2e <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800ac2e:	b580      	push	{r7, lr}
 800ac30:	b084      	sub	sp, #16
 800ac32:	af00      	add	r7, sp, #0
 800ac34:	6078      	str	r0, [r7, #4]
 800ac36:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800ac3e:	6839      	ldr	r1, [r7, #0]
 800ac40:	4618      	mov	r0, r3
 800ac42:	f001 f90c 	bl	800be5e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	2201      	movs	r2, #1
 800ac4a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800ac54:	461a      	mov	r2, r3
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800ac62:	f003 031f 	and.w	r3, r3, #31
 800ac66:	2b02      	cmp	r3, #2
 800ac68:	d01a      	beq.n	800aca0 <USBD_LL_SetupStage+0x72>
 800ac6a:	2b02      	cmp	r3, #2
 800ac6c:	d822      	bhi.n	800acb4 <USBD_LL_SetupStage+0x86>
 800ac6e:	2b00      	cmp	r3, #0
 800ac70:	d002      	beq.n	800ac78 <USBD_LL_SetupStage+0x4a>
 800ac72:	2b01      	cmp	r3, #1
 800ac74:	d00a      	beq.n	800ac8c <USBD_LL_SetupStage+0x5e>
 800ac76:	e01d      	b.n	800acb4 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800ac7e:	4619      	mov	r1, r3
 800ac80:	6878      	ldr	r0, [r7, #4]
 800ac82:	f000 fb63 	bl	800b34c <USBD_StdDevReq>
 800ac86:	4603      	mov	r3, r0
 800ac88:	73fb      	strb	r3, [r7, #15]
      break;
 800ac8a:	e020      	b.n	800acce <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800ac92:	4619      	mov	r1, r3
 800ac94:	6878      	ldr	r0, [r7, #4]
 800ac96:	f000 fbcb 	bl	800b430 <USBD_StdItfReq>
 800ac9a:	4603      	mov	r3, r0
 800ac9c:	73fb      	strb	r3, [r7, #15]
      break;
 800ac9e:	e016      	b.n	800acce <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800aca6:	4619      	mov	r1, r3
 800aca8:	6878      	ldr	r0, [r7, #4]
 800acaa:	f000 fc2d 	bl	800b508 <USBD_StdEPReq>
 800acae:	4603      	mov	r3, r0
 800acb0:	73fb      	strb	r3, [r7, #15]
      break;
 800acb2:	e00c      	b.n	800acce <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800acba:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800acbe:	b2db      	uxtb	r3, r3
 800acc0:	4619      	mov	r1, r3
 800acc2:	6878      	ldr	r0, [r7, #4]
 800acc4:	f001 ff2e 	bl	800cb24 <USBD_LL_StallEP>
 800acc8:	4603      	mov	r3, r0
 800acca:	73fb      	strb	r3, [r7, #15]
      break;
 800accc:	bf00      	nop
  }

  return ret;
 800acce:	7bfb      	ldrb	r3, [r7, #15]
}
 800acd0:	4618      	mov	r0, r3
 800acd2:	3710      	adds	r7, #16
 800acd4:	46bd      	mov	sp, r7
 800acd6:	bd80      	pop	{r7, pc}

0800acd8 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800acd8:	b580      	push	{r7, lr}
 800acda:	b086      	sub	sp, #24
 800acdc:	af00      	add	r7, sp, #0
 800acde:	60f8      	str	r0, [r7, #12]
 800ace0:	460b      	mov	r3, r1
 800ace2:	607a      	str	r2, [r7, #4]
 800ace4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800ace6:	2300      	movs	r3, #0
 800ace8:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800acea:	7afb      	ldrb	r3, [r7, #11]
 800acec:	2b00      	cmp	r3, #0
 800acee:	d16e      	bne.n	800adce <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800acf0:	68fb      	ldr	r3, [r7, #12]
 800acf2:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800acf6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800acf8:	68fb      	ldr	r3, [r7, #12]
 800acfa:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800acfe:	2b03      	cmp	r3, #3
 800ad00:	f040 8098 	bne.w	800ae34 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800ad04:	693b      	ldr	r3, [r7, #16]
 800ad06:	689a      	ldr	r2, [r3, #8]
 800ad08:	693b      	ldr	r3, [r7, #16]
 800ad0a:	68db      	ldr	r3, [r3, #12]
 800ad0c:	429a      	cmp	r2, r3
 800ad0e:	d913      	bls.n	800ad38 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800ad10:	693b      	ldr	r3, [r7, #16]
 800ad12:	689a      	ldr	r2, [r3, #8]
 800ad14:	693b      	ldr	r3, [r7, #16]
 800ad16:	68db      	ldr	r3, [r3, #12]
 800ad18:	1ad2      	subs	r2, r2, r3
 800ad1a:	693b      	ldr	r3, [r7, #16]
 800ad1c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800ad1e:	693b      	ldr	r3, [r7, #16]
 800ad20:	68da      	ldr	r2, [r3, #12]
 800ad22:	693b      	ldr	r3, [r7, #16]
 800ad24:	689b      	ldr	r3, [r3, #8]
 800ad26:	4293      	cmp	r3, r2
 800ad28:	bf28      	it	cs
 800ad2a:	4613      	movcs	r3, r2
 800ad2c:	461a      	mov	r2, r3
 800ad2e:	6879      	ldr	r1, [r7, #4]
 800ad30:	68f8      	ldr	r0, [r7, #12]
 800ad32:	f001 fba1 	bl	800c478 <USBD_CtlContinueRx>
 800ad36:	e07d      	b.n	800ae34 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800ad38:	68fb      	ldr	r3, [r7, #12]
 800ad3a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800ad3e:	f003 031f 	and.w	r3, r3, #31
 800ad42:	2b02      	cmp	r3, #2
 800ad44:	d014      	beq.n	800ad70 <USBD_LL_DataOutStage+0x98>
 800ad46:	2b02      	cmp	r3, #2
 800ad48:	d81d      	bhi.n	800ad86 <USBD_LL_DataOutStage+0xae>
 800ad4a:	2b00      	cmp	r3, #0
 800ad4c:	d002      	beq.n	800ad54 <USBD_LL_DataOutStage+0x7c>
 800ad4e:	2b01      	cmp	r3, #1
 800ad50:	d003      	beq.n	800ad5a <USBD_LL_DataOutStage+0x82>
 800ad52:	e018      	b.n	800ad86 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800ad54:	2300      	movs	r3, #0
 800ad56:	75bb      	strb	r3, [r7, #22]
            break;
 800ad58:	e018      	b.n	800ad8c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800ad5a:	68fb      	ldr	r3, [r7, #12]
 800ad5c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800ad60:	b2db      	uxtb	r3, r3
 800ad62:	4619      	mov	r1, r3
 800ad64:	68f8      	ldr	r0, [r7, #12]
 800ad66:	f000 fa64 	bl	800b232 <USBD_CoreFindIF>
 800ad6a:	4603      	mov	r3, r0
 800ad6c:	75bb      	strb	r3, [r7, #22]
            break;
 800ad6e:	e00d      	b.n	800ad8c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800ad70:	68fb      	ldr	r3, [r7, #12]
 800ad72:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800ad76:	b2db      	uxtb	r3, r3
 800ad78:	4619      	mov	r1, r3
 800ad7a:	68f8      	ldr	r0, [r7, #12]
 800ad7c:	f000 fa66 	bl	800b24c <USBD_CoreFindEP>
 800ad80:	4603      	mov	r3, r0
 800ad82:	75bb      	strb	r3, [r7, #22]
            break;
 800ad84:	e002      	b.n	800ad8c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800ad86:	2300      	movs	r3, #0
 800ad88:	75bb      	strb	r3, [r7, #22]
            break;
 800ad8a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800ad8c:	7dbb      	ldrb	r3, [r7, #22]
 800ad8e:	2b00      	cmp	r3, #0
 800ad90:	d119      	bne.n	800adc6 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ad92:	68fb      	ldr	r3, [r7, #12]
 800ad94:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ad98:	b2db      	uxtb	r3, r3
 800ad9a:	2b03      	cmp	r3, #3
 800ad9c:	d113      	bne.n	800adc6 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800ad9e:	7dba      	ldrb	r2, [r7, #22]
 800ada0:	68fb      	ldr	r3, [r7, #12]
 800ada2:	32ae      	adds	r2, #174	@ 0xae
 800ada4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ada8:	691b      	ldr	r3, [r3, #16]
 800adaa:	2b00      	cmp	r3, #0
 800adac:	d00b      	beq.n	800adc6 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800adae:	7dba      	ldrb	r2, [r7, #22]
 800adb0:	68fb      	ldr	r3, [r7, #12]
 800adb2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800adb6:	7dba      	ldrb	r2, [r7, #22]
 800adb8:	68fb      	ldr	r3, [r7, #12]
 800adba:	32ae      	adds	r2, #174	@ 0xae
 800adbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800adc0:	691b      	ldr	r3, [r3, #16]
 800adc2:	68f8      	ldr	r0, [r7, #12]
 800adc4:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800adc6:	68f8      	ldr	r0, [r7, #12]
 800adc8:	f001 fb67 	bl	800c49a <USBD_CtlSendStatus>
 800adcc:	e032      	b.n	800ae34 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800adce:	7afb      	ldrb	r3, [r7, #11]
 800add0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800add4:	b2db      	uxtb	r3, r3
 800add6:	4619      	mov	r1, r3
 800add8:	68f8      	ldr	r0, [r7, #12]
 800adda:	f000 fa37 	bl	800b24c <USBD_CoreFindEP>
 800adde:	4603      	mov	r3, r0
 800ade0:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ade2:	7dbb      	ldrb	r3, [r7, #22]
 800ade4:	2bff      	cmp	r3, #255	@ 0xff
 800ade6:	d025      	beq.n	800ae34 <USBD_LL_DataOutStage+0x15c>
 800ade8:	7dbb      	ldrb	r3, [r7, #22]
 800adea:	2b00      	cmp	r3, #0
 800adec:	d122      	bne.n	800ae34 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800adee:	68fb      	ldr	r3, [r7, #12]
 800adf0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800adf4:	b2db      	uxtb	r3, r3
 800adf6:	2b03      	cmp	r3, #3
 800adf8:	d117      	bne.n	800ae2a <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800adfa:	7dba      	ldrb	r2, [r7, #22]
 800adfc:	68fb      	ldr	r3, [r7, #12]
 800adfe:	32ae      	adds	r2, #174	@ 0xae
 800ae00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ae04:	699b      	ldr	r3, [r3, #24]
 800ae06:	2b00      	cmp	r3, #0
 800ae08:	d00f      	beq.n	800ae2a <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800ae0a:	7dba      	ldrb	r2, [r7, #22]
 800ae0c:	68fb      	ldr	r3, [r7, #12]
 800ae0e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800ae12:	7dba      	ldrb	r2, [r7, #22]
 800ae14:	68fb      	ldr	r3, [r7, #12]
 800ae16:	32ae      	adds	r2, #174	@ 0xae
 800ae18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ae1c:	699b      	ldr	r3, [r3, #24]
 800ae1e:	7afa      	ldrb	r2, [r7, #11]
 800ae20:	4611      	mov	r1, r2
 800ae22:	68f8      	ldr	r0, [r7, #12]
 800ae24:	4798      	blx	r3
 800ae26:	4603      	mov	r3, r0
 800ae28:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800ae2a:	7dfb      	ldrb	r3, [r7, #23]
 800ae2c:	2b00      	cmp	r3, #0
 800ae2e:	d001      	beq.n	800ae34 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800ae30:	7dfb      	ldrb	r3, [r7, #23]
 800ae32:	e000      	b.n	800ae36 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800ae34:	2300      	movs	r3, #0
}
 800ae36:	4618      	mov	r0, r3
 800ae38:	3718      	adds	r7, #24
 800ae3a:	46bd      	mov	sp, r7
 800ae3c:	bd80      	pop	{r7, pc}

0800ae3e <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800ae3e:	b580      	push	{r7, lr}
 800ae40:	b086      	sub	sp, #24
 800ae42:	af00      	add	r7, sp, #0
 800ae44:	60f8      	str	r0, [r7, #12]
 800ae46:	460b      	mov	r3, r1
 800ae48:	607a      	str	r2, [r7, #4]
 800ae4a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800ae4c:	7afb      	ldrb	r3, [r7, #11]
 800ae4e:	2b00      	cmp	r3, #0
 800ae50:	d16f      	bne.n	800af32 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800ae52:	68fb      	ldr	r3, [r7, #12]
 800ae54:	3314      	adds	r3, #20
 800ae56:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800ae58:	68fb      	ldr	r3, [r7, #12]
 800ae5a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800ae5e:	2b02      	cmp	r3, #2
 800ae60:	d15a      	bne.n	800af18 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800ae62:	693b      	ldr	r3, [r7, #16]
 800ae64:	689a      	ldr	r2, [r3, #8]
 800ae66:	693b      	ldr	r3, [r7, #16]
 800ae68:	68db      	ldr	r3, [r3, #12]
 800ae6a:	429a      	cmp	r2, r3
 800ae6c:	d914      	bls.n	800ae98 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800ae6e:	693b      	ldr	r3, [r7, #16]
 800ae70:	689a      	ldr	r2, [r3, #8]
 800ae72:	693b      	ldr	r3, [r7, #16]
 800ae74:	68db      	ldr	r3, [r3, #12]
 800ae76:	1ad2      	subs	r2, r2, r3
 800ae78:	693b      	ldr	r3, [r7, #16]
 800ae7a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800ae7c:	693b      	ldr	r3, [r7, #16]
 800ae7e:	689b      	ldr	r3, [r3, #8]
 800ae80:	461a      	mov	r2, r3
 800ae82:	6879      	ldr	r1, [r7, #4]
 800ae84:	68f8      	ldr	r0, [r7, #12]
 800ae86:	f001 fae6 	bl	800c456 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ae8a:	2300      	movs	r3, #0
 800ae8c:	2200      	movs	r2, #0
 800ae8e:	2100      	movs	r1, #0
 800ae90:	68f8      	ldr	r0, [r7, #12]
 800ae92:	f001 fef1 	bl	800cc78 <USBD_LL_PrepareReceive>
 800ae96:	e03f      	b.n	800af18 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800ae98:	693b      	ldr	r3, [r7, #16]
 800ae9a:	68da      	ldr	r2, [r3, #12]
 800ae9c:	693b      	ldr	r3, [r7, #16]
 800ae9e:	689b      	ldr	r3, [r3, #8]
 800aea0:	429a      	cmp	r2, r3
 800aea2:	d11c      	bne.n	800aede <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800aea4:	693b      	ldr	r3, [r7, #16]
 800aea6:	685a      	ldr	r2, [r3, #4]
 800aea8:	693b      	ldr	r3, [r7, #16]
 800aeaa:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800aeac:	429a      	cmp	r2, r3
 800aeae:	d316      	bcc.n	800aede <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800aeb0:	693b      	ldr	r3, [r7, #16]
 800aeb2:	685a      	ldr	r2, [r3, #4]
 800aeb4:	68fb      	ldr	r3, [r7, #12]
 800aeb6:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800aeba:	429a      	cmp	r2, r3
 800aebc:	d20f      	bcs.n	800aede <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800aebe:	2200      	movs	r2, #0
 800aec0:	2100      	movs	r1, #0
 800aec2:	68f8      	ldr	r0, [r7, #12]
 800aec4:	f001 fac7 	bl	800c456 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800aec8:	68fb      	ldr	r3, [r7, #12]
 800aeca:	2200      	movs	r2, #0
 800aecc:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800aed0:	2300      	movs	r3, #0
 800aed2:	2200      	movs	r2, #0
 800aed4:	2100      	movs	r1, #0
 800aed6:	68f8      	ldr	r0, [r7, #12]
 800aed8:	f001 fece 	bl	800cc78 <USBD_LL_PrepareReceive>
 800aedc:	e01c      	b.n	800af18 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aede:	68fb      	ldr	r3, [r7, #12]
 800aee0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800aee4:	b2db      	uxtb	r3, r3
 800aee6:	2b03      	cmp	r3, #3
 800aee8:	d10f      	bne.n	800af0a <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800aeea:	68fb      	ldr	r3, [r7, #12]
 800aeec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800aef0:	68db      	ldr	r3, [r3, #12]
 800aef2:	2b00      	cmp	r3, #0
 800aef4:	d009      	beq.n	800af0a <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800aef6:	68fb      	ldr	r3, [r7, #12]
 800aef8:	2200      	movs	r2, #0
 800aefa:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800aefe:	68fb      	ldr	r3, [r7, #12]
 800af00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800af04:	68db      	ldr	r3, [r3, #12]
 800af06:	68f8      	ldr	r0, [r7, #12]
 800af08:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800af0a:	2180      	movs	r1, #128	@ 0x80
 800af0c:	68f8      	ldr	r0, [r7, #12]
 800af0e:	f001 fe09 	bl	800cb24 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800af12:	68f8      	ldr	r0, [r7, #12]
 800af14:	f001 fad4 	bl	800c4c0 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800af18:	68fb      	ldr	r3, [r7, #12]
 800af1a:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800af1e:	2b00      	cmp	r3, #0
 800af20:	d03a      	beq.n	800af98 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800af22:	68f8      	ldr	r0, [r7, #12]
 800af24:	f7ff fe42 	bl	800abac <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800af28:	68fb      	ldr	r3, [r7, #12]
 800af2a:	2200      	movs	r2, #0
 800af2c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800af30:	e032      	b.n	800af98 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800af32:	7afb      	ldrb	r3, [r7, #11]
 800af34:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800af38:	b2db      	uxtb	r3, r3
 800af3a:	4619      	mov	r1, r3
 800af3c:	68f8      	ldr	r0, [r7, #12]
 800af3e:	f000 f985 	bl	800b24c <USBD_CoreFindEP>
 800af42:	4603      	mov	r3, r0
 800af44:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800af46:	7dfb      	ldrb	r3, [r7, #23]
 800af48:	2bff      	cmp	r3, #255	@ 0xff
 800af4a:	d025      	beq.n	800af98 <USBD_LL_DataInStage+0x15a>
 800af4c:	7dfb      	ldrb	r3, [r7, #23]
 800af4e:	2b00      	cmp	r3, #0
 800af50:	d122      	bne.n	800af98 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800af52:	68fb      	ldr	r3, [r7, #12]
 800af54:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800af58:	b2db      	uxtb	r3, r3
 800af5a:	2b03      	cmp	r3, #3
 800af5c:	d11c      	bne.n	800af98 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800af5e:	7dfa      	ldrb	r2, [r7, #23]
 800af60:	68fb      	ldr	r3, [r7, #12]
 800af62:	32ae      	adds	r2, #174	@ 0xae
 800af64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800af68:	695b      	ldr	r3, [r3, #20]
 800af6a:	2b00      	cmp	r3, #0
 800af6c:	d014      	beq.n	800af98 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800af6e:	7dfa      	ldrb	r2, [r7, #23]
 800af70:	68fb      	ldr	r3, [r7, #12]
 800af72:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800af76:	7dfa      	ldrb	r2, [r7, #23]
 800af78:	68fb      	ldr	r3, [r7, #12]
 800af7a:	32ae      	adds	r2, #174	@ 0xae
 800af7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800af80:	695b      	ldr	r3, [r3, #20]
 800af82:	7afa      	ldrb	r2, [r7, #11]
 800af84:	4611      	mov	r1, r2
 800af86:	68f8      	ldr	r0, [r7, #12]
 800af88:	4798      	blx	r3
 800af8a:	4603      	mov	r3, r0
 800af8c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800af8e:	7dbb      	ldrb	r3, [r7, #22]
 800af90:	2b00      	cmp	r3, #0
 800af92:	d001      	beq.n	800af98 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800af94:	7dbb      	ldrb	r3, [r7, #22]
 800af96:	e000      	b.n	800af9a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800af98:	2300      	movs	r3, #0
}
 800af9a:	4618      	mov	r0, r3
 800af9c:	3718      	adds	r7, #24
 800af9e:	46bd      	mov	sp, r7
 800afa0:	bd80      	pop	{r7, pc}

0800afa2 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800afa2:	b580      	push	{r7, lr}
 800afa4:	b084      	sub	sp, #16
 800afa6:	af00      	add	r7, sp, #0
 800afa8:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800afaa:	2300      	movs	r3, #0
 800afac:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	2201      	movs	r2, #1
 800afb2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	2200      	movs	r2, #0
 800afba:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	2200      	movs	r2, #0
 800afc2:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	2200      	movs	r2, #0
 800afc8:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	2200      	movs	r2, #0
 800afd0:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800afda:	2b00      	cmp	r3, #0
 800afdc:	d014      	beq.n	800b008 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800afe4:	685b      	ldr	r3, [r3, #4]
 800afe6:	2b00      	cmp	r3, #0
 800afe8:	d00e      	beq.n	800b008 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800aff0:	685b      	ldr	r3, [r3, #4]
 800aff2:	687a      	ldr	r2, [r7, #4]
 800aff4:	6852      	ldr	r2, [r2, #4]
 800aff6:	b2d2      	uxtb	r2, r2
 800aff8:	4611      	mov	r1, r2
 800affa:	6878      	ldr	r0, [r7, #4]
 800affc:	4798      	blx	r3
 800affe:	4603      	mov	r3, r0
 800b000:	2b00      	cmp	r3, #0
 800b002:	d001      	beq.n	800b008 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800b004:	2303      	movs	r3, #3
 800b006:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b008:	2340      	movs	r3, #64	@ 0x40
 800b00a:	2200      	movs	r2, #0
 800b00c:	2100      	movs	r1, #0
 800b00e:	6878      	ldr	r0, [r7, #4]
 800b010:	f001 fd43 	bl	800ca9a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	2201      	movs	r2, #1
 800b018:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	2240      	movs	r2, #64	@ 0x40
 800b020:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b024:	2340      	movs	r3, #64	@ 0x40
 800b026:	2200      	movs	r2, #0
 800b028:	2180      	movs	r1, #128	@ 0x80
 800b02a:	6878      	ldr	r0, [r7, #4]
 800b02c:	f001 fd35 	bl	800ca9a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	2201      	movs	r2, #1
 800b034:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	2240      	movs	r2, #64	@ 0x40
 800b03a:	621a      	str	r2, [r3, #32]

  return ret;
 800b03c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b03e:	4618      	mov	r0, r3
 800b040:	3710      	adds	r7, #16
 800b042:	46bd      	mov	sp, r7
 800b044:	bd80      	pop	{r7, pc}

0800b046 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800b046:	b480      	push	{r7}
 800b048:	b083      	sub	sp, #12
 800b04a:	af00      	add	r7, sp, #0
 800b04c:	6078      	str	r0, [r7, #4]
 800b04e:	460b      	mov	r3, r1
 800b050:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	78fa      	ldrb	r2, [r7, #3]
 800b056:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800b058:	2300      	movs	r3, #0
}
 800b05a:	4618      	mov	r0, r3
 800b05c:	370c      	adds	r7, #12
 800b05e:	46bd      	mov	sp, r7
 800b060:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b064:	4770      	bx	lr

0800b066 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800b066:	b480      	push	{r7}
 800b068:	b083      	sub	sp, #12
 800b06a:	af00      	add	r7, sp, #0
 800b06c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b074:	b2db      	uxtb	r3, r3
 800b076:	2b04      	cmp	r3, #4
 800b078:	d006      	beq.n	800b088 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b080:	b2da      	uxtb	r2, r3
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	2204      	movs	r2, #4
 800b08c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800b090:	2300      	movs	r3, #0
}
 800b092:	4618      	mov	r0, r3
 800b094:	370c      	adds	r7, #12
 800b096:	46bd      	mov	sp, r7
 800b098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b09c:	4770      	bx	lr

0800b09e <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800b09e:	b480      	push	{r7}
 800b0a0:	b083      	sub	sp, #12
 800b0a2:	af00      	add	r7, sp, #0
 800b0a4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b0ac:	b2db      	uxtb	r3, r3
 800b0ae:	2b04      	cmp	r3, #4
 800b0b0:	d106      	bne.n	800b0c0 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800b0b8:	b2da      	uxtb	r2, r3
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800b0c0:	2300      	movs	r3, #0
}
 800b0c2:	4618      	mov	r0, r3
 800b0c4:	370c      	adds	r7, #12
 800b0c6:	46bd      	mov	sp, r7
 800b0c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0cc:	4770      	bx	lr

0800b0ce <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800b0ce:	b580      	push	{r7, lr}
 800b0d0:	b082      	sub	sp, #8
 800b0d2:	af00      	add	r7, sp, #0
 800b0d4:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b0dc:	b2db      	uxtb	r3, r3
 800b0de:	2b03      	cmp	r3, #3
 800b0e0:	d110      	bne.n	800b104 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b0e8:	2b00      	cmp	r3, #0
 800b0ea:	d00b      	beq.n	800b104 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b0f2:	69db      	ldr	r3, [r3, #28]
 800b0f4:	2b00      	cmp	r3, #0
 800b0f6:	d005      	beq.n	800b104 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b0fe:	69db      	ldr	r3, [r3, #28]
 800b100:	6878      	ldr	r0, [r7, #4]
 800b102:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800b104:	2300      	movs	r3, #0
}
 800b106:	4618      	mov	r0, r3
 800b108:	3708      	adds	r7, #8
 800b10a:	46bd      	mov	sp, r7
 800b10c:	bd80      	pop	{r7, pc}

0800b10e <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800b10e:	b580      	push	{r7, lr}
 800b110:	b082      	sub	sp, #8
 800b112:	af00      	add	r7, sp, #0
 800b114:	6078      	str	r0, [r7, #4]
 800b116:	460b      	mov	r3, r1
 800b118:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	32ae      	adds	r2, #174	@ 0xae
 800b124:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b128:	2b00      	cmp	r3, #0
 800b12a:	d101      	bne.n	800b130 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800b12c:	2303      	movs	r3, #3
 800b12e:	e01c      	b.n	800b16a <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b136:	b2db      	uxtb	r3, r3
 800b138:	2b03      	cmp	r3, #3
 800b13a:	d115      	bne.n	800b168 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	32ae      	adds	r2, #174	@ 0xae
 800b146:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b14a:	6a1b      	ldr	r3, [r3, #32]
 800b14c:	2b00      	cmp	r3, #0
 800b14e:	d00b      	beq.n	800b168 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	32ae      	adds	r2, #174	@ 0xae
 800b15a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b15e:	6a1b      	ldr	r3, [r3, #32]
 800b160:	78fa      	ldrb	r2, [r7, #3]
 800b162:	4611      	mov	r1, r2
 800b164:	6878      	ldr	r0, [r7, #4]
 800b166:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b168:	2300      	movs	r3, #0
}
 800b16a:	4618      	mov	r0, r3
 800b16c:	3708      	adds	r7, #8
 800b16e:	46bd      	mov	sp, r7
 800b170:	bd80      	pop	{r7, pc}

0800b172 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800b172:	b580      	push	{r7, lr}
 800b174:	b082      	sub	sp, #8
 800b176:	af00      	add	r7, sp, #0
 800b178:	6078      	str	r0, [r7, #4]
 800b17a:	460b      	mov	r3, r1
 800b17c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	32ae      	adds	r2, #174	@ 0xae
 800b188:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b18c:	2b00      	cmp	r3, #0
 800b18e:	d101      	bne.n	800b194 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800b190:	2303      	movs	r3, #3
 800b192:	e01c      	b.n	800b1ce <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b19a:	b2db      	uxtb	r3, r3
 800b19c:	2b03      	cmp	r3, #3
 800b19e:	d115      	bne.n	800b1cc <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	32ae      	adds	r2, #174	@ 0xae
 800b1aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b1ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b1b0:	2b00      	cmp	r3, #0
 800b1b2:	d00b      	beq.n	800b1cc <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	32ae      	adds	r2, #174	@ 0xae
 800b1be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b1c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b1c4:	78fa      	ldrb	r2, [r7, #3]
 800b1c6:	4611      	mov	r1, r2
 800b1c8:	6878      	ldr	r0, [r7, #4]
 800b1ca:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b1cc:	2300      	movs	r3, #0
}
 800b1ce:	4618      	mov	r0, r3
 800b1d0:	3708      	adds	r7, #8
 800b1d2:	46bd      	mov	sp, r7
 800b1d4:	bd80      	pop	{r7, pc}

0800b1d6 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800b1d6:	b480      	push	{r7}
 800b1d8:	b083      	sub	sp, #12
 800b1da:	af00      	add	r7, sp, #0
 800b1dc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b1de:	2300      	movs	r3, #0
}
 800b1e0:	4618      	mov	r0, r3
 800b1e2:	370c      	adds	r7, #12
 800b1e4:	46bd      	mov	sp, r7
 800b1e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ea:	4770      	bx	lr

0800b1ec <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800b1ec:	b580      	push	{r7, lr}
 800b1ee:	b084      	sub	sp, #16
 800b1f0:	af00      	add	r7, sp, #0
 800b1f2:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800b1f4:	2300      	movs	r3, #0
 800b1f6:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	2201      	movs	r2, #1
 800b1fc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b206:	2b00      	cmp	r3, #0
 800b208:	d00e      	beq.n	800b228 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b210:	685b      	ldr	r3, [r3, #4]
 800b212:	687a      	ldr	r2, [r7, #4]
 800b214:	6852      	ldr	r2, [r2, #4]
 800b216:	b2d2      	uxtb	r2, r2
 800b218:	4611      	mov	r1, r2
 800b21a:	6878      	ldr	r0, [r7, #4]
 800b21c:	4798      	blx	r3
 800b21e:	4603      	mov	r3, r0
 800b220:	2b00      	cmp	r3, #0
 800b222:	d001      	beq.n	800b228 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800b224:	2303      	movs	r3, #3
 800b226:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b228:	7bfb      	ldrb	r3, [r7, #15]
}
 800b22a:	4618      	mov	r0, r3
 800b22c:	3710      	adds	r7, #16
 800b22e:	46bd      	mov	sp, r7
 800b230:	bd80      	pop	{r7, pc}

0800b232 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800b232:	b480      	push	{r7}
 800b234:	b083      	sub	sp, #12
 800b236:	af00      	add	r7, sp, #0
 800b238:	6078      	str	r0, [r7, #4]
 800b23a:	460b      	mov	r3, r1
 800b23c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800b23e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800b240:	4618      	mov	r0, r3
 800b242:	370c      	adds	r7, #12
 800b244:	46bd      	mov	sp, r7
 800b246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b24a:	4770      	bx	lr

0800b24c <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800b24c:	b480      	push	{r7}
 800b24e:	b083      	sub	sp, #12
 800b250:	af00      	add	r7, sp, #0
 800b252:	6078      	str	r0, [r7, #4]
 800b254:	460b      	mov	r3, r1
 800b256:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800b258:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800b25a:	4618      	mov	r0, r3
 800b25c:	370c      	adds	r7, #12
 800b25e:	46bd      	mov	sp, r7
 800b260:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b264:	4770      	bx	lr

0800b266 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800b266:	b580      	push	{r7, lr}
 800b268:	b086      	sub	sp, #24
 800b26a:	af00      	add	r7, sp, #0
 800b26c:	6078      	str	r0, [r7, #4]
 800b26e:	460b      	mov	r3, r1
 800b270:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800b27a:	2300      	movs	r3, #0
 800b27c:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800b27e:	68fb      	ldr	r3, [r7, #12]
 800b280:	885b      	ldrh	r3, [r3, #2]
 800b282:	b29b      	uxth	r3, r3
 800b284:	68fa      	ldr	r2, [r7, #12]
 800b286:	7812      	ldrb	r2, [r2, #0]
 800b288:	4293      	cmp	r3, r2
 800b28a:	d91f      	bls.n	800b2cc <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800b28c:	68fb      	ldr	r3, [r7, #12]
 800b28e:	781b      	ldrb	r3, [r3, #0]
 800b290:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800b292:	e013      	b.n	800b2bc <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800b294:	f107 030a 	add.w	r3, r7, #10
 800b298:	4619      	mov	r1, r3
 800b29a:	6978      	ldr	r0, [r7, #20]
 800b29c:	f000 f81b 	bl	800b2d6 <USBD_GetNextDesc>
 800b2a0:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800b2a2:	697b      	ldr	r3, [r7, #20]
 800b2a4:	785b      	ldrb	r3, [r3, #1]
 800b2a6:	2b05      	cmp	r3, #5
 800b2a8:	d108      	bne.n	800b2bc <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800b2aa:	697b      	ldr	r3, [r7, #20]
 800b2ac:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800b2ae:	693b      	ldr	r3, [r7, #16]
 800b2b0:	789b      	ldrb	r3, [r3, #2]
 800b2b2:	78fa      	ldrb	r2, [r7, #3]
 800b2b4:	429a      	cmp	r2, r3
 800b2b6:	d008      	beq.n	800b2ca <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800b2b8:	2300      	movs	r3, #0
 800b2ba:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800b2bc:	68fb      	ldr	r3, [r7, #12]
 800b2be:	885b      	ldrh	r3, [r3, #2]
 800b2c0:	b29a      	uxth	r2, r3
 800b2c2:	897b      	ldrh	r3, [r7, #10]
 800b2c4:	429a      	cmp	r2, r3
 800b2c6:	d8e5      	bhi.n	800b294 <USBD_GetEpDesc+0x2e>
 800b2c8:	e000      	b.n	800b2cc <USBD_GetEpDesc+0x66>
          break;
 800b2ca:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800b2cc:	693b      	ldr	r3, [r7, #16]
}
 800b2ce:	4618      	mov	r0, r3
 800b2d0:	3718      	adds	r7, #24
 800b2d2:	46bd      	mov	sp, r7
 800b2d4:	bd80      	pop	{r7, pc}

0800b2d6 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800b2d6:	b480      	push	{r7}
 800b2d8:	b085      	sub	sp, #20
 800b2da:	af00      	add	r7, sp, #0
 800b2dc:	6078      	str	r0, [r7, #4]
 800b2de:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800b2e4:	683b      	ldr	r3, [r7, #0]
 800b2e6:	881b      	ldrh	r3, [r3, #0]
 800b2e8:	68fa      	ldr	r2, [r7, #12]
 800b2ea:	7812      	ldrb	r2, [r2, #0]
 800b2ec:	4413      	add	r3, r2
 800b2ee:	b29a      	uxth	r2, r3
 800b2f0:	683b      	ldr	r3, [r7, #0]
 800b2f2:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800b2f4:	68fb      	ldr	r3, [r7, #12]
 800b2f6:	781b      	ldrb	r3, [r3, #0]
 800b2f8:	461a      	mov	r2, r3
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	4413      	add	r3, r2
 800b2fe:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800b300:	68fb      	ldr	r3, [r7, #12]
}
 800b302:	4618      	mov	r0, r3
 800b304:	3714      	adds	r7, #20
 800b306:	46bd      	mov	sp, r7
 800b308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b30c:	4770      	bx	lr

0800b30e <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800b30e:	b480      	push	{r7}
 800b310:	b087      	sub	sp, #28
 800b312:	af00      	add	r7, sp, #0
 800b314:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800b31a:	697b      	ldr	r3, [r7, #20]
 800b31c:	781b      	ldrb	r3, [r3, #0]
 800b31e:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800b320:	697b      	ldr	r3, [r7, #20]
 800b322:	3301      	adds	r3, #1
 800b324:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800b326:	697b      	ldr	r3, [r7, #20]
 800b328:	781b      	ldrb	r3, [r3, #0]
 800b32a:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800b32c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800b330:	021b      	lsls	r3, r3, #8
 800b332:	b21a      	sxth	r2, r3
 800b334:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800b338:	4313      	orrs	r3, r2
 800b33a:	b21b      	sxth	r3, r3
 800b33c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800b33e:	89fb      	ldrh	r3, [r7, #14]
}
 800b340:	4618      	mov	r0, r3
 800b342:	371c      	adds	r7, #28
 800b344:	46bd      	mov	sp, r7
 800b346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b34a:	4770      	bx	lr

0800b34c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b34c:	b580      	push	{r7, lr}
 800b34e:	b084      	sub	sp, #16
 800b350:	af00      	add	r7, sp, #0
 800b352:	6078      	str	r0, [r7, #4]
 800b354:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b356:	2300      	movs	r3, #0
 800b358:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b35a:	683b      	ldr	r3, [r7, #0]
 800b35c:	781b      	ldrb	r3, [r3, #0]
 800b35e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800b362:	2b40      	cmp	r3, #64	@ 0x40
 800b364:	d005      	beq.n	800b372 <USBD_StdDevReq+0x26>
 800b366:	2b40      	cmp	r3, #64	@ 0x40
 800b368:	d857      	bhi.n	800b41a <USBD_StdDevReq+0xce>
 800b36a:	2b00      	cmp	r3, #0
 800b36c:	d00f      	beq.n	800b38e <USBD_StdDevReq+0x42>
 800b36e:	2b20      	cmp	r3, #32
 800b370:	d153      	bne.n	800b41a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	32ae      	adds	r2, #174	@ 0xae
 800b37c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b380:	689b      	ldr	r3, [r3, #8]
 800b382:	6839      	ldr	r1, [r7, #0]
 800b384:	6878      	ldr	r0, [r7, #4]
 800b386:	4798      	blx	r3
 800b388:	4603      	mov	r3, r0
 800b38a:	73fb      	strb	r3, [r7, #15]
      break;
 800b38c:	e04a      	b.n	800b424 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b38e:	683b      	ldr	r3, [r7, #0]
 800b390:	785b      	ldrb	r3, [r3, #1]
 800b392:	2b09      	cmp	r3, #9
 800b394:	d83b      	bhi.n	800b40e <USBD_StdDevReq+0xc2>
 800b396:	a201      	add	r2, pc, #4	@ (adr r2, 800b39c <USBD_StdDevReq+0x50>)
 800b398:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b39c:	0800b3f1 	.word	0x0800b3f1
 800b3a0:	0800b405 	.word	0x0800b405
 800b3a4:	0800b40f 	.word	0x0800b40f
 800b3a8:	0800b3fb 	.word	0x0800b3fb
 800b3ac:	0800b40f 	.word	0x0800b40f
 800b3b0:	0800b3cf 	.word	0x0800b3cf
 800b3b4:	0800b3c5 	.word	0x0800b3c5
 800b3b8:	0800b40f 	.word	0x0800b40f
 800b3bc:	0800b3e7 	.word	0x0800b3e7
 800b3c0:	0800b3d9 	.word	0x0800b3d9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800b3c4:	6839      	ldr	r1, [r7, #0]
 800b3c6:	6878      	ldr	r0, [r7, #4]
 800b3c8:	f000 fa3c 	bl	800b844 <USBD_GetDescriptor>
          break;
 800b3cc:	e024      	b.n	800b418 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800b3ce:	6839      	ldr	r1, [r7, #0]
 800b3d0:	6878      	ldr	r0, [r7, #4]
 800b3d2:	f000 fba1 	bl	800bb18 <USBD_SetAddress>
          break;
 800b3d6:	e01f      	b.n	800b418 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800b3d8:	6839      	ldr	r1, [r7, #0]
 800b3da:	6878      	ldr	r0, [r7, #4]
 800b3dc:	f000 fbe0 	bl	800bba0 <USBD_SetConfig>
 800b3e0:	4603      	mov	r3, r0
 800b3e2:	73fb      	strb	r3, [r7, #15]
          break;
 800b3e4:	e018      	b.n	800b418 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800b3e6:	6839      	ldr	r1, [r7, #0]
 800b3e8:	6878      	ldr	r0, [r7, #4]
 800b3ea:	f000 fc83 	bl	800bcf4 <USBD_GetConfig>
          break;
 800b3ee:	e013      	b.n	800b418 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800b3f0:	6839      	ldr	r1, [r7, #0]
 800b3f2:	6878      	ldr	r0, [r7, #4]
 800b3f4:	f000 fcb4 	bl	800bd60 <USBD_GetStatus>
          break;
 800b3f8:	e00e      	b.n	800b418 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800b3fa:	6839      	ldr	r1, [r7, #0]
 800b3fc:	6878      	ldr	r0, [r7, #4]
 800b3fe:	f000 fce3 	bl	800bdc8 <USBD_SetFeature>
          break;
 800b402:	e009      	b.n	800b418 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800b404:	6839      	ldr	r1, [r7, #0]
 800b406:	6878      	ldr	r0, [r7, #4]
 800b408:	f000 fd07 	bl	800be1a <USBD_ClrFeature>
          break;
 800b40c:	e004      	b.n	800b418 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800b40e:	6839      	ldr	r1, [r7, #0]
 800b410:	6878      	ldr	r0, [r7, #4]
 800b412:	f000 fd5e 	bl	800bed2 <USBD_CtlError>
          break;
 800b416:	bf00      	nop
      }
      break;
 800b418:	e004      	b.n	800b424 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800b41a:	6839      	ldr	r1, [r7, #0]
 800b41c:	6878      	ldr	r0, [r7, #4]
 800b41e:	f000 fd58 	bl	800bed2 <USBD_CtlError>
      break;
 800b422:	bf00      	nop
  }

  return ret;
 800b424:	7bfb      	ldrb	r3, [r7, #15]
}
 800b426:	4618      	mov	r0, r3
 800b428:	3710      	adds	r7, #16
 800b42a:	46bd      	mov	sp, r7
 800b42c:	bd80      	pop	{r7, pc}
 800b42e:	bf00      	nop

0800b430 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b430:	b580      	push	{r7, lr}
 800b432:	b084      	sub	sp, #16
 800b434:	af00      	add	r7, sp, #0
 800b436:	6078      	str	r0, [r7, #4]
 800b438:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b43a:	2300      	movs	r3, #0
 800b43c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b43e:	683b      	ldr	r3, [r7, #0]
 800b440:	781b      	ldrb	r3, [r3, #0]
 800b442:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800b446:	2b40      	cmp	r3, #64	@ 0x40
 800b448:	d005      	beq.n	800b456 <USBD_StdItfReq+0x26>
 800b44a:	2b40      	cmp	r3, #64	@ 0x40
 800b44c:	d852      	bhi.n	800b4f4 <USBD_StdItfReq+0xc4>
 800b44e:	2b00      	cmp	r3, #0
 800b450:	d001      	beq.n	800b456 <USBD_StdItfReq+0x26>
 800b452:	2b20      	cmp	r3, #32
 800b454:	d14e      	bne.n	800b4f4 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b45c:	b2db      	uxtb	r3, r3
 800b45e:	3b01      	subs	r3, #1
 800b460:	2b02      	cmp	r3, #2
 800b462:	d840      	bhi.n	800b4e6 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800b464:	683b      	ldr	r3, [r7, #0]
 800b466:	889b      	ldrh	r3, [r3, #4]
 800b468:	b2db      	uxtb	r3, r3
 800b46a:	2b01      	cmp	r3, #1
 800b46c:	d836      	bhi.n	800b4dc <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800b46e:	683b      	ldr	r3, [r7, #0]
 800b470:	889b      	ldrh	r3, [r3, #4]
 800b472:	b2db      	uxtb	r3, r3
 800b474:	4619      	mov	r1, r3
 800b476:	6878      	ldr	r0, [r7, #4]
 800b478:	f7ff fedb 	bl	800b232 <USBD_CoreFindIF>
 800b47c:	4603      	mov	r3, r0
 800b47e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b480:	7bbb      	ldrb	r3, [r7, #14]
 800b482:	2bff      	cmp	r3, #255	@ 0xff
 800b484:	d01d      	beq.n	800b4c2 <USBD_StdItfReq+0x92>
 800b486:	7bbb      	ldrb	r3, [r7, #14]
 800b488:	2b00      	cmp	r3, #0
 800b48a:	d11a      	bne.n	800b4c2 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800b48c:	7bba      	ldrb	r2, [r7, #14]
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	32ae      	adds	r2, #174	@ 0xae
 800b492:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b496:	689b      	ldr	r3, [r3, #8]
 800b498:	2b00      	cmp	r3, #0
 800b49a:	d00f      	beq.n	800b4bc <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800b49c:	7bba      	ldrb	r2, [r7, #14]
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800b4a4:	7bba      	ldrb	r2, [r7, #14]
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	32ae      	adds	r2, #174	@ 0xae
 800b4aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b4ae:	689b      	ldr	r3, [r3, #8]
 800b4b0:	6839      	ldr	r1, [r7, #0]
 800b4b2:	6878      	ldr	r0, [r7, #4]
 800b4b4:	4798      	blx	r3
 800b4b6:	4603      	mov	r3, r0
 800b4b8:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800b4ba:	e004      	b.n	800b4c6 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800b4bc:	2303      	movs	r3, #3
 800b4be:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800b4c0:	e001      	b.n	800b4c6 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800b4c2:	2303      	movs	r3, #3
 800b4c4:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800b4c6:	683b      	ldr	r3, [r7, #0]
 800b4c8:	88db      	ldrh	r3, [r3, #6]
 800b4ca:	2b00      	cmp	r3, #0
 800b4cc:	d110      	bne.n	800b4f0 <USBD_StdItfReq+0xc0>
 800b4ce:	7bfb      	ldrb	r3, [r7, #15]
 800b4d0:	2b00      	cmp	r3, #0
 800b4d2:	d10d      	bne.n	800b4f0 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800b4d4:	6878      	ldr	r0, [r7, #4]
 800b4d6:	f000 ffe0 	bl	800c49a <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800b4da:	e009      	b.n	800b4f0 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800b4dc:	6839      	ldr	r1, [r7, #0]
 800b4de:	6878      	ldr	r0, [r7, #4]
 800b4e0:	f000 fcf7 	bl	800bed2 <USBD_CtlError>
          break;
 800b4e4:	e004      	b.n	800b4f0 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800b4e6:	6839      	ldr	r1, [r7, #0]
 800b4e8:	6878      	ldr	r0, [r7, #4]
 800b4ea:	f000 fcf2 	bl	800bed2 <USBD_CtlError>
          break;
 800b4ee:	e000      	b.n	800b4f2 <USBD_StdItfReq+0xc2>
          break;
 800b4f0:	bf00      	nop
      }
      break;
 800b4f2:	e004      	b.n	800b4fe <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800b4f4:	6839      	ldr	r1, [r7, #0]
 800b4f6:	6878      	ldr	r0, [r7, #4]
 800b4f8:	f000 fceb 	bl	800bed2 <USBD_CtlError>
      break;
 800b4fc:	bf00      	nop
  }

  return ret;
 800b4fe:	7bfb      	ldrb	r3, [r7, #15]
}
 800b500:	4618      	mov	r0, r3
 800b502:	3710      	adds	r7, #16
 800b504:	46bd      	mov	sp, r7
 800b506:	bd80      	pop	{r7, pc}

0800b508 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b508:	b580      	push	{r7, lr}
 800b50a:	b084      	sub	sp, #16
 800b50c:	af00      	add	r7, sp, #0
 800b50e:	6078      	str	r0, [r7, #4]
 800b510:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800b512:	2300      	movs	r3, #0
 800b514:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800b516:	683b      	ldr	r3, [r7, #0]
 800b518:	889b      	ldrh	r3, [r3, #4]
 800b51a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b51c:	683b      	ldr	r3, [r7, #0]
 800b51e:	781b      	ldrb	r3, [r3, #0]
 800b520:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800b524:	2b40      	cmp	r3, #64	@ 0x40
 800b526:	d007      	beq.n	800b538 <USBD_StdEPReq+0x30>
 800b528:	2b40      	cmp	r3, #64	@ 0x40
 800b52a:	f200 817f 	bhi.w	800b82c <USBD_StdEPReq+0x324>
 800b52e:	2b00      	cmp	r3, #0
 800b530:	d02a      	beq.n	800b588 <USBD_StdEPReq+0x80>
 800b532:	2b20      	cmp	r3, #32
 800b534:	f040 817a 	bne.w	800b82c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800b538:	7bbb      	ldrb	r3, [r7, #14]
 800b53a:	4619      	mov	r1, r3
 800b53c:	6878      	ldr	r0, [r7, #4]
 800b53e:	f7ff fe85 	bl	800b24c <USBD_CoreFindEP>
 800b542:	4603      	mov	r3, r0
 800b544:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b546:	7b7b      	ldrb	r3, [r7, #13]
 800b548:	2bff      	cmp	r3, #255	@ 0xff
 800b54a:	f000 8174 	beq.w	800b836 <USBD_StdEPReq+0x32e>
 800b54e:	7b7b      	ldrb	r3, [r7, #13]
 800b550:	2b00      	cmp	r3, #0
 800b552:	f040 8170 	bne.w	800b836 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800b556:	7b7a      	ldrb	r2, [r7, #13]
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800b55e:	7b7a      	ldrb	r2, [r7, #13]
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	32ae      	adds	r2, #174	@ 0xae
 800b564:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b568:	689b      	ldr	r3, [r3, #8]
 800b56a:	2b00      	cmp	r3, #0
 800b56c:	f000 8163 	beq.w	800b836 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800b570:	7b7a      	ldrb	r2, [r7, #13]
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	32ae      	adds	r2, #174	@ 0xae
 800b576:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b57a:	689b      	ldr	r3, [r3, #8]
 800b57c:	6839      	ldr	r1, [r7, #0]
 800b57e:	6878      	ldr	r0, [r7, #4]
 800b580:	4798      	blx	r3
 800b582:	4603      	mov	r3, r0
 800b584:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800b586:	e156      	b.n	800b836 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b588:	683b      	ldr	r3, [r7, #0]
 800b58a:	785b      	ldrb	r3, [r3, #1]
 800b58c:	2b03      	cmp	r3, #3
 800b58e:	d008      	beq.n	800b5a2 <USBD_StdEPReq+0x9a>
 800b590:	2b03      	cmp	r3, #3
 800b592:	f300 8145 	bgt.w	800b820 <USBD_StdEPReq+0x318>
 800b596:	2b00      	cmp	r3, #0
 800b598:	f000 809b 	beq.w	800b6d2 <USBD_StdEPReq+0x1ca>
 800b59c:	2b01      	cmp	r3, #1
 800b59e:	d03c      	beq.n	800b61a <USBD_StdEPReq+0x112>
 800b5a0:	e13e      	b.n	800b820 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b5a8:	b2db      	uxtb	r3, r3
 800b5aa:	2b02      	cmp	r3, #2
 800b5ac:	d002      	beq.n	800b5b4 <USBD_StdEPReq+0xac>
 800b5ae:	2b03      	cmp	r3, #3
 800b5b0:	d016      	beq.n	800b5e0 <USBD_StdEPReq+0xd8>
 800b5b2:	e02c      	b.n	800b60e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b5b4:	7bbb      	ldrb	r3, [r7, #14]
 800b5b6:	2b00      	cmp	r3, #0
 800b5b8:	d00d      	beq.n	800b5d6 <USBD_StdEPReq+0xce>
 800b5ba:	7bbb      	ldrb	r3, [r7, #14]
 800b5bc:	2b80      	cmp	r3, #128	@ 0x80
 800b5be:	d00a      	beq.n	800b5d6 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800b5c0:	7bbb      	ldrb	r3, [r7, #14]
 800b5c2:	4619      	mov	r1, r3
 800b5c4:	6878      	ldr	r0, [r7, #4]
 800b5c6:	f001 faad 	bl	800cb24 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800b5ca:	2180      	movs	r1, #128	@ 0x80
 800b5cc:	6878      	ldr	r0, [r7, #4]
 800b5ce:	f001 faa9 	bl	800cb24 <USBD_LL_StallEP>
 800b5d2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b5d4:	e020      	b.n	800b618 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800b5d6:	6839      	ldr	r1, [r7, #0]
 800b5d8:	6878      	ldr	r0, [r7, #4]
 800b5da:	f000 fc7a 	bl	800bed2 <USBD_CtlError>
              break;
 800b5de:	e01b      	b.n	800b618 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b5e0:	683b      	ldr	r3, [r7, #0]
 800b5e2:	885b      	ldrh	r3, [r3, #2]
 800b5e4:	2b00      	cmp	r3, #0
 800b5e6:	d10e      	bne.n	800b606 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800b5e8:	7bbb      	ldrb	r3, [r7, #14]
 800b5ea:	2b00      	cmp	r3, #0
 800b5ec:	d00b      	beq.n	800b606 <USBD_StdEPReq+0xfe>
 800b5ee:	7bbb      	ldrb	r3, [r7, #14]
 800b5f0:	2b80      	cmp	r3, #128	@ 0x80
 800b5f2:	d008      	beq.n	800b606 <USBD_StdEPReq+0xfe>
 800b5f4:	683b      	ldr	r3, [r7, #0]
 800b5f6:	88db      	ldrh	r3, [r3, #6]
 800b5f8:	2b00      	cmp	r3, #0
 800b5fa:	d104      	bne.n	800b606 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800b5fc:	7bbb      	ldrb	r3, [r7, #14]
 800b5fe:	4619      	mov	r1, r3
 800b600:	6878      	ldr	r0, [r7, #4]
 800b602:	f001 fa8f 	bl	800cb24 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800b606:	6878      	ldr	r0, [r7, #4]
 800b608:	f000 ff47 	bl	800c49a <USBD_CtlSendStatus>

              break;
 800b60c:	e004      	b.n	800b618 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800b60e:	6839      	ldr	r1, [r7, #0]
 800b610:	6878      	ldr	r0, [r7, #4]
 800b612:	f000 fc5e 	bl	800bed2 <USBD_CtlError>
              break;
 800b616:	bf00      	nop
          }
          break;
 800b618:	e107      	b.n	800b82a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b620:	b2db      	uxtb	r3, r3
 800b622:	2b02      	cmp	r3, #2
 800b624:	d002      	beq.n	800b62c <USBD_StdEPReq+0x124>
 800b626:	2b03      	cmp	r3, #3
 800b628:	d016      	beq.n	800b658 <USBD_StdEPReq+0x150>
 800b62a:	e04b      	b.n	800b6c4 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b62c:	7bbb      	ldrb	r3, [r7, #14]
 800b62e:	2b00      	cmp	r3, #0
 800b630:	d00d      	beq.n	800b64e <USBD_StdEPReq+0x146>
 800b632:	7bbb      	ldrb	r3, [r7, #14]
 800b634:	2b80      	cmp	r3, #128	@ 0x80
 800b636:	d00a      	beq.n	800b64e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800b638:	7bbb      	ldrb	r3, [r7, #14]
 800b63a:	4619      	mov	r1, r3
 800b63c:	6878      	ldr	r0, [r7, #4]
 800b63e:	f001 fa71 	bl	800cb24 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800b642:	2180      	movs	r1, #128	@ 0x80
 800b644:	6878      	ldr	r0, [r7, #4]
 800b646:	f001 fa6d 	bl	800cb24 <USBD_LL_StallEP>
 800b64a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b64c:	e040      	b.n	800b6d0 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800b64e:	6839      	ldr	r1, [r7, #0]
 800b650:	6878      	ldr	r0, [r7, #4]
 800b652:	f000 fc3e 	bl	800bed2 <USBD_CtlError>
              break;
 800b656:	e03b      	b.n	800b6d0 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b658:	683b      	ldr	r3, [r7, #0]
 800b65a:	885b      	ldrh	r3, [r3, #2]
 800b65c:	2b00      	cmp	r3, #0
 800b65e:	d136      	bne.n	800b6ce <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800b660:	7bbb      	ldrb	r3, [r7, #14]
 800b662:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b666:	2b00      	cmp	r3, #0
 800b668:	d004      	beq.n	800b674 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800b66a:	7bbb      	ldrb	r3, [r7, #14]
 800b66c:	4619      	mov	r1, r3
 800b66e:	6878      	ldr	r0, [r7, #4]
 800b670:	f001 fa77 	bl	800cb62 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800b674:	6878      	ldr	r0, [r7, #4]
 800b676:	f000 ff10 	bl	800c49a <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800b67a:	7bbb      	ldrb	r3, [r7, #14]
 800b67c:	4619      	mov	r1, r3
 800b67e:	6878      	ldr	r0, [r7, #4]
 800b680:	f7ff fde4 	bl	800b24c <USBD_CoreFindEP>
 800b684:	4603      	mov	r3, r0
 800b686:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b688:	7b7b      	ldrb	r3, [r7, #13]
 800b68a:	2bff      	cmp	r3, #255	@ 0xff
 800b68c:	d01f      	beq.n	800b6ce <USBD_StdEPReq+0x1c6>
 800b68e:	7b7b      	ldrb	r3, [r7, #13]
 800b690:	2b00      	cmp	r3, #0
 800b692:	d11c      	bne.n	800b6ce <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800b694:	7b7a      	ldrb	r2, [r7, #13]
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800b69c:	7b7a      	ldrb	r2, [r7, #13]
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	32ae      	adds	r2, #174	@ 0xae
 800b6a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b6a6:	689b      	ldr	r3, [r3, #8]
 800b6a8:	2b00      	cmp	r3, #0
 800b6aa:	d010      	beq.n	800b6ce <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800b6ac:	7b7a      	ldrb	r2, [r7, #13]
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	32ae      	adds	r2, #174	@ 0xae
 800b6b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b6b6:	689b      	ldr	r3, [r3, #8]
 800b6b8:	6839      	ldr	r1, [r7, #0]
 800b6ba:	6878      	ldr	r0, [r7, #4]
 800b6bc:	4798      	blx	r3
 800b6be:	4603      	mov	r3, r0
 800b6c0:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800b6c2:	e004      	b.n	800b6ce <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800b6c4:	6839      	ldr	r1, [r7, #0]
 800b6c6:	6878      	ldr	r0, [r7, #4]
 800b6c8:	f000 fc03 	bl	800bed2 <USBD_CtlError>
              break;
 800b6cc:	e000      	b.n	800b6d0 <USBD_StdEPReq+0x1c8>
              break;
 800b6ce:	bf00      	nop
          }
          break;
 800b6d0:	e0ab      	b.n	800b82a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b6d8:	b2db      	uxtb	r3, r3
 800b6da:	2b02      	cmp	r3, #2
 800b6dc:	d002      	beq.n	800b6e4 <USBD_StdEPReq+0x1dc>
 800b6de:	2b03      	cmp	r3, #3
 800b6e0:	d032      	beq.n	800b748 <USBD_StdEPReq+0x240>
 800b6e2:	e097      	b.n	800b814 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b6e4:	7bbb      	ldrb	r3, [r7, #14]
 800b6e6:	2b00      	cmp	r3, #0
 800b6e8:	d007      	beq.n	800b6fa <USBD_StdEPReq+0x1f2>
 800b6ea:	7bbb      	ldrb	r3, [r7, #14]
 800b6ec:	2b80      	cmp	r3, #128	@ 0x80
 800b6ee:	d004      	beq.n	800b6fa <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800b6f0:	6839      	ldr	r1, [r7, #0]
 800b6f2:	6878      	ldr	r0, [r7, #4]
 800b6f4:	f000 fbed 	bl	800bed2 <USBD_CtlError>
                break;
 800b6f8:	e091      	b.n	800b81e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b6fa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b6fe:	2b00      	cmp	r3, #0
 800b700:	da0b      	bge.n	800b71a <USBD_StdEPReq+0x212>
 800b702:	7bbb      	ldrb	r3, [r7, #14]
 800b704:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b708:	4613      	mov	r3, r2
 800b70a:	009b      	lsls	r3, r3, #2
 800b70c:	4413      	add	r3, r2
 800b70e:	009b      	lsls	r3, r3, #2
 800b710:	3310      	adds	r3, #16
 800b712:	687a      	ldr	r2, [r7, #4]
 800b714:	4413      	add	r3, r2
 800b716:	3304      	adds	r3, #4
 800b718:	e00b      	b.n	800b732 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b71a:	7bbb      	ldrb	r3, [r7, #14]
 800b71c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b720:	4613      	mov	r3, r2
 800b722:	009b      	lsls	r3, r3, #2
 800b724:	4413      	add	r3, r2
 800b726:	009b      	lsls	r3, r3, #2
 800b728:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800b72c:	687a      	ldr	r2, [r7, #4]
 800b72e:	4413      	add	r3, r2
 800b730:	3304      	adds	r3, #4
 800b732:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800b734:	68bb      	ldr	r3, [r7, #8]
 800b736:	2200      	movs	r2, #0
 800b738:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b73a:	68bb      	ldr	r3, [r7, #8]
 800b73c:	2202      	movs	r2, #2
 800b73e:	4619      	mov	r1, r3
 800b740:	6878      	ldr	r0, [r7, #4]
 800b742:	f000 fe6d 	bl	800c420 <USBD_CtlSendData>
              break;
 800b746:	e06a      	b.n	800b81e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800b748:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b74c:	2b00      	cmp	r3, #0
 800b74e:	da11      	bge.n	800b774 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800b750:	7bbb      	ldrb	r3, [r7, #14]
 800b752:	f003 020f 	and.w	r2, r3, #15
 800b756:	6879      	ldr	r1, [r7, #4]
 800b758:	4613      	mov	r3, r2
 800b75a:	009b      	lsls	r3, r3, #2
 800b75c:	4413      	add	r3, r2
 800b75e:	009b      	lsls	r3, r3, #2
 800b760:	440b      	add	r3, r1
 800b762:	3324      	adds	r3, #36	@ 0x24
 800b764:	881b      	ldrh	r3, [r3, #0]
 800b766:	2b00      	cmp	r3, #0
 800b768:	d117      	bne.n	800b79a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800b76a:	6839      	ldr	r1, [r7, #0]
 800b76c:	6878      	ldr	r0, [r7, #4]
 800b76e:	f000 fbb0 	bl	800bed2 <USBD_CtlError>
                  break;
 800b772:	e054      	b.n	800b81e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800b774:	7bbb      	ldrb	r3, [r7, #14]
 800b776:	f003 020f 	and.w	r2, r3, #15
 800b77a:	6879      	ldr	r1, [r7, #4]
 800b77c:	4613      	mov	r3, r2
 800b77e:	009b      	lsls	r3, r3, #2
 800b780:	4413      	add	r3, r2
 800b782:	009b      	lsls	r3, r3, #2
 800b784:	440b      	add	r3, r1
 800b786:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800b78a:	881b      	ldrh	r3, [r3, #0]
 800b78c:	2b00      	cmp	r3, #0
 800b78e:	d104      	bne.n	800b79a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800b790:	6839      	ldr	r1, [r7, #0]
 800b792:	6878      	ldr	r0, [r7, #4]
 800b794:	f000 fb9d 	bl	800bed2 <USBD_CtlError>
                  break;
 800b798:	e041      	b.n	800b81e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b79a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b79e:	2b00      	cmp	r3, #0
 800b7a0:	da0b      	bge.n	800b7ba <USBD_StdEPReq+0x2b2>
 800b7a2:	7bbb      	ldrb	r3, [r7, #14]
 800b7a4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b7a8:	4613      	mov	r3, r2
 800b7aa:	009b      	lsls	r3, r3, #2
 800b7ac:	4413      	add	r3, r2
 800b7ae:	009b      	lsls	r3, r3, #2
 800b7b0:	3310      	adds	r3, #16
 800b7b2:	687a      	ldr	r2, [r7, #4]
 800b7b4:	4413      	add	r3, r2
 800b7b6:	3304      	adds	r3, #4
 800b7b8:	e00b      	b.n	800b7d2 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b7ba:	7bbb      	ldrb	r3, [r7, #14]
 800b7bc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b7c0:	4613      	mov	r3, r2
 800b7c2:	009b      	lsls	r3, r3, #2
 800b7c4:	4413      	add	r3, r2
 800b7c6:	009b      	lsls	r3, r3, #2
 800b7c8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800b7cc:	687a      	ldr	r2, [r7, #4]
 800b7ce:	4413      	add	r3, r2
 800b7d0:	3304      	adds	r3, #4
 800b7d2:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800b7d4:	7bbb      	ldrb	r3, [r7, #14]
 800b7d6:	2b00      	cmp	r3, #0
 800b7d8:	d002      	beq.n	800b7e0 <USBD_StdEPReq+0x2d8>
 800b7da:	7bbb      	ldrb	r3, [r7, #14]
 800b7dc:	2b80      	cmp	r3, #128	@ 0x80
 800b7de:	d103      	bne.n	800b7e8 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800b7e0:	68bb      	ldr	r3, [r7, #8]
 800b7e2:	2200      	movs	r2, #0
 800b7e4:	601a      	str	r2, [r3, #0]
 800b7e6:	e00e      	b.n	800b806 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800b7e8:	7bbb      	ldrb	r3, [r7, #14]
 800b7ea:	4619      	mov	r1, r3
 800b7ec:	6878      	ldr	r0, [r7, #4]
 800b7ee:	f001 f9d7 	bl	800cba0 <USBD_LL_IsStallEP>
 800b7f2:	4603      	mov	r3, r0
 800b7f4:	2b00      	cmp	r3, #0
 800b7f6:	d003      	beq.n	800b800 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800b7f8:	68bb      	ldr	r3, [r7, #8]
 800b7fa:	2201      	movs	r2, #1
 800b7fc:	601a      	str	r2, [r3, #0]
 800b7fe:	e002      	b.n	800b806 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800b800:	68bb      	ldr	r3, [r7, #8]
 800b802:	2200      	movs	r2, #0
 800b804:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b806:	68bb      	ldr	r3, [r7, #8]
 800b808:	2202      	movs	r2, #2
 800b80a:	4619      	mov	r1, r3
 800b80c:	6878      	ldr	r0, [r7, #4]
 800b80e:	f000 fe07 	bl	800c420 <USBD_CtlSendData>
              break;
 800b812:	e004      	b.n	800b81e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800b814:	6839      	ldr	r1, [r7, #0]
 800b816:	6878      	ldr	r0, [r7, #4]
 800b818:	f000 fb5b 	bl	800bed2 <USBD_CtlError>
              break;
 800b81c:	bf00      	nop
          }
          break;
 800b81e:	e004      	b.n	800b82a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800b820:	6839      	ldr	r1, [r7, #0]
 800b822:	6878      	ldr	r0, [r7, #4]
 800b824:	f000 fb55 	bl	800bed2 <USBD_CtlError>
          break;
 800b828:	bf00      	nop
      }
      break;
 800b82a:	e005      	b.n	800b838 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800b82c:	6839      	ldr	r1, [r7, #0]
 800b82e:	6878      	ldr	r0, [r7, #4]
 800b830:	f000 fb4f 	bl	800bed2 <USBD_CtlError>
      break;
 800b834:	e000      	b.n	800b838 <USBD_StdEPReq+0x330>
      break;
 800b836:	bf00      	nop
  }

  return ret;
 800b838:	7bfb      	ldrb	r3, [r7, #15]
}
 800b83a:	4618      	mov	r0, r3
 800b83c:	3710      	adds	r7, #16
 800b83e:	46bd      	mov	sp, r7
 800b840:	bd80      	pop	{r7, pc}
	...

0800b844 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b844:	b580      	push	{r7, lr}
 800b846:	b084      	sub	sp, #16
 800b848:	af00      	add	r7, sp, #0
 800b84a:	6078      	str	r0, [r7, #4]
 800b84c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b84e:	2300      	movs	r3, #0
 800b850:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800b852:	2300      	movs	r3, #0
 800b854:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800b856:	2300      	movs	r3, #0
 800b858:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800b85a:	683b      	ldr	r3, [r7, #0]
 800b85c:	885b      	ldrh	r3, [r3, #2]
 800b85e:	0a1b      	lsrs	r3, r3, #8
 800b860:	b29b      	uxth	r3, r3
 800b862:	3b01      	subs	r3, #1
 800b864:	2b06      	cmp	r3, #6
 800b866:	f200 8128 	bhi.w	800baba <USBD_GetDescriptor+0x276>
 800b86a:	a201      	add	r2, pc, #4	@ (adr r2, 800b870 <USBD_GetDescriptor+0x2c>)
 800b86c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b870:	0800b88d 	.word	0x0800b88d
 800b874:	0800b8a5 	.word	0x0800b8a5
 800b878:	0800b8e5 	.word	0x0800b8e5
 800b87c:	0800babb 	.word	0x0800babb
 800b880:	0800babb 	.word	0x0800babb
 800b884:	0800ba5b 	.word	0x0800ba5b
 800b888:	0800ba87 	.word	0x0800ba87
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b892:	681b      	ldr	r3, [r3, #0]
 800b894:	687a      	ldr	r2, [r7, #4]
 800b896:	7c12      	ldrb	r2, [r2, #16]
 800b898:	f107 0108 	add.w	r1, r7, #8
 800b89c:	4610      	mov	r0, r2
 800b89e:	4798      	blx	r3
 800b8a0:	60f8      	str	r0, [r7, #12]
      break;
 800b8a2:	e112      	b.n	800baca <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	7c1b      	ldrb	r3, [r3, #16]
 800b8a8:	2b00      	cmp	r3, #0
 800b8aa:	d10d      	bne.n	800b8c8 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b8b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b8b4:	f107 0208 	add.w	r2, r7, #8
 800b8b8:	4610      	mov	r0, r2
 800b8ba:	4798      	blx	r3
 800b8bc:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b8be:	68fb      	ldr	r3, [r7, #12]
 800b8c0:	3301      	adds	r3, #1
 800b8c2:	2202      	movs	r2, #2
 800b8c4:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800b8c6:	e100      	b.n	800baca <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b8ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b8d0:	f107 0208 	add.w	r2, r7, #8
 800b8d4:	4610      	mov	r0, r2
 800b8d6:	4798      	blx	r3
 800b8d8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b8da:	68fb      	ldr	r3, [r7, #12]
 800b8dc:	3301      	adds	r3, #1
 800b8de:	2202      	movs	r2, #2
 800b8e0:	701a      	strb	r2, [r3, #0]
      break;
 800b8e2:	e0f2      	b.n	800baca <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800b8e4:	683b      	ldr	r3, [r7, #0]
 800b8e6:	885b      	ldrh	r3, [r3, #2]
 800b8e8:	b2db      	uxtb	r3, r3
 800b8ea:	2b05      	cmp	r3, #5
 800b8ec:	f200 80ac 	bhi.w	800ba48 <USBD_GetDescriptor+0x204>
 800b8f0:	a201      	add	r2, pc, #4	@ (adr r2, 800b8f8 <USBD_GetDescriptor+0xb4>)
 800b8f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b8f6:	bf00      	nop
 800b8f8:	0800b911 	.word	0x0800b911
 800b8fc:	0800b945 	.word	0x0800b945
 800b900:	0800b979 	.word	0x0800b979
 800b904:	0800b9ad 	.word	0x0800b9ad
 800b908:	0800b9e1 	.word	0x0800b9e1
 800b90c:	0800ba15 	.word	0x0800ba15
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b916:	685b      	ldr	r3, [r3, #4]
 800b918:	2b00      	cmp	r3, #0
 800b91a:	d00b      	beq.n	800b934 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b922:	685b      	ldr	r3, [r3, #4]
 800b924:	687a      	ldr	r2, [r7, #4]
 800b926:	7c12      	ldrb	r2, [r2, #16]
 800b928:	f107 0108 	add.w	r1, r7, #8
 800b92c:	4610      	mov	r0, r2
 800b92e:	4798      	blx	r3
 800b930:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b932:	e091      	b.n	800ba58 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b934:	6839      	ldr	r1, [r7, #0]
 800b936:	6878      	ldr	r0, [r7, #4]
 800b938:	f000 facb 	bl	800bed2 <USBD_CtlError>
            err++;
 800b93c:	7afb      	ldrb	r3, [r7, #11]
 800b93e:	3301      	adds	r3, #1
 800b940:	72fb      	strb	r3, [r7, #11]
          break;
 800b942:	e089      	b.n	800ba58 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b94a:	689b      	ldr	r3, [r3, #8]
 800b94c:	2b00      	cmp	r3, #0
 800b94e:	d00b      	beq.n	800b968 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b956:	689b      	ldr	r3, [r3, #8]
 800b958:	687a      	ldr	r2, [r7, #4]
 800b95a:	7c12      	ldrb	r2, [r2, #16]
 800b95c:	f107 0108 	add.w	r1, r7, #8
 800b960:	4610      	mov	r0, r2
 800b962:	4798      	blx	r3
 800b964:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b966:	e077      	b.n	800ba58 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b968:	6839      	ldr	r1, [r7, #0]
 800b96a:	6878      	ldr	r0, [r7, #4]
 800b96c:	f000 fab1 	bl	800bed2 <USBD_CtlError>
            err++;
 800b970:	7afb      	ldrb	r3, [r7, #11]
 800b972:	3301      	adds	r3, #1
 800b974:	72fb      	strb	r3, [r7, #11]
          break;
 800b976:	e06f      	b.n	800ba58 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b97e:	68db      	ldr	r3, [r3, #12]
 800b980:	2b00      	cmp	r3, #0
 800b982:	d00b      	beq.n	800b99c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b98a:	68db      	ldr	r3, [r3, #12]
 800b98c:	687a      	ldr	r2, [r7, #4]
 800b98e:	7c12      	ldrb	r2, [r2, #16]
 800b990:	f107 0108 	add.w	r1, r7, #8
 800b994:	4610      	mov	r0, r2
 800b996:	4798      	blx	r3
 800b998:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b99a:	e05d      	b.n	800ba58 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b99c:	6839      	ldr	r1, [r7, #0]
 800b99e:	6878      	ldr	r0, [r7, #4]
 800b9a0:	f000 fa97 	bl	800bed2 <USBD_CtlError>
            err++;
 800b9a4:	7afb      	ldrb	r3, [r7, #11]
 800b9a6:	3301      	adds	r3, #1
 800b9a8:	72fb      	strb	r3, [r7, #11]
          break;
 800b9aa:	e055      	b.n	800ba58 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b9b2:	691b      	ldr	r3, [r3, #16]
 800b9b4:	2b00      	cmp	r3, #0
 800b9b6:	d00b      	beq.n	800b9d0 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b9be:	691b      	ldr	r3, [r3, #16]
 800b9c0:	687a      	ldr	r2, [r7, #4]
 800b9c2:	7c12      	ldrb	r2, [r2, #16]
 800b9c4:	f107 0108 	add.w	r1, r7, #8
 800b9c8:	4610      	mov	r0, r2
 800b9ca:	4798      	blx	r3
 800b9cc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b9ce:	e043      	b.n	800ba58 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b9d0:	6839      	ldr	r1, [r7, #0]
 800b9d2:	6878      	ldr	r0, [r7, #4]
 800b9d4:	f000 fa7d 	bl	800bed2 <USBD_CtlError>
            err++;
 800b9d8:	7afb      	ldrb	r3, [r7, #11]
 800b9da:	3301      	adds	r3, #1
 800b9dc:	72fb      	strb	r3, [r7, #11]
          break;
 800b9de:	e03b      	b.n	800ba58 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b9e6:	695b      	ldr	r3, [r3, #20]
 800b9e8:	2b00      	cmp	r3, #0
 800b9ea:	d00b      	beq.n	800ba04 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b9f2:	695b      	ldr	r3, [r3, #20]
 800b9f4:	687a      	ldr	r2, [r7, #4]
 800b9f6:	7c12      	ldrb	r2, [r2, #16]
 800b9f8:	f107 0108 	add.w	r1, r7, #8
 800b9fc:	4610      	mov	r0, r2
 800b9fe:	4798      	blx	r3
 800ba00:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ba02:	e029      	b.n	800ba58 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ba04:	6839      	ldr	r1, [r7, #0]
 800ba06:	6878      	ldr	r0, [r7, #4]
 800ba08:	f000 fa63 	bl	800bed2 <USBD_CtlError>
            err++;
 800ba0c:	7afb      	ldrb	r3, [r7, #11]
 800ba0e:	3301      	adds	r3, #1
 800ba10:	72fb      	strb	r3, [r7, #11]
          break;
 800ba12:	e021      	b.n	800ba58 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ba1a:	699b      	ldr	r3, [r3, #24]
 800ba1c:	2b00      	cmp	r3, #0
 800ba1e:	d00b      	beq.n	800ba38 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ba26:	699b      	ldr	r3, [r3, #24]
 800ba28:	687a      	ldr	r2, [r7, #4]
 800ba2a:	7c12      	ldrb	r2, [r2, #16]
 800ba2c:	f107 0108 	add.w	r1, r7, #8
 800ba30:	4610      	mov	r0, r2
 800ba32:	4798      	blx	r3
 800ba34:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ba36:	e00f      	b.n	800ba58 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ba38:	6839      	ldr	r1, [r7, #0]
 800ba3a:	6878      	ldr	r0, [r7, #4]
 800ba3c:	f000 fa49 	bl	800bed2 <USBD_CtlError>
            err++;
 800ba40:	7afb      	ldrb	r3, [r7, #11]
 800ba42:	3301      	adds	r3, #1
 800ba44:	72fb      	strb	r3, [r7, #11]
          break;
 800ba46:	e007      	b.n	800ba58 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800ba48:	6839      	ldr	r1, [r7, #0]
 800ba4a:	6878      	ldr	r0, [r7, #4]
 800ba4c:	f000 fa41 	bl	800bed2 <USBD_CtlError>
          err++;
 800ba50:	7afb      	ldrb	r3, [r7, #11]
 800ba52:	3301      	adds	r3, #1
 800ba54:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800ba56:	bf00      	nop
      }
      break;
 800ba58:	e037      	b.n	800baca <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	7c1b      	ldrb	r3, [r3, #16]
 800ba5e:	2b00      	cmp	r3, #0
 800ba60:	d109      	bne.n	800ba76 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ba68:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ba6a:	f107 0208 	add.w	r2, r7, #8
 800ba6e:	4610      	mov	r0, r2
 800ba70:	4798      	blx	r3
 800ba72:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ba74:	e029      	b.n	800baca <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800ba76:	6839      	ldr	r1, [r7, #0]
 800ba78:	6878      	ldr	r0, [r7, #4]
 800ba7a:	f000 fa2a 	bl	800bed2 <USBD_CtlError>
        err++;
 800ba7e:	7afb      	ldrb	r3, [r7, #11]
 800ba80:	3301      	adds	r3, #1
 800ba82:	72fb      	strb	r3, [r7, #11]
      break;
 800ba84:	e021      	b.n	800baca <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	7c1b      	ldrb	r3, [r3, #16]
 800ba8a:	2b00      	cmp	r3, #0
 800ba8c:	d10d      	bne.n	800baaa <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ba94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ba96:	f107 0208 	add.w	r2, r7, #8
 800ba9a:	4610      	mov	r0, r2
 800ba9c:	4798      	blx	r3
 800ba9e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800baa0:	68fb      	ldr	r3, [r7, #12]
 800baa2:	3301      	adds	r3, #1
 800baa4:	2207      	movs	r2, #7
 800baa6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800baa8:	e00f      	b.n	800baca <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800baaa:	6839      	ldr	r1, [r7, #0]
 800baac:	6878      	ldr	r0, [r7, #4]
 800baae:	f000 fa10 	bl	800bed2 <USBD_CtlError>
        err++;
 800bab2:	7afb      	ldrb	r3, [r7, #11]
 800bab4:	3301      	adds	r3, #1
 800bab6:	72fb      	strb	r3, [r7, #11]
      break;
 800bab8:	e007      	b.n	800baca <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800baba:	6839      	ldr	r1, [r7, #0]
 800babc:	6878      	ldr	r0, [r7, #4]
 800babe:	f000 fa08 	bl	800bed2 <USBD_CtlError>
      err++;
 800bac2:	7afb      	ldrb	r3, [r7, #11]
 800bac4:	3301      	adds	r3, #1
 800bac6:	72fb      	strb	r3, [r7, #11]
      break;
 800bac8:	bf00      	nop
  }

  if (err != 0U)
 800baca:	7afb      	ldrb	r3, [r7, #11]
 800bacc:	2b00      	cmp	r3, #0
 800bace:	d11e      	bne.n	800bb0e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800bad0:	683b      	ldr	r3, [r7, #0]
 800bad2:	88db      	ldrh	r3, [r3, #6]
 800bad4:	2b00      	cmp	r3, #0
 800bad6:	d016      	beq.n	800bb06 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800bad8:	893b      	ldrh	r3, [r7, #8]
 800bada:	2b00      	cmp	r3, #0
 800badc:	d00e      	beq.n	800bafc <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800bade:	683b      	ldr	r3, [r7, #0]
 800bae0:	88da      	ldrh	r2, [r3, #6]
 800bae2:	893b      	ldrh	r3, [r7, #8]
 800bae4:	4293      	cmp	r3, r2
 800bae6:	bf28      	it	cs
 800bae8:	4613      	movcs	r3, r2
 800baea:	b29b      	uxth	r3, r3
 800baec:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800baee:	893b      	ldrh	r3, [r7, #8]
 800baf0:	461a      	mov	r2, r3
 800baf2:	68f9      	ldr	r1, [r7, #12]
 800baf4:	6878      	ldr	r0, [r7, #4]
 800baf6:	f000 fc93 	bl	800c420 <USBD_CtlSendData>
 800bafa:	e009      	b.n	800bb10 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800bafc:	6839      	ldr	r1, [r7, #0]
 800bafe:	6878      	ldr	r0, [r7, #4]
 800bb00:	f000 f9e7 	bl	800bed2 <USBD_CtlError>
 800bb04:	e004      	b.n	800bb10 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800bb06:	6878      	ldr	r0, [r7, #4]
 800bb08:	f000 fcc7 	bl	800c49a <USBD_CtlSendStatus>
 800bb0c:	e000      	b.n	800bb10 <USBD_GetDescriptor+0x2cc>
    return;
 800bb0e:	bf00      	nop
  }
}
 800bb10:	3710      	adds	r7, #16
 800bb12:	46bd      	mov	sp, r7
 800bb14:	bd80      	pop	{r7, pc}
 800bb16:	bf00      	nop

0800bb18 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bb18:	b580      	push	{r7, lr}
 800bb1a:	b084      	sub	sp, #16
 800bb1c:	af00      	add	r7, sp, #0
 800bb1e:	6078      	str	r0, [r7, #4]
 800bb20:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800bb22:	683b      	ldr	r3, [r7, #0]
 800bb24:	889b      	ldrh	r3, [r3, #4]
 800bb26:	2b00      	cmp	r3, #0
 800bb28:	d131      	bne.n	800bb8e <USBD_SetAddress+0x76>
 800bb2a:	683b      	ldr	r3, [r7, #0]
 800bb2c:	88db      	ldrh	r3, [r3, #6]
 800bb2e:	2b00      	cmp	r3, #0
 800bb30:	d12d      	bne.n	800bb8e <USBD_SetAddress+0x76>
 800bb32:	683b      	ldr	r3, [r7, #0]
 800bb34:	885b      	ldrh	r3, [r3, #2]
 800bb36:	2b7f      	cmp	r3, #127	@ 0x7f
 800bb38:	d829      	bhi.n	800bb8e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800bb3a:	683b      	ldr	r3, [r7, #0]
 800bb3c:	885b      	ldrh	r3, [r3, #2]
 800bb3e:	b2db      	uxtb	r3, r3
 800bb40:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bb44:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bb4c:	b2db      	uxtb	r3, r3
 800bb4e:	2b03      	cmp	r3, #3
 800bb50:	d104      	bne.n	800bb5c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800bb52:	6839      	ldr	r1, [r7, #0]
 800bb54:	6878      	ldr	r0, [r7, #4]
 800bb56:	f000 f9bc 	bl	800bed2 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bb5a:	e01d      	b.n	800bb98 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	7bfa      	ldrb	r2, [r7, #15]
 800bb60:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800bb64:	7bfb      	ldrb	r3, [r7, #15]
 800bb66:	4619      	mov	r1, r3
 800bb68:	6878      	ldr	r0, [r7, #4]
 800bb6a:	f001 f845 	bl	800cbf8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800bb6e:	6878      	ldr	r0, [r7, #4]
 800bb70:	f000 fc93 	bl	800c49a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800bb74:	7bfb      	ldrb	r3, [r7, #15]
 800bb76:	2b00      	cmp	r3, #0
 800bb78:	d004      	beq.n	800bb84 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	2202      	movs	r2, #2
 800bb7e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bb82:	e009      	b.n	800bb98 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	2201      	movs	r2, #1
 800bb88:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bb8c:	e004      	b.n	800bb98 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800bb8e:	6839      	ldr	r1, [r7, #0]
 800bb90:	6878      	ldr	r0, [r7, #4]
 800bb92:	f000 f99e 	bl	800bed2 <USBD_CtlError>
  }
}
 800bb96:	bf00      	nop
 800bb98:	bf00      	nop
 800bb9a:	3710      	adds	r7, #16
 800bb9c:	46bd      	mov	sp, r7
 800bb9e:	bd80      	pop	{r7, pc}

0800bba0 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bba0:	b580      	push	{r7, lr}
 800bba2:	b084      	sub	sp, #16
 800bba4:	af00      	add	r7, sp, #0
 800bba6:	6078      	str	r0, [r7, #4]
 800bba8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800bbaa:	2300      	movs	r3, #0
 800bbac:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800bbae:	683b      	ldr	r3, [r7, #0]
 800bbb0:	885b      	ldrh	r3, [r3, #2]
 800bbb2:	b2da      	uxtb	r2, r3
 800bbb4:	4b4e      	ldr	r3, [pc, #312]	@ (800bcf0 <USBD_SetConfig+0x150>)
 800bbb6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800bbb8:	4b4d      	ldr	r3, [pc, #308]	@ (800bcf0 <USBD_SetConfig+0x150>)
 800bbba:	781b      	ldrb	r3, [r3, #0]
 800bbbc:	2b01      	cmp	r3, #1
 800bbbe:	d905      	bls.n	800bbcc <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800bbc0:	6839      	ldr	r1, [r7, #0]
 800bbc2:	6878      	ldr	r0, [r7, #4]
 800bbc4:	f000 f985 	bl	800bed2 <USBD_CtlError>
    return USBD_FAIL;
 800bbc8:	2303      	movs	r3, #3
 800bbca:	e08c      	b.n	800bce6 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bbd2:	b2db      	uxtb	r3, r3
 800bbd4:	2b02      	cmp	r3, #2
 800bbd6:	d002      	beq.n	800bbde <USBD_SetConfig+0x3e>
 800bbd8:	2b03      	cmp	r3, #3
 800bbda:	d029      	beq.n	800bc30 <USBD_SetConfig+0x90>
 800bbdc:	e075      	b.n	800bcca <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800bbde:	4b44      	ldr	r3, [pc, #272]	@ (800bcf0 <USBD_SetConfig+0x150>)
 800bbe0:	781b      	ldrb	r3, [r3, #0]
 800bbe2:	2b00      	cmp	r3, #0
 800bbe4:	d020      	beq.n	800bc28 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800bbe6:	4b42      	ldr	r3, [pc, #264]	@ (800bcf0 <USBD_SetConfig+0x150>)
 800bbe8:	781b      	ldrb	r3, [r3, #0]
 800bbea:	461a      	mov	r2, r3
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800bbf0:	4b3f      	ldr	r3, [pc, #252]	@ (800bcf0 <USBD_SetConfig+0x150>)
 800bbf2:	781b      	ldrb	r3, [r3, #0]
 800bbf4:	4619      	mov	r1, r3
 800bbf6:	6878      	ldr	r0, [r7, #4]
 800bbf8:	f7fe ffe3 	bl	800abc2 <USBD_SetClassConfig>
 800bbfc:	4603      	mov	r3, r0
 800bbfe:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800bc00:	7bfb      	ldrb	r3, [r7, #15]
 800bc02:	2b00      	cmp	r3, #0
 800bc04:	d008      	beq.n	800bc18 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800bc06:	6839      	ldr	r1, [r7, #0]
 800bc08:	6878      	ldr	r0, [r7, #4]
 800bc0a:	f000 f962 	bl	800bed2 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	2202      	movs	r2, #2
 800bc12:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800bc16:	e065      	b.n	800bce4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800bc18:	6878      	ldr	r0, [r7, #4]
 800bc1a:	f000 fc3e 	bl	800c49a <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	2203      	movs	r2, #3
 800bc22:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800bc26:	e05d      	b.n	800bce4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800bc28:	6878      	ldr	r0, [r7, #4]
 800bc2a:	f000 fc36 	bl	800c49a <USBD_CtlSendStatus>
      break;
 800bc2e:	e059      	b.n	800bce4 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800bc30:	4b2f      	ldr	r3, [pc, #188]	@ (800bcf0 <USBD_SetConfig+0x150>)
 800bc32:	781b      	ldrb	r3, [r3, #0]
 800bc34:	2b00      	cmp	r3, #0
 800bc36:	d112      	bne.n	800bc5e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	2202      	movs	r2, #2
 800bc3c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800bc40:	4b2b      	ldr	r3, [pc, #172]	@ (800bcf0 <USBD_SetConfig+0x150>)
 800bc42:	781b      	ldrb	r3, [r3, #0]
 800bc44:	461a      	mov	r2, r3
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800bc4a:	4b29      	ldr	r3, [pc, #164]	@ (800bcf0 <USBD_SetConfig+0x150>)
 800bc4c:	781b      	ldrb	r3, [r3, #0]
 800bc4e:	4619      	mov	r1, r3
 800bc50:	6878      	ldr	r0, [r7, #4]
 800bc52:	f7fe ffd2 	bl	800abfa <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800bc56:	6878      	ldr	r0, [r7, #4]
 800bc58:	f000 fc1f 	bl	800c49a <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800bc5c:	e042      	b.n	800bce4 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800bc5e:	4b24      	ldr	r3, [pc, #144]	@ (800bcf0 <USBD_SetConfig+0x150>)
 800bc60:	781b      	ldrb	r3, [r3, #0]
 800bc62:	461a      	mov	r2, r3
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	685b      	ldr	r3, [r3, #4]
 800bc68:	429a      	cmp	r2, r3
 800bc6a:	d02a      	beq.n	800bcc2 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	685b      	ldr	r3, [r3, #4]
 800bc70:	b2db      	uxtb	r3, r3
 800bc72:	4619      	mov	r1, r3
 800bc74:	6878      	ldr	r0, [r7, #4]
 800bc76:	f7fe ffc0 	bl	800abfa <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800bc7a:	4b1d      	ldr	r3, [pc, #116]	@ (800bcf0 <USBD_SetConfig+0x150>)
 800bc7c:	781b      	ldrb	r3, [r3, #0]
 800bc7e:	461a      	mov	r2, r3
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800bc84:	4b1a      	ldr	r3, [pc, #104]	@ (800bcf0 <USBD_SetConfig+0x150>)
 800bc86:	781b      	ldrb	r3, [r3, #0]
 800bc88:	4619      	mov	r1, r3
 800bc8a:	6878      	ldr	r0, [r7, #4]
 800bc8c:	f7fe ff99 	bl	800abc2 <USBD_SetClassConfig>
 800bc90:	4603      	mov	r3, r0
 800bc92:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800bc94:	7bfb      	ldrb	r3, [r7, #15]
 800bc96:	2b00      	cmp	r3, #0
 800bc98:	d00f      	beq.n	800bcba <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800bc9a:	6839      	ldr	r1, [r7, #0]
 800bc9c:	6878      	ldr	r0, [r7, #4]
 800bc9e:	f000 f918 	bl	800bed2 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	685b      	ldr	r3, [r3, #4]
 800bca6:	b2db      	uxtb	r3, r3
 800bca8:	4619      	mov	r1, r3
 800bcaa:	6878      	ldr	r0, [r7, #4]
 800bcac:	f7fe ffa5 	bl	800abfa <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	2202      	movs	r2, #2
 800bcb4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800bcb8:	e014      	b.n	800bce4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800bcba:	6878      	ldr	r0, [r7, #4]
 800bcbc:	f000 fbed 	bl	800c49a <USBD_CtlSendStatus>
      break;
 800bcc0:	e010      	b.n	800bce4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800bcc2:	6878      	ldr	r0, [r7, #4]
 800bcc4:	f000 fbe9 	bl	800c49a <USBD_CtlSendStatus>
      break;
 800bcc8:	e00c      	b.n	800bce4 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800bcca:	6839      	ldr	r1, [r7, #0]
 800bccc:	6878      	ldr	r0, [r7, #4]
 800bcce:	f000 f900 	bl	800bed2 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800bcd2:	4b07      	ldr	r3, [pc, #28]	@ (800bcf0 <USBD_SetConfig+0x150>)
 800bcd4:	781b      	ldrb	r3, [r3, #0]
 800bcd6:	4619      	mov	r1, r3
 800bcd8:	6878      	ldr	r0, [r7, #4]
 800bcda:	f7fe ff8e 	bl	800abfa <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800bcde:	2303      	movs	r3, #3
 800bce0:	73fb      	strb	r3, [r7, #15]
      break;
 800bce2:	bf00      	nop
  }

  return ret;
 800bce4:	7bfb      	ldrb	r3, [r7, #15]
}
 800bce6:	4618      	mov	r0, r3
 800bce8:	3710      	adds	r7, #16
 800bcea:	46bd      	mov	sp, r7
 800bcec:	bd80      	pop	{r7, pc}
 800bcee:	bf00      	nop
 800bcf0:	200055f4 	.word	0x200055f4

0800bcf4 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bcf4:	b580      	push	{r7, lr}
 800bcf6:	b082      	sub	sp, #8
 800bcf8:	af00      	add	r7, sp, #0
 800bcfa:	6078      	str	r0, [r7, #4]
 800bcfc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800bcfe:	683b      	ldr	r3, [r7, #0]
 800bd00:	88db      	ldrh	r3, [r3, #6]
 800bd02:	2b01      	cmp	r3, #1
 800bd04:	d004      	beq.n	800bd10 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800bd06:	6839      	ldr	r1, [r7, #0]
 800bd08:	6878      	ldr	r0, [r7, #4]
 800bd0a:	f000 f8e2 	bl	800bed2 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800bd0e:	e023      	b.n	800bd58 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bd16:	b2db      	uxtb	r3, r3
 800bd18:	2b02      	cmp	r3, #2
 800bd1a:	dc02      	bgt.n	800bd22 <USBD_GetConfig+0x2e>
 800bd1c:	2b00      	cmp	r3, #0
 800bd1e:	dc03      	bgt.n	800bd28 <USBD_GetConfig+0x34>
 800bd20:	e015      	b.n	800bd4e <USBD_GetConfig+0x5a>
 800bd22:	2b03      	cmp	r3, #3
 800bd24:	d00b      	beq.n	800bd3e <USBD_GetConfig+0x4a>
 800bd26:	e012      	b.n	800bd4e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	2200      	movs	r2, #0
 800bd2c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	3308      	adds	r3, #8
 800bd32:	2201      	movs	r2, #1
 800bd34:	4619      	mov	r1, r3
 800bd36:	6878      	ldr	r0, [r7, #4]
 800bd38:	f000 fb72 	bl	800c420 <USBD_CtlSendData>
        break;
 800bd3c:	e00c      	b.n	800bd58 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	3304      	adds	r3, #4
 800bd42:	2201      	movs	r2, #1
 800bd44:	4619      	mov	r1, r3
 800bd46:	6878      	ldr	r0, [r7, #4]
 800bd48:	f000 fb6a 	bl	800c420 <USBD_CtlSendData>
        break;
 800bd4c:	e004      	b.n	800bd58 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800bd4e:	6839      	ldr	r1, [r7, #0]
 800bd50:	6878      	ldr	r0, [r7, #4]
 800bd52:	f000 f8be 	bl	800bed2 <USBD_CtlError>
        break;
 800bd56:	bf00      	nop
}
 800bd58:	bf00      	nop
 800bd5a:	3708      	adds	r7, #8
 800bd5c:	46bd      	mov	sp, r7
 800bd5e:	bd80      	pop	{r7, pc}

0800bd60 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bd60:	b580      	push	{r7, lr}
 800bd62:	b082      	sub	sp, #8
 800bd64:	af00      	add	r7, sp, #0
 800bd66:	6078      	str	r0, [r7, #4]
 800bd68:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bd70:	b2db      	uxtb	r3, r3
 800bd72:	3b01      	subs	r3, #1
 800bd74:	2b02      	cmp	r3, #2
 800bd76:	d81e      	bhi.n	800bdb6 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800bd78:	683b      	ldr	r3, [r7, #0]
 800bd7a:	88db      	ldrh	r3, [r3, #6]
 800bd7c:	2b02      	cmp	r3, #2
 800bd7e:	d004      	beq.n	800bd8a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800bd80:	6839      	ldr	r1, [r7, #0]
 800bd82:	6878      	ldr	r0, [r7, #4]
 800bd84:	f000 f8a5 	bl	800bed2 <USBD_CtlError>
        break;
 800bd88:	e01a      	b.n	800bdc0 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	2201      	movs	r2, #1
 800bd8e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800bd96:	2b00      	cmp	r3, #0
 800bd98:	d005      	beq.n	800bda6 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	68db      	ldr	r3, [r3, #12]
 800bd9e:	f043 0202 	orr.w	r2, r3, #2
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	330c      	adds	r3, #12
 800bdaa:	2202      	movs	r2, #2
 800bdac:	4619      	mov	r1, r3
 800bdae:	6878      	ldr	r0, [r7, #4]
 800bdb0:	f000 fb36 	bl	800c420 <USBD_CtlSendData>
      break;
 800bdb4:	e004      	b.n	800bdc0 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800bdb6:	6839      	ldr	r1, [r7, #0]
 800bdb8:	6878      	ldr	r0, [r7, #4]
 800bdba:	f000 f88a 	bl	800bed2 <USBD_CtlError>
      break;
 800bdbe:	bf00      	nop
  }
}
 800bdc0:	bf00      	nop
 800bdc2:	3708      	adds	r7, #8
 800bdc4:	46bd      	mov	sp, r7
 800bdc6:	bd80      	pop	{r7, pc}

0800bdc8 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bdc8:	b580      	push	{r7, lr}
 800bdca:	b082      	sub	sp, #8
 800bdcc:	af00      	add	r7, sp, #0
 800bdce:	6078      	str	r0, [r7, #4]
 800bdd0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800bdd2:	683b      	ldr	r3, [r7, #0]
 800bdd4:	885b      	ldrh	r3, [r3, #2]
 800bdd6:	2b01      	cmp	r3, #1
 800bdd8:	d107      	bne.n	800bdea <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	2201      	movs	r2, #1
 800bdde:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800bde2:	6878      	ldr	r0, [r7, #4]
 800bde4:	f000 fb59 	bl	800c49a <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800bde8:	e013      	b.n	800be12 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800bdea:	683b      	ldr	r3, [r7, #0]
 800bdec:	885b      	ldrh	r3, [r3, #2]
 800bdee:	2b02      	cmp	r3, #2
 800bdf0:	d10b      	bne.n	800be0a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800bdf2:	683b      	ldr	r3, [r7, #0]
 800bdf4:	889b      	ldrh	r3, [r3, #4]
 800bdf6:	0a1b      	lsrs	r3, r3, #8
 800bdf8:	b29b      	uxth	r3, r3
 800bdfa:	b2da      	uxtb	r2, r3
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800be02:	6878      	ldr	r0, [r7, #4]
 800be04:	f000 fb49 	bl	800c49a <USBD_CtlSendStatus>
}
 800be08:	e003      	b.n	800be12 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800be0a:	6839      	ldr	r1, [r7, #0]
 800be0c:	6878      	ldr	r0, [r7, #4]
 800be0e:	f000 f860 	bl	800bed2 <USBD_CtlError>
}
 800be12:	bf00      	nop
 800be14:	3708      	adds	r7, #8
 800be16:	46bd      	mov	sp, r7
 800be18:	bd80      	pop	{r7, pc}

0800be1a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800be1a:	b580      	push	{r7, lr}
 800be1c:	b082      	sub	sp, #8
 800be1e:	af00      	add	r7, sp, #0
 800be20:	6078      	str	r0, [r7, #4]
 800be22:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800be2a:	b2db      	uxtb	r3, r3
 800be2c:	3b01      	subs	r3, #1
 800be2e:	2b02      	cmp	r3, #2
 800be30:	d80b      	bhi.n	800be4a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800be32:	683b      	ldr	r3, [r7, #0]
 800be34:	885b      	ldrh	r3, [r3, #2]
 800be36:	2b01      	cmp	r3, #1
 800be38:	d10c      	bne.n	800be54 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	2200      	movs	r2, #0
 800be3e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800be42:	6878      	ldr	r0, [r7, #4]
 800be44:	f000 fb29 	bl	800c49a <USBD_CtlSendStatus>
      }
      break;
 800be48:	e004      	b.n	800be54 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800be4a:	6839      	ldr	r1, [r7, #0]
 800be4c:	6878      	ldr	r0, [r7, #4]
 800be4e:	f000 f840 	bl	800bed2 <USBD_CtlError>
      break;
 800be52:	e000      	b.n	800be56 <USBD_ClrFeature+0x3c>
      break;
 800be54:	bf00      	nop
  }
}
 800be56:	bf00      	nop
 800be58:	3708      	adds	r7, #8
 800be5a:	46bd      	mov	sp, r7
 800be5c:	bd80      	pop	{r7, pc}

0800be5e <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800be5e:	b580      	push	{r7, lr}
 800be60:	b084      	sub	sp, #16
 800be62:	af00      	add	r7, sp, #0
 800be64:	6078      	str	r0, [r7, #4]
 800be66:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800be68:	683b      	ldr	r3, [r7, #0]
 800be6a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800be6c:	68fb      	ldr	r3, [r7, #12]
 800be6e:	781a      	ldrb	r2, [r3, #0]
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800be74:	68fb      	ldr	r3, [r7, #12]
 800be76:	3301      	adds	r3, #1
 800be78:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800be7a:	68fb      	ldr	r3, [r7, #12]
 800be7c:	781a      	ldrb	r2, [r3, #0]
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800be82:	68fb      	ldr	r3, [r7, #12]
 800be84:	3301      	adds	r3, #1
 800be86:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800be88:	68f8      	ldr	r0, [r7, #12]
 800be8a:	f7ff fa40 	bl	800b30e <SWAPBYTE>
 800be8e:	4603      	mov	r3, r0
 800be90:	461a      	mov	r2, r3
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800be96:	68fb      	ldr	r3, [r7, #12]
 800be98:	3301      	adds	r3, #1
 800be9a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800be9c:	68fb      	ldr	r3, [r7, #12]
 800be9e:	3301      	adds	r3, #1
 800bea0:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800bea2:	68f8      	ldr	r0, [r7, #12]
 800bea4:	f7ff fa33 	bl	800b30e <SWAPBYTE>
 800bea8:	4603      	mov	r3, r0
 800beaa:	461a      	mov	r2, r3
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800beb0:	68fb      	ldr	r3, [r7, #12]
 800beb2:	3301      	adds	r3, #1
 800beb4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800beb6:	68fb      	ldr	r3, [r7, #12]
 800beb8:	3301      	adds	r3, #1
 800beba:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800bebc:	68f8      	ldr	r0, [r7, #12]
 800bebe:	f7ff fa26 	bl	800b30e <SWAPBYTE>
 800bec2:	4603      	mov	r3, r0
 800bec4:	461a      	mov	r2, r3
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	80da      	strh	r2, [r3, #6]
}
 800beca:	bf00      	nop
 800becc:	3710      	adds	r7, #16
 800bece:	46bd      	mov	sp, r7
 800bed0:	bd80      	pop	{r7, pc}

0800bed2 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bed2:	b580      	push	{r7, lr}
 800bed4:	b082      	sub	sp, #8
 800bed6:	af00      	add	r7, sp, #0
 800bed8:	6078      	str	r0, [r7, #4]
 800beda:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800bedc:	2180      	movs	r1, #128	@ 0x80
 800bede:	6878      	ldr	r0, [r7, #4]
 800bee0:	f000 fe20 	bl	800cb24 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800bee4:	2100      	movs	r1, #0
 800bee6:	6878      	ldr	r0, [r7, #4]
 800bee8:	f000 fe1c 	bl	800cb24 <USBD_LL_StallEP>
}
 800beec:	bf00      	nop
 800beee:	3708      	adds	r7, #8
 800bef0:	46bd      	mov	sp, r7
 800bef2:	bd80      	pop	{r7, pc}

0800bef4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800bef4:	b580      	push	{r7, lr}
 800bef6:	b086      	sub	sp, #24
 800bef8:	af00      	add	r7, sp, #0
 800befa:	60f8      	str	r0, [r7, #12]
 800befc:	60b9      	str	r1, [r7, #8]
 800befe:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800bf00:	2300      	movs	r3, #0
 800bf02:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800bf04:	68fb      	ldr	r3, [r7, #12]
 800bf06:	2b00      	cmp	r3, #0
 800bf08:	d042      	beq.n	800bf90 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800bf0a:	68fb      	ldr	r3, [r7, #12]
 800bf0c:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800bf0e:	6938      	ldr	r0, [r7, #16]
 800bf10:	f000 f842 	bl	800bf98 <USBD_GetLen>
 800bf14:	4603      	mov	r3, r0
 800bf16:	3301      	adds	r3, #1
 800bf18:	005b      	lsls	r3, r3, #1
 800bf1a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800bf1e:	d808      	bhi.n	800bf32 <USBD_GetString+0x3e>
 800bf20:	6938      	ldr	r0, [r7, #16]
 800bf22:	f000 f839 	bl	800bf98 <USBD_GetLen>
 800bf26:	4603      	mov	r3, r0
 800bf28:	3301      	adds	r3, #1
 800bf2a:	b29b      	uxth	r3, r3
 800bf2c:	005b      	lsls	r3, r3, #1
 800bf2e:	b29a      	uxth	r2, r3
 800bf30:	e001      	b.n	800bf36 <USBD_GetString+0x42>
 800bf32:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800bf3a:	7dfb      	ldrb	r3, [r7, #23]
 800bf3c:	68ba      	ldr	r2, [r7, #8]
 800bf3e:	4413      	add	r3, r2
 800bf40:	687a      	ldr	r2, [r7, #4]
 800bf42:	7812      	ldrb	r2, [r2, #0]
 800bf44:	701a      	strb	r2, [r3, #0]
  idx++;
 800bf46:	7dfb      	ldrb	r3, [r7, #23]
 800bf48:	3301      	adds	r3, #1
 800bf4a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800bf4c:	7dfb      	ldrb	r3, [r7, #23]
 800bf4e:	68ba      	ldr	r2, [r7, #8]
 800bf50:	4413      	add	r3, r2
 800bf52:	2203      	movs	r2, #3
 800bf54:	701a      	strb	r2, [r3, #0]
  idx++;
 800bf56:	7dfb      	ldrb	r3, [r7, #23]
 800bf58:	3301      	adds	r3, #1
 800bf5a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800bf5c:	e013      	b.n	800bf86 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800bf5e:	7dfb      	ldrb	r3, [r7, #23]
 800bf60:	68ba      	ldr	r2, [r7, #8]
 800bf62:	4413      	add	r3, r2
 800bf64:	693a      	ldr	r2, [r7, #16]
 800bf66:	7812      	ldrb	r2, [r2, #0]
 800bf68:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800bf6a:	693b      	ldr	r3, [r7, #16]
 800bf6c:	3301      	adds	r3, #1
 800bf6e:	613b      	str	r3, [r7, #16]
    idx++;
 800bf70:	7dfb      	ldrb	r3, [r7, #23]
 800bf72:	3301      	adds	r3, #1
 800bf74:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800bf76:	7dfb      	ldrb	r3, [r7, #23]
 800bf78:	68ba      	ldr	r2, [r7, #8]
 800bf7a:	4413      	add	r3, r2
 800bf7c:	2200      	movs	r2, #0
 800bf7e:	701a      	strb	r2, [r3, #0]
    idx++;
 800bf80:	7dfb      	ldrb	r3, [r7, #23]
 800bf82:	3301      	adds	r3, #1
 800bf84:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800bf86:	693b      	ldr	r3, [r7, #16]
 800bf88:	781b      	ldrb	r3, [r3, #0]
 800bf8a:	2b00      	cmp	r3, #0
 800bf8c:	d1e7      	bne.n	800bf5e <USBD_GetString+0x6a>
 800bf8e:	e000      	b.n	800bf92 <USBD_GetString+0x9e>
    return;
 800bf90:	bf00      	nop
  }
}
 800bf92:	3718      	adds	r7, #24
 800bf94:	46bd      	mov	sp, r7
 800bf96:	bd80      	pop	{r7, pc}

0800bf98 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800bf98:	b480      	push	{r7}
 800bf9a:	b085      	sub	sp, #20
 800bf9c:	af00      	add	r7, sp, #0
 800bf9e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800bfa0:	2300      	movs	r3, #0
 800bfa2:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800bfa8:	e005      	b.n	800bfb6 <USBD_GetLen+0x1e>
  {
    len++;
 800bfaa:	7bfb      	ldrb	r3, [r7, #15]
 800bfac:	3301      	adds	r3, #1
 800bfae:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800bfb0:	68bb      	ldr	r3, [r7, #8]
 800bfb2:	3301      	adds	r3, #1
 800bfb4:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800bfb6:	68bb      	ldr	r3, [r7, #8]
 800bfb8:	781b      	ldrb	r3, [r3, #0]
 800bfba:	2b00      	cmp	r3, #0
 800bfbc:	d1f5      	bne.n	800bfaa <USBD_GetLen+0x12>
  }

  return len;
 800bfbe:	7bfb      	ldrb	r3, [r7, #15]
}
 800bfc0:	4618      	mov	r0, r3
 800bfc2:	3714      	adds	r7, #20
 800bfc4:	46bd      	mov	sp, r7
 800bfc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfca:	4770      	bx	lr

0800bfcc <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800bfcc:	b580      	push	{r7, lr}
 800bfce:	b084      	sub	sp, #16
 800bfd0:	af00      	add	r7, sp, #0
 800bfd2:	6078      	str	r0, [r7, #4]
 800bfd4:	460b      	mov	r3, r1
 800bfd6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_HID_HandleTypeDef *hhid;

  hhid = (USBD_HID_HandleTypeDef *)USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 800bfd8:	2010      	movs	r0, #16
 800bfda:	f000 fe6f 	bl	800ccbc <USBD_static_malloc>
 800bfde:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 800bfe0:	68fb      	ldr	r3, [r7, #12]
 800bfe2:	2b00      	cmp	r3, #0
 800bfe4:	d109      	bne.n	800bffa <USBD_HID_Init+0x2e>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	32b0      	adds	r2, #176	@ 0xb0
 800bff0:	2100      	movs	r1, #0
 800bff2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800bff6:	2302      	movs	r3, #2
 800bff8:	e048      	b.n	800c08c <USBD_HID_Init+0xc0>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hhid;
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	32b0      	adds	r2, #176	@ 0xb0
 800c004:	68f9      	ldr	r1, [r7, #12]
 800c006:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	32b0      	adds	r2, #176	@ 0xb0
 800c014:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	7c1b      	ldrb	r3, [r3, #16]
 800c022:	2b00      	cmp	r3, #0
 800c024:	d10d      	bne.n	800c042 <USBD_HID_Init+0x76>
  {
    pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = HID_HS_BINTERVAL;
 800c026:	4b1b      	ldr	r3, [pc, #108]	@ (800c094 <USBD_HID_Init+0xc8>)
 800c028:	781b      	ldrb	r3, [r3, #0]
 800c02a:	f003 020f 	and.w	r2, r3, #15
 800c02e:	6879      	ldr	r1, [r7, #4]
 800c030:	4613      	mov	r3, r2
 800c032:	009b      	lsls	r3, r3, #2
 800c034:	4413      	add	r3, r2
 800c036:	009b      	lsls	r3, r3, #2
 800c038:	440b      	add	r3, r1
 800c03a:	3326      	adds	r3, #38	@ 0x26
 800c03c:	2207      	movs	r2, #7
 800c03e:	801a      	strh	r2, [r3, #0]
 800c040:	e00c      	b.n	800c05c <USBD_HID_Init+0x90>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = HID_FS_BINTERVAL;
 800c042:	4b14      	ldr	r3, [pc, #80]	@ (800c094 <USBD_HID_Init+0xc8>)
 800c044:	781b      	ldrb	r3, [r3, #0]
 800c046:	f003 020f 	and.w	r2, r3, #15
 800c04a:	6879      	ldr	r1, [r7, #4]
 800c04c:	4613      	mov	r3, r2
 800c04e:	009b      	lsls	r3, r3, #2
 800c050:	4413      	add	r3, r2
 800c052:	009b      	lsls	r3, r3, #2
 800c054:	440b      	add	r3, r1
 800c056:	3326      	adds	r3, #38	@ 0x26
 800c058:	220a      	movs	r2, #10
 800c05a:	801a      	strh	r2, [r3, #0]
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, HIDInEpAdd, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 800c05c:	4b0d      	ldr	r3, [pc, #52]	@ (800c094 <USBD_HID_Init+0xc8>)
 800c05e:	7819      	ldrb	r1, [r3, #0]
 800c060:	2304      	movs	r3, #4
 800c062:	2203      	movs	r2, #3
 800c064:	6878      	ldr	r0, [r7, #4]
 800c066:	f000 fd18 	bl	800ca9a <USBD_LL_OpenEP>
  pdev->ep_in[HIDInEpAdd & 0xFU].is_used = 1U;
 800c06a:	4b0a      	ldr	r3, [pc, #40]	@ (800c094 <USBD_HID_Init+0xc8>)
 800c06c:	781b      	ldrb	r3, [r3, #0]
 800c06e:	f003 020f 	and.w	r2, r3, #15
 800c072:	6879      	ldr	r1, [r7, #4]
 800c074:	4613      	mov	r3, r2
 800c076:	009b      	lsls	r3, r3, #2
 800c078:	4413      	add	r3, r2
 800c07a:	009b      	lsls	r3, r3, #2
 800c07c:	440b      	add	r3, r1
 800c07e:	3324      	adds	r3, #36	@ 0x24
 800c080:	2201      	movs	r2, #1
 800c082:	801a      	strh	r2, [r3, #0]

  hhid->state = USBD_HID_IDLE;
 800c084:	68fb      	ldr	r3, [r7, #12]
 800c086:	2200      	movs	r2, #0
 800c088:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 800c08a:	2300      	movs	r3, #0
}
 800c08c:	4618      	mov	r0, r3
 800c08e:	3710      	adds	r7, #16
 800c090:	46bd      	mov	sp, r7
 800c092:	bd80      	pop	{r7, pc}
 800c094:	200000e2 	.word	0x200000e2

0800c098 <USBD_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c098:	b580      	push	{r7, lr}
 800c09a:	b082      	sub	sp, #8
 800c09c:	af00      	add	r7, sp, #0
 800c09e:	6078      	str	r0, [r7, #4]
 800c0a0:	460b      	mov	r3, r1
 800c0a2:	70fb      	strb	r3, [r7, #3]
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close HID EPs */
  (void)USBD_LL_CloseEP(pdev, HIDInEpAdd);
 800c0a4:	4b1f      	ldr	r3, [pc, #124]	@ (800c124 <USBD_HID_DeInit+0x8c>)
 800c0a6:	781b      	ldrb	r3, [r3, #0]
 800c0a8:	4619      	mov	r1, r3
 800c0aa:	6878      	ldr	r0, [r7, #4]
 800c0ac:	f000 fd1b 	bl	800cae6 <USBD_LL_CloseEP>
  pdev->ep_in[HIDInEpAdd & 0xFU].is_used = 0U;
 800c0b0:	4b1c      	ldr	r3, [pc, #112]	@ (800c124 <USBD_HID_DeInit+0x8c>)
 800c0b2:	781b      	ldrb	r3, [r3, #0]
 800c0b4:	f003 020f 	and.w	r2, r3, #15
 800c0b8:	6879      	ldr	r1, [r7, #4]
 800c0ba:	4613      	mov	r3, r2
 800c0bc:	009b      	lsls	r3, r3, #2
 800c0be:	4413      	add	r3, r2
 800c0c0:	009b      	lsls	r3, r3, #2
 800c0c2:	440b      	add	r3, r1
 800c0c4:	3324      	adds	r3, #36	@ 0x24
 800c0c6:	2200      	movs	r2, #0
 800c0c8:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = 0U;
 800c0ca:	4b16      	ldr	r3, [pc, #88]	@ (800c124 <USBD_HID_DeInit+0x8c>)
 800c0cc:	781b      	ldrb	r3, [r3, #0]
 800c0ce:	f003 020f 	and.w	r2, r3, #15
 800c0d2:	6879      	ldr	r1, [r7, #4]
 800c0d4:	4613      	mov	r3, r2
 800c0d6:	009b      	lsls	r3, r3, #2
 800c0d8:	4413      	add	r3, r2
 800c0da:	009b      	lsls	r3, r3, #2
 800c0dc:	440b      	add	r3, r1
 800c0de:	3326      	adds	r3, #38	@ 0x26
 800c0e0:	2200      	movs	r2, #0
 800c0e2:	801a      	strh	r2, [r3, #0]

  /* Free allocated memory */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	32b0      	adds	r2, #176	@ 0xb0
 800c0ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c0f2:	2b00      	cmp	r3, #0
 800c0f4:	d011      	beq.n	800c11a <USBD_HID_DeInit+0x82>
  {
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	32b0      	adds	r2, #176	@ 0xb0
 800c100:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c104:	4618      	mov	r0, r3
 800c106:	f000 fde7 	bl	800ccd8 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	32b0      	adds	r2, #176	@ 0xb0
 800c114:	2100      	movs	r1, #0
 800c116:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return (uint8_t)USBD_OK;
 800c11a:	2300      	movs	r3, #0
}
 800c11c:	4618      	mov	r0, r3
 800c11e:	3708      	adds	r7, #8
 800c120:	46bd      	mov	sp, r7
 800c122:	bd80      	pop	{r7, pc}
 800c124:	200000e2 	.word	0x200000e2

0800c128 <USBD_HID_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_HID_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c128:	b580      	push	{r7, lr}
 800c12a:	b086      	sub	sp, #24
 800c12c:	af00      	add	r7, sp, #0
 800c12e:	6078      	str	r0, [r7, #4]
 800c130:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	32b0      	adds	r2, #176	@ 0xb0
 800c13c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c140:	60fb      	str	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 800c142:	2300      	movs	r3, #0
 800c144:	75fb      	strb	r3, [r7, #23]
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 800c146:	2300      	movs	r3, #0
 800c148:	817b      	strh	r3, [r7, #10]

  if (hhid == NULL)
 800c14a:	68fb      	ldr	r3, [r7, #12]
 800c14c:	2b00      	cmp	r3, #0
 800c14e:	d101      	bne.n	800c154 <USBD_HID_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 800c150:	2303      	movs	r3, #3
 800c152:	e0e8      	b.n	800c326 <USBD_HID_Setup+0x1fe>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c154:	683b      	ldr	r3, [r7, #0]
 800c156:	781b      	ldrb	r3, [r3, #0]
 800c158:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800c15c:	2b00      	cmp	r3, #0
 800c15e:	d046      	beq.n	800c1ee <USBD_HID_Setup+0xc6>
 800c160:	2b20      	cmp	r3, #32
 800c162:	f040 80d8 	bne.w	800c316 <USBD_HID_Setup+0x1ee>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 800c166:	683b      	ldr	r3, [r7, #0]
 800c168:	785b      	ldrb	r3, [r3, #1]
 800c16a:	3b02      	subs	r3, #2
 800c16c:	2b09      	cmp	r3, #9
 800c16e:	d836      	bhi.n	800c1de <USBD_HID_Setup+0xb6>
 800c170:	a201      	add	r2, pc, #4	@ (adr r2, 800c178 <USBD_HID_Setup+0x50>)
 800c172:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c176:	bf00      	nop
 800c178:	0800c1cf 	.word	0x0800c1cf
 800c17c:	0800c1af 	.word	0x0800c1af
 800c180:	0800c1df 	.word	0x0800c1df
 800c184:	0800c1df 	.word	0x0800c1df
 800c188:	0800c1df 	.word	0x0800c1df
 800c18c:	0800c1df 	.word	0x0800c1df
 800c190:	0800c1df 	.word	0x0800c1df
 800c194:	0800c1df 	.word	0x0800c1df
 800c198:	0800c1bd 	.word	0x0800c1bd
 800c19c:	0800c1a1 	.word	0x0800c1a1
      {
        case USBD_HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 800c1a0:	683b      	ldr	r3, [r7, #0]
 800c1a2:	885b      	ldrh	r3, [r3, #2]
 800c1a4:	b2db      	uxtb	r3, r3
 800c1a6:	461a      	mov	r2, r3
 800c1a8:	68fb      	ldr	r3, [r7, #12]
 800c1aa:	601a      	str	r2, [r3, #0]
          break;
 800c1ac:	e01e      	b.n	800c1ec <USBD_HID_Setup+0xc4>

        case USBD_HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 800c1ae:	68fb      	ldr	r3, [r7, #12]
 800c1b0:	2201      	movs	r2, #1
 800c1b2:	4619      	mov	r1, r3
 800c1b4:	6878      	ldr	r0, [r7, #4]
 800c1b6:	f000 f933 	bl	800c420 <USBD_CtlSendData>
          break;
 800c1ba:	e017      	b.n	800c1ec <USBD_HID_Setup+0xc4>

        case USBD_HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 800c1bc:	683b      	ldr	r3, [r7, #0]
 800c1be:	885b      	ldrh	r3, [r3, #2]
 800c1c0:	0a1b      	lsrs	r3, r3, #8
 800c1c2:	b29b      	uxth	r3, r3
 800c1c4:	b2db      	uxtb	r3, r3
 800c1c6:	461a      	mov	r2, r3
 800c1c8:	68fb      	ldr	r3, [r7, #12]
 800c1ca:	605a      	str	r2, [r3, #4]
          break;
 800c1cc:	e00e      	b.n	800c1ec <USBD_HID_Setup+0xc4>

        case USBD_HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 800c1ce:	68fb      	ldr	r3, [r7, #12]
 800c1d0:	3304      	adds	r3, #4
 800c1d2:	2201      	movs	r2, #1
 800c1d4:	4619      	mov	r1, r3
 800c1d6:	6878      	ldr	r0, [r7, #4]
 800c1d8:	f000 f922 	bl	800c420 <USBD_CtlSendData>
          break;
 800c1dc:	e006      	b.n	800c1ec <USBD_HID_Setup+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800c1de:	6839      	ldr	r1, [r7, #0]
 800c1e0:	6878      	ldr	r0, [r7, #4]
 800c1e2:	f7ff fe76 	bl	800bed2 <USBD_CtlError>
          ret = USBD_FAIL;
 800c1e6:	2303      	movs	r3, #3
 800c1e8:	75fb      	strb	r3, [r7, #23]
          break;
 800c1ea:	bf00      	nop
      }
      break;
 800c1ec:	e09a      	b.n	800c324 <USBD_HID_Setup+0x1fc>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c1ee:	683b      	ldr	r3, [r7, #0]
 800c1f0:	785b      	ldrb	r3, [r3, #1]
 800c1f2:	2b0b      	cmp	r3, #11
 800c1f4:	f200 8086 	bhi.w	800c304 <USBD_HID_Setup+0x1dc>
 800c1f8:	a201      	add	r2, pc, #4	@ (adr r2, 800c200 <USBD_HID_Setup+0xd8>)
 800c1fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c1fe:	bf00      	nop
 800c200:	0800c231 	.word	0x0800c231
 800c204:	0800c313 	.word	0x0800c313
 800c208:	0800c305 	.word	0x0800c305
 800c20c:	0800c305 	.word	0x0800c305
 800c210:	0800c305 	.word	0x0800c305
 800c214:	0800c305 	.word	0x0800c305
 800c218:	0800c25b 	.word	0x0800c25b
 800c21c:	0800c305 	.word	0x0800c305
 800c220:	0800c305 	.word	0x0800c305
 800c224:	0800c305 	.word	0x0800c305
 800c228:	0800c2b3 	.word	0x0800c2b3
 800c22c:	0800c2dd 	.word	0x0800c2dd
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c236:	b2db      	uxtb	r3, r3
 800c238:	2b03      	cmp	r3, #3
 800c23a:	d107      	bne.n	800c24c <USBD_HID_Setup+0x124>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800c23c:	f107 030a 	add.w	r3, r7, #10
 800c240:	2202      	movs	r2, #2
 800c242:	4619      	mov	r1, r3
 800c244:	6878      	ldr	r0, [r7, #4]
 800c246:	f000 f8eb 	bl	800c420 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800c24a:	e063      	b.n	800c314 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 800c24c:	6839      	ldr	r1, [r7, #0]
 800c24e:	6878      	ldr	r0, [r7, #4]
 800c250:	f7ff fe3f 	bl	800bed2 <USBD_CtlError>
            ret = USBD_FAIL;
 800c254:	2303      	movs	r3, #3
 800c256:	75fb      	strb	r3, [r7, #23]
          break;
 800c258:	e05c      	b.n	800c314 <USBD_HID_Setup+0x1ec>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == HID_REPORT_DESC)
 800c25a:	683b      	ldr	r3, [r7, #0]
 800c25c:	885b      	ldrh	r3, [r3, #2]
 800c25e:	0a1b      	lsrs	r3, r3, #8
 800c260:	b29b      	uxth	r3, r3
 800c262:	2b22      	cmp	r3, #34	@ 0x22
 800c264:	d108      	bne.n	800c278 <USBD_HID_Setup+0x150>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 800c266:	683b      	ldr	r3, [r7, #0]
 800c268:	88db      	ldrh	r3, [r3, #6]
 800c26a:	2b4a      	cmp	r3, #74	@ 0x4a
 800c26c:	bf28      	it	cs
 800c26e:	234a      	movcs	r3, #74	@ 0x4a
 800c270:	82bb      	strh	r3, [r7, #20]
            pbuf = HID_MOUSE_ReportDesc;
 800c272:	4b2f      	ldr	r3, [pc, #188]	@ (800c330 <USBD_HID_Setup+0x208>)
 800c274:	613b      	str	r3, [r7, #16]
 800c276:	e015      	b.n	800c2a4 <USBD_HID_Setup+0x17c>
          }
          else if ((req->wValue >> 8) == HID_DESCRIPTOR_TYPE)
 800c278:	683b      	ldr	r3, [r7, #0]
 800c27a:	885b      	ldrh	r3, [r3, #2]
 800c27c:	0a1b      	lsrs	r3, r3, #8
 800c27e:	b29b      	uxth	r3, r3
 800c280:	2b21      	cmp	r3, #33	@ 0x21
 800c282:	d108      	bne.n	800c296 <USBD_HID_Setup+0x16e>
          {
            pbuf = USBD_HID_Desc;
 800c284:	4b2b      	ldr	r3, [pc, #172]	@ (800c334 <USBD_HID_Setup+0x20c>)
 800c286:	613b      	str	r3, [r7, #16]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 800c288:	683b      	ldr	r3, [r7, #0]
 800c28a:	88db      	ldrh	r3, [r3, #6]
 800c28c:	2b09      	cmp	r3, #9
 800c28e:	bf28      	it	cs
 800c290:	2309      	movcs	r3, #9
 800c292:	82bb      	strh	r3, [r7, #20]
 800c294:	e006      	b.n	800c2a4 <USBD_HID_Setup+0x17c>
          }
          else
          {
            USBD_CtlError(pdev, req);
 800c296:	6839      	ldr	r1, [r7, #0]
 800c298:	6878      	ldr	r0, [r7, #4]
 800c29a:	f7ff fe1a 	bl	800bed2 <USBD_CtlError>
            ret = USBD_FAIL;
 800c29e:	2303      	movs	r3, #3
 800c2a0:	75fb      	strb	r3, [r7, #23]
            break;
 800c2a2:	e037      	b.n	800c314 <USBD_HID_Setup+0x1ec>
          }
          (void)USBD_CtlSendData(pdev, pbuf, len);
 800c2a4:	8abb      	ldrh	r3, [r7, #20]
 800c2a6:	461a      	mov	r2, r3
 800c2a8:	6939      	ldr	r1, [r7, #16]
 800c2aa:	6878      	ldr	r0, [r7, #4]
 800c2ac:	f000 f8b8 	bl	800c420 <USBD_CtlSendData>
          break;
 800c2b0:	e030      	b.n	800c314 <USBD_HID_Setup+0x1ec>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c2b8:	b2db      	uxtb	r3, r3
 800c2ba:	2b03      	cmp	r3, #3
 800c2bc:	d107      	bne.n	800c2ce <USBD_HID_Setup+0x1a6>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 800c2be:	68fb      	ldr	r3, [r7, #12]
 800c2c0:	3308      	adds	r3, #8
 800c2c2:	2201      	movs	r2, #1
 800c2c4:	4619      	mov	r1, r3
 800c2c6:	6878      	ldr	r0, [r7, #4]
 800c2c8:	f000 f8aa 	bl	800c420 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800c2cc:	e022      	b.n	800c314 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 800c2ce:	6839      	ldr	r1, [r7, #0]
 800c2d0:	6878      	ldr	r0, [r7, #4]
 800c2d2:	f7ff fdfe 	bl	800bed2 <USBD_CtlError>
            ret = USBD_FAIL;
 800c2d6:	2303      	movs	r3, #3
 800c2d8:	75fb      	strb	r3, [r7, #23]
          break;
 800c2da:	e01b      	b.n	800c314 <USBD_HID_Setup+0x1ec>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c2e2:	b2db      	uxtb	r3, r3
 800c2e4:	2b03      	cmp	r3, #3
 800c2e6:	d106      	bne.n	800c2f6 <USBD_HID_Setup+0x1ce>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 800c2e8:	683b      	ldr	r3, [r7, #0]
 800c2ea:	885b      	ldrh	r3, [r3, #2]
 800c2ec:	b2db      	uxtb	r3, r3
 800c2ee:	461a      	mov	r2, r3
 800c2f0:	68fb      	ldr	r3, [r7, #12]
 800c2f2:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800c2f4:	e00e      	b.n	800c314 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 800c2f6:	6839      	ldr	r1, [r7, #0]
 800c2f8:	6878      	ldr	r0, [r7, #4]
 800c2fa:	f7ff fdea 	bl	800bed2 <USBD_CtlError>
            ret = USBD_FAIL;
 800c2fe:	2303      	movs	r3, #3
 800c300:	75fb      	strb	r3, [r7, #23]
          break;
 800c302:	e007      	b.n	800c314 <USBD_HID_Setup+0x1ec>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800c304:	6839      	ldr	r1, [r7, #0]
 800c306:	6878      	ldr	r0, [r7, #4]
 800c308:	f7ff fde3 	bl	800bed2 <USBD_CtlError>
          ret = USBD_FAIL;
 800c30c:	2303      	movs	r3, #3
 800c30e:	75fb      	strb	r3, [r7, #23]
          break;
 800c310:	e000      	b.n	800c314 <USBD_HID_Setup+0x1ec>
          break;
 800c312:	bf00      	nop
      }
      break;
 800c314:	e006      	b.n	800c324 <USBD_HID_Setup+0x1fc>

    default:
      USBD_CtlError(pdev, req);
 800c316:	6839      	ldr	r1, [r7, #0]
 800c318:	6878      	ldr	r0, [r7, #4]
 800c31a:	f7ff fdda 	bl	800bed2 <USBD_CtlError>
      ret = USBD_FAIL;
 800c31e:	2303      	movs	r3, #3
 800c320:	75fb      	strb	r3, [r7, #23]
      break;
 800c322:	bf00      	nop
  }

  return (uint8_t)ret;
 800c324:	7dfb      	ldrb	r3, [r7, #23]
}
 800c326:	4618      	mov	r0, r3
 800c328:	3718      	adds	r7, #24
 800c32a:	46bd      	mov	sp, r7
 800c32c:	bd80      	pop	{r7, pc}
 800c32e:	bf00      	nop
 800c330:	20000098 	.word	0x20000098
 800c334:	20000080 	.word	0x20000080

0800c338 <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 800c338:	b580      	push	{r7, lr}
 800c33a:	b084      	sub	sp, #16
 800c33c:	af00      	add	r7, sp, #0
 800c33e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 800c340:	2181      	movs	r1, #129	@ 0x81
 800c342:	4809      	ldr	r0, [pc, #36]	@ (800c368 <USBD_HID_GetFSCfgDesc+0x30>)
 800c344:	f7fe ff8f 	bl	800b266 <USBD_GetEpDesc>
 800c348:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 800c34a:	68fb      	ldr	r3, [r7, #12]
 800c34c:	2b00      	cmp	r3, #0
 800c34e:	d002      	beq.n	800c356 <USBD_HID_GetFSCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_FS_BINTERVAL;
 800c350:	68fb      	ldr	r3, [r7, #12]
 800c352:	220a      	movs	r2, #10
 800c354:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	2222      	movs	r2, #34	@ 0x22
 800c35a:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 800c35c:	4b02      	ldr	r3, [pc, #8]	@ (800c368 <USBD_HID_GetFSCfgDesc+0x30>)
}
 800c35e:	4618      	mov	r0, r3
 800c360:	3710      	adds	r7, #16
 800c362:	46bd      	mov	sp, r7
 800c364:	bd80      	pop	{r7, pc}
 800c366:	bf00      	nop
 800c368:	2000005c 	.word	0x2000005c

0800c36c <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 800c36c:	b580      	push	{r7, lr}
 800c36e:	b084      	sub	sp, #16
 800c370:	af00      	add	r7, sp, #0
 800c372:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 800c374:	2181      	movs	r1, #129	@ 0x81
 800c376:	4809      	ldr	r0, [pc, #36]	@ (800c39c <USBD_HID_GetHSCfgDesc+0x30>)
 800c378:	f7fe ff75 	bl	800b266 <USBD_GetEpDesc>
 800c37c:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 800c37e:	68fb      	ldr	r3, [r7, #12]
 800c380:	2b00      	cmp	r3, #0
 800c382:	d002      	beq.n	800c38a <USBD_HID_GetHSCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_HS_BINTERVAL;
 800c384:	68fb      	ldr	r3, [r7, #12]
 800c386:	2207      	movs	r2, #7
 800c388:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	2222      	movs	r2, #34	@ 0x22
 800c38e:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 800c390:	4b02      	ldr	r3, [pc, #8]	@ (800c39c <USBD_HID_GetHSCfgDesc+0x30>)
}
 800c392:	4618      	mov	r0, r3
 800c394:	3710      	adds	r7, #16
 800c396:	46bd      	mov	sp, r7
 800c398:	bd80      	pop	{r7, pc}
 800c39a:	bf00      	nop
 800c39c:	2000005c 	.word	0x2000005c

0800c3a0 <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800c3a0:	b580      	push	{r7, lr}
 800c3a2:	b084      	sub	sp, #16
 800c3a4:	af00      	add	r7, sp, #0
 800c3a6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 800c3a8:	2181      	movs	r1, #129	@ 0x81
 800c3aa:	4809      	ldr	r0, [pc, #36]	@ (800c3d0 <USBD_HID_GetOtherSpeedCfgDesc+0x30>)
 800c3ac:	f7fe ff5b 	bl	800b266 <USBD_GetEpDesc>
 800c3b0:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 800c3b2:	68fb      	ldr	r3, [r7, #12]
 800c3b4:	2b00      	cmp	r3, #0
 800c3b6:	d002      	beq.n	800c3be <USBD_HID_GetOtherSpeedCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_FS_BINTERVAL;
 800c3b8:	68fb      	ldr	r3, [r7, #12]
 800c3ba:	220a      	movs	r2, #10
 800c3bc:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	2222      	movs	r2, #34	@ 0x22
 800c3c2:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 800c3c4:	4b02      	ldr	r3, [pc, #8]	@ (800c3d0 <USBD_HID_GetOtherSpeedCfgDesc+0x30>)
}
 800c3c6:	4618      	mov	r0, r3
 800c3c8:	3710      	adds	r7, #16
 800c3ca:	46bd      	mov	sp, r7
 800c3cc:	bd80      	pop	{r7, pc}
 800c3ce:	bf00      	nop
 800c3d0:	2000005c 	.word	0x2000005c

0800c3d4 <USBD_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800c3d4:	b480      	push	{r7}
 800c3d6:	b083      	sub	sp, #12
 800c3d8:	af00      	add	r7, sp, #0
 800c3da:	6078      	str	r0, [r7, #4]
 800c3dc:	460b      	mov	r3, r1
 800c3de:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId])->state = USBD_HID_IDLE;
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	32b0      	adds	r2, #176	@ 0xb0
 800c3ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c3ee:	2200      	movs	r2, #0
 800c3f0:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 800c3f2:	2300      	movs	r3, #0
}
 800c3f4:	4618      	mov	r0, r3
 800c3f6:	370c      	adds	r7, #12
 800c3f8:	46bd      	mov	sp, r7
 800c3fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3fe:	4770      	bx	lr

0800c400 <USBD_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 800c400:	b480      	push	{r7}
 800c402:	b083      	sub	sp, #12
 800c404:	af00      	add	r7, sp, #0
 800c406:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_DeviceQualifierDesc);
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	220a      	movs	r2, #10
 800c40c:	801a      	strh	r2, [r3, #0]

  return USBD_HID_DeviceQualifierDesc;
 800c40e:	4b03      	ldr	r3, [pc, #12]	@ (800c41c <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 800c410:	4618      	mov	r0, r3
 800c412:	370c      	adds	r7, #12
 800c414:	46bd      	mov	sp, r7
 800c416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c41a:	4770      	bx	lr
 800c41c:	2000008c 	.word	0x2000008c

0800c420 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800c420:	b580      	push	{r7, lr}
 800c422:	b084      	sub	sp, #16
 800c424:	af00      	add	r7, sp, #0
 800c426:	60f8      	str	r0, [r7, #12]
 800c428:	60b9      	str	r1, [r7, #8]
 800c42a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800c42c:	68fb      	ldr	r3, [r7, #12]
 800c42e:	2202      	movs	r2, #2
 800c430:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800c434:	68fb      	ldr	r3, [r7, #12]
 800c436:	687a      	ldr	r2, [r7, #4]
 800c438:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800c43a:	68fb      	ldr	r3, [r7, #12]
 800c43c:	687a      	ldr	r2, [r7, #4]
 800c43e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	68ba      	ldr	r2, [r7, #8]
 800c444:	2100      	movs	r1, #0
 800c446:	68f8      	ldr	r0, [r7, #12]
 800c448:	f000 fbf5 	bl	800cc36 <USBD_LL_Transmit>

  return USBD_OK;
 800c44c:	2300      	movs	r3, #0
}
 800c44e:	4618      	mov	r0, r3
 800c450:	3710      	adds	r7, #16
 800c452:	46bd      	mov	sp, r7
 800c454:	bd80      	pop	{r7, pc}

0800c456 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800c456:	b580      	push	{r7, lr}
 800c458:	b084      	sub	sp, #16
 800c45a:	af00      	add	r7, sp, #0
 800c45c:	60f8      	str	r0, [r7, #12]
 800c45e:	60b9      	str	r1, [r7, #8]
 800c460:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	68ba      	ldr	r2, [r7, #8]
 800c466:	2100      	movs	r1, #0
 800c468:	68f8      	ldr	r0, [r7, #12]
 800c46a:	f000 fbe4 	bl	800cc36 <USBD_LL_Transmit>

  return USBD_OK;
 800c46e:	2300      	movs	r3, #0
}
 800c470:	4618      	mov	r0, r3
 800c472:	3710      	adds	r7, #16
 800c474:	46bd      	mov	sp, r7
 800c476:	bd80      	pop	{r7, pc}

0800c478 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800c478:	b580      	push	{r7, lr}
 800c47a:	b084      	sub	sp, #16
 800c47c:	af00      	add	r7, sp, #0
 800c47e:	60f8      	str	r0, [r7, #12]
 800c480:	60b9      	str	r1, [r7, #8]
 800c482:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	68ba      	ldr	r2, [r7, #8]
 800c488:	2100      	movs	r1, #0
 800c48a:	68f8      	ldr	r0, [r7, #12]
 800c48c:	f000 fbf4 	bl	800cc78 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c490:	2300      	movs	r3, #0
}
 800c492:	4618      	mov	r0, r3
 800c494:	3710      	adds	r7, #16
 800c496:	46bd      	mov	sp, r7
 800c498:	bd80      	pop	{r7, pc}

0800c49a <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800c49a:	b580      	push	{r7, lr}
 800c49c:	b082      	sub	sp, #8
 800c49e:	af00      	add	r7, sp, #0
 800c4a0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	2204      	movs	r2, #4
 800c4a6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800c4aa:	2300      	movs	r3, #0
 800c4ac:	2200      	movs	r2, #0
 800c4ae:	2100      	movs	r1, #0
 800c4b0:	6878      	ldr	r0, [r7, #4]
 800c4b2:	f000 fbc0 	bl	800cc36 <USBD_LL_Transmit>

  return USBD_OK;
 800c4b6:	2300      	movs	r3, #0
}
 800c4b8:	4618      	mov	r0, r3
 800c4ba:	3708      	adds	r7, #8
 800c4bc:	46bd      	mov	sp, r7
 800c4be:	bd80      	pop	{r7, pc}

0800c4c0 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800c4c0:	b580      	push	{r7, lr}
 800c4c2:	b082      	sub	sp, #8
 800c4c4:	af00      	add	r7, sp, #0
 800c4c6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	2205      	movs	r2, #5
 800c4cc:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c4d0:	2300      	movs	r3, #0
 800c4d2:	2200      	movs	r2, #0
 800c4d4:	2100      	movs	r1, #0
 800c4d6:	6878      	ldr	r0, [r7, #4]
 800c4d8:	f000 fbce 	bl	800cc78 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c4dc:	2300      	movs	r3, #0
}
 800c4de:	4618      	mov	r0, r3
 800c4e0:	3708      	adds	r7, #8
 800c4e2:	46bd      	mov	sp, r7
 800c4e4:	bd80      	pop	{r7, pc}
	...

0800c4e8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800c4e8:	b580      	push	{r7, lr}
 800c4ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800c4ec:	2200      	movs	r2, #0
 800c4ee:	490e      	ldr	r1, [pc, #56]	@ (800c528 <MX_USB_DEVICE_Init+0x40>)
 800c4f0:	480e      	ldr	r0, [pc, #56]	@ (800c52c <MX_USB_DEVICE_Init+0x44>)
 800c4f2:	f7fe fae9 	bl	800aac8 <USBD_Init>
 800c4f6:	4603      	mov	r3, r0
 800c4f8:	2b00      	cmp	r3, #0
 800c4fa:	d001      	beq.n	800c500 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800c4fc:	f7f4 fc82 	bl	8000e04 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 800c500:	490b      	ldr	r1, [pc, #44]	@ (800c530 <MX_USB_DEVICE_Init+0x48>)
 800c502:	480a      	ldr	r0, [pc, #40]	@ (800c52c <MX_USB_DEVICE_Init+0x44>)
 800c504:	f7fe fb10 	bl	800ab28 <USBD_RegisterClass>
 800c508:	4603      	mov	r3, r0
 800c50a:	2b00      	cmp	r3, #0
 800c50c:	d001      	beq.n	800c512 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800c50e:	f7f4 fc79 	bl	8000e04 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800c512:	4806      	ldr	r0, [pc, #24]	@ (800c52c <MX_USB_DEVICE_Init+0x44>)
 800c514:	f7fe fb3e 	bl	800ab94 <USBD_Start>
 800c518:	4603      	mov	r3, r0
 800c51a:	2b00      	cmp	r3, #0
 800c51c:	d001      	beq.n	800c522 <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 800c51e:	f7f4 fc71 	bl	8000e04 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800c522:	bf00      	nop
 800c524:	bd80      	pop	{r7, pc}
 800c526:	bf00      	nop
 800c528:	200000e4 	.word	0x200000e4
 800c52c:	200055f8 	.word	0x200055f8
 800c530:	20000024 	.word	0x20000024

0800c534 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c534:	b480      	push	{r7}
 800c536:	b083      	sub	sp, #12
 800c538:	af00      	add	r7, sp, #0
 800c53a:	4603      	mov	r3, r0
 800c53c:	6039      	str	r1, [r7, #0]
 800c53e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800c540:	683b      	ldr	r3, [r7, #0]
 800c542:	2212      	movs	r2, #18
 800c544:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800c546:	4b03      	ldr	r3, [pc, #12]	@ (800c554 <USBD_FS_DeviceDescriptor+0x20>)
}
 800c548:	4618      	mov	r0, r3
 800c54a:	370c      	adds	r7, #12
 800c54c:	46bd      	mov	sp, r7
 800c54e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c552:	4770      	bx	lr
 800c554:	20000100 	.word	0x20000100

0800c558 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c558:	b480      	push	{r7}
 800c55a:	b083      	sub	sp, #12
 800c55c:	af00      	add	r7, sp, #0
 800c55e:	4603      	mov	r3, r0
 800c560:	6039      	str	r1, [r7, #0]
 800c562:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800c564:	683b      	ldr	r3, [r7, #0]
 800c566:	2204      	movs	r2, #4
 800c568:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800c56a:	4b03      	ldr	r3, [pc, #12]	@ (800c578 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800c56c:	4618      	mov	r0, r3
 800c56e:	370c      	adds	r7, #12
 800c570:	46bd      	mov	sp, r7
 800c572:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c576:	4770      	bx	lr
 800c578:	20000114 	.word	0x20000114

0800c57c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c57c:	b580      	push	{r7, lr}
 800c57e:	b082      	sub	sp, #8
 800c580:	af00      	add	r7, sp, #0
 800c582:	4603      	mov	r3, r0
 800c584:	6039      	str	r1, [r7, #0]
 800c586:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c588:	79fb      	ldrb	r3, [r7, #7]
 800c58a:	2b00      	cmp	r3, #0
 800c58c:	d105      	bne.n	800c59a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c58e:	683a      	ldr	r2, [r7, #0]
 800c590:	4907      	ldr	r1, [pc, #28]	@ (800c5b0 <USBD_FS_ProductStrDescriptor+0x34>)
 800c592:	4808      	ldr	r0, [pc, #32]	@ (800c5b4 <USBD_FS_ProductStrDescriptor+0x38>)
 800c594:	f7ff fcae 	bl	800bef4 <USBD_GetString>
 800c598:	e004      	b.n	800c5a4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c59a:	683a      	ldr	r2, [r7, #0]
 800c59c:	4904      	ldr	r1, [pc, #16]	@ (800c5b0 <USBD_FS_ProductStrDescriptor+0x34>)
 800c59e:	4805      	ldr	r0, [pc, #20]	@ (800c5b4 <USBD_FS_ProductStrDescriptor+0x38>)
 800c5a0:	f7ff fca8 	bl	800bef4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c5a4:	4b02      	ldr	r3, [pc, #8]	@ (800c5b0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800c5a6:	4618      	mov	r0, r3
 800c5a8:	3708      	adds	r7, #8
 800c5aa:	46bd      	mov	sp, r7
 800c5ac:	bd80      	pop	{r7, pc}
 800c5ae:	bf00      	nop
 800c5b0:	200058d4 	.word	0x200058d4
 800c5b4:	0800d92c 	.word	0x0800d92c

0800c5b8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c5b8:	b580      	push	{r7, lr}
 800c5ba:	b082      	sub	sp, #8
 800c5bc:	af00      	add	r7, sp, #0
 800c5be:	4603      	mov	r3, r0
 800c5c0:	6039      	str	r1, [r7, #0]
 800c5c2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800c5c4:	683a      	ldr	r2, [r7, #0]
 800c5c6:	4904      	ldr	r1, [pc, #16]	@ (800c5d8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800c5c8:	4804      	ldr	r0, [pc, #16]	@ (800c5dc <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800c5ca:	f7ff fc93 	bl	800bef4 <USBD_GetString>
  return USBD_StrDesc;
 800c5ce:	4b02      	ldr	r3, [pc, #8]	@ (800c5d8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800c5d0:	4618      	mov	r0, r3
 800c5d2:	3708      	adds	r7, #8
 800c5d4:	46bd      	mov	sp, r7
 800c5d6:	bd80      	pop	{r7, pc}
 800c5d8:	200058d4 	.word	0x200058d4
 800c5dc:	0800d944 	.word	0x0800d944

0800c5e0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c5e0:	b580      	push	{r7, lr}
 800c5e2:	b082      	sub	sp, #8
 800c5e4:	af00      	add	r7, sp, #0
 800c5e6:	4603      	mov	r3, r0
 800c5e8:	6039      	str	r1, [r7, #0]
 800c5ea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800c5ec:	683b      	ldr	r3, [r7, #0]
 800c5ee:	221a      	movs	r2, #26
 800c5f0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800c5f2:	f000 f843 	bl	800c67c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800c5f6:	4b02      	ldr	r3, [pc, #8]	@ (800c600 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800c5f8:	4618      	mov	r0, r3
 800c5fa:	3708      	adds	r7, #8
 800c5fc:	46bd      	mov	sp, r7
 800c5fe:	bd80      	pop	{r7, pc}
 800c600:	20000118 	.word	0x20000118

0800c604 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c604:	b580      	push	{r7, lr}
 800c606:	b082      	sub	sp, #8
 800c608:	af00      	add	r7, sp, #0
 800c60a:	4603      	mov	r3, r0
 800c60c:	6039      	str	r1, [r7, #0]
 800c60e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800c610:	79fb      	ldrb	r3, [r7, #7]
 800c612:	2b00      	cmp	r3, #0
 800c614:	d105      	bne.n	800c622 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c616:	683a      	ldr	r2, [r7, #0]
 800c618:	4907      	ldr	r1, [pc, #28]	@ (800c638 <USBD_FS_ConfigStrDescriptor+0x34>)
 800c61a:	4808      	ldr	r0, [pc, #32]	@ (800c63c <USBD_FS_ConfigStrDescriptor+0x38>)
 800c61c:	f7ff fc6a 	bl	800bef4 <USBD_GetString>
 800c620:	e004      	b.n	800c62c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c622:	683a      	ldr	r2, [r7, #0]
 800c624:	4904      	ldr	r1, [pc, #16]	@ (800c638 <USBD_FS_ConfigStrDescriptor+0x34>)
 800c626:	4805      	ldr	r0, [pc, #20]	@ (800c63c <USBD_FS_ConfigStrDescriptor+0x38>)
 800c628:	f7ff fc64 	bl	800bef4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c62c:	4b02      	ldr	r3, [pc, #8]	@ (800c638 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800c62e:	4618      	mov	r0, r3
 800c630:	3708      	adds	r7, #8
 800c632:	46bd      	mov	sp, r7
 800c634:	bd80      	pop	{r7, pc}
 800c636:	bf00      	nop
 800c638:	200058d4 	.word	0x200058d4
 800c63c:	0800d958 	.word	0x0800d958

0800c640 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c640:	b580      	push	{r7, lr}
 800c642:	b082      	sub	sp, #8
 800c644:	af00      	add	r7, sp, #0
 800c646:	4603      	mov	r3, r0
 800c648:	6039      	str	r1, [r7, #0]
 800c64a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c64c:	79fb      	ldrb	r3, [r7, #7]
 800c64e:	2b00      	cmp	r3, #0
 800c650:	d105      	bne.n	800c65e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c652:	683a      	ldr	r2, [r7, #0]
 800c654:	4907      	ldr	r1, [pc, #28]	@ (800c674 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800c656:	4808      	ldr	r0, [pc, #32]	@ (800c678 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800c658:	f7ff fc4c 	bl	800bef4 <USBD_GetString>
 800c65c:	e004      	b.n	800c668 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c65e:	683a      	ldr	r2, [r7, #0]
 800c660:	4904      	ldr	r1, [pc, #16]	@ (800c674 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800c662:	4805      	ldr	r0, [pc, #20]	@ (800c678 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800c664:	f7ff fc46 	bl	800bef4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c668:	4b02      	ldr	r3, [pc, #8]	@ (800c674 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800c66a:	4618      	mov	r0, r3
 800c66c:	3708      	adds	r7, #8
 800c66e:	46bd      	mov	sp, r7
 800c670:	bd80      	pop	{r7, pc}
 800c672:	bf00      	nop
 800c674:	200058d4 	.word	0x200058d4
 800c678:	0800d964 	.word	0x0800d964

0800c67c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800c67c:	b580      	push	{r7, lr}
 800c67e:	b084      	sub	sp, #16
 800c680:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800c682:	4b0f      	ldr	r3, [pc, #60]	@ (800c6c0 <Get_SerialNum+0x44>)
 800c684:	681b      	ldr	r3, [r3, #0]
 800c686:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800c688:	4b0e      	ldr	r3, [pc, #56]	@ (800c6c4 <Get_SerialNum+0x48>)
 800c68a:	681b      	ldr	r3, [r3, #0]
 800c68c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800c68e:	4b0e      	ldr	r3, [pc, #56]	@ (800c6c8 <Get_SerialNum+0x4c>)
 800c690:	681b      	ldr	r3, [r3, #0]
 800c692:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800c694:	68fa      	ldr	r2, [r7, #12]
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	4413      	add	r3, r2
 800c69a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800c69c:	68fb      	ldr	r3, [r7, #12]
 800c69e:	2b00      	cmp	r3, #0
 800c6a0:	d009      	beq.n	800c6b6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800c6a2:	2208      	movs	r2, #8
 800c6a4:	4909      	ldr	r1, [pc, #36]	@ (800c6cc <Get_SerialNum+0x50>)
 800c6a6:	68f8      	ldr	r0, [r7, #12]
 800c6a8:	f000 f814 	bl	800c6d4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800c6ac:	2204      	movs	r2, #4
 800c6ae:	4908      	ldr	r1, [pc, #32]	@ (800c6d0 <Get_SerialNum+0x54>)
 800c6b0:	68b8      	ldr	r0, [r7, #8]
 800c6b2:	f000 f80f 	bl	800c6d4 <IntToUnicode>
  }
}
 800c6b6:	bf00      	nop
 800c6b8:	3710      	adds	r7, #16
 800c6ba:	46bd      	mov	sp, r7
 800c6bc:	bd80      	pop	{r7, pc}
 800c6be:	bf00      	nop
 800c6c0:	1fff7a10 	.word	0x1fff7a10
 800c6c4:	1fff7a14 	.word	0x1fff7a14
 800c6c8:	1fff7a18 	.word	0x1fff7a18
 800c6cc:	2000011a 	.word	0x2000011a
 800c6d0:	2000012a 	.word	0x2000012a

0800c6d4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800c6d4:	b480      	push	{r7}
 800c6d6:	b087      	sub	sp, #28
 800c6d8:	af00      	add	r7, sp, #0
 800c6da:	60f8      	str	r0, [r7, #12]
 800c6dc:	60b9      	str	r1, [r7, #8]
 800c6de:	4613      	mov	r3, r2
 800c6e0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800c6e2:	2300      	movs	r3, #0
 800c6e4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800c6e6:	2300      	movs	r3, #0
 800c6e8:	75fb      	strb	r3, [r7, #23]
 800c6ea:	e027      	b.n	800c73c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800c6ec:	68fb      	ldr	r3, [r7, #12]
 800c6ee:	0f1b      	lsrs	r3, r3, #28
 800c6f0:	2b09      	cmp	r3, #9
 800c6f2:	d80b      	bhi.n	800c70c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800c6f4:	68fb      	ldr	r3, [r7, #12]
 800c6f6:	0f1b      	lsrs	r3, r3, #28
 800c6f8:	b2da      	uxtb	r2, r3
 800c6fa:	7dfb      	ldrb	r3, [r7, #23]
 800c6fc:	005b      	lsls	r3, r3, #1
 800c6fe:	4619      	mov	r1, r3
 800c700:	68bb      	ldr	r3, [r7, #8]
 800c702:	440b      	add	r3, r1
 800c704:	3230      	adds	r2, #48	@ 0x30
 800c706:	b2d2      	uxtb	r2, r2
 800c708:	701a      	strb	r2, [r3, #0]
 800c70a:	e00a      	b.n	800c722 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800c70c:	68fb      	ldr	r3, [r7, #12]
 800c70e:	0f1b      	lsrs	r3, r3, #28
 800c710:	b2da      	uxtb	r2, r3
 800c712:	7dfb      	ldrb	r3, [r7, #23]
 800c714:	005b      	lsls	r3, r3, #1
 800c716:	4619      	mov	r1, r3
 800c718:	68bb      	ldr	r3, [r7, #8]
 800c71a:	440b      	add	r3, r1
 800c71c:	3237      	adds	r2, #55	@ 0x37
 800c71e:	b2d2      	uxtb	r2, r2
 800c720:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800c722:	68fb      	ldr	r3, [r7, #12]
 800c724:	011b      	lsls	r3, r3, #4
 800c726:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800c728:	7dfb      	ldrb	r3, [r7, #23]
 800c72a:	005b      	lsls	r3, r3, #1
 800c72c:	3301      	adds	r3, #1
 800c72e:	68ba      	ldr	r2, [r7, #8]
 800c730:	4413      	add	r3, r2
 800c732:	2200      	movs	r2, #0
 800c734:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800c736:	7dfb      	ldrb	r3, [r7, #23]
 800c738:	3301      	adds	r3, #1
 800c73a:	75fb      	strb	r3, [r7, #23]
 800c73c:	7dfa      	ldrb	r2, [r7, #23]
 800c73e:	79fb      	ldrb	r3, [r7, #7]
 800c740:	429a      	cmp	r2, r3
 800c742:	d3d3      	bcc.n	800c6ec <IntToUnicode+0x18>
  }
}
 800c744:	bf00      	nop
 800c746:	bf00      	nop
 800c748:	371c      	adds	r7, #28
 800c74a:	46bd      	mov	sp, r7
 800c74c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c750:	4770      	bx	lr
	...

0800c754 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800c754:	b580      	push	{r7, lr}
 800c756:	b08a      	sub	sp, #40	@ 0x28
 800c758:	af00      	add	r7, sp, #0
 800c75a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c75c:	f107 0314 	add.w	r3, r7, #20
 800c760:	2200      	movs	r2, #0
 800c762:	601a      	str	r2, [r3, #0]
 800c764:	605a      	str	r2, [r3, #4]
 800c766:	609a      	str	r2, [r3, #8]
 800c768:	60da      	str	r2, [r3, #12]
 800c76a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	681b      	ldr	r3, [r3, #0]
 800c770:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800c774:	d13a      	bne.n	800c7ec <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c776:	2300      	movs	r3, #0
 800c778:	613b      	str	r3, [r7, #16]
 800c77a:	4b1e      	ldr	r3, [pc, #120]	@ (800c7f4 <HAL_PCD_MspInit+0xa0>)
 800c77c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c77e:	4a1d      	ldr	r2, [pc, #116]	@ (800c7f4 <HAL_PCD_MspInit+0xa0>)
 800c780:	f043 0301 	orr.w	r3, r3, #1
 800c784:	6313      	str	r3, [r2, #48]	@ 0x30
 800c786:	4b1b      	ldr	r3, [pc, #108]	@ (800c7f4 <HAL_PCD_MspInit+0xa0>)
 800c788:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c78a:	f003 0301 	and.w	r3, r3, #1
 800c78e:	613b      	str	r3, [r7, #16]
 800c790:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800c792:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800c796:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c798:	2302      	movs	r3, #2
 800c79a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c79c:	2300      	movs	r3, #0
 800c79e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c7a0:	2303      	movs	r3, #3
 800c7a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800c7a4:	230a      	movs	r3, #10
 800c7a6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c7a8:	f107 0314 	add.w	r3, r7, #20
 800c7ac:	4619      	mov	r1, r3
 800c7ae:	4812      	ldr	r0, [pc, #72]	@ (800c7f8 <HAL_PCD_MspInit+0xa4>)
 800c7b0:	f7f5 ff16 	bl	80025e0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800c7b4:	4b0f      	ldr	r3, [pc, #60]	@ (800c7f4 <HAL_PCD_MspInit+0xa0>)
 800c7b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c7b8:	4a0e      	ldr	r2, [pc, #56]	@ (800c7f4 <HAL_PCD_MspInit+0xa0>)
 800c7ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c7be:	6353      	str	r3, [r2, #52]	@ 0x34
 800c7c0:	2300      	movs	r3, #0
 800c7c2:	60fb      	str	r3, [r7, #12]
 800c7c4:	4b0b      	ldr	r3, [pc, #44]	@ (800c7f4 <HAL_PCD_MspInit+0xa0>)
 800c7c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c7c8:	4a0a      	ldr	r2, [pc, #40]	@ (800c7f4 <HAL_PCD_MspInit+0xa0>)
 800c7ca:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800c7ce:	6453      	str	r3, [r2, #68]	@ 0x44
 800c7d0:	4b08      	ldr	r3, [pc, #32]	@ (800c7f4 <HAL_PCD_MspInit+0xa0>)
 800c7d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c7d4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c7d8:	60fb      	str	r3, [r7, #12]
 800c7da:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800c7dc:	2200      	movs	r2, #0
 800c7de:	2105      	movs	r1, #5
 800c7e0:	2043      	movs	r0, #67	@ 0x43
 800c7e2:	f7f5 fe41 	bl	8002468 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800c7e6:	2043      	movs	r0, #67	@ 0x43
 800c7e8:	f7f5 fe5a 	bl	80024a0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800c7ec:	bf00      	nop
 800c7ee:	3728      	adds	r7, #40	@ 0x28
 800c7f0:	46bd      	mov	sp, r7
 800c7f2:	bd80      	pop	{r7, pc}
 800c7f4:	40023800 	.word	0x40023800
 800c7f8:	40020000 	.word	0x40020000

0800c7fc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c7fc:	b580      	push	{r7, lr}
 800c7fe:	b082      	sub	sp, #8
 800c800:	af00      	add	r7, sp, #0
 800c802:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800c810:	4619      	mov	r1, r3
 800c812:	4610      	mov	r0, r2
 800c814:	f7fe fa0b 	bl	800ac2e <USBD_LL_SetupStage>
}
 800c818:	bf00      	nop
 800c81a:	3708      	adds	r7, #8
 800c81c:	46bd      	mov	sp, r7
 800c81e:	bd80      	pop	{r7, pc}

0800c820 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c820:	b580      	push	{r7, lr}
 800c822:	b082      	sub	sp, #8
 800c824:	af00      	add	r7, sp, #0
 800c826:	6078      	str	r0, [r7, #4]
 800c828:	460b      	mov	r3, r1
 800c82a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800c832:	78fa      	ldrb	r2, [r7, #3]
 800c834:	6879      	ldr	r1, [r7, #4]
 800c836:	4613      	mov	r3, r2
 800c838:	00db      	lsls	r3, r3, #3
 800c83a:	4413      	add	r3, r2
 800c83c:	009b      	lsls	r3, r3, #2
 800c83e:	440b      	add	r3, r1
 800c840:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800c844:	681a      	ldr	r2, [r3, #0]
 800c846:	78fb      	ldrb	r3, [r7, #3]
 800c848:	4619      	mov	r1, r3
 800c84a:	f7fe fa45 	bl	800acd8 <USBD_LL_DataOutStage>
}
 800c84e:	bf00      	nop
 800c850:	3708      	adds	r7, #8
 800c852:	46bd      	mov	sp, r7
 800c854:	bd80      	pop	{r7, pc}

0800c856 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c856:	b580      	push	{r7, lr}
 800c858:	b082      	sub	sp, #8
 800c85a:	af00      	add	r7, sp, #0
 800c85c:	6078      	str	r0, [r7, #4]
 800c85e:	460b      	mov	r3, r1
 800c860:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800c868:	78fa      	ldrb	r2, [r7, #3]
 800c86a:	6879      	ldr	r1, [r7, #4]
 800c86c:	4613      	mov	r3, r2
 800c86e:	00db      	lsls	r3, r3, #3
 800c870:	4413      	add	r3, r2
 800c872:	009b      	lsls	r3, r3, #2
 800c874:	440b      	add	r3, r1
 800c876:	3320      	adds	r3, #32
 800c878:	681a      	ldr	r2, [r3, #0]
 800c87a:	78fb      	ldrb	r3, [r7, #3]
 800c87c:	4619      	mov	r1, r3
 800c87e:	f7fe fade 	bl	800ae3e <USBD_LL_DataInStage>
}
 800c882:	bf00      	nop
 800c884:	3708      	adds	r7, #8
 800c886:	46bd      	mov	sp, r7
 800c888:	bd80      	pop	{r7, pc}

0800c88a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c88a:	b580      	push	{r7, lr}
 800c88c:	b082      	sub	sp, #8
 800c88e:	af00      	add	r7, sp, #0
 800c890:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c898:	4618      	mov	r0, r3
 800c89a:	f7fe fc18 	bl	800b0ce <USBD_LL_SOF>
}
 800c89e:	bf00      	nop
 800c8a0:	3708      	adds	r7, #8
 800c8a2:	46bd      	mov	sp, r7
 800c8a4:	bd80      	pop	{r7, pc}

0800c8a6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c8a6:	b580      	push	{r7, lr}
 800c8a8:	b084      	sub	sp, #16
 800c8aa:	af00      	add	r7, sp, #0
 800c8ac:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800c8ae:	2301      	movs	r3, #1
 800c8b0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	79db      	ldrb	r3, [r3, #7]
 800c8b6:	2b02      	cmp	r3, #2
 800c8b8:	d001      	beq.n	800c8be <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800c8ba:	f7f4 faa3 	bl	8000e04 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c8c4:	7bfa      	ldrb	r2, [r7, #15]
 800c8c6:	4611      	mov	r1, r2
 800c8c8:	4618      	mov	r0, r3
 800c8ca:	f7fe fbbc 	bl	800b046 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c8d4:	4618      	mov	r0, r3
 800c8d6:	f7fe fb64 	bl	800afa2 <USBD_LL_Reset>
}
 800c8da:	bf00      	nop
 800c8dc:	3710      	adds	r7, #16
 800c8de:	46bd      	mov	sp, r7
 800c8e0:	bd80      	pop	{r7, pc}
	...

0800c8e4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c8e4:	b580      	push	{r7, lr}
 800c8e6:	b082      	sub	sp, #8
 800c8e8:	af00      	add	r7, sp, #0
 800c8ea:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c8f2:	4618      	mov	r0, r3
 800c8f4:	f7fe fbb7 	bl	800b066 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	681b      	ldr	r3, [r3, #0]
 800c8fc:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800c900:	681b      	ldr	r3, [r3, #0]
 800c902:	687a      	ldr	r2, [r7, #4]
 800c904:	6812      	ldr	r2, [r2, #0]
 800c906:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800c90a:	f043 0301 	orr.w	r3, r3, #1
 800c90e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800c910:	687b      	ldr	r3, [r7, #4]
 800c912:	7adb      	ldrb	r3, [r3, #11]
 800c914:	2b00      	cmp	r3, #0
 800c916:	d005      	beq.n	800c924 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c918:	4b04      	ldr	r3, [pc, #16]	@ (800c92c <HAL_PCD_SuspendCallback+0x48>)
 800c91a:	691b      	ldr	r3, [r3, #16]
 800c91c:	4a03      	ldr	r2, [pc, #12]	@ (800c92c <HAL_PCD_SuspendCallback+0x48>)
 800c91e:	f043 0306 	orr.w	r3, r3, #6
 800c922:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800c924:	bf00      	nop
 800c926:	3708      	adds	r7, #8
 800c928:	46bd      	mov	sp, r7
 800c92a:	bd80      	pop	{r7, pc}
 800c92c:	e000ed00 	.word	0xe000ed00

0800c930 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c930:	b580      	push	{r7, lr}
 800c932:	b082      	sub	sp, #8
 800c934:	af00      	add	r7, sp, #0
 800c936:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c93e:	4618      	mov	r0, r3
 800c940:	f7fe fbad 	bl	800b09e <USBD_LL_Resume>
}
 800c944:	bf00      	nop
 800c946:	3708      	adds	r7, #8
 800c948:	46bd      	mov	sp, r7
 800c94a:	bd80      	pop	{r7, pc}

0800c94c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c94c:	b580      	push	{r7, lr}
 800c94e:	b082      	sub	sp, #8
 800c950:	af00      	add	r7, sp, #0
 800c952:	6078      	str	r0, [r7, #4]
 800c954:	460b      	mov	r3, r1
 800c956:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c95e:	78fa      	ldrb	r2, [r7, #3]
 800c960:	4611      	mov	r1, r2
 800c962:	4618      	mov	r0, r3
 800c964:	f7fe fc05 	bl	800b172 <USBD_LL_IsoOUTIncomplete>
}
 800c968:	bf00      	nop
 800c96a:	3708      	adds	r7, #8
 800c96c:	46bd      	mov	sp, r7
 800c96e:	bd80      	pop	{r7, pc}

0800c970 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c970:	b580      	push	{r7, lr}
 800c972:	b082      	sub	sp, #8
 800c974:	af00      	add	r7, sp, #0
 800c976:	6078      	str	r0, [r7, #4]
 800c978:	460b      	mov	r3, r1
 800c97a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800c97c:	687b      	ldr	r3, [r7, #4]
 800c97e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c982:	78fa      	ldrb	r2, [r7, #3]
 800c984:	4611      	mov	r1, r2
 800c986:	4618      	mov	r0, r3
 800c988:	f7fe fbc1 	bl	800b10e <USBD_LL_IsoINIncomplete>
}
 800c98c:	bf00      	nop
 800c98e:	3708      	adds	r7, #8
 800c990:	46bd      	mov	sp, r7
 800c992:	bd80      	pop	{r7, pc}

0800c994 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c994:	b580      	push	{r7, lr}
 800c996:	b082      	sub	sp, #8
 800c998:	af00      	add	r7, sp, #0
 800c99a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c9a2:	4618      	mov	r0, r3
 800c9a4:	f7fe fc17 	bl	800b1d6 <USBD_LL_DevConnected>
}
 800c9a8:	bf00      	nop
 800c9aa:	3708      	adds	r7, #8
 800c9ac:	46bd      	mov	sp, r7
 800c9ae:	bd80      	pop	{r7, pc}

0800c9b0 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c9b0:	b580      	push	{r7, lr}
 800c9b2:	b082      	sub	sp, #8
 800c9b4:	af00      	add	r7, sp, #0
 800c9b6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c9be:	4618      	mov	r0, r3
 800c9c0:	f7fe fc14 	bl	800b1ec <USBD_LL_DevDisconnected>
}
 800c9c4:	bf00      	nop
 800c9c6:	3708      	adds	r7, #8
 800c9c8:	46bd      	mov	sp, r7
 800c9ca:	bd80      	pop	{r7, pc}

0800c9cc <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800c9cc:	b580      	push	{r7, lr}
 800c9ce:	b082      	sub	sp, #8
 800c9d0:	af00      	add	r7, sp, #0
 800c9d2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	781b      	ldrb	r3, [r3, #0]
 800c9d8:	2b00      	cmp	r3, #0
 800c9da:	d13c      	bne.n	800ca56 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800c9dc:	4a20      	ldr	r2, [pc, #128]	@ (800ca60 <USBD_LL_Init+0x94>)
 800c9de:	687b      	ldr	r3, [r7, #4]
 800c9e0:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	4a1e      	ldr	r2, [pc, #120]	@ (800ca60 <USBD_LL_Init+0x94>)
 800c9e8:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800c9ec:	4b1c      	ldr	r3, [pc, #112]	@ (800ca60 <USBD_LL_Init+0x94>)
 800c9ee:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800c9f2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800c9f4:	4b1a      	ldr	r3, [pc, #104]	@ (800ca60 <USBD_LL_Init+0x94>)
 800c9f6:	2204      	movs	r2, #4
 800c9f8:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800c9fa:	4b19      	ldr	r3, [pc, #100]	@ (800ca60 <USBD_LL_Init+0x94>)
 800c9fc:	2202      	movs	r2, #2
 800c9fe:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800ca00:	4b17      	ldr	r3, [pc, #92]	@ (800ca60 <USBD_LL_Init+0x94>)
 800ca02:	2200      	movs	r2, #0
 800ca04:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800ca06:	4b16      	ldr	r3, [pc, #88]	@ (800ca60 <USBD_LL_Init+0x94>)
 800ca08:	2202      	movs	r2, #2
 800ca0a:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800ca0c:	4b14      	ldr	r3, [pc, #80]	@ (800ca60 <USBD_LL_Init+0x94>)
 800ca0e:	2200      	movs	r2, #0
 800ca10:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800ca12:	4b13      	ldr	r3, [pc, #76]	@ (800ca60 <USBD_LL_Init+0x94>)
 800ca14:	2200      	movs	r2, #0
 800ca16:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800ca18:	4b11      	ldr	r3, [pc, #68]	@ (800ca60 <USBD_LL_Init+0x94>)
 800ca1a:	2200      	movs	r2, #0
 800ca1c:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800ca1e:	4b10      	ldr	r3, [pc, #64]	@ (800ca60 <USBD_LL_Init+0x94>)
 800ca20:	2200      	movs	r2, #0
 800ca22:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800ca24:	4b0e      	ldr	r3, [pc, #56]	@ (800ca60 <USBD_LL_Init+0x94>)
 800ca26:	2200      	movs	r2, #0
 800ca28:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800ca2a:	480d      	ldr	r0, [pc, #52]	@ (800ca60 <USBD_LL_Init+0x94>)
 800ca2c:	f7f5 ff8e 	bl	800294c <HAL_PCD_Init>
 800ca30:	4603      	mov	r3, r0
 800ca32:	2b00      	cmp	r3, #0
 800ca34:	d001      	beq.n	800ca3a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800ca36:	f7f4 f9e5 	bl	8000e04 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800ca3a:	2180      	movs	r1, #128	@ 0x80
 800ca3c:	4808      	ldr	r0, [pc, #32]	@ (800ca60 <USBD_LL_Init+0x94>)
 800ca3e:	f7f7 f9a2 	bl	8003d86 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800ca42:	2240      	movs	r2, #64	@ 0x40
 800ca44:	2100      	movs	r1, #0
 800ca46:	4806      	ldr	r0, [pc, #24]	@ (800ca60 <USBD_LL_Init+0x94>)
 800ca48:	f7f7 f956 	bl	8003cf8 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800ca4c:	2280      	movs	r2, #128	@ 0x80
 800ca4e:	2101      	movs	r1, #1
 800ca50:	4803      	ldr	r0, [pc, #12]	@ (800ca60 <USBD_LL_Init+0x94>)
 800ca52:	f7f7 f951 	bl	8003cf8 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800ca56:	2300      	movs	r3, #0
}
 800ca58:	4618      	mov	r0, r3
 800ca5a:	3708      	adds	r7, #8
 800ca5c:	46bd      	mov	sp, r7
 800ca5e:	bd80      	pop	{r7, pc}
 800ca60:	20005ad4 	.word	0x20005ad4

0800ca64 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800ca64:	b580      	push	{r7, lr}
 800ca66:	b084      	sub	sp, #16
 800ca68:	af00      	add	r7, sp, #0
 800ca6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ca6c:	2300      	movs	r3, #0
 800ca6e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ca70:	2300      	movs	r3, #0
 800ca72:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ca7a:	4618      	mov	r0, r3
 800ca7c:	f7f6 f875 	bl	8002b6a <HAL_PCD_Start>
 800ca80:	4603      	mov	r3, r0
 800ca82:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ca84:	7bfb      	ldrb	r3, [r7, #15]
 800ca86:	4618      	mov	r0, r3
 800ca88:	f000 f930 	bl	800ccec <USBD_Get_USB_Status>
 800ca8c:	4603      	mov	r3, r0
 800ca8e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ca90:	7bbb      	ldrb	r3, [r7, #14]
}
 800ca92:	4618      	mov	r0, r3
 800ca94:	3710      	adds	r7, #16
 800ca96:	46bd      	mov	sp, r7
 800ca98:	bd80      	pop	{r7, pc}

0800ca9a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800ca9a:	b580      	push	{r7, lr}
 800ca9c:	b084      	sub	sp, #16
 800ca9e:	af00      	add	r7, sp, #0
 800caa0:	6078      	str	r0, [r7, #4]
 800caa2:	4608      	mov	r0, r1
 800caa4:	4611      	mov	r1, r2
 800caa6:	461a      	mov	r2, r3
 800caa8:	4603      	mov	r3, r0
 800caaa:	70fb      	strb	r3, [r7, #3]
 800caac:	460b      	mov	r3, r1
 800caae:	70bb      	strb	r3, [r7, #2]
 800cab0:	4613      	mov	r3, r2
 800cab2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cab4:	2300      	movs	r3, #0
 800cab6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cab8:	2300      	movs	r3, #0
 800caba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800cac2:	78bb      	ldrb	r3, [r7, #2]
 800cac4:	883a      	ldrh	r2, [r7, #0]
 800cac6:	78f9      	ldrb	r1, [r7, #3]
 800cac8:	f7f6 fd49 	bl	800355e <HAL_PCD_EP_Open>
 800cacc:	4603      	mov	r3, r0
 800cace:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cad0:	7bfb      	ldrb	r3, [r7, #15]
 800cad2:	4618      	mov	r0, r3
 800cad4:	f000 f90a 	bl	800ccec <USBD_Get_USB_Status>
 800cad8:	4603      	mov	r3, r0
 800cada:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cadc:	7bbb      	ldrb	r3, [r7, #14]
}
 800cade:	4618      	mov	r0, r3
 800cae0:	3710      	adds	r7, #16
 800cae2:	46bd      	mov	sp, r7
 800cae4:	bd80      	pop	{r7, pc}

0800cae6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cae6:	b580      	push	{r7, lr}
 800cae8:	b084      	sub	sp, #16
 800caea:	af00      	add	r7, sp, #0
 800caec:	6078      	str	r0, [r7, #4]
 800caee:	460b      	mov	r3, r1
 800caf0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800caf2:	2300      	movs	r3, #0
 800caf4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800caf6:	2300      	movs	r3, #0
 800caf8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800cb00:	78fa      	ldrb	r2, [r7, #3]
 800cb02:	4611      	mov	r1, r2
 800cb04:	4618      	mov	r0, r3
 800cb06:	f7f6 fd94 	bl	8003632 <HAL_PCD_EP_Close>
 800cb0a:	4603      	mov	r3, r0
 800cb0c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cb0e:	7bfb      	ldrb	r3, [r7, #15]
 800cb10:	4618      	mov	r0, r3
 800cb12:	f000 f8eb 	bl	800ccec <USBD_Get_USB_Status>
 800cb16:	4603      	mov	r3, r0
 800cb18:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cb1a:	7bbb      	ldrb	r3, [r7, #14]
}
 800cb1c:	4618      	mov	r0, r3
 800cb1e:	3710      	adds	r7, #16
 800cb20:	46bd      	mov	sp, r7
 800cb22:	bd80      	pop	{r7, pc}

0800cb24 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cb24:	b580      	push	{r7, lr}
 800cb26:	b084      	sub	sp, #16
 800cb28:	af00      	add	r7, sp, #0
 800cb2a:	6078      	str	r0, [r7, #4]
 800cb2c:	460b      	mov	r3, r1
 800cb2e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cb30:	2300      	movs	r3, #0
 800cb32:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cb34:	2300      	movs	r3, #0
 800cb36:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800cb3e:	78fa      	ldrb	r2, [r7, #3]
 800cb40:	4611      	mov	r1, r2
 800cb42:	4618      	mov	r0, r3
 800cb44:	f7f6 fe34 	bl	80037b0 <HAL_PCD_EP_SetStall>
 800cb48:	4603      	mov	r3, r0
 800cb4a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cb4c:	7bfb      	ldrb	r3, [r7, #15]
 800cb4e:	4618      	mov	r0, r3
 800cb50:	f000 f8cc 	bl	800ccec <USBD_Get_USB_Status>
 800cb54:	4603      	mov	r3, r0
 800cb56:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cb58:	7bbb      	ldrb	r3, [r7, #14]
}
 800cb5a:	4618      	mov	r0, r3
 800cb5c:	3710      	adds	r7, #16
 800cb5e:	46bd      	mov	sp, r7
 800cb60:	bd80      	pop	{r7, pc}

0800cb62 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cb62:	b580      	push	{r7, lr}
 800cb64:	b084      	sub	sp, #16
 800cb66:	af00      	add	r7, sp, #0
 800cb68:	6078      	str	r0, [r7, #4]
 800cb6a:	460b      	mov	r3, r1
 800cb6c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cb6e:	2300      	movs	r3, #0
 800cb70:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cb72:	2300      	movs	r3, #0
 800cb74:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800cb76:	687b      	ldr	r3, [r7, #4]
 800cb78:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800cb7c:	78fa      	ldrb	r2, [r7, #3]
 800cb7e:	4611      	mov	r1, r2
 800cb80:	4618      	mov	r0, r3
 800cb82:	f7f6 fe78 	bl	8003876 <HAL_PCD_EP_ClrStall>
 800cb86:	4603      	mov	r3, r0
 800cb88:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cb8a:	7bfb      	ldrb	r3, [r7, #15]
 800cb8c:	4618      	mov	r0, r3
 800cb8e:	f000 f8ad 	bl	800ccec <USBD_Get_USB_Status>
 800cb92:	4603      	mov	r3, r0
 800cb94:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cb96:	7bbb      	ldrb	r3, [r7, #14]
}
 800cb98:	4618      	mov	r0, r3
 800cb9a:	3710      	adds	r7, #16
 800cb9c:	46bd      	mov	sp, r7
 800cb9e:	bd80      	pop	{r7, pc}

0800cba0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cba0:	b480      	push	{r7}
 800cba2:	b085      	sub	sp, #20
 800cba4:	af00      	add	r7, sp, #0
 800cba6:	6078      	str	r0, [r7, #4]
 800cba8:	460b      	mov	r3, r1
 800cbaa:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800cbb2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800cbb4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800cbb8:	2b00      	cmp	r3, #0
 800cbba:	da0b      	bge.n	800cbd4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800cbbc:	78fb      	ldrb	r3, [r7, #3]
 800cbbe:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800cbc2:	68f9      	ldr	r1, [r7, #12]
 800cbc4:	4613      	mov	r3, r2
 800cbc6:	00db      	lsls	r3, r3, #3
 800cbc8:	4413      	add	r3, r2
 800cbca:	009b      	lsls	r3, r3, #2
 800cbcc:	440b      	add	r3, r1
 800cbce:	3316      	adds	r3, #22
 800cbd0:	781b      	ldrb	r3, [r3, #0]
 800cbd2:	e00b      	b.n	800cbec <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800cbd4:	78fb      	ldrb	r3, [r7, #3]
 800cbd6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800cbda:	68f9      	ldr	r1, [r7, #12]
 800cbdc:	4613      	mov	r3, r2
 800cbde:	00db      	lsls	r3, r3, #3
 800cbe0:	4413      	add	r3, r2
 800cbe2:	009b      	lsls	r3, r3, #2
 800cbe4:	440b      	add	r3, r1
 800cbe6:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800cbea:	781b      	ldrb	r3, [r3, #0]
  }
}
 800cbec:	4618      	mov	r0, r3
 800cbee:	3714      	adds	r7, #20
 800cbf0:	46bd      	mov	sp, r7
 800cbf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbf6:	4770      	bx	lr

0800cbf8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800cbf8:	b580      	push	{r7, lr}
 800cbfa:	b084      	sub	sp, #16
 800cbfc:	af00      	add	r7, sp, #0
 800cbfe:	6078      	str	r0, [r7, #4]
 800cc00:	460b      	mov	r3, r1
 800cc02:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cc04:	2300      	movs	r3, #0
 800cc06:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cc08:	2300      	movs	r3, #0
 800cc0a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800cc0c:	687b      	ldr	r3, [r7, #4]
 800cc0e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800cc12:	78fa      	ldrb	r2, [r7, #3]
 800cc14:	4611      	mov	r1, r2
 800cc16:	4618      	mov	r0, r3
 800cc18:	f7f6 fc7d 	bl	8003516 <HAL_PCD_SetAddress>
 800cc1c:	4603      	mov	r3, r0
 800cc1e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cc20:	7bfb      	ldrb	r3, [r7, #15]
 800cc22:	4618      	mov	r0, r3
 800cc24:	f000 f862 	bl	800ccec <USBD_Get_USB_Status>
 800cc28:	4603      	mov	r3, r0
 800cc2a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cc2c:	7bbb      	ldrb	r3, [r7, #14]
}
 800cc2e:	4618      	mov	r0, r3
 800cc30:	3710      	adds	r7, #16
 800cc32:	46bd      	mov	sp, r7
 800cc34:	bd80      	pop	{r7, pc}

0800cc36 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800cc36:	b580      	push	{r7, lr}
 800cc38:	b086      	sub	sp, #24
 800cc3a:	af00      	add	r7, sp, #0
 800cc3c:	60f8      	str	r0, [r7, #12]
 800cc3e:	607a      	str	r2, [r7, #4]
 800cc40:	603b      	str	r3, [r7, #0]
 800cc42:	460b      	mov	r3, r1
 800cc44:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cc46:	2300      	movs	r3, #0
 800cc48:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cc4a:	2300      	movs	r3, #0
 800cc4c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800cc4e:	68fb      	ldr	r3, [r7, #12]
 800cc50:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800cc54:	7af9      	ldrb	r1, [r7, #11]
 800cc56:	683b      	ldr	r3, [r7, #0]
 800cc58:	687a      	ldr	r2, [r7, #4]
 800cc5a:	f7f6 fd6f 	bl	800373c <HAL_PCD_EP_Transmit>
 800cc5e:	4603      	mov	r3, r0
 800cc60:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cc62:	7dfb      	ldrb	r3, [r7, #23]
 800cc64:	4618      	mov	r0, r3
 800cc66:	f000 f841 	bl	800ccec <USBD_Get_USB_Status>
 800cc6a:	4603      	mov	r3, r0
 800cc6c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800cc6e:	7dbb      	ldrb	r3, [r7, #22]
}
 800cc70:	4618      	mov	r0, r3
 800cc72:	3718      	adds	r7, #24
 800cc74:	46bd      	mov	sp, r7
 800cc76:	bd80      	pop	{r7, pc}

0800cc78 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800cc78:	b580      	push	{r7, lr}
 800cc7a:	b086      	sub	sp, #24
 800cc7c:	af00      	add	r7, sp, #0
 800cc7e:	60f8      	str	r0, [r7, #12]
 800cc80:	607a      	str	r2, [r7, #4]
 800cc82:	603b      	str	r3, [r7, #0]
 800cc84:	460b      	mov	r3, r1
 800cc86:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cc88:	2300      	movs	r3, #0
 800cc8a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cc8c:	2300      	movs	r3, #0
 800cc8e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800cc90:	68fb      	ldr	r3, [r7, #12]
 800cc92:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800cc96:	7af9      	ldrb	r1, [r7, #11]
 800cc98:	683b      	ldr	r3, [r7, #0]
 800cc9a:	687a      	ldr	r2, [r7, #4]
 800cc9c:	f7f6 fd13 	bl	80036c6 <HAL_PCD_EP_Receive>
 800cca0:	4603      	mov	r3, r0
 800cca2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cca4:	7dfb      	ldrb	r3, [r7, #23]
 800cca6:	4618      	mov	r0, r3
 800cca8:	f000 f820 	bl	800ccec <USBD_Get_USB_Status>
 800ccac:	4603      	mov	r3, r0
 800ccae:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ccb0:	7dbb      	ldrb	r3, [r7, #22]
}
 800ccb2:	4618      	mov	r0, r3
 800ccb4:	3718      	adds	r7, #24
 800ccb6:	46bd      	mov	sp, r7
 800ccb8:	bd80      	pop	{r7, pc}
	...

0800ccbc <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800ccbc:	b480      	push	{r7}
 800ccbe:	b083      	sub	sp, #12
 800ccc0:	af00      	add	r7, sp, #0
 800ccc2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800ccc4:	4b03      	ldr	r3, [pc, #12]	@ (800ccd4 <USBD_static_malloc+0x18>)
}
 800ccc6:	4618      	mov	r0, r3
 800ccc8:	370c      	adds	r7, #12
 800ccca:	46bd      	mov	sp, r7
 800cccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccd0:	4770      	bx	lr
 800ccd2:	bf00      	nop
 800ccd4:	20005fb8 	.word	0x20005fb8

0800ccd8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800ccd8:	b480      	push	{r7}
 800ccda:	b083      	sub	sp, #12
 800ccdc:	af00      	add	r7, sp, #0
 800ccde:	6078      	str	r0, [r7, #4]

}
 800cce0:	bf00      	nop
 800cce2:	370c      	adds	r7, #12
 800cce4:	46bd      	mov	sp, r7
 800cce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccea:	4770      	bx	lr

0800ccec <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800ccec:	b480      	push	{r7}
 800ccee:	b085      	sub	sp, #20
 800ccf0:	af00      	add	r7, sp, #0
 800ccf2:	4603      	mov	r3, r0
 800ccf4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ccf6:	2300      	movs	r3, #0
 800ccf8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800ccfa:	79fb      	ldrb	r3, [r7, #7]
 800ccfc:	2b03      	cmp	r3, #3
 800ccfe:	d817      	bhi.n	800cd30 <USBD_Get_USB_Status+0x44>
 800cd00:	a201      	add	r2, pc, #4	@ (adr r2, 800cd08 <USBD_Get_USB_Status+0x1c>)
 800cd02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cd06:	bf00      	nop
 800cd08:	0800cd19 	.word	0x0800cd19
 800cd0c:	0800cd1f 	.word	0x0800cd1f
 800cd10:	0800cd25 	.word	0x0800cd25
 800cd14:	0800cd2b 	.word	0x0800cd2b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800cd18:	2300      	movs	r3, #0
 800cd1a:	73fb      	strb	r3, [r7, #15]
    break;
 800cd1c:	e00b      	b.n	800cd36 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800cd1e:	2303      	movs	r3, #3
 800cd20:	73fb      	strb	r3, [r7, #15]
    break;
 800cd22:	e008      	b.n	800cd36 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800cd24:	2301      	movs	r3, #1
 800cd26:	73fb      	strb	r3, [r7, #15]
    break;
 800cd28:	e005      	b.n	800cd36 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800cd2a:	2303      	movs	r3, #3
 800cd2c:	73fb      	strb	r3, [r7, #15]
    break;
 800cd2e:	e002      	b.n	800cd36 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800cd30:	2303      	movs	r3, #3
 800cd32:	73fb      	strb	r3, [r7, #15]
    break;
 800cd34:	bf00      	nop
  }
  return usb_status;
 800cd36:	7bfb      	ldrb	r3, [r7, #15]
}
 800cd38:	4618      	mov	r0, r3
 800cd3a:	3714      	adds	r7, #20
 800cd3c:	46bd      	mov	sp, r7
 800cd3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd42:	4770      	bx	lr

0800cd44 <__itoa>:
 800cd44:	1e93      	subs	r3, r2, #2
 800cd46:	2b22      	cmp	r3, #34	@ 0x22
 800cd48:	b510      	push	{r4, lr}
 800cd4a:	460c      	mov	r4, r1
 800cd4c:	d904      	bls.n	800cd58 <__itoa+0x14>
 800cd4e:	2300      	movs	r3, #0
 800cd50:	700b      	strb	r3, [r1, #0]
 800cd52:	461c      	mov	r4, r3
 800cd54:	4620      	mov	r0, r4
 800cd56:	bd10      	pop	{r4, pc}
 800cd58:	2a0a      	cmp	r2, #10
 800cd5a:	d109      	bne.n	800cd70 <__itoa+0x2c>
 800cd5c:	2800      	cmp	r0, #0
 800cd5e:	da07      	bge.n	800cd70 <__itoa+0x2c>
 800cd60:	232d      	movs	r3, #45	@ 0x2d
 800cd62:	700b      	strb	r3, [r1, #0]
 800cd64:	4240      	negs	r0, r0
 800cd66:	2101      	movs	r1, #1
 800cd68:	4421      	add	r1, r4
 800cd6a:	f000 f805 	bl	800cd78 <__utoa>
 800cd6e:	e7f1      	b.n	800cd54 <__itoa+0x10>
 800cd70:	2100      	movs	r1, #0
 800cd72:	e7f9      	b.n	800cd68 <__itoa+0x24>

0800cd74 <itoa>:
 800cd74:	f7ff bfe6 	b.w	800cd44 <__itoa>

0800cd78 <__utoa>:
 800cd78:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cd7a:	4c1f      	ldr	r4, [pc, #124]	@ (800cdf8 <__utoa+0x80>)
 800cd7c:	b08b      	sub	sp, #44	@ 0x2c
 800cd7e:	4605      	mov	r5, r0
 800cd80:	460b      	mov	r3, r1
 800cd82:	466e      	mov	r6, sp
 800cd84:	f104 0c20 	add.w	ip, r4, #32
 800cd88:	6820      	ldr	r0, [r4, #0]
 800cd8a:	6861      	ldr	r1, [r4, #4]
 800cd8c:	4637      	mov	r7, r6
 800cd8e:	c703      	stmia	r7!, {r0, r1}
 800cd90:	3408      	adds	r4, #8
 800cd92:	4564      	cmp	r4, ip
 800cd94:	463e      	mov	r6, r7
 800cd96:	d1f7      	bne.n	800cd88 <__utoa+0x10>
 800cd98:	7921      	ldrb	r1, [r4, #4]
 800cd9a:	7139      	strb	r1, [r7, #4]
 800cd9c:	1e91      	subs	r1, r2, #2
 800cd9e:	6820      	ldr	r0, [r4, #0]
 800cda0:	6038      	str	r0, [r7, #0]
 800cda2:	2922      	cmp	r1, #34	@ 0x22
 800cda4:	f04f 0100 	mov.w	r1, #0
 800cda8:	d904      	bls.n	800cdb4 <__utoa+0x3c>
 800cdaa:	7019      	strb	r1, [r3, #0]
 800cdac:	460b      	mov	r3, r1
 800cdae:	4618      	mov	r0, r3
 800cdb0:	b00b      	add	sp, #44	@ 0x2c
 800cdb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cdb4:	1e58      	subs	r0, r3, #1
 800cdb6:	4684      	mov	ip, r0
 800cdb8:	fbb5 f7f2 	udiv	r7, r5, r2
 800cdbc:	fb02 5617 	mls	r6, r2, r7, r5
 800cdc0:	3628      	adds	r6, #40	@ 0x28
 800cdc2:	446e      	add	r6, sp
 800cdc4:	460c      	mov	r4, r1
 800cdc6:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800cdca:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800cdce:	462e      	mov	r6, r5
 800cdd0:	42b2      	cmp	r2, r6
 800cdd2:	f101 0101 	add.w	r1, r1, #1
 800cdd6:	463d      	mov	r5, r7
 800cdd8:	d9ee      	bls.n	800cdb8 <__utoa+0x40>
 800cdda:	2200      	movs	r2, #0
 800cddc:	545a      	strb	r2, [r3, r1]
 800cdde:	1919      	adds	r1, r3, r4
 800cde0:	1aa5      	subs	r5, r4, r2
 800cde2:	42aa      	cmp	r2, r5
 800cde4:	dae3      	bge.n	800cdae <__utoa+0x36>
 800cde6:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800cdea:	780e      	ldrb	r6, [r1, #0]
 800cdec:	7006      	strb	r6, [r0, #0]
 800cdee:	3201      	adds	r2, #1
 800cdf0:	f801 5901 	strb.w	r5, [r1], #-1
 800cdf4:	e7f4      	b.n	800cde0 <__utoa+0x68>
 800cdf6:	bf00      	nop
 800cdf8:	0800f1ac 	.word	0x0800f1ac

0800cdfc <sniprintf>:
 800cdfc:	b40c      	push	{r2, r3}
 800cdfe:	b530      	push	{r4, r5, lr}
 800ce00:	4b18      	ldr	r3, [pc, #96]	@ (800ce64 <sniprintf+0x68>)
 800ce02:	1e0c      	subs	r4, r1, #0
 800ce04:	681d      	ldr	r5, [r3, #0]
 800ce06:	b09d      	sub	sp, #116	@ 0x74
 800ce08:	da08      	bge.n	800ce1c <sniprintf+0x20>
 800ce0a:	238b      	movs	r3, #139	@ 0x8b
 800ce0c:	602b      	str	r3, [r5, #0]
 800ce0e:	f04f 30ff 	mov.w	r0, #4294967295
 800ce12:	b01d      	add	sp, #116	@ 0x74
 800ce14:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ce18:	b002      	add	sp, #8
 800ce1a:	4770      	bx	lr
 800ce1c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800ce20:	f8ad 3014 	strh.w	r3, [sp, #20]
 800ce24:	f04f 0300 	mov.w	r3, #0
 800ce28:	931b      	str	r3, [sp, #108]	@ 0x6c
 800ce2a:	bf14      	ite	ne
 800ce2c:	f104 33ff 	addne.w	r3, r4, #4294967295
 800ce30:	4623      	moveq	r3, r4
 800ce32:	9304      	str	r3, [sp, #16]
 800ce34:	9307      	str	r3, [sp, #28]
 800ce36:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800ce3a:	9002      	str	r0, [sp, #8]
 800ce3c:	9006      	str	r0, [sp, #24]
 800ce3e:	f8ad 3016 	strh.w	r3, [sp, #22]
 800ce42:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800ce44:	ab21      	add	r3, sp, #132	@ 0x84
 800ce46:	a902      	add	r1, sp, #8
 800ce48:	4628      	mov	r0, r5
 800ce4a:	9301      	str	r3, [sp, #4]
 800ce4c:	f000 fa22 	bl	800d294 <_svfiprintf_r>
 800ce50:	1c43      	adds	r3, r0, #1
 800ce52:	bfbc      	itt	lt
 800ce54:	238b      	movlt	r3, #139	@ 0x8b
 800ce56:	602b      	strlt	r3, [r5, #0]
 800ce58:	2c00      	cmp	r4, #0
 800ce5a:	d0da      	beq.n	800ce12 <sniprintf+0x16>
 800ce5c:	9b02      	ldr	r3, [sp, #8]
 800ce5e:	2200      	movs	r2, #0
 800ce60:	701a      	strb	r2, [r3, #0]
 800ce62:	e7d6      	b.n	800ce12 <sniprintf+0x16>
 800ce64:	20000134 	.word	0x20000134

0800ce68 <siprintf>:
 800ce68:	b40e      	push	{r1, r2, r3}
 800ce6a:	b510      	push	{r4, lr}
 800ce6c:	b09d      	sub	sp, #116	@ 0x74
 800ce6e:	ab1f      	add	r3, sp, #124	@ 0x7c
 800ce70:	9002      	str	r0, [sp, #8]
 800ce72:	9006      	str	r0, [sp, #24]
 800ce74:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800ce78:	480a      	ldr	r0, [pc, #40]	@ (800cea4 <siprintf+0x3c>)
 800ce7a:	9107      	str	r1, [sp, #28]
 800ce7c:	9104      	str	r1, [sp, #16]
 800ce7e:	490a      	ldr	r1, [pc, #40]	@ (800cea8 <siprintf+0x40>)
 800ce80:	f853 2b04 	ldr.w	r2, [r3], #4
 800ce84:	9105      	str	r1, [sp, #20]
 800ce86:	2400      	movs	r4, #0
 800ce88:	a902      	add	r1, sp, #8
 800ce8a:	6800      	ldr	r0, [r0, #0]
 800ce8c:	9301      	str	r3, [sp, #4]
 800ce8e:	941b      	str	r4, [sp, #108]	@ 0x6c
 800ce90:	f000 fa00 	bl	800d294 <_svfiprintf_r>
 800ce94:	9b02      	ldr	r3, [sp, #8]
 800ce96:	701c      	strb	r4, [r3, #0]
 800ce98:	b01d      	add	sp, #116	@ 0x74
 800ce9a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ce9e:	b003      	add	sp, #12
 800cea0:	4770      	bx	lr
 800cea2:	bf00      	nop
 800cea4:	20000134 	.word	0x20000134
 800cea8:	ffff0208 	.word	0xffff0208

0800ceac <memset>:
 800ceac:	4402      	add	r2, r0
 800ceae:	4603      	mov	r3, r0
 800ceb0:	4293      	cmp	r3, r2
 800ceb2:	d100      	bne.n	800ceb6 <memset+0xa>
 800ceb4:	4770      	bx	lr
 800ceb6:	f803 1b01 	strb.w	r1, [r3], #1
 800ceba:	e7f9      	b.n	800ceb0 <memset+0x4>

0800cebc <_reclaim_reent>:
 800cebc:	4b2d      	ldr	r3, [pc, #180]	@ (800cf74 <_reclaim_reent+0xb8>)
 800cebe:	681b      	ldr	r3, [r3, #0]
 800cec0:	4283      	cmp	r3, r0
 800cec2:	b570      	push	{r4, r5, r6, lr}
 800cec4:	4604      	mov	r4, r0
 800cec6:	d053      	beq.n	800cf70 <_reclaim_reent+0xb4>
 800cec8:	69c3      	ldr	r3, [r0, #28]
 800ceca:	b31b      	cbz	r3, 800cf14 <_reclaim_reent+0x58>
 800cecc:	68db      	ldr	r3, [r3, #12]
 800cece:	b163      	cbz	r3, 800ceea <_reclaim_reent+0x2e>
 800ced0:	2500      	movs	r5, #0
 800ced2:	69e3      	ldr	r3, [r4, #28]
 800ced4:	68db      	ldr	r3, [r3, #12]
 800ced6:	5959      	ldr	r1, [r3, r5]
 800ced8:	b9b1      	cbnz	r1, 800cf08 <_reclaim_reent+0x4c>
 800ceda:	3504      	adds	r5, #4
 800cedc:	2d80      	cmp	r5, #128	@ 0x80
 800cede:	d1f8      	bne.n	800ced2 <_reclaim_reent+0x16>
 800cee0:	69e3      	ldr	r3, [r4, #28]
 800cee2:	4620      	mov	r0, r4
 800cee4:	68d9      	ldr	r1, [r3, #12]
 800cee6:	f000 f881 	bl	800cfec <_free_r>
 800ceea:	69e3      	ldr	r3, [r4, #28]
 800ceec:	6819      	ldr	r1, [r3, #0]
 800ceee:	b111      	cbz	r1, 800cef6 <_reclaim_reent+0x3a>
 800cef0:	4620      	mov	r0, r4
 800cef2:	f000 f87b 	bl	800cfec <_free_r>
 800cef6:	69e3      	ldr	r3, [r4, #28]
 800cef8:	689d      	ldr	r5, [r3, #8]
 800cefa:	b15d      	cbz	r5, 800cf14 <_reclaim_reent+0x58>
 800cefc:	4629      	mov	r1, r5
 800cefe:	4620      	mov	r0, r4
 800cf00:	682d      	ldr	r5, [r5, #0]
 800cf02:	f000 f873 	bl	800cfec <_free_r>
 800cf06:	e7f8      	b.n	800cefa <_reclaim_reent+0x3e>
 800cf08:	680e      	ldr	r6, [r1, #0]
 800cf0a:	4620      	mov	r0, r4
 800cf0c:	f000 f86e 	bl	800cfec <_free_r>
 800cf10:	4631      	mov	r1, r6
 800cf12:	e7e1      	b.n	800ced8 <_reclaim_reent+0x1c>
 800cf14:	6961      	ldr	r1, [r4, #20]
 800cf16:	b111      	cbz	r1, 800cf1e <_reclaim_reent+0x62>
 800cf18:	4620      	mov	r0, r4
 800cf1a:	f000 f867 	bl	800cfec <_free_r>
 800cf1e:	69e1      	ldr	r1, [r4, #28]
 800cf20:	b111      	cbz	r1, 800cf28 <_reclaim_reent+0x6c>
 800cf22:	4620      	mov	r0, r4
 800cf24:	f000 f862 	bl	800cfec <_free_r>
 800cf28:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800cf2a:	b111      	cbz	r1, 800cf32 <_reclaim_reent+0x76>
 800cf2c:	4620      	mov	r0, r4
 800cf2e:	f000 f85d 	bl	800cfec <_free_r>
 800cf32:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800cf34:	b111      	cbz	r1, 800cf3c <_reclaim_reent+0x80>
 800cf36:	4620      	mov	r0, r4
 800cf38:	f000 f858 	bl	800cfec <_free_r>
 800cf3c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800cf3e:	b111      	cbz	r1, 800cf46 <_reclaim_reent+0x8a>
 800cf40:	4620      	mov	r0, r4
 800cf42:	f000 f853 	bl	800cfec <_free_r>
 800cf46:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800cf48:	b111      	cbz	r1, 800cf50 <_reclaim_reent+0x94>
 800cf4a:	4620      	mov	r0, r4
 800cf4c:	f000 f84e 	bl	800cfec <_free_r>
 800cf50:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800cf52:	b111      	cbz	r1, 800cf5a <_reclaim_reent+0x9e>
 800cf54:	4620      	mov	r0, r4
 800cf56:	f000 f849 	bl	800cfec <_free_r>
 800cf5a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800cf5c:	b111      	cbz	r1, 800cf64 <_reclaim_reent+0xa8>
 800cf5e:	4620      	mov	r0, r4
 800cf60:	f000 f844 	bl	800cfec <_free_r>
 800cf64:	6a23      	ldr	r3, [r4, #32]
 800cf66:	b11b      	cbz	r3, 800cf70 <_reclaim_reent+0xb4>
 800cf68:	4620      	mov	r0, r4
 800cf6a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800cf6e:	4718      	bx	r3
 800cf70:	bd70      	pop	{r4, r5, r6, pc}
 800cf72:	bf00      	nop
 800cf74:	20000134 	.word	0x20000134

0800cf78 <__errno>:
 800cf78:	4b01      	ldr	r3, [pc, #4]	@ (800cf80 <__errno+0x8>)
 800cf7a:	6818      	ldr	r0, [r3, #0]
 800cf7c:	4770      	bx	lr
 800cf7e:	bf00      	nop
 800cf80:	20000134 	.word	0x20000134

0800cf84 <__libc_init_array>:
 800cf84:	b570      	push	{r4, r5, r6, lr}
 800cf86:	4d0d      	ldr	r5, [pc, #52]	@ (800cfbc <__libc_init_array+0x38>)
 800cf88:	4c0d      	ldr	r4, [pc, #52]	@ (800cfc0 <__libc_init_array+0x3c>)
 800cf8a:	1b64      	subs	r4, r4, r5
 800cf8c:	10a4      	asrs	r4, r4, #2
 800cf8e:	2600      	movs	r6, #0
 800cf90:	42a6      	cmp	r6, r4
 800cf92:	d109      	bne.n	800cfa8 <__libc_init_array+0x24>
 800cf94:	4d0b      	ldr	r5, [pc, #44]	@ (800cfc4 <__libc_init_array+0x40>)
 800cf96:	4c0c      	ldr	r4, [pc, #48]	@ (800cfc8 <__libc_init_array+0x44>)
 800cf98:	f000 fc64 	bl	800d864 <_init>
 800cf9c:	1b64      	subs	r4, r4, r5
 800cf9e:	10a4      	asrs	r4, r4, #2
 800cfa0:	2600      	movs	r6, #0
 800cfa2:	42a6      	cmp	r6, r4
 800cfa4:	d105      	bne.n	800cfb2 <__libc_init_array+0x2e>
 800cfa6:	bd70      	pop	{r4, r5, r6, pc}
 800cfa8:	f855 3b04 	ldr.w	r3, [r5], #4
 800cfac:	4798      	blx	r3
 800cfae:	3601      	adds	r6, #1
 800cfb0:	e7ee      	b.n	800cf90 <__libc_init_array+0xc>
 800cfb2:	f855 3b04 	ldr.w	r3, [r5], #4
 800cfb6:	4798      	blx	r3
 800cfb8:	3601      	adds	r6, #1
 800cfba:	e7f2      	b.n	800cfa2 <__libc_init_array+0x1e>
 800cfbc:	0800f20c 	.word	0x0800f20c
 800cfc0:	0800f20c 	.word	0x0800f20c
 800cfc4:	0800f20c 	.word	0x0800f20c
 800cfc8:	0800f210 	.word	0x0800f210

0800cfcc <__retarget_lock_acquire_recursive>:
 800cfcc:	4770      	bx	lr

0800cfce <__retarget_lock_release_recursive>:
 800cfce:	4770      	bx	lr

0800cfd0 <memcpy>:
 800cfd0:	440a      	add	r2, r1
 800cfd2:	4291      	cmp	r1, r2
 800cfd4:	f100 33ff 	add.w	r3, r0, #4294967295
 800cfd8:	d100      	bne.n	800cfdc <memcpy+0xc>
 800cfda:	4770      	bx	lr
 800cfdc:	b510      	push	{r4, lr}
 800cfde:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cfe2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cfe6:	4291      	cmp	r1, r2
 800cfe8:	d1f9      	bne.n	800cfde <memcpy+0xe>
 800cfea:	bd10      	pop	{r4, pc}

0800cfec <_free_r>:
 800cfec:	b538      	push	{r3, r4, r5, lr}
 800cfee:	4605      	mov	r5, r0
 800cff0:	2900      	cmp	r1, #0
 800cff2:	d041      	beq.n	800d078 <_free_r+0x8c>
 800cff4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cff8:	1f0c      	subs	r4, r1, #4
 800cffa:	2b00      	cmp	r3, #0
 800cffc:	bfb8      	it	lt
 800cffe:	18e4      	addlt	r4, r4, r3
 800d000:	f000 f8e0 	bl	800d1c4 <__malloc_lock>
 800d004:	4a1d      	ldr	r2, [pc, #116]	@ (800d07c <_free_r+0x90>)
 800d006:	6813      	ldr	r3, [r2, #0]
 800d008:	b933      	cbnz	r3, 800d018 <_free_r+0x2c>
 800d00a:	6063      	str	r3, [r4, #4]
 800d00c:	6014      	str	r4, [r2, #0]
 800d00e:	4628      	mov	r0, r5
 800d010:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d014:	f000 b8dc 	b.w	800d1d0 <__malloc_unlock>
 800d018:	42a3      	cmp	r3, r4
 800d01a:	d908      	bls.n	800d02e <_free_r+0x42>
 800d01c:	6820      	ldr	r0, [r4, #0]
 800d01e:	1821      	adds	r1, r4, r0
 800d020:	428b      	cmp	r3, r1
 800d022:	bf01      	itttt	eq
 800d024:	6819      	ldreq	r1, [r3, #0]
 800d026:	685b      	ldreq	r3, [r3, #4]
 800d028:	1809      	addeq	r1, r1, r0
 800d02a:	6021      	streq	r1, [r4, #0]
 800d02c:	e7ed      	b.n	800d00a <_free_r+0x1e>
 800d02e:	461a      	mov	r2, r3
 800d030:	685b      	ldr	r3, [r3, #4]
 800d032:	b10b      	cbz	r3, 800d038 <_free_r+0x4c>
 800d034:	42a3      	cmp	r3, r4
 800d036:	d9fa      	bls.n	800d02e <_free_r+0x42>
 800d038:	6811      	ldr	r1, [r2, #0]
 800d03a:	1850      	adds	r0, r2, r1
 800d03c:	42a0      	cmp	r0, r4
 800d03e:	d10b      	bne.n	800d058 <_free_r+0x6c>
 800d040:	6820      	ldr	r0, [r4, #0]
 800d042:	4401      	add	r1, r0
 800d044:	1850      	adds	r0, r2, r1
 800d046:	4283      	cmp	r3, r0
 800d048:	6011      	str	r1, [r2, #0]
 800d04a:	d1e0      	bne.n	800d00e <_free_r+0x22>
 800d04c:	6818      	ldr	r0, [r3, #0]
 800d04e:	685b      	ldr	r3, [r3, #4]
 800d050:	6053      	str	r3, [r2, #4]
 800d052:	4408      	add	r0, r1
 800d054:	6010      	str	r0, [r2, #0]
 800d056:	e7da      	b.n	800d00e <_free_r+0x22>
 800d058:	d902      	bls.n	800d060 <_free_r+0x74>
 800d05a:	230c      	movs	r3, #12
 800d05c:	602b      	str	r3, [r5, #0]
 800d05e:	e7d6      	b.n	800d00e <_free_r+0x22>
 800d060:	6820      	ldr	r0, [r4, #0]
 800d062:	1821      	adds	r1, r4, r0
 800d064:	428b      	cmp	r3, r1
 800d066:	bf04      	itt	eq
 800d068:	6819      	ldreq	r1, [r3, #0]
 800d06a:	685b      	ldreq	r3, [r3, #4]
 800d06c:	6063      	str	r3, [r4, #4]
 800d06e:	bf04      	itt	eq
 800d070:	1809      	addeq	r1, r1, r0
 800d072:	6021      	streq	r1, [r4, #0]
 800d074:	6054      	str	r4, [r2, #4]
 800d076:	e7ca      	b.n	800d00e <_free_r+0x22>
 800d078:	bd38      	pop	{r3, r4, r5, pc}
 800d07a:	bf00      	nop
 800d07c:	20006110 	.word	0x20006110

0800d080 <sbrk_aligned>:
 800d080:	b570      	push	{r4, r5, r6, lr}
 800d082:	4e0f      	ldr	r6, [pc, #60]	@ (800d0c0 <sbrk_aligned+0x40>)
 800d084:	460c      	mov	r4, r1
 800d086:	6831      	ldr	r1, [r6, #0]
 800d088:	4605      	mov	r5, r0
 800d08a:	b911      	cbnz	r1, 800d092 <sbrk_aligned+0x12>
 800d08c:	f000 fba4 	bl	800d7d8 <_sbrk_r>
 800d090:	6030      	str	r0, [r6, #0]
 800d092:	4621      	mov	r1, r4
 800d094:	4628      	mov	r0, r5
 800d096:	f000 fb9f 	bl	800d7d8 <_sbrk_r>
 800d09a:	1c43      	adds	r3, r0, #1
 800d09c:	d103      	bne.n	800d0a6 <sbrk_aligned+0x26>
 800d09e:	f04f 34ff 	mov.w	r4, #4294967295
 800d0a2:	4620      	mov	r0, r4
 800d0a4:	bd70      	pop	{r4, r5, r6, pc}
 800d0a6:	1cc4      	adds	r4, r0, #3
 800d0a8:	f024 0403 	bic.w	r4, r4, #3
 800d0ac:	42a0      	cmp	r0, r4
 800d0ae:	d0f8      	beq.n	800d0a2 <sbrk_aligned+0x22>
 800d0b0:	1a21      	subs	r1, r4, r0
 800d0b2:	4628      	mov	r0, r5
 800d0b4:	f000 fb90 	bl	800d7d8 <_sbrk_r>
 800d0b8:	3001      	adds	r0, #1
 800d0ba:	d1f2      	bne.n	800d0a2 <sbrk_aligned+0x22>
 800d0bc:	e7ef      	b.n	800d09e <sbrk_aligned+0x1e>
 800d0be:	bf00      	nop
 800d0c0:	2000610c 	.word	0x2000610c

0800d0c4 <_malloc_r>:
 800d0c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d0c8:	1ccd      	adds	r5, r1, #3
 800d0ca:	f025 0503 	bic.w	r5, r5, #3
 800d0ce:	3508      	adds	r5, #8
 800d0d0:	2d0c      	cmp	r5, #12
 800d0d2:	bf38      	it	cc
 800d0d4:	250c      	movcc	r5, #12
 800d0d6:	2d00      	cmp	r5, #0
 800d0d8:	4606      	mov	r6, r0
 800d0da:	db01      	blt.n	800d0e0 <_malloc_r+0x1c>
 800d0dc:	42a9      	cmp	r1, r5
 800d0de:	d904      	bls.n	800d0ea <_malloc_r+0x26>
 800d0e0:	230c      	movs	r3, #12
 800d0e2:	6033      	str	r3, [r6, #0]
 800d0e4:	2000      	movs	r0, #0
 800d0e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d0ea:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800d1c0 <_malloc_r+0xfc>
 800d0ee:	f000 f869 	bl	800d1c4 <__malloc_lock>
 800d0f2:	f8d8 3000 	ldr.w	r3, [r8]
 800d0f6:	461c      	mov	r4, r3
 800d0f8:	bb44      	cbnz	r4, 800d14c <_malloc_r+0x88>
 800d0fa:	4629      	mov	r1, r5
 800d0fc:	4630      	mov	r0, r6
 800d0fe:	f7ff ffbf 	bl	800d080 <sbrk_aligned>
 800d102:	1c43      	adds	r3, r0, #1
 800d104:	4604      	mov	r4, r0
 800d106:	d158      	bne.n	800d1ba <_malloc_r+0xf6>
 800d108:	f8d8 4000 	ldr.w	r4, [r8]
 800d10c:	4627      	mov	r7, r4
 800d10e:	2f00      	cmp	r7, #0
 800d110:	d143      	bne.n	800d19a <_malloc_r+0xd6>
 800d112:	2c00      	cmp	r4, #0
 800d114:	d04b      	beq.n	800d1ae <_malloc_r+0xea>
 800d116:	6823      	ldr	r3, [r4, #0]
 800d118:	4639      	mov	r1, r7
 800d11a:	4630      	mov	r0, r6
 800d11c:	eb04 0903 	add.w	r9, r4, r3
 800d120:	f000 fb5a 	bl	800d7d8 <_sbrk_r>
 800d124:	4581      	cmp	r9, r0
 800d126:	d142      	bne.n	800d1ae <_malloc_r+0xea>
 800d128:	6821      	ldr	r1, [r4, #0]
 800d12a:	1a6d      	subs	r5, r5, r1
 800d12c:	4629      	mov	r1, r5
 800d12e:	4630      	mov	r0, r6
 800d130:	f7ff ffa6 	bl	800d080 <sbrk_aligned>
 800d134:	3001      	adds	r0, #1
 800d136:	d03a      	beq.n	800d1ae <_malloc_r+0xea>
 800d138:	6823      	ldr	r3, [r4, #0]
 800d13a:	442b      	add	r3, r5
 800d13c:	6023      	str	r3, [r4, #0]
 800d13e:	f8d8 3000 	ldr.w	r3, [r8]
 800d142:	685a      	ldr	r2, [r3, #4]
 800d144:	bb62      	cbnz	r2, 800d1a0 <_malloc_r+0xdc>
 800d146:	f8c8 7000 	str.w	r7, [r8]
 800d14a:	e00f      	b.n	800d16c <_malloc_r+0xa8>
 800d14c:	6822      	ldr	r2, [r4, #0]
 800d14e:	1b52      	subs	r2, r2, r5
 800d150:	d420      	bmi.n	800d194 <_malloc_r+0xd0>
 800d152:	2a0b      	cmp	r2, #11
 800d154:	d917      	bls.n	800d186 <_malloc_r+0xc2>
 800d156:	1961      	adds	r1, r4, r5
 800d158:	42a3      	cmp	r3, r4
 800d15a:	6025      	str	r5, [r4, #0]
 800d15c:	bf18      	it	ne
 800d15e:	6059      	strne	r1, [r3, #4]
 800d160:	6863      	ldr	r3, [r4, #4]
 800d162:	bf08      	it	eq
 800d164:	f8c8 1000 	streq.w	r1, [r8]
 800d168:	5162      	str	r2, [r4, r5]
 800d16a:	604b      	str	r3, [r1, #4]
 800d16c:	4630      	mov	r0, r6
 800d16e:	f000 f82f 	bl	800d1d0 <__malloc_unlock>
 800d172:	f104 000b 	add.w	r0, r4, #11
 800d176:	1d23      	adds	r3, r4, #4
 800d178:	f020 0007 	bic.w	r0, r0, #7
 800d17c:	1ac2      	subs	r2, r0, r3
 800d17e:	bf1c      	itt	ne
 800d180:	1a1b      	subne	r3, r3, r0
 800d182:	50a3      	strne	r3, [r4, r2]
 800d184:	e7af      	b.n	800d0e6 <_malloc_r+0x22>
 800d186:	6862      	ldr	r2, [r4, #4]
 800d188:	42a3      	cmp	r3, r4
 800d18a:	bf0c      	ite	eq
 800d18c:	f8c8 2000 	streq.w	r2, [r8]
 800d190:	605a      	strne	r2, [r3, #4]
 800d192:	e7eb      	b.n	800d16c <_malloc_r+0xa8>
 800d194:	4623      	mov	r3, r4
 800d196:	6864      	ldr	r4, [r4, #4]
 800d198:	e7ae      	b.n	800d0f8 <_malloc_r+0x34>
 800d19a:	463c      	mov	r4, r7
 800d19c:	687f      	ldr	r7, [r7, #4]
 800d19e:	e7b6      	b.n	800d10e <_malloc_r+0x4a>
 800d1a0:	461a      	mov	r2, r3
 800d1a2:	685b      	ldr	r3, [r3, #4]
 800d1a4:	42a3      	cmp	r3, r4
 800d1a6:	d1fb      	bne.n	800d1a0 <_malloc_r+0xdc>
 800d1a8:	2300      	movs	r3, #0
 800d1aa:	6053      	str	r3, [r2, #4]
 800d1ac:	e7de      	b.n	800d16c <_malloc_r+0xa8>
 800d1ae:	230c      	movs	r3, #12
 800d1b0:	6033      	str	r3, [r6, #0]
 800d1b2:	4630      	mov	r0, r6
 800d1b4:	f000 f80c 	bl	800d1d0 <__malloc_unlock>
 800d1b8:	e794      	b.n	800d0e4 <_malloc_r+0x20>
 800d1ba:	6005      	str	r5, [r0, #0]
 800d1bc:	e7d6      	b.n	800d16c <_malloc_r+0xa8>
 800d1be:	bf00      	nop
 800d1c0:	20006110 	.word	0x20006110

0800d1c4 <__malloc_lock>:
 800d1c4:	4801      	ldr	r0, [pc, #4]	@ (800d1cc <__malloc_lock+0x8>)
 800d1c6:	f7ff bf01 	b.w	800cfcc <__retarget_lock_acquire_recursive>
 800d1ca:	bf00      	nop
 800d1cc:	20006108 	.word	0x20006108

0800d1d0 <__malloc_unlock>:
 800d1d0:	4801      	ldr	r0, [pc, #4]	@ (800d1d8 <__malloc_unlock+0x8>)
 800d1d2:	f7ff befc 	b.w	800cfce <__retarget_lock_release_recursive>
 800d1d6:	bf00      	nop
 800d1d8:	20006108 	.word	0x20006108

0800d1dc <__ssputs_r>:
 800d1dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d1e0:	688e      	ldr	r6, [r1, #8]
 800d1e2:	461f      	mov	r7, r3
 800d1e4:	42be      	cmp	r6, r7
 800d1e6:	680b      	ldr	r3, [r1, #0]
 800d1e8:	4682      	mov	sl, r0
 800d1ea:	460c      	mov	r4, r1
 800d1ec:	4690      	mov	r8, r2
 800d1ee:	d82d      	bhi.n	800d24c <__ssputs_r+0x70>
 800d1f0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d1f4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800d1f8:	d026      	beq.n	800d248 <__ssputs_r+0x6c>
 800d1fa:	6965      	ldr	r5, [r4, #20]
 800d1fc:	6909      	ldr	r1, [r1, #16]
 800d1fe:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d202:	eba3 0901 	sub.w	r9, r3, r1
 800d206:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d20a:	1c7b      	adds	r3, r7, #1
 800d20c:	444b      	add	r3, r9
 800d20e:	106d      	asrs	r5, r5, #1
 800d210:	429d      	cmp	r5, r3
 800d212:	bf38      	it	cc
 800d214:	461d      	movcc	r5, r3
 800d216:	0553      	lsls	r3, r2, #21
 800d218:	d527      	bpl.n	800d26a <__ssputs_r+0x8e>
 800d21a:	4629      	mov	r1, r5
 800d21c:	f7ff ff52 	bl	800d0c4 <_malloc_r>
 800d220:	4606      	mov	r6, r0
 800d222:	b360      	cbz	r0, 800d27e <__ssputs_r+0xa2>
 800d224:	6921      	ldr	r1, [r4, #16]
 800d226:	464a      	mov	r2, r9
 800d228:	f7ff fed2 	bl	800cfd0 <memcpy>
 800d22c:	89a3      	ldrh	r3, [r4, #12]
 800d22e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800d232:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d236:	81a3      	strh	r3, [r4, #12]
 800d238:	6126      	str	r6, [r4, #16]
 800d23a:	6165      	str	r5, [r4, #20]
 800d23c:	444e      	add	r6, r9
 800d23e:	eba5 0509 	sub.w	r5, r5, r9
 800d242:	6026      	str	r6, [r4, #0]
 800d244:	60a5      	str	r5, [r4, #8]
 800d246:	463e      	mov	r6, r7
 800d248:	42be      	cmp	r6, r7
 800d24a:	d900      	bls.n	800d24e <__ssputs_r+0x72>
 800d24c:	463e      	mov	r6, r7
 800d24e:	6820      	ldr	r0, [r4, #0]
 800d250:	4632      	mov	r2, r6
 800d252:	4641      	mov	r1, r8
 800d254:	f000 faa6 	bl	800d7a4 <memmove>
 800d258:	68a3      	ldr	r3, [r4, #8]
 800d25a:	1b9b      	subs	r3, r3, r6
 800d25c:	60a3      	str	r3, [r4, #8]
 800d25e:	6823      	ldr	r3, [r4, #0]
 800d260:	4433      	add	r3, r6
 800d262:	6023      	str	r3, [r4, #0]
 800d264:	2000      	movs	r0, #0
 800d266:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d26a:	462a      	mov	r2, r5
 800d26c:	f000 fac4 	bl	800d7f8 <_realloc_r>
 800d270:	4606      	mov	r6, r0
 800d272:	2800      	cmp	r0, #0
 800d274:	d1e0      	bne.n	800d238 <__ssputs_r+0x5c>
 800d276:	6921      	ldr	r1, [r4, #16]
 800d278:	4650      	mov	r0, sl
 800d27a:	f7ff feb7 	bl	800cfec <_free_r>
 800d27e:	230c      	movs	r3, #12
 800d280:	f8ca 3000 	str.w	r3, [sl]
 800d284:	89a3      	ldrh	r3, [r4, #12]
 800d286:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d28a:	81a3      	strh	r3, [r4, #12]
 800d28c:	f04f 30ff 	mov.w	r0, #4294967295
 800d290:	e7e9      	b.n	800d266 <__ssputs_r+0x8a>
	...

0800d294 <_svfiprintf_r>:
 800d294:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d298:	4698      	mov	r8, r3
 800d29a:	898b      	ldrh	r3, [r1, #12]
 800d29c:	061b      	lsls	r3, r3, #24
 800d29e:	b09d      	sub	sp, #116	@ 0x74
 800d2a0:	4607      	mov	r7, r0
 800d2a2:	460d      	mov	r5, r1
 800d2a4:	4614      	mov	r4, r2
 800d2a6:	d510      	bpl.n	800d2ca <_svfiprintf_r+0x36>
 800d2a8:	690b      	ldr	r3, [r1, #16]
 800d2aa:	b973      	cbnz	r3, 800d2ca <_svfiprintf_r+0x36>
 800d2ac:	2140      	movs	r1, #64	@ 0x40
 800d2ae:	f7ff ff09 	bl	800d0c4 <_malloc_r>
 800d2b2:	6028      	str	r0, [r5, #0]
 800d2b4:	6128      	str	r0, [r5, #16]
 800d2b6:	b930      	cbnz	r0, 800d2c6 <_svfiprintf_r+0x32>
 800d2b8:	230c      	movs	r3, #12
 800d2ba:	603b      	str	r3, [r7, #0]
 800d2bc:	f04f 30ff 	mov.w	r0, #4294967295
 800d2c0:	b01d      	add	sp, #116	@ 0x74
 800d2c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d2c6:	2340      	movs	r3, #64	@ 0x40
 800d2c8:	616b      	str	r3, [r5, #20]
 800d2ca:	2300      	movs	r3, #0
 800d2cc:	9309      	str	r3, [sp, #36]	@ 0x24
 800d2ce:	2320      	movs	r3, #32
 800d2d0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d2d4:	f8cd 800c 	str.w	r8, [sp, #12]
 800d2d8:	2330      	movs	r3, #48	@ 0x30
 800d2da:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800d478 <_svfiprintf_r+0x1e4>
 800d2de:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d2e2:	f04f 0901 	mov.w	r9, #1
 800d2e6:	4623      	mov	r3, r4
 800d2e8:	469a      	mov	sl, r3
 800d2ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d2ee:	b10a      	cbz	r2, 800d2f4 <_svfiprintf_r+0x60>
 800d2f0:	2a25      	cmp	r2, #37	@ 0x25
 800d2f2:	d1f9      	bne.n	800d2e8 <_svfiprintf_r+0x54>
 800d2f4:	ebba 0b04 	subs.w	fp, sl, r4
 800d2f8:	d00b      	beq.n	800d312 <_svfiprintf_r+0x7e>
 800d2fa:	465b      	mov	r3, fp
 800d2fc:	4622      	mov	r2, r4
 800d2fe:	4629      	mov	r1, r5
 800d300:	4638      	mov	r0, r7
 800d302:	f7ff ff6b 	bl	800d1dc <__ssputs_r>
 800d306:	3001      	adds	r0, #1
 800d308:	f000 80a7 	beq.w	800d45a <_svfiprintf_r+0x1c6>
 800d30c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d30e:	445a      	add	r2, fp
 800d310:	9209      	str	r2, [sp, #36]	@ 0x24
 800d312:	f89a 3000 	ldrb.w	r3, [sl]
 800d316:	2b00      	cmp	r3, #0
 800d318:	f000 809f 	beq.w	800d45a <_svfiprintf_r+0x1c6>
 800d31c:	2300      	movs	r3, #0
 800d31e:	f04f 32ff 	mov.w	r2, #4294967295
 800d322:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d326:	f10a 0a01 	add.w	sl, sl, #1
 800d32a:	9304      	str	r3, [sp, #16]
 800d32c:	9307      	str	r3, [sp, #28]
 800d32e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d332:	931a      	str	r3, [sp, #104]	@ 0x68
 800d334:	4654      	mov	r4, sl
 800d336:	2205      	movs	r2, #5
 800d338:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d33c:	484e      	ldr	r0, [pc, #312]	@ (800d478 <_svfiprintf_r+0x1e4>)
 800d33e:	f7f2 ff4f 	bl	80001e0 <memchr>
 800d342:	9a04      	ldr	r2, [sp, #16]
 800d344:	b9d8      	cbnz	r0, 800d37e <_svfiprintf_r+0xea>
 800d346:	06d0      	lsls	r0, r2, #27
 800d348:	bf44      	itt	mi
 800d34a:	2320      	movmi	r3, #32
 800d34c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d350:	0711      	lsls	r1, r2, #28
 800d352:	bf44      	itt	mi
 800d354:	232b      	movmi	r3, #43	@ 0x2b
 800d356:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d35a:	f89a 3000 	ldrb.w	r3, [sl]
 800d35e:	2b2a      	cmp	r3, #42	@ 0x2a
 800d360:	d015      	beq.n	800d38e <_svfiprintf_r+0xfa>
 800d362:	9a07      	ldr	r2, [sp, #28]
 800d364:	4654      	mov	r4, sl
 800d366:	2000      	movs	r0, #0
 800d368:	f04f 0c0a 	mov.w	ip, #10
 800d36c:	4621      	mov	r1, r4
 800d36e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d372:	3b30      	subs	r3, #48	@ 0x30
 800d374:	2b09      	cmp	r3, #9
 800d376:	d94b      	bls.n	800d410 <_svfiprintf_r+0x17c>
 800d378:	b1b0      	cbz	r0, 800d3a8 <_svfiprintf_r+0x114>
 800d37a:	9207      	str	r2, [sp, #28]
 800d37c:	e014      	b.n	800d3a8 <_svfiprintf_r+0x114>
 800d37e:	eba0 0308 	sub.w	r3, r0, r8
 800d382:	fa09 f303 	lsl.w	r3, r9, r3
 800d386:	4313      	orrs	r3, r2
 800d388:	9304      	str	r3, [sp, #16]
 800d38a:	46a2      	mov	sl, r4
 800d38c:	e7d2      	b.n	800d334 <_svfiprintf_r+0xa0>
 800d38e:	9b03      	ldr	r3, [sp, #12]
 800d390:	1d19      	adds	r1, r3, #4
 800d392:	681b      	ldr	r3, [r3, #0]
 800d394:	9103      	str	r1, [sp, #12]
 800d396:	2b00      	cmp	r3, #0
 800d398:	bfbb      	ittet	lt
 800d39a:	425b      	neglt	r3, r3
 800d39c:	f042 0202 	orrlt.w	r2, r2, #2
 800d3a0:	9307      	strge	r3, [sp, #28]
 800d3a2:	9307      	strlt	r3, [sp, #28]
 800d3a4:	bfb8      	it	lt
 800d3a6:	9204      	strlt	r2, [sp, #16]
 800d3a8:	7823      	ldrb	r3, [r4, #0]
 800d3aa:	2b2e      	cmp	r3, #46	@ 0x2e
 800d3ac:	d10a      	bne.n	800d3c4 <_svfiprintf_r+0x130>
 800d3ae:	7863      	ldrb	r3, [r4, #1]
 800d3b0:	2b2a      	cmp	r3, #42	@ 0x2a
 800d3b2:	d132      	bne.n	800d41a <_svfiprintf_r+0x186>
 800d3b4:	9b03      	ldr	r3, [sp, #12]
 800d3b6:	1d1a      	adds	r2, r3, #4
 800d3b8:	681b      	ldr	r3, [r3, #0]
 800d3ba:	9203      	str	r2, [sp, #12]
 800d3bc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d3c0:	3402      	adds	r4, #2
 800d3c2:	9305      	str	r3, [sp, #20]
 800d3c4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800d488 <_svfiprintf_r+0x1f4>
 800d3c8:	7821      	ldrb	r1, [r4, #0]
 800d3ca:	2203      	movs	r2, #3
 800d3cc:	4650      	mov	r0, sl
 800d3ce:	f7f2 ff07 	bl	80001e0 <memchr>
 800d3d2:	b138      	cbz	r0, 800d3e4 <_svfiprintf_r+0x150>
 800d3d4:	9b04      	ldr	r3, [sp, #16]
 800d3d6:	eba0 000a 	sub.w	r0, r0, sl
 800d3da:	2240      	movs	r2, #64	@ 0x40
 800d3dc:	4082      	lsls	r2, r0
 800d3de:	4313      	orrs	r3, r2
 800d3e0:	3401      	adds	r4, #1
 800d3e2:	9304      	str	r3, [sp, #16]
 800d3e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d3e8:	4824      	ldr	r0, [pc, #144]	@ (800d47c <_svfiprintf_r+0x1e8>)
 800d3ea:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d3ee:	2206      	movs	r2, #6
 800d3f0:	f7f2 fef6 	bl	80001e0 <memchr>
 800d3f4:	2800      	cmp	r0, #0
 800d3f6:	d036      	beq.n	800d466 <_svfiprintf_r+0x1d2>
 800d3f8:	4b21      	ldr	r3, [pc, #132]	@ (800d480 <_svfiprintf_r+0x1ec>)
 800d3fa:	bb1b      	cbnz	r3, 800d444 <_svfiprintf_r+0x1b0>
 800d3fc:	9b03      	ldr	r3, [sp, #12]
 800d3fe:	3307      	adds	r3, #7
 800d400:	f023 0307 	bic.w	r3, r3, #7
 800d404:	3308      	adds	r3, #8
 800d406:	9303      	str	r3, [sp, #12]
 800d408:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d40a:	4433      	add	r3, r6
 800d40c:	9309      	str	r3, [sp, #36]	@ 0x24
 800d40e:	e76a      	b.n	800d2e6 <_svfiprintf_r+0x52>
 800d410:	fb0c 3202 	mla	r2, ip, r2, r3
 800d414:	460c      	mov	r4, r1
 800d416:	2001      	movs	r0, #1
 800d418:	e7a8      	b.n	800d36c <_svfiprintf_r+0xd8>
 800d41a:	2300      	movs	r3, #0
 800d41c:	3401      	adds	r4, #1
 800d41e:	9305      	str	r3, [sp, #20]
 800d420:	4619      	mov	r1, r3
 800d422:	f04f 0c0a 	mov.w	ip, #10
 800d426:	4620      	mov	r0, r4
 800d428:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d42c:	3a30      	subs	r2, #48	@ 0x30
 800d42e:	2a09      	cmp	r2, #9
 800d430:	d903      	bls.n	800d43a <_svfiprintf_r+0x1a6>
 800d432:	2b00      	cmp	r3, #0
 800d434:	d0c6      	beq.n	800d3c4 <_svfiprintf_r+0x130>
 800d436:	9105      	str	r1, [sp, #20]
 800d438:	e7c4      	b.n	800d3c4 <_svfiprintf_r+0x130>
 800d43a:	fb0c 2101 	mla	r1, ip, r1, r2
 800d43e:	4604      	mov	r4, r0
 800d440:	2301      	movs	r3, #1
 800d442:	e7f0      	b.n	800d426 <_svfiprintf_r+0x192>
 800d444:	ab03      	add	r3, sp, #12
 800d446:	9300      	str	r3, [sp, #0]
 800d448:	462a      	mov	r2, r5
 800d44a:	4b0e      	ldr	r3, [pc, #56]	@ (800d484 <_svfiprintf_r+0x1f0>)
 800d44c:	a904      	add	r1, sp, #16
 800d44e:	4638      	mov	r0, r7
 800d450:	f3af 8000 	nop.w
 800d454:	1c42      	adds	r2, r0, #1
 800d456:	4606      	mov	r6, r0
 800d458:	d1d6      	bne.n	800d408 <_svfiprintf_r+0x174>
 800d45a:	89ab      	ldrh	r3, [r5, #12]
 800d45c:	065b      	lsls	r3, r3, #25
 800d45e:	f53f af2d 	bmi.w	800d2bc <_svfiprintf_r+0x28>
 800d462:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d464:	e72c      	b.n	800d2c0 <_svfiprintf_r+0x2c>
 800d466:	ab03      	add	r3, sp, #12
 800d468:	9300      	str	r3, [sp, #0]
 800d46a:	462a      	mov	r2, r5
 800d46c:	4b05      	ldr	r3, [pc, #20]	@ (800d484 <_svfiprintf_r+0x1f0>)
 800d46e:	a904      	add	r1, sp, #16
 800d470:	4638      	mov	r0, r7
 800d472:	f000 f879 	bl	800d568 <_printf_i>
 800d476:	e7ed      	b.n	800d454 <_svfiprintf_r+0x1c0>
 800d478:	0800f1d1 	.word	0x0800f1d1
 800d47c:	0800f1db 	.word	0x0800f1db
 800d480:	00000000 	.word	0x00000000
 800d484:	0800d1dd 	.word	0x0800d1dd
 800d488:	0800f1d7 	.word	0x0800f1d7

0800d48c <_printf_common>:
 800d48c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d490:	4616      	mov	r6, r2
 800d492:	4698      	mov	r8, r3
 800d494:	688a      	ldr	r2, [r1, #8]
 800d496:	690b      	ldr	r3, [r1, #16]
 800d498:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800d49c:	4293      	cmp	r3, r2
 800d49e:	bfb8      	it	lt
 800d4a0:	4613      	movlt	r3, r2
 800d4a2:	6033      	str	r3, [r6, #0]
 800d4a4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800d4a8:	4607      	mov	r7, r0
 800d4aa:	460c      	mov	r4, r1
 800d4ac:	b10a      	cbz	r2, 800d4b2 <_printf_common+0x26>
 800d4ae:	3301      	adds	r3, #1
 800d4b0:	6033      	str	r3, [r6, #0]
 800d4b2:	6823      	ldr	r3, [r4, #0]
 800d4b4:	0699      	lsls	r1, r3, #26
 800d4b6:	bf42      	ittt	mi
 800d4b8:	6833      	ldrmi	r3, [r6, #0]
 800d4ba:	3302      	addmi	r3, #2
 800d4bc:	6033      	strmi	r3, [r6, #0]
 800d4be:	6825      	ldr	r5, [r4, #0]
 800d4c0:	f015 0506 	ands.w	r5, r5, #6
 800d4c4:	d106      	bne.n	800d4d4 <_printf_common+0x48>
 800d4c6:	f104 0a19 	add.w	sl, r4, #25
 800d4ca:	68e3      	ldr	r3, [r4, #12]
 800d4cc:	6832      	ldr	r2, [r6, #0]
 800d4ce:	1a9b      	subs	r3, r3, r2
 800d4d0:	42ab      	cmp	r3, r5
 800d4d2:	dc26      	bgt.n	800d522 <_printf_common+0x96>
 800d4d4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800d4d8:	6822      	ldr	r2, [r4, #0]
 800d4da:	3b00      	subs	r3, #0
 800d4dc:	bf18      	it	ne
 800d4de:	2301      	movne	r3, #1
 800d4e0:	0692      	lsls	r2, r2, #26
 800d4e2:	d42b      	bmi.n	800d53c <_printf_common+0xb0>
 800d4e4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800d4e8:	4641      	mov	r1, r8
 800d4ea:	4638      	mov	r0, r7
 800d4ec:	47c8      	blx	r9
 800d4ee:	3001      	adds	r0, #1
 800d4f0:	d01e      	beq.n	800d530 <_printf_common+0xa4>
 800d4f2:	6823      	ldr	r3, [r4, #0]
 800d4f4:	6922      	ldr	r2, [r4, #16]
 800d4f6:	f003 0306 	and.w	r3, r3, #6
 800d4fa:	2b04      	cmp	r3, #4
 800d4fc:	bf02      	ittt	eq
 800d4fe:	68e5      	ldreq	r5, [r4, #12]
 800d500:	6833      	ldreq	r3, [r6, #0]
 800d502:	1aed      	subeq	r5, r5, r3
 800d504:	68a3      	ldr	r3, [r4, #8]
 800d506:	bf0c      	ite	eq
 800d508:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d50c:	2500      	movne	r5, #0
 800d50e:	4293      	cmp	r3, r2
 800d510:	bfc4      	itt	gt
 800d512:	1a9b      	subgt	r3, r3, r2
 800d514:	18ed      	addgt	r5, r5, r3
 800d516:	2600      	movs	r6, #0
 800d518:	341a      	adds	r4, #26
 800d51a:	42b5      	cmp	r5, r6
 800d51c:	d11a      	bne.n	800d554 <_printf_common+0xc8>
 800d51e:	2000      	movs	r0, #0
 800d520:	e008      	b.n	800d534 <_printf_common+0xa8>
 800d522:	2301      	movs	r3, #1
 800d524:	4652      	mov	r2, sl
 800d526:	4641      	mov	r1, r8
 800d528:	4638      	mov	r0, r7
 800d52a:	47c8      	blx	r9
 800d52c:	3001      	adds	r0, #1
 800d52e:	d103      	bne.n	800d538 <_printf_common+0xac>
 800d530:	f04f 30ff 	mov.w	r0, #4294967295
 800d534:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d538:	3501      	adds	r5, #1
 800d53a:	e7c6      	b.n	800d4ca <_printf_common+0x3e>
 800d53c:	18e1      	adds	r1, r4, r3
 800d53e:	1c5a      	adds	r2, r3, #1
 800d540:	2030      	movs	r0, #48	@ 0x30
 800d542:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800d546:	4422      	add	r2, r4
 800d548:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800d54c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800d550:	3302      	adds	r3, #2
 800d552:	e7c7      	b.n	800d4e4 <_printf_common+0x58>
 800d554:	2301      	movs	r3, #1
 800d556:	4622      	mov	r2, r4
 800d558:	4641      	mov	r1, r8
 800d55a:	4638      	mov	r0, r7
 800d55c:	47c8      	blx	r9
 800d55e:	3001      	adds	r0, #1
 800d560:	d0e6      	beq.n	800d530 <_printf_common+0xa4>
 800d562:	3601      	adds	r6, #1
 800d564:	e7d9      	b.n	800d51a <_printf_common+0x8e>
	...

0800d568 <_printf_i>:
 800d568:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d56c:	7e0f      	ldrb	r7, [r1, #24]
 800d56e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800d570:	2f78      	cmp	r7, #120	@ 0x78
 800d572:	4691      	mov	r9, r2
 800d574:	4680      	mov	r8, r0
 800d576:	460c      	mov	r4, r1
 800d578:	469a      	mov	sl, r3
 800d57a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800d57e:	d807      	bhi.n	800d590 <_printf_i+0x28>
 800d580:	2f62      	cmp	r7, #98	@ 0x62
 800d582:	d80a      	bhi.n	800d59a <_printf_i+0x32>
 800d584:	2f00      	cmp	r7, #0
 800d586:	f000 80d1 	beq.w	800d72c <_printf_i+0x1c4>
 800d58a:	2f58      	cmp	r7, #88	@ 0x58
 800d58c:	f000 80b8 	beq.w	800d700 <_printf_i+0x198>
 800d590:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d594:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800d598:	e03a      	b.n	800d610 <_printf_i+0xa8>
 800d59a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800d59e:	2b15      	cmp	r3, #21
 800d5a0:	d8f6      	bhi.n	800d590 <_printf_i+0x28>
 800d5a2:	a101      	add	r1, pc, #4	@ (adr r1, 800d5a8 <_printf_i+0x40>)
 800d5a4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d5a8:	0800d601 	.word	0x0800d601
 800d5ac:	0800d615 	.word	0x0800d615
 800d5b0:	0800d591 	.word	0x0800d591
 800d5b4:	0800d591 	.word	0x0800d591
 800d5b8:	0800d591 	.word	0x0800d591
 800d5bc:	0800d591 	.word	0x0800d591
 800d5c0:	0800d615 	.word	0x0800d615
 800d5c4:	0800d591 	.word	0x0800d591
 800d5c8:	0800d591 	.word	0x0800d591
 800d5cc:	0800d591 	.word	0x0800d591
 800d5d0:	0800d591 	.word	0x0800d591
 800d5d4:	0800d713 	.word	0x0800d713
 800d5d8:	0800d63f 	.word	0x0800d63f
 800d5dc:	0800d6cd 	.word	0x0800d6cd
 800d5e0:	0800d591 	.word	0x0800d591
 800d5e4:	0800d591 	.word	0x0800d591
 800d5e8:	0800d735 	.word	0x0800d735
 800d5ec:	0800d591 	.word	0x0800d591
 800d5f0:	0800d63f 	.word	0x0800d63f
 800d5f4:	0800d591 	.word	0x0800d591
 800d5f8:	0800d591 	.word	0x0800d591
 800d5fc:	0800d6d5 	.word	0x0800d6d5
 800d600:	6833      	ldr	r3, [r6, #0]
 800d602:	1d1a      	adds	r2, r3, #4
 800d604:	681b      	ldr	r3, [r3, #0]
 800d606:	6032      	str	r2, [r6, #0]
 800d608:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d60c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800d610:	2301      	movs	r3, #1
 800d612:	e09c      	b.n	800d74e <_printf_i+0x1e6>
 800d614:	6833      	ldr	r3, [r6, #0]
 800d616:	6820      	ldr	r0, [r4, #0]
 800d618:	1d19      	adds	r1, r3, #4
 800d61a:	6031      	str	r1, [r6, #0]
 800d61c:	0606      	lsls	r6, r0, #24
 800d61e:	d501      	bpl.n	800d624 <_printf_i+0xbc>
 800d620:	681d      	ldr	r5, [r3, #0]
 800d622:	e003      	b.n	800d62c <_printf_i+0xc4>
 800d624:	0645      	lsls	r5, r0, #25
 800d626:	d5fb      	bpl.n	800d620 <_printf_i+0xb8>
 800d628:	f9b3 5000 	ldrsh.w	r5, [r3]
 800d62c:	2d00      	cmp	r5, #0
 800d62e:	da03      	bge.n	800d638 <_printf_i+0xd0>
 800d630:	232d      	movs	r3, #45	@ 0x2d
 800d632:	426d      	negs	r5, r5
 800d634:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d638:	4858      	ldr	r0, [pc, #352]	@ (800d79c <_printf_i+0x234>)
 800d63a:	230a      	movs	r3, #10
 800d63c:	e011      	b.n	800d662 <_printf_i+0xfa>
 800d63e:	6821      	ldr	r1, [r4, #0]
 800d640:	6833      	ldr	r3, [r6, #0]
 800d642:	0608      	lsls	r0, r1, #24
 800d644:	f853 5b04 	ldr.w	r5, [r3], #4
 800d648:	d402      	bmi.n	800d650 <_printf_i+0xe8>
 800d64a:	0649      	lsls	r1, r1, #25
 800d64c:	bf48      	it	mi
 800d64e:	b2ad      	uxthmi	r5, r5
 800d650:	2f6f      	cmp	r7, #111	@ 0x6f
 800d652:	4852      	ldr	r0, [pc, #328]	@ (800d79c <_printf_i+0x234>)
 800d654:	6033      	str	r3, [r6, #0]
 800d656:	bf14      	ite	ne
 800d658:	230a      	movne	r3, #10
 800d65a:	2308      	moveq	r3, #8
 800d65c:	2100      	movs	r1, #0
 800d65e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800d662:	6866      	ldr	r6, [r4, #4]
 800d664:	60a6      	str	r6, [r4, #8]
 800d666:	2e00      	cmp	r6, #0
 800d668:	db05      	blt.n	800d676 <_printf_i+0x10e>
 800d66a:	6821      	ldr	r1, [r4, #0]
 800d66c:	432e      	orrs	r6, r5
 800d66e:	f021 0104 	bic.w	r1, r1, #4
 800d672:	6021      	str	r1, [r4, #0]
 800d674:	d04b      	beq.n	800d70e <_printf_i+0x1a6>
 800d676:	4616      	mov	r6, r2
 800d678:	fbb5 f1f3 	udiv	r1, r5, r3
 800d67c:	fb03 5711 	mls	r7, r3, r1, r5
 800d680:	5dc7      	ldrb	r7, [r0, r7]
 800d682:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800d686:	462f      	mov	r7, r5
 800d688:	42bb      	cmp	r3, r7
 800d68a:	460d      	mov	r5, r1
 800d68c:	d9f4      	bls.n	800d678 <_printf_i+0x110>
 800d68e:	2b08      	cmp	r3, #8
 800d690:	d10b      	bne.n	800d6aa <_printf_i+0x142>
 800d692:	6823      	ldr	r3, [r4, #0]
 800d694:	07df      	lsls	r7, r3, #31
 800d696:	d508      	bpl.n	800d6aa <_printf_i+0x142>
 800d698:	6923      	ldr	r3, [r4, #16]
 800d69a:	6861      	ldr	r1, [r4, #4]
 800d69c:	4299      	cmp	r1, r3
 800d69e:	bfde      	ittt	le
 800d6a0:	2330      	movle	r3, #48	@ 0x30
 800d6a2:	f806 3c01 	strble.w	r3, [r6, #-1]
 800d6a6:	f106 36ff 	addle.w	r6, r6, #4294967295
 800d6aa:	1b92      	subs	r2, r2, r6
 800d6ac:	6122      	str	r2, [r4, #16]
 800d6ae:	f8cd a000 	str.w	sl, [sp]
 800d6b2:	464b      	mov	r3, r9
 800d6b4:	aa03      	add	r2, sp, #12
 800d6b6:	4621      	mov	r1, r4
 800d6b8:	4640      	mov	r0, r8
 800d6ba:	f7ff fee7 	bl	800d48c <_printf_common>
 800d6be:	3001      	adds	r0, #1
 800d6c0:	d14a      	bne.n	800d758 <_printf_i+0x1f0>
 800d6c2:	f04f 30ff 	mov.w	r0, #4294967295
 800d6c6:	b004      	add	sp, #16
 800d6c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d6cc:	6823      	ldr	r3, [r4, #0]
 800d6ce:	f043 0320 	orr.w	r3, r3, #32
 800d6d2:	6023      	str	r3, [r4, #0]
 800d6d4:	4832      	ldr	r0, [pc, #200]	@ (800d7a0 <_printf_i+0x238>)
 800d6d6:	2778      	movs	r7, #120	@ 0x78
 800d6d8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800d6dc:	6823      	ldr	r3, [r4, #0]
 800d6de:	6831      	ldr	r1, [r6, #0]
 800d6e0:	061f      	lsls	r7, r3, #24
 800d6e2:	f851 5b04 	ldr.w	r5, [r1], #4
 800d6e6:	d402      	bmi.n	800d6ee <_printf_i+0x186>
 800d6e8:	065f      	lsls	r7, r3, #25
 800d6ea:	bf48      	it	mi
 800d6ec:	b2ad      	uxthmi	r5, r5
 800d6ee:	6031      	str	r1, [r6, #0]
 800d6f0:	07d9      	lsls	r1, r3, #31
 800d6f2:	bf44      	itt	mi
 800d6f4:	f043 0320 	orrmi.w	r3, r3, #32
 800d6f8:	6023      	strmi	r3, [r4, #0]
 800d6fa:	b11d      	cbz	r5, 800d704 <_printf_i+0x19c>
 800d6fc:	2310      	movs	r3, #16
 800d6fe:	e7ad      	b.n	800d65c <_printf_i+0xf4>
 800d700:	4826      	ldr	r0, [pc, #152]	@ (800d79c <_printf_i+0x234>)
 800d702:	e7e9      	b.n	800d6d8 <_printf_i+0x170>
 800d704:	6823      	ldr	r3, [r4, #0]
 800d706:	f023 0320 	bic.w	r3, r3, #32
 800d70a:	6023      	str	r3, [r4, #0]
 800d70c:	e7f6      	b.n	800d6fc <_printf_i+0x194>
 800d70e:	4616      	mov	r6, r2
 800d710:	e7bd      	b.n	800d68e <_printf_i+0x126>
 800d712:	6833      	ldr	r3, [r6, #0]
 800d714:	6825      	ldr	r5, [r4, #0]
 800d716:	6961      	ldr	r1, [r4, #20]
 800d718:	1d18      	adds	r0, r3, #4
 800d71a:	6030      	str	r0, [r6, #0]
 800d71c:	062e      	lsls	r6, r5, #24
 800d71e:	681b      	ldr	r3, [r3, #0]
 800d720:	d501      	bpl.n	800d726 <_printf_i+0x1be>
 800d722:	6019      	str	r1, [r3, #0]
 800d724:	e002      	b.n	800d72c <_printf_i+0x1c4>
 800d726:	0668      	lsls	r0, r5, #25
 800d728:	d5fb      	bpl.n	800d722 <_printf_i+0x1ba>
 800d72a:	8019      	strh	r1, [r3, #0]
 800d72c:	2300      	movs	r3, #0
 800d72e:	6123      	str	r3, [r4, #16]
 800d730:	4616      	mov	r6, r2
 800d732:	e7bc      	b.n	800d6ae <_printf_i+0x146>
 800d734:	6833      	ldr	r3, [r6, #0]
 800d736:	1d1a      	adds	r2, r3, #4
 800d738:	6032      	str	r2, [r6, #0]
 800d73a:	681e      	ldr	r6, [r3, #0]
 800d73c:	6862      	ldr	r2, [r4, #4]
 800d73e:	2100      	movs	r1, #0
 800d740:	4630      	mov	r0, r6
 800d742:	f7f2 fd4d 	bl	80001e0 <memchr>
 800d746:	b108      	cbz	r0, 800d74c <_printf_i+0x1e4>
 800d748:	1b80      	subs	r0, r0, r6
 800d74a:	6060      	str	r0, [r4, #4]
 800d74c:	6863      	ldr	r3, [r4, #4]
 800d74e:	6123      	str	r3, [r4, #16]
 800d750:	2300      	movs	r3, #0
 800d752:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d756:	e7aa      	b.n	800d6ae <_printf_i+0x146>
 800d758:	6923      	ldr	r3, [r4, #16]
 800d75a:	4632      	mov	r2, r6
 800d75c:	4649      	mov	r1, r9
 800d75e:	4640      	mov	r0, r8
 800d760:	47d0      	blx	sl
 800d762:	3001      	adds	r0, #1
 800d764:	d0ad      	beq.n	800d6c2 <_printf_i+0x15a>
 800d766:	6823      	ldr	r3, [r4, #0]
 800d768:	079b      	lsls	r3, r3, #30
 800d76a:	d413      	bmi.n	800d794 <_printf_i+0x22c>
 800d76c:	68e0      	ldr	r0, [r4, #12]
 800d76e:	9b03      	ldr	r3, [sp, #12]
 800d770:	4298      	cmp	r0, r3
 800d772:	bfb8      	it	lt
 800d774:	4618      	movlt	r0, r3
 800d776:	e7a6      	b.n	800d6c6 <_printf_i+0x15e>
 800d778:	2301      	movs	r3, #1
 800d77a:	4632      	mov	r2, r6
 800d77c:	4649      	mov	r1, r9
 800d77e:	4640      	mov	r0, r8
 800d780:	47d0      	blx	sl
 800d782:	3001      	adds	r0, #1
 800d784:	d09d      	beq.n	800d6c2 <_printf_i+0x15a>
 800d786:	3501      	adds	r5, #1
 800d788:	68e3      	ldr	r3, [r4, #12]
 800d78a:	9903      	ldr	r1, [sp, #12]
 800d78c:	1a5b      	subs	r3, r3, r1
 800d78e:	42ab      	cmp	r3, r5
 800d790:	dcf2      	bgt.n	800d778 <_printf_i+0x210>
 800d792:	e7eb      	b.n	800d76c <_printf_i+0x204>
 800d794:	2500      	movs	r5, #0
 800d796:	f104 0619 	add.w	r6, r4, #25
 800d79a:	e7f5      	b.n	800d788 <_printf_i+0x220>
 800d79c:	0800f1e2 	.word	0x0800f1e2
 800d7a0:	0800f1f3 	.word	0x0800f1f3

0800d7a4 <memmove>:
 800d7a4:	4288      	cmp	r0, r1
 800d7a6:	b510      	push	{r4, lr}
 800d7a8:	eb01 0402 	add.w	r4, r1, r2
 800d7ac:	d902      	bls.n	800d7b4 <memmove+0x10>
 800d7ae:	4284      	cmp	r4, r0
 800d7b0:	4623      	mov	r3, r4
 800d7b2:	d807      	bhi.n	800d7c4 <memmove+0x20>
 800d7b4:	1e43      	subs	r3, r0, #1
 800d7b6:	42a1      	cmp	r1, r4
 800d7b8:	d008      	beq.n	800d7cc <memmove+0x28>
 800d7ba:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d7be:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d7c2:	e7f8      	b.n	800d7b6 <memmove+0x12>
 800d7c4:	4402      	add	r2, r0
 800d7c6:	4601      	mov	r1, r0
 800d7c8:	428a      	cmp	r2, r1
 800d7ca:	d100      	bne.n	800d7ce <memmove+0x2a>
 800d7cc:	bd10      	pop	{r4, pc}
 800d7ce:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d7d2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d7d6:	e7f7      	b.n	800d7c8 <memmove+0x24>

0800d7d8 <_sbrk_r>:
 800d7d8:	b538      	push	{r3, r4, r5, lr}
 800d7da:	4d06      	ldr	r5, [pc, #24]	@ (800d7f4 <_sbrk_r+0x1c>)
 800d7dc:	2300      	movs	r3, #0
 800d7de:	4604      	mov	r4, r0
 800d7e0:	4608      	mov	r0, r1
 800d7e2:	602b      	str	r3, [r5, #0]
 800d7e4:	f7f4 fa3e 	bl	8001c64 <_sbrk>
 800d7e8:	1c43      	adds	r3, r0, #1
 800d7ea:	d102      	bne.n	800d7f2 <_sbrk_r+0x1a>
 800d7ec:	682b      	ldr	r3, [r5, #0]
 800d7ee:	b103      	cbz	r3, 800d7f2 <_sbrk_r+0x1a>
 800d7f0:	6023      	str	r3, [r4, #0]
 800d7f2:	bd38      	pop	{r3, r4, r5, pc}
 800d7f4:	20006104 	.word	0x20006104

0800d7f8 <_realloc_r>:
 800d7f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d7fc:	4607      	mov	r7, r0
 800d7fe:	4614      	mov	r4, r2
 800d800:	460d      	mov	r5, r1
 800d802:	b921      	cbnz	r1, 800d80e <_realloc_r+0x16>
 800d804:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d808:	4611      	mov	r1, r2
 800d80a:	f7ff bc5b 	b.w	800d0c4 <_malloc_r>
 800d80e:	b92a      	cbnz	r2, 800d81c <_realloc_r+0x24>
 800d810:	f7ff fbec 	bl	800cfec <_free_r>
 800d814:	4625      	mov	r5, r4
 800d816:	4628      	mov	r0, r5
 800d818:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d81c:	f000 f81a 	bl	800d854 <_malloc_usable_size_r>
 800d820:	4284      	cmp	r4, r0
 800d822:	4606      	mov	r6, r0
 800d824:	d802      	bhi.n	800d82c <_realloc_r+0x34>
 800d826:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d82a:	d8f4      	bhi.n	800d816 <_realloc_r+0x1e>
 800d82c:	4621      	mov	r1, r4
 800d82e:	4638      	mov	r0, r7
 800d830:	f7ff fc48 	bl	800d0c4 <_malloc_r>
 800d834:	4680      	mov	r8, r0
 800d836:	b908      	cbnz	r0, 800d83c <_realloc_r+0x44>
 800d838:	4645      	mov	r5, r8
 800d83a:	e7ec      	b.n	800d816 <_realloc_r+0x1e>
 800d83c:	42b4      	cmp	r4, r6
 800d83e:	4622      	mov	r2, r4
 800d840:	4629      	mov	r1, r5
 800d842:	bf28      	it	cs
 800d844:	4632      	movcs	r2, r6
 800d846:	f7ff fbc3 	bl	800cfd0 <memcpy>
 800d84a:	4629      	mov	r1, r5
 800d84c:	4638      	mov	r0, r7
 800d84e:	f7ff fbcd 	bl	800cfec <_free_r>
 800d852:	e7f1      	b.n	800d838 <_realloc_r+0x40>

0800d854 <_malloc_usable_size_r>:
 800d854:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d858:	1f18      	subs	r0, r3, #4
 800d85a:	2b00      	cmp	r3, #0
 800d85c:	bfbc      	itt	lt
 800d85e:	580b      	ldrlt	r3, [r1, r0]
 800d860:	18c0      	addlt	r0, r0, r3
 800d862:	4770      	bx	lr

0800d864 <_init>:
 800d864:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d866:	bf00      	nop
 800d868:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d86a:	bc08      	pop	{r3}
 800d86c:	469e      	mov	lr, r3
 800d86e:	4770      	bx	lr

0800d870 <_fini>:
 800d870:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d872:	bf00      	nop
 800d874:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d876:	bc08      	pop	{r3}
 800d878:	469e      	mov	lr, r3
 800d87a:	4770      	bx	lr
